# This script takes an SQL file (generated by the makefile) and makes sure to enforce any UNIQUE constraints on it. Depending on the filename, which is the same as the table name, the script will apply the right constraints)

import sys

filename = sys.argv[1]
file = open(sys.argv[1],'r')
fileAgain = open(sys.argv[1],'r') # File need to be processed twice
write = open(sys.argv[1] + '.trimmed','w')

keySet = {}
idMapping = {}

def saveIDMapping():
	w = open('idMapping.csv', 'w')
	for id in idMapping:
		w.write(id + "," + idMapping[id] + "\n")

def loadIDMapping():
	r = open('idMapping.csv', 'r')
	for row in r:
		if not row: continue
		row = row.split(',')
		idMapping[int(row[0])] = int(row[1].strip())

if filename == 'File.sql':
	for row in file: write.write(row)
	# TODO: Keep only one CREATE and QUERY statements

if filename == 'Class.sql':
	# Find namespace and className sizes
	maxNamespaceSize = -1
	maxClassNameSize = -1
	for row in fileAgain:
		if 'Namespace VARCHAR' in row: 
			nameSpaceSize = int(row[row.index('(') + 1:row.index(')')])
			if maxNamespaceSize < nameSpaceSize: maxNamespaceSize = nameSpaceSize
		if 'ClassName VARCHAR' in row: 
			classNameSize = int(row[row.index('(') + 1:row.index(')')])
			if maxClassNameSize < classNameSize: maxClassNameSize = classNameSize
	
	rc = 0
	for row in file:
		# Keep one `CREATE` statement, with the largest namespace size and classname size
		rc += 1
		if rc < 10:
			if 'Namespace VARCHAR' in row: 
				nameSpaceSize = row[row.index('('):row.index(')') + 1]
				newRow = row.replace(nameSpaceSize,'(' + str(maxNamespaceSize) + ')')
				write.write(newRow)
				continue
			if 'ClassName VARCHAR' in row: 
				classNameSize = row[row.index('('):row.index(')') + 1]
				newRow = row.replace(classNameSize,'(' + str(maxClassNameSize) + ')')
				write.write(newRow)
				continue
			write.write(row)
			continue
		if row[:6] != 'INSERT': continue
		# Get info from row
		query = row[row.index('(') + 2 : row.rfind(')') - 1]
		query = query.split("','")
		id = query[0]
		namespace = query[1]
		clas = query[2]
		key = namespace + '-->' + clas
		# Make sure (namespace, className) are not redundant
		if key in keySet:
			idMapping[id] = keySet[key] # We need to keep track of removed IDs and their replacement since these IDs are foreign keys for the Function table
			continue
		keySet[key] = id
		# Write the row to the file
		write.write(row)
	saveIDMapping();

if filename == 'Function.sql':
	loadIDMapping()
	# Find namespace and className sizes
	maxFunctionNameSize = -1
	maxSigSize = -1
	for row in fileAgain:
		if 'FunctionName VARCHAR' in row: 
			functionNameSize = int(row[row.index('(') + 1:row.index(')')])
			if maxFunctionNameSize < functionNameSize: 
				maxFunctionNameSize = functionNameSize
		if 'Signature VARCHAR' in row: 
			sigSize = int(row[row.index('(') + 1:row.index(')')])
			if maxSigSize < sigSize: maxSigSize = sigSize
	
	rc = 0
	for row in file:
		rc += 1
		# Keep one `CREATE` statement, with the largest function name size and signature size
		if rc < 15:
			if 'FunctionName VARCHAR' in row: 
				functionNameSize = row[row.index('('):row.index(')') + 1]
				newRow = row.replace(functionNameSize,'(' + str(maxFunctionNameSize) + ')')
				write.write(newRow)
				continue
			if 'Signature VARCHAR' in row: 
				sigSize = row[row.index('('):row.index(')') + 1]
				newRow = row.replace(sigSize,'(' + str(maxSigSize) + ')')
				write.write(newRow)
				continue
			write.write(row)
		if row[:6] != 'INSERT': continue
		# Get info from row
		query = row[row.index('(') + 2 : row.rfind(')') - 1]
		query = query.split("','")
		classID = int(query[3])
		# If ClassID points to a duplicate class that was removed, replaced it with the original ClassID
		if classID in idMapping:
			row = row.replace("'" + str(classID) + "'", "'" + str(idMapping[classID]) + "'")
			# reload the query object
			query = row[row.index('(') + 2 : row.rfind(')') - 1]
			query = query.split("','")
			classID = query[3]
		# Check for duplicate (signature, classID)
		sig = query[2]
		key = str(classID) + "::" + sig
		if key in keySet: continue
		keySet[key] = 1
		write.write(row)

if filename == 'Hierarchy.sql':
	rc = 0
	for row in file:
		rc += 1
		if rc < 8: write.write(row)
		if row[:6] != 'INSERT': continue
		write.write(row)

if filename == 'Polymorphism.sql':
	rc = 0
	for row in file:
		rc += 1