OMR	ArithEnv	ArithEnv(const class OMR::ArithEnv &)
OMR	ArithEnv	ArithEnv(class OMR::ArithEnv &&)
OMR	ArithEnv	ArithEnv()
OMR	ArithEnv	doubleAddDouble(double,double)
OMR	ArithEnv	doubleDivideDouble(double,double)
OMR	ArithEnv	doubleMultiplyDouble(double,double)
OMR	ArithEnv	doubleNegate(double)
OMR	ArithEnv	doubleRemainderDouble(double,double)
OMR	ArithEnv	doubleSubtractDouble(double,double)
OMR	ArithEnv	doubleToFloat(double)
OMR	ArithEnv	floatAddFloat(float,float)
OMR	ArithEnv	floatDivideFloat(float,float)
OMR	ArithEnv	floatMultiplyFloat(float,float)
OMR	ArithEnv	floatNegate(float)
OMR	ArithEnv	floatRemainderFloat(float,float)
OMR	ArithEnv	floatSubtractFloat(float,float)
OMR	ArithEnv	floatToDouble(float)
OMR	ArithEnv	longDivideLong(int64_t,int64_t)
OMR	ArithEnv	longMultiplyLong(int64_t,int64_t)
OMR	ArithEnv	longRemainderLong(int64_t,int64_t)
OMR	ArithEnv	operator=(class OMR::ArithEnv &&)
OMR	ArithEnv	operator=(const class OMR::ArithEnv &)
OMR	ArithEnv	self()
OMR	ArithEnv	~ArithEnv()
OMR	AutomaticSymbol	AutomaticSymbol(class OMR::AutomaticSymbol &&)
OMR	AutomaticSymbol	AutomaticSymbol()
OMR	AutomaticSymbol	AutomaticSymbol(TR::DataType,uint32_t,const char *)
OMR	AutomaticSymbol	AutomaticSymbol(const class OMR::AutomaticSymbol &)
OMR	AutomaticSymbol	AutomaticSymbol(TR::DataType)
OMR	AutomaticSymbol	AutomaticSymbol(TR::DataType,uint32_t)
OMR	AutomaticSymbol	decReferenceCount()
OMR	AutomaticSymbol	getActiveSize()
OMR	AutomaticSymbol	getArrayType()
OMR	AutomaticSymbol	getClassSymbolReference()
OMR	AutomaticSymbol	getKind()
OMR	AutomaticSymbol	getNodeToFreeAfter()
OMR	AutomaticSymbol	getPinningArrayPointer()
OMR	AutomaticSymbol	getReferenceCount()
OMR	AutomaticSymbol	getReferenceSlots()
OMR	AutomaticSymbol	incReferenceCount()
OMR	AutomaticSymbol	init()
OMR	AutomaticSymbol	isAddressTaken()
OMR	AutomaticSymbol	isReferenced()
OMR	AutomaticSymbol	isSingleUse()
OMR	AutomaticSymbol	operator=(const class OMR::AutomaticSymbol &)
OMR	AutomaticSymbol	operator=(class OMR::AutomaticSymbol &&)
OMR	AutomaticSymbol	self()
OMR	AutomaticSymbol	setActiveSize(uint32_t)
OMR	AutomaticSymbol	setClassSymbolReference(TR::SymbolReference *)
OMR	AutomaticSymbol	setIsAddressTaken(_Bool)
OMR	AutomaticSymbol	setIsReferenced(_Bool)
OMR	AutomaticSymbol	setIsSingleUse(_Bool)
OMR	AutomaticSymbol	setNodeToFreeAfter(TR::Node *)
OMR	AutomaticSymbol	setPinningArrayPointer(TR::AutomaticSymbol *)
OMR	AutomaticSymbol	setReferenceCount(rcount_t)
OMR	AutomaticSymbol	setReferenceSlots(int32_t *)
OMR	AutomaticSymbol	~AutomaticSymbol()
OMR	Block	Block(class TR_Memory *)
OMR	Block	Block(TR::Block &,TR::TreeTop *,TR::TreeTop *)
OMR	Block	Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *)
OMR	Block	Block(const class OMR::Block &)
OMR	Block	addExceptionRangeForSnippet(uint32_t,uint32_t)
OMR	Block	append(TR::TreeTop *)
OMR	Block	asBlock()
OMR	Block	branchesBackwards()
OMR	Block	breakFallThrough(TR::Compilation *,TR::Block *,TR::Block *)
OMR	Block	canCatchExceptions(uint32_t)
OMR	Block	canFallThroughToNextBlock()
OMR	Block	changeBranchDestination(TR::TreeTop *,TR::CFG *,_Bool)
OMR	Block	clearGlobalRegisters()
OMR	Block	collectReferencedAutoSymRefsIn(TR::Compilation *,TR::Node *,class TR_BitVector *,vcount_t)
OMR	Block	collectReferencedAutoSymRefsIn(TR::Compilation *,class TR_BitVector *,vcount_t)
OMR	Block	containsCall()
OMR	Block	createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool)
OMR	Block	createConditionalSideExitBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool)
OMR	Block	createEmptyBlock(TR::Compilation *,int32_t,TR::Block *)
OMR	Block	createEmptyBlock(TR::Node *,TR::Compilation *,int32_t,TR::Block *)
OMR	Block	doNotProfile()
OMR	Block	doesNotNeedLabelAtStart()
OMR	Block	endsInBranch()
OMR	Block	endsInGoto()
OMR	Block	ensureCatchBlockExtensionExists(TR::Compilation *)
OMR	Block	findFirstReference(TR::Symbol *,vcount_t)
OMR	Block	findVirtualGuardBlock(TR::CFG *)
OMR	Block	firstBlockInLoop()
OMR	Block	getBlockBCIndex()
OMR	Block	getBlockSize()
OMR	Block	getByteCodeInfo()
OMR	Block	getCatchBlockExtension()
OMR	Block	getCatchType()
OMR	Block	getCommonParentStructureIfExists(TR::Block *,TR::CFG *)
OMR	Block	getDebugCounters()
OMR	Block	getEntry()
OMR	Block	getExceptingTree()
OMR	Block	getExceptionClass()
OMR	Block	getExceptionClassNameChars()
OMR	Block	getExceptionClassNameLength()
OMR	Block	getExit()
OMR	Block	getFallThroughEdgeInEBB()
OMR	Block	getFirstInstruction()
OMR	Block	getFirstRealTreeTop()
OMR	Block	getFirstSnippetBoundaries()
OMR	Block	getGlobalNormalizedFrequency(TR::CFG *)
OMR	Block	getGlobalRegisters(TR::Compilation *)
OMR	Block	getHandlerIndex()
OMR	Block	getInlineDepth()
OMR	Block	getInstructionBoundaries()
OMR	Block	getJ9EstimateCodeSizeMethod()
OMR	Block	getLastInstruction()
OMR	Block	getLastNonControlFlowTreeTop()
OMR	Block	getLastRealTreeTop()
OMR	Block	getLiveLocals()
OMR	Block	getMaxColdFrequency(TR::Block *,TR::Block *)
OMR	Block	getMinColdFrequency(TR::Block *,TR::Block *)
OMR	Block	getName(class TR_Debug *)
OMR	Block	getNestingDepth()
OMR	Block	getNextBlock()
OMR	Block	getNextExtendedBlock()
OMR	Block	getNormalizedFrequency(TR::CFG *)
OMR	Block	getNumberOfRealTreeTops()
OMR	Block	getOwningMethod()
OMR	Block	getParentStructureIfExists(TR::CFG *)
OMR	Block	getPartialFlags()
OMR	Block	getPrevBlock()
OMR	Block	getRegisterSaveDescriptionBits()
OMR	Block	getScaledSpecializedFrequency(int32_t)
OMR	Block	getStructureOf()
OMR	Block	getUnrollFactor()
OMR	Block	hasBeenVisited()
OMR	Block	hasCallToSuperCold()
OMR	Block	hasCalls()
OMR	Block	hasExceptionPredecessors()
OMR	Block	hasExceptionSuccessors()
OMR	Block	inheritBlockInfo(TR::Block *,_Bool)
OMR	Block	insertBlockAsFallThrough(TR::Compilation *,TR::Block *,TR::Block *)
OMR	Block	isAdded()
OMR	Block	isCatchBlock()
OMR	Block	isCold()
OMR	Block	isCreatedAtCodeGen()
OMR	Block	isCreatedByVersioning()
OMR	Block	isDifficultBlock()
OMR	Block	isEmptyBlock()
OMR	Block	isEndBlock()
OMR	Block	isEntryOfShortRunningLoop()
OMR	Block	isExtensionOfPreviousBlock()
OMR	Block	isGotoBlock(TR::Compilation *,_Bool)
OMR	Block	isLoopInvariantBlock()
OMR	Block	isOSRCatchBlock()
OMR	Block	isOSRCodeBlock()
OMR	Block	isOSRInduceBlock()
OMR	Block	isPRECandidate()
OMR	Block	isPartialInlineBlock()
OMR	Block	isRestartBlock()
OMR	Block	isSpecialized()
OMR	Block	isSuperCold()
OMR	Block	isSynchronizedHandler()
OMR	Block	isTargetOfJumpWhoseTargetCanBeChanged(TR::Compilation *)
OMR	Block	isUnsanitizeable()
OMR	Block	operator=(const class OMR::Block &)
OMR	Block	prepend(TR::TreeTop *)
OMR	Block	redirectFlowToNewDestination(TR::Compilation *,TR::CFGEdge *,TR::Block *,_Bool)
OMR	Block	removeBranch(TR::Compilation *)
OMR	Block	removeFromCFG(TR::Compilation *)
OMR	Block	self()
OMR	Block	setAsLoopInvariantBlock(_Bool)
OMR	Block	setBlockBCIndex(int32_t)
OMR	Block	setBlockSize(int32_t)
OMR	Block	setBranchesBackwards()
OMR	Block	setByteCodeIndex(int32_t,TR::Compilation *)
OMR	Block	setCatchBlockExtension(class OMR::Block::TR_CatchBlockExtension *)
OMR	Block	setContainsCall(_Bool)
OMR	Block	setCreatedByVersioning(_Bool)
OMR	Block	setDebugCounters(TR::DebugCounterAggregation *)
OMR	Block	setDoNotProfile()
OMR	Block	setEntry(TR::TreeTop *)
OMR	Block	setExceptionClassName(char *,int32_t,TR::Compilation *)
OMR	Block	setExit(TR::TreeTop *)
OMR	Block	setFirstBlockInLoop()
OMR	Block	setFirstInstruction(TR::Instruction *)
OMR	Block	setHandlerInfo(uint32_t,uint8_t,uint16_t,class TR_ResolvedMethod *,TR::Compilation *)
OMR	Block	setHandlerInfoWithOutBCInfo(uint32_t,uint8_t,uint16_t,class TR_ResolvedMethod *,TR::Compilation *)
OMR	Block	setHasBeenVisited(_Bool)
OMR	Block	setHasCallToSuperCold(_Bool)
OMR	Block	setHasCalls(_Bool)
OMR	Block	setInstructionBoundaries(uint32_t,uint32_t)
OMR	Block	setIsAdded()
OMR	Block	setIsCold(_Bool)
OMR	Block	setIsCreatedAtCodeGen(_Bool)
OMR	Block	setIsDifficultBlock(_Bool)
OMR	Block	setIsEndBlock(_Bool)
OMR	Block	setIsEntryOfShortRunningLoop()
OMR	Block	setIsExtensionOfPreviousBlock(_Bool)
OMR	Block	setIsOSRCatchBlock()
OMR	Block	setIsOSRCodeBlock()
OMR	Block	setIsOSRInduceBlock()
OMR	Block	setIsPRECandidate(_Bool)
OMR	Block	setIsSpecialized(_Bool)
OMR	Block	setIsSuperCold(_Bool)
OMR	Block	setIsSynchronizedHandler()
OMR	Block	setIsUnsanitizeable(_Bool)
OMR	Block	setJ9EstimateCodeSizeMethod(class TR_ResolvedMethod *)
OMR	Block	setLastInstruction(TR::Instruction *)
OMR	Block	setLiveLocals(class TR_BitVector *)
OMR	Block	setPartialInlineBlock(_Bool)
OMR	Block	setRegisterSaveDescriptionBits(class TR_BitVector *)
OMR	Block	setRestartBlock(_Bool)
OMR	Block	setSpecializedDesyncCatchBlock()
OMR	Block	setStructureOf(class TR_BlockStructure *)
OMR	Block	setUnrollFactor(int)
OMR	Block	setWasHeaderOfCanonicalizedLoop(_Bool)
OMR	Block	specializedDesyncCatchBlock()
OMR	Block	split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *)
OMR	Block	splitBlockAndAddConditional(TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool)
OMR	Block	splitEdge(TR::Block *,TR::Block *,TR::Compilation *,TR::TreeTop **,_Bool)
OMR	Block	splitWithGivenMethodSymbol(TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::CFG *,_Bool,_Bool)
OMR	Block	startOfExtendedBlock()
OMR	Block	takeGlRegDeps(TR::Compilation *,TR::Node *)
OMR	Block	uncommonNodesBetweenBlocks(TR::Compilation *,TR::Block *,TR::ResolvedMethodSymbol *)
OMR	Block	verifyOSRInduceBlock(TR::Compilation *)
OMR	Block	wasHeaderOfCanonicalizedLoop()
OMR	Block	~Block()
OMR	Block	changeBranchDestination(TR::TreeTop *,TR::CFG *)
OMR	ClassEnv	ClassEnv(const class OMR::ClassEnv &)
OMR	ClassEnv	ClassEnv(class OMR::ClassEnv &&)
OMR	ClassEnv	ClassEnv()
OMR	ClassEnv	classDepthOf(class TR_OpaqueClassBlock *)
OMR	ClassEnv	classFromJavaLangClass(TR::Compilation *,uintptrj_t)
OMR	ClassEnv	classNameChars(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &)
OMR	ClassEnv	classNameChars(TR::Compilation *,TR::SymbolReference *,int32_t &)
OMR	ClassEnv	classObjectsMayBeCollected()
OMR	ClassEnv	classOfObject(struct OMR_VMThread *,uintptrj_t)
OMR	ClassEnv	classOfObject(TR::Compilation *,uintptrj_t)
OMR	ClassEnv	classSignature(TR::Compilation *,class TR_OpaqueClassBlock *,class TR_Memory *)
OMR	ClassEnv	classSignature_DEPRECATED(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &,class TR_Memory *)
OMR	ClassEnv	classesOnHeap()
OMR	ClassEnv	flagValueForArrayCheck(TR::Compilation *)
OMR	ClassEnv	flagValueForFinalizerCheck(TR::Compilation *)
OMR	ClassEnv	flagValueForPrimitiveTypeCheck(TR::Compilation *)
OMR	ClassEnv	getArrayElementWidthInBytes(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	getStringCharacter(TR::Compilation *,uintptrj_t,int32_t)
OMR	ClassEnv	getStringFieldByName(TR::Compilation *,TR::SymbolReference *,TR::SymbolReference *,void *&)
OMR	ClassEnv	hasFinalFieldsInClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	hasFinalizer(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isAbstractClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isAnonymousClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isClassArray(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isClassFinal(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isClassInitialized(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isInterfaceClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isPrimitiveArray(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isPrimitiveClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isReferenceArray(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isString(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isString(TR::Compilation *,uintptrj_t)
OMR	ClassEnv	isStringClass(class TR_OpaqueClassBlock *)
OMR	ClassEnv	isStringClass(uintptrj_t)
OMR	ClassEnv	jitFieldsAreSame(TR::Compilation *,class TR_ResolvedMethod *,int32_t,class TR_ResolvedMethod *,int32_t,int32_t)
OMR	ClassEnv	jitStaticsAreSame(TR::Compilation *,class TR_ResolvedMethod *,int32_t,class TR_ResolvedMethod *,int32_t)
OMR	ClassEnv	objectClass(TR::Compilation *,uintptrj_t)
OMR	ClassEnv	operator=(class OMR::ClassEnv &&)
OMR	ClassEnv	operator=(const class OMR::ClassEnv &)
OMR	ClassEnv	persistentClassPointerFromClassPointer(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	sameClassLoaders(TR::Compilation *,class TR_OpaqueClassBlock *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	vTableSlot(TR::Compilation *,class TR_OpaqueMethodBlock *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	~ClassEnv()
OMR	ClassEnv	classOfObject(OMR_VMThread *,uintptrj_t)
OMR	CodeGenPhase	CodeGenPhase(const class OMR::CodeGenPhase &)
OMR	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
OMR	CodeGenPhase	CodeGenPhase(class OMR::CodeGenPhase &&)
OMR	CodeGenPhase	getListSize()
OMR	CodeGenPhase	getName()
OMR	CodeGenPhase	getName(enum OMR::CodeGenPhase::PhaseValue)
OMR	CodeGenPhase	getNumPhases()
OMR	CodeGenPhase	operator int()
OMR	CodeGenPhase	operator=(const class OMR::CodeGenPhase &)
OMR	CodeGenPhase	operator=(class OMR::CodeGenPhase &&)
OMR	CodeGenPhase	performAll()
OMR	CodeGenPhase	performBinaryEncodingPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performCleanUpFlagsPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performCreateStackAtlasPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performEmitSnippetsPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performFindAndFixCommonedReferencesPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performInliningReportPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performInsertDebugCountersPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performInstructionSelectionPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performLowerTreesPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performMapStackPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performPeepholePhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performProcessRelocationsPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performRegisterAssigningPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performRemoveUnusedLocalsPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performReserveCodeCachePhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performSetupForInstructionSelectionPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performShrinkWrappingPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	performUncommonCallConstNodesPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR	CodeGenPhase	reportPhase(enum OMR::CodeGenPhase::PhaseValue)
OMR	CodeGenPhase	self()
OMR	CodeGenPhase	~CodeGenPhase()
OMR	CodeGenerator	AddArtificiallyInflatedNodeToStack(TR::Node *)
OMR	CodeGenerator	CodeGenerator(const class OMR::CodeGenerator &)
OMR	CodeGenerator	CodeGenerator()
OMR	CodeGenerator	CodeGenerator(class OMR::CodeGenerator &&)
OMR	CodeGenerator	IntJ()
OMR	CodeGenerator	IsInMemoryType(TR::DataType)
OMR	CodeGenerator	addAOTRelocation(TR::Relocation *,TR::RelocationDebugInfo *)
OMR	CodeGenerator	addAOTRelocation(TR::Relocation *,const char *,uintptr_t,TR::Node *)
OMR	CodeGenerator	addAccumulatedInstructionLengthError(int32_t)
OMR	CodeGenerator	addAllocatedRegister(TR::Register *)
OMR	CodeGenerator	addAllocatedRegisterPair(TR::RegisterPair *)
OMR	CodeGenerator	addBreakPointAddress(uint8_t *)
OMR	CodeGenerator	addCountersToEdges(TR::Block *)
OMR	CodeGenerator	addMonClass(TR::Node *,class TR_OpaqueClassBlock *)
OMR	CodeGenerator	addProjectSpecializedPairRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
OMR	CodeGenerator	addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
OMR	CodeGenerator	addProjectSpecializedRelocation(TR::Instruction *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
OMR	CodeGenerator	addRelocation(TR::Relocation *)
OMR	CodeGenerator	addSnippet(TR::Snippet *)
OMR	CodeGenerator	addStaticRelocation(const TR::StaticRelocation &)
OMR	CodeGenerator	addSupportedLiveRegisterKind(enum TR_RegisterKinds)
OMR	CodeGenerator	addSymbolAndDataTypeToMap(TR::Symbol *,TR::DataType)
OMR	CodeGenerator	addToAtlas(TR::Instruction *)
OMR	CodeGenerator	addToOSRTable(int32_t,TR_ByteCodeInfo &)
OMR	CodeGenerator	addToOSRTable(TR::Instruction *)
OMR	CodeGenerator	addToUnlatchedRegisterList(TR::RealRegister *)
OMR	CodeGenerator	additionsMatch(TR::Node *,TR::Node *,_Bool)
OMR	CodeGenerator	addressesMatch(TR::Node *,TR::Node *,_Bool)
OMR	CodeGenerator	afterRA()
OMR	CodeGenerator	alignBinaryBufferCursor()
OMR	CodeGenerator	allocate64bitRegister()
OMR	CodeGenerator	allocate64bitRegisterPair(TR::Register *,TR::Register *)
OMR	CodeGenerator	allocateCodeMemory(uint32_t,_Bool,_Bool)
OMR	CodeGenerator	allocateCodeMemory(uint32_t,uint32_t,uint8_t **,_Bool)
OMR	CodeGenerator	allocateCollectedReferenceRegister()
OMR	CodeGenerator	allocateFloatingPointRegisterPair(TR::Register *,TR::Register *)
OMR	CodeGenerator	allocateInternalPointerSpill(TR::AutomaticSymbol *)
OMR	CodeGenerator	allocateLocalTemp(TR::DataType,_Bool)
OMR	CodeGenerator	allocateRecompilationInfo()
OMR	CodeGenerator	allocateRegister(enum TR_RegisterKinds)
OMR	CodeGenerator	allocateRegisterPair(TR::Register *,TR::Register *)
OMR	CodeGenerator	allocateSinglePrecisionRegister(enum TR_RegisterKinds)
OMR	CodeGenerator	allocateSinglePrecisionRegisterPair(TR::Register *,TR::Register *)
OMR	CodeGenerator	allocateSpill(int32_t,_Bool,int32_t *,_Bool)
OMR	CodeGenerator	allocateSpill(_Bool,int32_t *,_Bool)
OMR	CodeGenerator	allocateVMThreadSpill()
OMR	CodeGenerator	allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *)
OMR	CodeGenerator	allowSplitWarmAndColdBlocks()
OMR	CodeGenerator	alwaysUseTrampolines()
OMR	CodeGenerator	apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool)
OMR	CodeGenerator	apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool)
OMR	CodeGenerator	apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	apply16BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t)
OMR	CodeGenerator	apply24BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	apply32BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t)
OMR	CodeGenerator	apply64BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *)
OMR	CodeGenerator	apply8BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	areAssignableGPRsScarce()
OMR	CodeGenerator	areMergeableGuards(TR::Instruction *,TR::Instruction *)
OMR	CodeGenerator	arithmeticNeedsLiteralFromPool(TR::Node *)
OMR	CodeGenerator	arrayInitMinimumNumberOfBytes()
OMR	CodeGenerator	arrayTranslateAndTestMinimumNumberOfIterations()
OMR	CodeGenerator	arrayTranslateMinimumNumberOfElements(_Bool,_Bool)
OMR	CodeGenerator	arrayTranslateTableRequiresAlignment(_Bool,_Bool)
OMR	CodeGenerator	beginInstructionSelection()
OMR	CodeGenerator	bitwiseOpNeedsLiteralFromPool(TR::Node *,TR::Node *)
OMR	CodeGenerator	bndsChkNeedsLiteralFromPool(TR::Node *)
OMR	CodeGenerator	branchesAreExpensive()
OMR	CodeGenerator	buildGCMapForInstruction(TR::Instruction *)
OMR	CodeGenerator	buildGCMapsForInstructionAndSnippet(TR::Instruction *)
OMR	CodeGenerator	buildInterpreterEntryPoint()
OMR	CodeGenerator	buildRegisterMapForInstruction(class TR_GCStackMap *)
OMR	CodeGenerator	calculateRegisterPressure()
OMR	CodeGenerator	canBeAffectedByStoreTagStalls()
OMR	CodeGenerator	canClobberNodesRegister(TR::Node *,uint16_t,class TR_ClobberEvalData *,_Bool)
OMR	CodeGenerator	canFoldLargeOffsetInAddressing()
OMR	CodeGenerator	canNullChkBeImplicit(TR::Node *,_Bool)
OMR	CodeGenerator	canNullChkBeImplicit(TR::Node *)
OMR	CodeGenerator	canTransformUnsafeCopyToArrayCopy()
OMR	CodeGenerator	canTransformUnsafeSetMemory()
OMR	CodeGenerator	canUseImmedInstruction(int64_t)
OMR	CodeGenerator	checkForLiveRegisters(class TR_LiveRegisters *)
OMR	CodeGenerator	cleanupFlags(TR::Node *)
OMR	CodeGenerator	clearRegisterAssignmentFlags()
OMR	CodeGenerator	codegenMulDecomposition(int64_t)
OMR	CodeGenerator	codegenSupportsLoadlessBNDCheck()
OMR	CodeGenerator	codegenSupportsUnsignedIntegerDivide()
OMR	CodeGenerator	commitToCodeCache()
OMR	CodeGenerator	committedToCodeCache()
OMR	CodeGenerator	comp()
OMR	CodeGenerator	compute32BitMagicValues(int32_t,int32_t *,int32_t *)
OMR	CodeGenerator	compute64BitMagicValues(int64_t,int64_t *,int64_t *)
OMR	CodeGenerator	computeBlocksWithCalls()
OMR	CodeGenerator	computeRegisterSaveDescription(class TR_BitVector *,_Bool)
OMR	CodeGenerator	computeSimulatedSpilledRegs(class TR_BitVector *,int32_t,TR::SymbolReference *)
OMR	CodeGenerator	computeSpilledRegsForAllPresentLinkages(class TR_BitVector *,struct OMR::CodeGenerator::TR_RegisterPressureSummary &)
OMR	CodeGenerator	computeUnsigned64BitMagicValues(uint64_t,int32_t *,int32_t *)
OMR	CodeGenerator	computesCarry()
OMR	CodeGenerator	considerAllAutosAsTacticalGlobalRegisterCandidates()
OMR	CodeGenerator	considerTypeForGRA(TR::SymbolReference *)
OMR	CodeGenerator	considerTypeForGRA(TR::DataType)
OMR	CodeGenerator	considerTypeForGRA(TR::Node *)
OMR	CodeGenerator	constLoadNeedsLiteralFromPool(TR::Node *)
OMR	CodeGenerator	constantAddressesCanChangeSize(TR::Node *)
OMR	CodeGenerator	convertMultiplyToShift(TR::Node *)
OMR	CodeGenerator	createHWPRecords()
OMR	CodeGenerator	createLinkage(enum TR_LinkageConventions)
OMR	CodeGenerator	createLinkageForCompilation()
OMR	CodeGenerator	createOrFindClonedNode(TR::Node *,int32_t)
OMR	CodeGenerator	createStackAtlas()
OMR	CodeGenerator	decInternalControlFlowNestingDepth()
OMR	CodeGenerator	decOutOfLineColdPathNestedDepth()
OMR	CodeGenerator	decReferenceCount(TR::Node *)
OMR	CodeGenerator	defaultArrayTranslateMinimumNumberOfIterations(const char *)
OMR	CodeGenerator	doBinaryEncoding()
OMR	CodeGenerator	doInstructionSelection()
OMR	CodeGenerator	doPeephole()
OMR	CodeGenerator	doRegisterAssignment(enum TR_RegisterKinds)
OMR	CodeGenerator	doRematerialization()
OMR	CodeGenerator	dumpDataSnippets(TR::FILE *)
OMR	CodeGenerator	dumpSpillStats(class TR_FrontEnd *)
OMR	CodeGenerator	dumpTargetAddressSnippets(TR::FILE *)
OMR	CodeGenerator	eliminateLoadsOfLocalsThatAreNotStored(TR::Node *,int32_t)
OMR	CodeGenerator	emitDataSnippets()
OMR	CodeGenerator	emitSnippets()
OMR	CodeGenerator	emitTargetAddressSnippets()
OMR	CodeGenerator	enableLiteralPoolRegisterForGRA()
OMR	CodeGenerator	enableRefinedAliasSets()
OMR	CodeGenerator	endInstructionSelection()
OMR	CodeGenerator	endInternalControlFlow(TR::Instruction *)
OMR	CodeGenerator	estimateBinaryLength(TR::MemoryReference *)
OMR	CodeGenerator	estimateRegisterPressure(TR::Block *,vcount_t,int32_t,int32_t,_Bool &,int32_t,class TR_BitVector *,TR::SymbolReference *,_Bool)
OMR	CodeGenerator	estimateRegisterPressure(TR::Node *,int32_t &,int32_t &,int32_t,class TR_BitVector *,_Bool,vcount_t,TR::SymbolReference *,_Bool &,_Bool,_Bool &)
OMR	CodeGenerator	evaluate(TR::Node *)
OMR	CodeGenerator	evaluateChildrenWithMultipleRefCount(TR::Node *)
OMR	CodeGenerator	excludeInvariantsFromGRAEnabled()
OMR	CodeGenerator	expandExponentiation()
OMR	CodeGenerator	fe()
OMR	CodeGenerator	findAndFixCommonedReferences()
OMR	CodeGenerator	findCoalescenceForRegisterCopy(TR::Node *,class TR_RegisterCandidate *,_Bool *)
OMR	CodeGenerator	findCoalescenceRegisterForParameter(TR::Node *,class TR_RegisterCandidate *,uint32_t,_Bool *)
OMR	CodeGenerator	findCommonedReferences(TR::Node *,TR::TreeTop *)
OMR	CodeGenerator	findUsedCandidate(TR::Node *,class TR_RegisterCandidate *,class TR_BitVector *)
OMR	CodeGenerator	fprCount(TR::DataType)
OMR	CodeGenerator	freeSpill(class TR_BackingStore *,int32_t,int32_t)
OMR	CodeGenerator	freeUnlatchedRegisters()
OMR	CodeGenerator	genLiveRealRegisters(enum TR_RegisterKinds,TR_RegisterMask)
OMR	CodeGenerator	genStoreForSymListArray(TR_Array<List<TR::SymbolReference> > *,class TR_OSRMethodData *,TR::TreeTop *&,TR::Node *,TR::Node *,TR::Node *,TR::Node *,int32_t &)
OMR	CodeGenerator	generateCatchBlockBBStartPrologue(TR::Node *,TR::Instruction *)
OMR	CodeGenerator	generateCode()
OMR	CodeGenerator	generateCodeFromIL()
OMR	CodeGenerator	generateDebugCounter(const char *,TR::Register *,class TR_ScratchRegisterManager &,int8_t,int32_t,TR::Instruction *)
OMR	CodeGenerator	generateDebugCounter(const char *,TR::RegisterDependencyConditions &,int32_t,int8_t,int32_t,TR::Instruction *)
OMR	CodeGenerator	generateDebugCounter(const char *,TR::Register *,TR::RegisterDependencyConditions &,int8_t,int32_t,TR::Instruction *)
OMR	CodeGenerator	generateDebugCounter(TR::Instruction *,const char *,int32_t,int8_t,int32_t)
OMR	CodeGenerator	generateDebugCounter(const char *,TR::Register *,int8_t)
OMR	CodeGenerator	generateDebugCounter(const char *,class TR_ScratchRegisterManager &,int32_t,int8_t,int32_t,TR::Instruction *)
OMR	CodeGenerator	generateDebugCounter(const char *,int32_t,int8_t)
OMR	CodeGenerator	generateDebugCounter(TR::Instruction *,const char *,TR::Register *,int8_t,int32_t)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *)
OMR	CodeGenerator	generateNop(TR::Node *,TR::Instruction *,enum TR_NOPKind)
OMR	CodeGenerator	getAOTRelocationList()
OMR	CodeGenerator	getAccessStaticsIndirectly()
OMR	CodeGenerator	getAccumulatedInstructionLengthError()
OMR	CodeGenerator	getAheadOfTimeCompile()
OMR	CodeGenerator	getAllSpillList()
OMR	CodeGenerator	getAppendInstruction()
OMR	CodeGenerator	getBinaryBufferCursor()
OMR	CodeGenerator	getBinaryBufferLength()
OMR	CodeGenerator	getBinaryBufferStart()
OMR	CodeGenerator	getBlocksWithCalls()
OMR	CodeGenerator	getBreakPointList()
OMR	CodeGenerator	getCodeCache()
OMR	CodeGenerator	getCodeEnd()
OMR	CodeGenerator	getCodeGeneratorPhase()
OMR	CodeGenerator	getCodeLength()
OMR	CodeGenerator	getCodeStart()
OMR	CodeGenerator	getCollectedSpillList()
OMR	CodeGenerator	getCurrentBlock()
OMR	CodeGenerator	getCurrentBlockIndex()
OMR	CodeGenerator	getCurrentEvaluationBlock()
OMR	CodeGenerator	getCurrentEvaluationTreeTop()
OMR	CodeGenerator	getCurrentPathDepth()
OMR	CodeGenerator	getDataTypeFromSymbolMap(TR::Symbol *)
OMR	CodeGenerator	getDebug()
OMR	CodeGenerator	getDisableFpGRA()
OMR	CodeGenerator	getDisableLongGRA()
OMR	CodeGenerator	getDisableNullCheckOfArrayLength()
OMR	CodeGenerator	getEnableRegisterUsageTracking()
OMR	CodeGenerator	getEnforceStoreOrder()
OMR	CodeGenerator	getEstimatedCodeLength()
OMR	CodeGenerator	getEstimatedSnippetStart()
OMR	CodeGenerator	getEstimatedWarmLength()
OMR	CodeGenerator	getEvaluationPriority(TR::Node *)
OMR	CodeGenerator	getExtendedToInt64GlobalRegisters()
OMR	CodeGenerator	getFPRegisterIterator()
OMR	CodeGenerator	getFirstBit(class TR_BitVector &)
OMR	CodeGenerator	getFirstGlobalAR()
OMR	CodeGenerator	getFirstGlobalFPR()
OMR	CodeGenerator	getFirstGlobalGPR()
OMR	CodeGenerator	getFirstGlobalHPR()
OMR	CodeGenerator	getFirstGlobalVRF()
OMR	CodeGenerator	getFirstInstruction()
OMR	CodeGenerator	getFirstOverlappedGlobalFPR()
OMR	CodeGenerator	getFirstOverlappedGlobalVRF()
OMR	CodeGenerator	getFirstTimeLiveOOLRegisterList()
OMR	CodeGenerator	getFrameSizeInBytes()
OMR	CodeGenerator	getGPRegisterIterator()
OMR	CodeGenerator	getGRACompleted()
OMR	CodeGenerator	getGlobalFPRPartitionLimit()
OMR	CodeGenerator	getGlobalFPRsPreservedAcrossCalls()
OMR	CodeGenerator	getGlobalGPRFromHPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	getGlobalGPRPartitionLimit()
OMR	CodeGenerator	getGlobalGPRsPreservedAcrossCalls()
OMR	CodeGenerator	getGlobalHPRFromGPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	getGlobalRegister(TR_GlobalRegisterNumber)
OMR	CodeGenerator	getGlobalRegisterNumber(uint32_t)
OMR	CodeGenerator	getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions)
OMR	CodeGenerator	getHasDoubleWordAlignedStack()
OMR	CodeGenerator	getHasResumableTrapHandler()
OMR	CodeGenerator	getImplicitExceptionPoint()
OMR	CodeGenerator	getInlinedGetCurrentThreadMethod()
OMR	CodeGenerator	getInstructionAtEndInternalControlFlow()
OMR	CodeGenerator	getInstructionToBePatched(TR::Instruction *)
OMR	CodeGenerator	getInternalPointerSpillFreeList()
OMR	CodeGenerator	getInternalPtrMapBit()
OMR	CodeGenerator	getIsInOOLSection()
OMR	CodeGenerator	getJNICallSites()
OMR	CodeGenerator	getJNILinkageCalleeCleanup()
OMR	CodeGenerator	getJitMethodEntryPaddingSize()
OMR	CodeGenerator	getLargestOutgoingArgSize()
OMR	CodeGenerator	getLastGlobalAR()
OMR	CodeGenerator	getLastGlobalFPR()
OMR	CodeGenerator	getLastGlobalGPR()
OMR	CodeGenerator	getLastGlobalHPR()
OMR	CodeGenerator	getLastGlobalVRF()
OMR	CodeGenerator	getLastOverlappedGlobalFPR()
OMR	CodeGenerator	getLastOverlappedGlobalVRF()
OMR	CodeGenerator	getLinkage(enum TR_LinkageConventions)
OMR	CodeGenerator	getLinkage()
OMR	CodeGenerator	getLinkageGlobalRegisterNumber(int8_t,TR::DataType)
OMR	CodeGenerator	getLiveButMaybeUnreferencedLocals()
OMR	CodeGenerator	getLiveLocals()
OMR	CodeGenerator	getLiveRealRegisters(enum TR_RegisterKinds)
OMR	CodeGenerator	getLiveRegisters(enum TR_RegisterKinds)
OMR	CodeGenerator	getLocalsIG()
OMR	CodeGenerator	getLowestSavedRegister()
OMR	CodeGenerator	getMappingAutomatics()
OMR	CodeGenerator	getMaxObjectSizeGuaranteedNotToOverflow()
OMR	CodeGenerator	getMaximumNumberOfFPRsAllowedAcrossEdge(TR::Node *)
OMR	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Block *)
OMR	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *)
OMR	CodeGenerator	getMaximumNumberOfVRFsAllowedAcrossEdge(TR::Node *)
OMR	CodeGenerator	getMaximumNumbersOfAssignableFPRs()
OMR	CodeGenerator	getMaximumNumbersOfAssignableGPRs()
OMR	CodeGenerator	getMaximumNumbersOfAssignableVRs()
OMR	CodeGenerator	getMethodContainsBinaryCodedDecimal()
OMR	CodeGenerator	getMethodModifiedByRA()
OMR	CodeGenerator	getMethodStackMap()
OMR	CodeGenerator	getMinByteForLongCompareNarrower()
OMR	CodeGenerator	getMinShortForLongCompareNarrower()
OMR	CodeGenerator	getMonClass(TR::Node *)
OMR	CodeGenerator	getNextAvailableBlockIndex()
OMR	CodeGenerator	getNumberBytesReadInaccessible()
OMR	CodeGenerator	getNumberBytesWriteInaccessible()
OMR	CodeGenerator	getNumberOfGlobalFPRs()
OMR	CodeGenerator	getNumberOfGlobalGPRs()
OMR	CodeGenerator	getNumberOfGlobalRegisters()
OMR	CodeGenerator	getNumberOfGlobalVRFs()
OMR	CodeGenerator	getNumberOfTemporaryRegistersUsedByCall(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,uint32_t &,uint32_t &,uint32_t &)
OMR	CodeGenerator	getOptimizationPhaseIsComplete()
OMR	CodeGenerator	getOverlapOffsetBetweenAliasedGRNs()
OMR	CodeGenerator	getOverlappedAliasForGRN(TR_GlobalRegisterNumber)
OMR	CodeGenerator	getPreJitMethodEntrySize()
OMR	CodeGenerator	getPrePrologueSize()
OMR	CodeGenerator	getPreferredLoopUnrollFactor()
OMR	CodeGenerator	getPreservedRegsInPrologue()
OMR	CodeGenerator	getRealVMThreadRegister()
OMR	CodeGenerator	getReferencedRegisterList()
OMR	CodeGenerator	getRegisterArray()
OMR	CodeGenerator	getRegisterMapInfoBitsMask()
OMR	CodeGenerator	getRegisterSaveDescription()
OMR	CodeGenerator	getRelocationList()
OMR	CodeGenerator	getShrinkWrappingDone()
OMR	CodeGenerator	getSizeOfCombinedBuffer()
OMR	CodeGenerator	getSnippetList()
OMR	CodeGenerator	getSpill16FreeList()
OMR	CodeGenerator	getSpill4FreeList()
OMR	CodeGenerator	getSpill8FreeList()
OMR	CodeGenerator	getSpilledRegisterList()
OMR	CodeGenerator	getStackAtlas()
OMR	CodeGenerator	getStaticRelocations()
OMR	CodeGenerator	getSupportedLiveRegisterKinds()
OMR	CodeGenerator	getSupportsAlignedAccessOnly()
OMR	CodeGenerator	getSupportsArrayCmp()
OMR	CodeGenerator	getSupportsArrayCmpSign()
OMR	CodeGenerator	getSupportsArraySet()
OMR	CodeGenerator	getSupportsArrayTranslateAndTest()
OMR	CodeGenerator	getSupportsArrayTranslateTROT()
OMR	CodeGenerator	getSupportsArrayTranslateTROTNoBreak()
OMR	CodeGenerator	getSupportsArrayTranslateTRTO()
OMR	CodeGenerator	getSupportsArrayTranslateTRTO255()
OMR	CodeGenerator	getSupportsArrayTranslateTRxx()
OMR	CodeGenerator	getSupportsAtomicLoadAndAdd()
OMR	CodeGenerator	getSupportsAutoSIMD()
OMR	CodeGenerator	getSupportsBCDToDFPReduction()
OMR	CodeGenerator	getSupportsBDLLHardwareOverflowCheck()
OMR	CodeGenerator	getSupportsBigDecimalLongLookasideVersioning()
OMR	CodeGenerator	getSupportsBitOpCodes()
OMR	CodeGenerator	getSupportsBitPermute()
OMR	CodeGenerator	getSupportsCompactedLocals()
OMR	CodeGenerator	getSupportsConstantOffsetInAddressing()
OMR	CodeGenerator	getSupportsConstantOffsetInAddressing(int64_t)
OMR	CodeGenerator	getSupportsCurrentTimeMaxPrecision()
OMR	CodeGenerator	getSupportsDirectJNICalls()
OMR	CodeGenerator	getSupportsDivCheck()
OMR	CodeGenerator	getSupportsDoubleWordCAS()
OMR	CodeGenerator	getSupportsDoubleWordSet()
OMR	CodeGenerator	getSupportsEfficientNarrowIntComputation()
OMR	CodeGenerator	getSupportsEfficientNarrowUnsignedIntComputation()
OMR	CodeGenerator	getSupportsEncodeUtf16BigWithSurrogateTest()
OMR	CodeGenerator	getSupportsEncodeUtf16LittleWithSurrogateTest()
OMR	CodeGenerator	getSupportsFastCTM()
OMR	CodeGenerator	getSupportsGlRegDepOnFirstBlock()
OMR	CodeGenerator	getSupportsGlRegDeps()
OMR	CodeGenerator	getSupportsIDivAndIRemWithThreeChildren()
OMR	CodeGenerator	getSupportsIbyteswap()
OMR	CodeGenerator	getSupportsInlinedAtomicLongVolatiles()
OMR	CodeGenerator	getSupportsInliningOfTypeCoersionMethods()
OMR	CodeGenerator	getSupportsJavaFloatSemantics()
OMR	CodeGenerator	getSupportsLDivAndLRemWithThreeChildren()
OMR	CodeGenerator	getSupportsLM()
OMR	CodeGenerator	getSupportsLoweringConstIDiv()
OMR	CodeGenerator	getSupportsLoweringConstLDiv()
OMR	CodeGenerator	getSupportsLoweringConstLDivPower2()
OMR	CodeGenerator	getSupportsMergedAllocations()
OMR	CodeGenerator	getSupportsNewInstanceImplOpt()
OMR	CodeGenerator	getSupportsNewObjectAlignment()
OMR	CodeGenerator	getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType)
OMR	CodeGenerator	getSupportsPartialInlineOfMethodHooks()
OMR	CodeGenerator	getSupportsPostProcessArrayCopy()
OMR	CodeGenerator	getSupportsPrimitiveArrayCopy()
OMR	CodeGenerator	getSupportsProfiledInlining()
OMR	CodeGenerator	getSupportsReadOnlyLocks()
OMR	CodeGenerator	getSupportsReferenceArrayCopy()
OMR	CodeGenerator	getSupportsReverseLoadAndStore()
OMR	CodeGenerator	getSupportsRuntimeInstrumentation()
OMR	CodeGenerator	getSupportsScaledIndexAddressing()
OMR	CodeGenerator	getSupportsSearchCharString()
OMR	CodeGenerator	getSupportsShrinkWrapping()
OMR	CodeGenerator	getSupportsStackAllocationOfArraylets()
OMR	CodeGenerator	getSupportsTLE()
OMR	CodeGenerator	getSupportsTM()
OMR	CodeGenerator	getSupportsTMDoubleWordCASORSet()
OMR	CodeGenerator	getSupportsTMHashMapAndLinkedQueue()
OMR	CodeGenerator	getSupportsTenuredObjectAlignment()
OMR	CodeGenerator	getSupportsTestCharComparisonControl()
OMR	CodeGenerator	getSupportsTestUnderMask()
OMR	CodeGenerator	getSupportsTranslateAndTestCharString()
OMR	CodeGenerator	getSupportsVMThreadGRA()
OMR	CodeGenerator	getSupportsVectorRegisters()
OMR	CodeGenerator	getSupportsVirtualGuardNOPing()
OMR	CodeGenerator	getSymRef(enum TR_RuntimeHelper)
OMR	CodeGenerator	getSymRefTab()
OMR	CodeGenerator	getTraceRAOption(uint32_t)
OMR	CodeGenerator	getTreeEvaluatorTable()
OMR	CodeGenerator	getUseNonLinearRegisterAssigner()
OMR	CodeGenerator	getUsesLoadStoreMultiple()
OMR	CodeGenerator	getVMThreadGlobalRegisterNumber()
OMR	CodeGenerator	getVMThreadRegister()
OMR	CodeGenerator	getVMThreadRequired()
OMR	CodeGenerator	getVMThreadSpillInstruction()
OMR	CodeGenerator	getVirtualGuardForPatching(TR::Instruction *)
OMR	CodeGenerator	gprCount(TR::DataType,int32_t)
OMR	CodeGenerator	hasCCCarry()
OMR	CodeGenerator	hasCCCompare()
OMR	CodeGenerator	hasCCInfo()
OMR	CodeGenerator	hasCCOverflow()
OMR	CodeGenerator	hasCCSigned()
OMR	CodeGenerator	hasCCZero()
OMR	CodeGenerator	hasComplexAddressingMode()
OMR	CodeGenerator	hasDataSnippets()
OMR	CodeGenerator	hasGlobalVRF()
OMR	CodeGenerator	hasRegisterPressureInfo()
OMR	CodeGenerator	hasTMEvaluator()
OMR	CodeGenerator	hasTargetAddressSnippets()
OMR	CodeGenerator	hiValue(intptrj_t)
OMR	CodeGenerator	identifyUnneededByteConvNodes()
OMR	CodeGenerator	identifyUnneededByteConvNodes(TR::Node *,TR::TreeTop *,vcount_t,TR::DataType)
OMR	CodeGenerator	ilOpCodeIsSupported(TR::ILOpCodes)
OMR	CodeGenerator	incInternalControlFlowNestingDepth()
OMR	CodeGenerator	incNumRematerializedAddresses()
OMR	CodeGenerator	incNumRematerializedConstants()
OMR	CodeGenerator	incNumRematerializedIndirects()
OMR	CodeGenerator	incNumRematerializedLocals()
OMR	CodeGenerator	incNumRematerializedStatics()
OMR	CodeGenerator	incNumRematerializedXMMRs()
OMR	CodeGenerator	incNumSpilledRegisters()
OMR	CodeGenerator	incOutOfLineColdPathNestedDepth()
OMR	CodeGenerator	incRefCountForOpaquePseudoRegister(TR::Node *,TR::CodeGenerator *,TR::Compilation *)
OMR	CodeGenerator	incReferenceCount(TR::Node *)
OMR	CodeGenerator	incrementEventCounter(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *)
OMR	CodeGenerator	initializeLinkage()
OMR	CodeGenerator	initializeRegisterPressureSimulator()
OMR	CodeGenerator	inlineDirectCall(TR::Node *,TR::Register *&)
OMR	CodeGenerator	insertDebugCounters()
OMR	CodeGenerator	insideInternalControlFlow()
OMR	CodeGenerator	internalControlFlowNestingDepth()
OMR	CodeGenerator	internalControlFlowSafeNestingDepth()
OMR	CodeGenerator	internalPointerSupportImplemented()
OMR	CodeGenerator	is8BitGlobalGPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	isAddressScaleIndexSupported(int32_t)
OMR	CodeGenerator	isAliasedGRN(TR_GlobalRegisterNumber)
OMR	CodeGenerator	isAlignmentInstruction(TR::Instruction *)
OMR	CodeGenerator	isBranchInstruction(TR::Instruction *)
OMR	CodeGenerator	isCandidateLoad(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	isCandidateLoad(TR::Node *,TR::SymbolReference *)
OMR	CodeGenerator	isFenceInstruction(TR::Instruction *)
OMR	CodeGenerator	isFreeSpillListLocked()
OMR	CodeGenerator	isGlobalFPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	isGlobalGPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	isGlobalHPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	isGlobalRegisterAvailable(TR_GlobalRegisterNumber,TR::DataType)
OMR	CodeGenerator	isGlobalVRF(TR_GlobalRegisterNumber)
OMR	CodeGenerator	isInMemoryInstructionCandidate(TR::Node *)
OMR	CodeGenerator	isInternalControlFlowReg(TR::Register *)
OMR	CodeGenerator	isLabelInstruction(TR::Instruction *)
OMR	CodeGenerator	isLeafMethod()
OMR	CodeGenerator	isLiteralPoolOnDemandOn()
OMR	CodeGenerator	isLoadAlreadyAssignedOnEntry(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	isMaterialized(TR::Node *)
OMR	CodeGenerator	isMemoryUpdate(TR::Node *)
OMR	CodeGenerator	isObjectOfSizeWorthAligning(uint32_t)
OMR	CodeGenerator	isOutOfLineColdPath()
OMR	CodeGenerator	isOutOfLineHotPath()
OMR	CodeGenerator	isPreservedRegister(int32_t)
OMR	CodeGenerator	isRegisterClobberable(TR::Register *,uint16_t)
OMR	CodeGenerator	isReturnInstruction(TR::Instruction *)
OMR	CodeGenerator	isRotateAndMask(TR::Node *)
OMR	CodeGenerator	isSnippetMatched(TR::Snippet *,int32_t,TR::SymbolReference *)
OMR	CodeGenerator	isSupportedAdd(TR::Node *)
OMR	CodeGenerator	isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **)
OMR	CodeGenerator	jettisonAllSpills()
OMR	CodeGenerator	jitAdd32BitPicToPatchOnClassRedefinition(void *,void *,_Bool)
OMR	CodeGenerator	jitAdd32BitPicToPatchOnClassUnload(void *,void *)
OMR	CodeGenerator	jitAddPicToPatchOnClassRedefinition(void *,void *,_Bool)
OMR	CodeGenerator	jitAddPicToPatchOnClassUnload(void *,void *)
OMR	CodeGenerator	jitAddUnresolvedAddressMaterializationToPatchOnClassRedefinition(void *)
OMR	CodeGenerator	jitPersistentAlloc(size_t)
OMR	CodeGenerator	jitPersistentFree(void *)
OMR	CodeGenerator	killLiveRealRegisters(enum TR_RegisterKinds,TR_RegisterMask)
OMR	CodeGenerator	lastInstructionBeforeCurrentEvaluationTreeTop()
OMR	CodeGenerator	linkage()
OMR	CodeGenerator	lockFreeSpillList()
OMR	CodeGenerator	lookUpSnippet(int32_t,TR::SymbolReference *)
OMR	CodeGenerator	lowerTree(TR::Node *,TR::TreeTop *)
OMR	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
OMR	CodeGenerator	lowerTrees()
OMR	CodeGenerator	lowerTreesPostChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
OMR	CodeGenerator	lowerTreesPostTreeTopVisit(TR::TreeTop *,vcount_t)
OMR	CodeGenerator	lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
OMR	CodeGenerator	lowerTreesPreTreeTopVisit(TR::TreeTop *,vcount_t)
OMR	CodeGenerator	lowerTreesPropagateBlockToNode(TR::Node *)
OMR	CodeGenerator	lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t)
OMR	CodeGenerator	machine()
OMR	CodeGenerator	materializesHeapBase()
OMR	CodeGenerator	materializesLargeConstants()
OMR	CodeGenerator	mulDecompositionCostIsJustified(int,char [],char [],int64_t)
OMR	CodeGenerator	multiplyIsDestructive()
OMR	CodeGenerator	mustGenerateSwitchToInterpreterPrePrologue()
OMR	CodeGenerator	needClassAndMethodPointerRelocations()
OMR	CodeGenerator	needGuardSitesEvenWhenGuardRemoved()
OMR	CodeGenerator	needRelocationsForStatics()
OMR	CodeGenerator	needSpillTemp(class TR_LiveReference *,TR::Node *,TR::TreeTop *)
OMR	CodeGenerator	needToAvoidCommoningInGRA()
OMR	CodeGenerator	needsNormalizationBeforeShifts()
OMR	CodeGenerator	nodeCanBeFoldedIntoMemref(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	nodeMatches(TR::Node *,TR::Node *,_Bool)
OMR	CodeGenerator	nodeMayCauseException(TR::Node *)
OMR	CodeGenerator	nodeResultARCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	nodeResultConsumesNoRegisters(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	nodeResultFPRCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	nodeResultGPRCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	nodeResultSSRCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	nodeResultVRFCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	nodeWillBeRematerialized(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	opCodeIsNoOp(TR::ILOpCode &)
OMR	CodeGenerator	opCodeIsNoOpOnThisPlatform(TR::ILOpCode &)
OMR	CodeGenerator	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	CodeGenerator	operator delete(void *,TR::Region &)
OMR	CodeGenerator	operator delete(void *,size_t)
OMR	CodeGenerator	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator delete[](void *,TR::Region &)
OMR	CodeGenerator	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	CodeGenerator	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	CodeGenerator	operator new(size_t,class TR_PersistentMemory *)
OMR	CodeGenerator	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator new(size_t,TR::Internal::PersistentNewType)
OMR	CodeGenerator	operator new(size_t,TR_ArenaAllocator *)
OMR	CodeGenerator	operator new(size_t,TR::Region &)
OMR	CodeGenerator	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	CodeGenerator	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	CodeGenerator	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator new[](size_t,class TR_PersistentMemory *)
OMR	CodeGenerator	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	CodeGenerator	operator new[](size_t,TR::Region &)
OMR	CodeGenerator	operator=(class OMR::CodeGenerator &&)
OMR	CodeGenerator	operator=(const class OMR::CodeGenerator &)
OMR	CodeGenerator	performsChecksExplicitly()
OMR	CodeGenerator	pickRegister(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &,TR_GlobalRegisterNumber &,TR_LinkHead<class TR_RegisterCandidate> *)
OMR	CodeGenerator	postLowerTrees()
OMR	CodeGenerator	preLowerTrees()
OMR	CodeGenerator	prepareForGRA()
OMR	CodeGenerator	prepareNodeForInstructionSelection(TR::Node *)
OMR	CodeGenerator	prepareRegistersForAssignment()
OMR	CodeGenerator	processIncomingParameterUsage(class TR_BitVector **,int32_t)
OMR	CodeGenerator	processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool)
OMR	CodeGenerator	processReference(TR::Node *,TR::Node *,TR::TreeTop *)
OMR	CodeGenerator	processRelocations()
OMR	CodeGenerator	profiledPointersRequireRelocation()
OMR	CodeGenerator	propagateSignThroughBCDLeftShift(TR::DataType)
OMR	CodeGenerator	recordSingleRegisterUse(TR::Register *)
OMR	CodeGenerator	recursivelyDecReferenceCount(TR::Node *)
OMR	CodeGenerator	registerAssumptions()
OMR	CodeGenerator	remapGCIndicesInInternalPtrFormat()
OMR	CodeGenerator	rematerializeCmpUnderTernary(TR::Node *)
OMR	CodeGenerator	removeRegisterHogsInLowerTreesWalk()
OMR	CodeGenerator	removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &)
OMR	CodeGenerator	removeUnusedLocals()
OMR	CodeGenerator	requiresCarry()
OMR	CodeGenerator	reserveCodeCache()
OMR	CodeGenerator	resetEnableRegisterUsageTracking()
OMR	CodeGenerator	resetIsLeafMethod()
OMR	CodeGenerator	resetLiveRealRegisters(enum TR_RegisterKinds)
OMR	CodeGenerator	resetMethodModifiedByRA()
OMR	CodeGenerator	resetRegisterAssignmentFlag(enum TR_RegisterAssignmentFlagBits)
OMR	CodeGenerator	resetRemoveRegisterHogsInLowerTreesWalk()
OMR	CodeGenerator	resetSupportsVMThreadGRA()
OMR	CodeGenerator	resetTrackingInMemoryKilledLoads()
OMR	CodeGenerator	resizeCodeMemory()
OMR	CodeGenerator	saveOrRestoreRegisters(class TR_BitVector *,TR::Instruction *,_Bool)
OMR	CodeGenerator	self()
OMR	CodeGenerator	setAccessStaticsIndirectly(_Bool)
OMR	CodeGenerator	setAccumulatedInstructionLengthError(int32_t)
OMR	CodeGenerator	setAheadOfTimeCompile(TR::AheadOfTimeCompile *)
OMR	CodeGenerator	setAlwaysUseTrampolines()
OMR	CodeGenerator	setAppendInstruction(TR::Instruction *)
OMR	CodeGenerator	setBinaryBufferCursor(uint8_t *)
OMR	CodeGenerator	setBinaryBufferStart(uint8_t *)
OMR	CodeGenerator	setCodeCache(TR::CodeCache *)
OMR	CodeGenerator	setComputesCarry(_Bool)
OMR	CodeGenerator	setConsiderAllAutosAsTacticalGlobalRegisterCandidates()
OMR	CodeGenerator	setCurrentBlock(TR::Block *)
OMR	CodeGenerator	setCurrentBlockIndex(int32_t)
OMR	CodeGenerator	setCurrentEvaluationBlock(TR::Block *)
OMR	CodeGenerator	setCurrentEvaluationTreeTop(TR::TreeTop *)
OMR	CodeGenerator	setCurrentPathDepth(int32_t)
OMR	CodeGenerator	setDisableFpGRA()
OMR	CodeGenerator	setDisableLongGRA()
OMR	CodeGenerator	setDisableNullCheckOfArrayLength()
OMR	CodeGenerator	setEnableRefinedAliasSets()
OMR	CodeGenerator	setEnableRegisterUsageTracking()
OMR	CodeGenerator	setEnforceStoreOrder()
OMR	CodeGenerator	setEstimatedCodeLength(uint32_t)
OMR	CodeGenerator	setEstimatedLocationsForDataSnippetLabels(int32_t)
OMR	CodeGenerator	setEstimatedLocationsForSnippetLabels(int32_t)
OMR	CodeGenerator	setEstimatedLocationsForTargetAddressSnippetLabels(int32_t)
OMR	CodeGenerator	setEstimatedSnippetStart(int32_t)
OMR	CodeGenerator	setEstimatedWarmLength(uint32_t)
OMR	CodeGenerator	setExpandExponentiation()
OMR	CodeGenerator	setFPRegisterIterator(TR::RegisterIterator *)
OMR	CodeGenerator	setFirstGlobalAR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setFirstGlobalFPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setFirstGlobalHPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setFirstGlobalVRF(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setFirstInstruction(TR::Instruction *)
OMR	CodeGenerator	setFirstOverlappedGlobalFPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setFirstOverlappedGlobalVRF(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setFirstTimeLiveOOLRegisterList(TR::list<TR::Register *> *)
OMR	CodeGenerator	setFrameSizeInBytes(int32_t)
OMR	CodeGenerator	setGPRegisterIterator(TR::RegisterIterator *)
OMR	CodeGenerator	setGRACompleted()
OMR	CodeGenerator	setGlobalFPRPartitionLimit(uint8_t)
OMR	CodeGenerator	setGlobalGPRPartitionLimit(uint8_t)
OMR	CodeGenerator	setGlobalRegisterTable(uint32_t *)
OMR	CodeGenerator	setHasCCCarry(_Bool)
OMR	CodeGenerator	setHasCCCompare(_Bool)
OMR	CodeGenerator	setHasCCInfo(_Bool)
OMR	CodeGenerator	setHasCCOverflow(_Bool)
OMR	CodeGenerator	setHasCCSigned(_Bool)
OMR	CodeGenerator	setHasCCZero(_Bool)
OMR	CodeGenerator	setHasDoubleWordAlignedStack()
OMR	CodeGenerator	setHasResumableTrapHandler()
OMR	CodeGenerator	setImplicitExceptionPoint(TR::Instruction *)
OMR	CodeGenerator	setInlinedGetCurrentThreadMethod()
OMR	CodeGenerator	setInternalControlFlowNestingDepth(int32_t)
OMR	CodeGenerator	setInternalControlFlowSafeNestingDepth(int32_t)
OMR	CodeGenerator	setIsLeafMethod()
OMR	CodeGenerator	setJNILinkageCalleeCleanup()
OMR	CodeGenerator	setJitMethodEntryPaddingSize(uint32_t)
OMR	CodeGenerator	setLargestOutgoingArgSize(uint32_t)
OMR	CodeGenerator	setLast8BitGlobalGPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLastGlobalAR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLastGlobalFPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLastGlobalGPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLastGlobalHPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLastGlobalVRF(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLastInstructionBeforeCurrentEvaluationTreeTop(TR::Instruction *)
OMR	CodeGenerator	setLastOverlappedGlobalFPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLastOverlappedGlobalVRF(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setLinkage(TR::Linkage *)
OMR	CodeGenerator	setLinkage(enum TR_LinkageConventions,TR::Linkage *)
OMR	CodeGenerator	setLiveButMaybeUnreferencedLocals(class TR_BitVector *)
OMR	CodeGenerator	setLiveLocals(class TR_BitVector *)
OMR	CodeGenerator	setLiveRegisters(class TR_LiveRegisters *,enum TR_RegisterKinds)
OMR	CodeGenerator	setLmmdFailed()
OMR	CodeGenerator	setLocalsIG(class TR_InterferenceGraph *)
OMR	CodeGenerator	setLowestSavedRegister(int32_t)
OMR	CodeGenerator	setMappingAutomatics()
OMR	CodeGenerator	setMethodContainsBinaryCodedDecimal()
OMR	CodeGenerator	setMethodModifiedByRA()
OMR	CodeGenerator	setMethodStackMap(class TR_GCStackMap *)
OMR	CodeGenerator	setMultiplyIsDestructive()
OMR	CodeGenerator	setNextAvailableBlockIndex(int32_t)
OMR	CodeGenerator	setOnDemandLiteralPoolRun(_Bool)
OMR	CodeGenerator	setOptimizationPhaseIsComplete()
OMR	CodeGenerator	setOverlapOffsetBetweenAliasedGRNs(TR_GlobalRegisterNumber)
OMR	CodeGenerator	setPerformsChecksExplicitly()
OMR	CodeGenerator	setPreJitMethodEntrySize(uint32_t)
OMR	CodeGenerator	setPrePrologueSize(uint32_t)
OMR	CodeGenerator	setPreservedRegsInPrologue(class TR_BitVector *)
OMR	CodeGenerator	setRealVMThreadRegister(TR::RealRegister *)
OMR	CodeGenerator	setReferencedRegisterList(TR::list<OMR::RegisterUsage *> *)
OMR	CodeGenerator	setRegisterAssignmentFlag(enum TR_RegisterAssignmentFlagBits)
OMR	CodeGenerator	setRegisterSaveDescription(int32_t)
OMR	CodeGenerator	setRemoveRegisterHogsInLowerTreesWalk()
OMR	CodeGenerator	setRequiresCarry(_Bool)
OMR	CodeGenerator	setShouldBuildStructure()
OMR	CodeGenerator	setShrinkWrappingDone()
OMR	CodeGenerator	setSpilledRegisterList(TR::list<TR::Register *> *)
OMR	CodeGenerator	setSpilledRegsForAllPresentLinkages(class TR_BitVector *,struct OMR::CodeGenerator::TR_RegisterPressureSummary &,enum TR_SpillKinds)
OMR	CodeGenerator	setSpillsFPRegistersAcrossCalls()
OMR	CodeGenerator	setStackAtlas(TR::GCStackAtlas *)
OMR	CodeGenerator	setSupportsAlignedAccessOnly()
OMR	CodeGenerator	setSupportsArrayCmp()
OMR	CodeGenerator	setSupportsArrayCmpSign()
OMR	CodeGenerator	setSupportsArraySet()
OMR	CodeGenerator	setSupportsArrayTranslateAndTest()
OMR	CodeGenerator	setSupportsArrayTranslateTROT()
OMR	CodeGenerator	setSupportsArrayTranslateTROTNoBreak()
OMR	CodeGenerator	setSupportsArrayTranslateTRTO()
OMR	CodeGenerator	setSupportsArrayTranslateTRTO255()
OMR	CodeGenerator	setSupportsArrayTranslateTRxx()
OMR	CodeGenerator	setSupportsAtomicLoadAndAdd()
OMR	CodeGenerator	setSupportsAutoSIMD()
OMR	CodeGenerator	setSupportsBCDToDFPReduction()
OMR	CodeGenerator	setSupportsBDLLHardwareOverflowCheck()
OMR	CodeGenerator	setSupportsBigDecimalLongLookasideVersioning()
OMR	CodeGenerator	setSupportsCompactedLocals()
OMR	CodeGenerator	setSupportsConstantOffsetInAddressing()
OMR	CodeGenerator	setSupportsCurrentTimeMaxPrecision()
OMR	CodeGenerator	setSupportsDirectJNICalls()
OMR	CodeGenerator	setSupportsDivCheck()
OMR	CodeGenerator	setSupportsDoubleWordCAS()
OMR	CodeGenerator	setSupportsDoubleWordSet()
OMR	CodeGenerator	setSupportsEfficientNarrowIntComputation()
OMR	CodeGenerator	setSupportsEfficientNarrowUnsignedIntComputation()
OMR	CodeGenerator	setSupportsFastCTM()
OMR	CodeGenerator	setSupportsFastPackedDFPConversions()
OMR	CodeGenerator	setSupportsGlRegDepOnFirstBlock()
OMR	CodeGenerator	setSupportsGlRegDeps()
OMR	CodeGenerator	setSupportsIDivAndIRemWithThreeChildren()
OMR	CodeGenerator	setSupportsInlinedAtomicLongVolatiles()
OMR	CodeGenerator	setSupportsInliningOfTypeCoersionMethods()
OMR	CodeGenerator	setSupportsIntDFPConversions()
OMR	CodeGenerator	setSupportsJavaFloatSemantics()
OMR	CodeGenerator	setSupportsLDivAndLRemWithThreeChildren()
OMR	CodeGenerator	setSupportsLM()
OMR	CodeGenerator	setSupportsLoweringConstIDiv()
OMR	CodeGenerator	setSupportsLoweringConstLDiv()
OMR	CodeGenerator	setSupportsLoweringConstLDivPower2()
OMR	CodeGenerator	setSupportsMergedAllocations()
OMR	CodeGenerator	setSupportsNewInstanceImplOpt()
OMR	CodeGenerator	setSupportsPartialInlineOfMethodHooks()
OMR	CodeGenerator	setSupportsPostProcessArrayCopy()
OMR	CodeGenerator	setSupportsPrimitiveArrayCopy()
OMR	CodeGenerator	setSupportsProfiledInlining()
OMR	CodeGenerator	setSupportsReadOnlyLocks()
OMR	CodeGenerator	setSupportsReferenceArrayCopy()
OMR	CodeGenerator	setSupportsReverseLoadAndStore()
OMR	CodeGenerator	setSupportsRuntimeInstrumentation()
OMR	CodeGenerator	setSupportsScaledIndexAddressing()
OMR	CodeGenerator	setSupportsSearchCharString()
OMR	CodeGenerator	setSupportsShrinkWrapping()
OMR	CodeGenerator	setSupportsStackAllocationOfArraylets()
OMR	CodeGenerator	setSupportsTM()
OMR	CodeGenerator	setSupportsTMDoubleWordCASORSet()
OMR	CodeGenerator	setSupportsTMHashMapAndLinkedQueue()
OMR	CodeGenerator	setSupportsTestCharComparisonControl()
OMR	CodeGenerator	setSupportsTestUnderMask()
OMR	CodeGenerator	setSupportsTranslateAndTestCharString()
OMR	CodeGenerator	setSupportsVMThreadGRA()
OMR	CodeGenerator	setSupportsVectorRegisters()
OMR	CodeGenerator	setSupportsVirtualGuardNOPing()
OMR	CodeGenerator	setSupportsZonedDFPConversions()
OMR	CodeGenerator	setTrackingInMemoryKilledLoads()
OMR	CodeGenerator	setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &)
OMR	CodeGenerator	setUpForInstructionSelection()
OMR	CodeGenerator	setUpStackSizeForCallNode(TR::Node *)
OMR	CodeGenerator	setUseNonLinearRegisterAssigner()
OMR	CodeGenerator	setUsesLoadStoreMultiple()
OMR	CodeGenerator	setUsesRegisterMaps()
OMR	CodeGenerator	setUsesRegisterPairsForLongs()
OMR	CodeGenerator	setVMThreadRegister(TR::Register *)
OMR	CodeGenerator	setVMThreadRequired(_Bool)
OMR	CodeGenerator	setVMThreadSpillInstruction(TR::Instruction *)
OMR	CodeGenerator	shouldBuildStructure()
OMR	CodeGenerator	shouldValueBeInACommonedNode(int64_t)
OMR	CodeGenerator	shouldYankCompressedRefs()
OMR	CodeGenerator	shutdown(class TR_FrontEnd *,TR::FILE *)
OMR	CodeGenerator	simulateBlockEvaluation(TR::Block *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR	CodeGenerator	simulateDecReferenceCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	simulateMemoryReference(struct OMR::CodeGenerator::TR_SimulatedMemoryReference *,TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR	CodeGenerator	simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR	CodeGenerator	simulateNodeGoingDead(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	simulateNodeGoingLive(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	simulateNodeInitialization(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	simulateSkippedTreeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *,char)
OMR	CodeGenerator	simulateTreeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR	CodeGenerator	simulatedNodeState(TR::Node *)
OMR	CodeGenerator	simulatedNodeState(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	simulationPrePass(TR::TreeTop *,TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR	CodeGenerator	sizeOfInstructionToBePatched(TR::Instruction *)
OMR	CodeGenerator	sizeOfInstructionToBePatchedHCRGuard(TR::Instruction *)
OMR	CodeGenerator	spillsFPRegistersAcrossCalls()
OMR	CodeGenerator	splitBlockEntry(TR::Instruction *)
OMR	CodeGenerator	splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool)
OMR	CodeGenerator	startInternalControlFlow(TR::Instruction *)
OMR	CodeGenerator	startRecordingRegisterUsage()
OMR	CodeGenerator	startUsingRegister(TR::Register *)
OMR	CodeGenerator	stopRecordingRegisterUsage()
OMR	CodeGenerator	stopUsingRegister(TR::Register *)
OMR	CodeGenerator	storageMayOverlap(TR::Node *,size_t,TR::Node *,size_t)
OMR	CodeGenerator	supportVMInternalNatives()
OMR	CodeGenerator	supports32bitAiadd()
OMR	CodeGenerator	supportsAtomicAdd()
OMR	CodeGenerator	supportsComplexAddressing()
OMR	CodeGenerator	supportsDebugCounters(TR::DebugCounterInjectionPoint)
OMR	CodeGenerator	supportsDirectIntegralLoadStoresFromLiteralPool()
OMR	CodeGenerator	supportsDirectJNICallsForAOT()
OMR	CodeGenerator	supportsFastPackedDFPConversions()
OMR	CodeGenerator	supportsFusedMultiplyAdd()
OMR	CodeGenerator	supportsHighWordFacility()
OMR	CodeGenerator	supportsInliningOfIsInstance()
OMR	CodeGenerator	supportsIntDFPConversions()
OMR	CodeGenerator	supportsInternalPointers()
OMR	CodeGenerator	supportsLengthMinusOneForMemoryOpts()
OMR	CodeGenerator	supportsLongRegAllocation()
OMR	CodeGenerator	supportsMergingGuards()
OMR	CodeGenerator	supportsMethodEntryPadding()
OMR	CodeGenerator	supportsNativeLongOperations()
OMR	CodeGenerator	supportsNegativeFusedMultiplyAdd()
OMR	CodeGenerator	supportsOnDemandLiteralPool()
OMR	CodeGenerator	supportsPassThroughCopyToNewVirtualRegister()
OMR	CodeGenerator	supportsSinglePrecisionSQRT()
OMR	CodeGenerator	supportsTrapsInTMRegion()
OMR	CodeGenerator	supportsUnneededLabelRemoval()
OMR	CodeGenerator	supportsZonedDFPConversions()
OMR	CodeGenerator	suppressInliningOfRecognizedMethod(TR::RecognizedMethod)
OMR	CodeGenerator	symRefTab()
OMR	CodeGenerator	syncCode(uint8_t *,uint32_t)
OMR	CodeGenerator	terseSimulateTreeEvaluation()
OMR	CodeGenerator	testAnyRegisterAssignmentFlags(enum TR_RegisterAssignmentFlagBits)
OMR	CodeGenerator	toggleIsInOOLSection()
OMR	CodeGenerator	trHeapMemory()
OMR	CodeGenerator	trMemory()
OMR	CodeGenerator	trPersistentMemory()
OMR	CodeGenerator	trStackMemory()
OMR	CodeGenerator	traceBCDCodeGen()
OMR	CodeGenerator	traceBCDEntry(char *,TR::Node *)
OMR	CodeGenerator	traceBCDExit(char *,TR::Node *)
OMR	CodeGenerator	tracePostRAInstruction(TR::Instruction *)
OMR	CodeGenerator	tracePreRAInstruction(TR::Instruction *)
OMR	CodeGenerator	traceRAInstruction(TR::Instruction *)
OMR	CodeGenerator	traceRegAssigned(TR::Register *,TR::Register *,TR_RegisterAssignmentFlags)
OMR	CodeGenerator	traceRegAssigned(TR::Register *,TR::Register *)
OMR	CodeGenerator	traceRegFreed(TR::Register *,TR::Register *)
OMR	CodeGenerator	traceRegInterference(TR::Register *,TR::Register *,int32_t)
OMR	CodeGenerator	traceRegWeight(TR::Register *,uint32_t)
OMR	CodeGenerator	traceRegisterAssignment(const char *)
OMR	CodeGenerator	traceSimulateTreeEvaluation()
OMR	CodeGenerator	trackingInMemoryKilledLoads()
OMR	CodeGenerator	treeContainsCall(TR::TreeTop *)
OMR	CodeGenerator	uncommonCallConstNodes()
OMR	CodeGenerator	uniqueAddressOccurrence(TR::Node *,TR::Node *,_Bool)
OMR	CodeGenerator	unlockFreeSpillList()
OMR	CodeGenerator	updateSnippetMapWithRSD(TR::Instruction *,int32_t)
OMR	CodeGenerator	use64BitRegsOn32Bit()
OMR	CodeGenerator	useClobberEvaluate()
OMR	CodeGenerator	useOldArrayTranslateMinimumNumberOfIterations()
OMR	CodeGenerator	usesImplicit64BitGPRs(TR::Node *)
OMR	CodeGenerator	usesRegisterMaps()
OMR	CodeGenerator	usesRegisterPairsForLongs()
OMR	CodeGenerator	vrfCount(TR::DataType)
OMR	CodeGenerator	wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const TR::Node *)
OMR	CodeGenerator	wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const uint8_t *)
OMR	CodeGenerator	whichChildToEvaluate(TR::Node *)
OMR	CodeGenerator	whichNodeToEvaluate(TR::Node *,TR::Node *)
OMR	CodeGenerator	willBeEvaluatedAsCallByCodeGen(TR::Node *,TR::Compilation *)
OMR	CodeGenerator	yankIndexScalingOp()
OMR	CodeGenerator	zeroOutAutoOnEdge(TR::SymbolReference *,TR::Block *,TR::Block *,TR::list<TR::Block *> *,TR_ScratchList<TR::Node> *)
OMR	CodeGenerator	~CodeGenerator()
OMR	Compilation	AddCopyPropagationRematerializationCandidate(TR::SymbolReference *)
OMR	Compilation	Compilation(class OMR::Compilation &)
OMR	Compilation	Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *)
OMR	Compilation	IsCopyPropagationRematerializationCandidate(TR::SymbolReference *)
OMR	Compilation	RemoveCopyPropagationRematerializationCandidate(TR::SymbolReference *)
OMR	Compilation	addGenILSym(TR::ResolvedMethodSymbol *)
OMR	Compilation	addOwningMethod(TR::ResolvedMethodSymbol *)
OMR	Compilation	addPeekingArgInfo(struct TR_PeekingArgInfo *)
OMR	Compilation	addVirtualGuard(class TR_VirtualGuard *)
OMR	Compilation	adhocRandom()
OMR	Compilation	adjustInlineDepth(TR_ByteCodeInfo &)
OMR	Compilation	aliasRegion()
OMR	Compilation	allocateAtThisOptLevel()
OMR	Compilation	allocator(const char *)
OMR	Compilation	allowRecompilation()
OMR	Compilation	areSlotsSharedByRefAndNonRef()
OMR	Compilation	arenaAllocator()
OMR	Compilation	canAffordOSRControlFlow()
OMR	Compilation	canTransformUnsafeCopyToArrayCopy()
OMR	Compilation	canTransformUnsafeSetMemory()
OMR	Compilation	cannotAttemptOSRDuring(uint32_t)
OMR	Compilation	cg()
OMR	Compilation	compilationShouldBeInterrupted(enum TR_CallingContext)
OMR	Compilation	compile()
OMR	Compilation	compileRelocatableCode()
OMR	Compilation	containsBigDecimalLoad()
OMR	Compilation	convertNonDeterministicInput(int32_t,int32_t,class TR_RandomGenerator *,int32_t,_Bool)
OMR	Compilation	couldBeRecompiled()
OMR	Compilation	createAOTGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,enum TR_VirtualGuardKind)
OMR	Compilation	createAOTInliningGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,enum TR_VirtualGuardKind)
OMR	Compilation	createDevirtualizedCall(TR::Node *,class TR_OpaqueClassBlock *)
OMR	Compilation	createDummyGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *)
OMR	Compilation	createDummyOrSideEffectGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *)
OMR	Compilation	createJittedMethodSymbol(class TR_ResolvedMethod *)
OMR	Compilation	createSideEffectGuard(TR::Compilation *,TR::Node *,TR::TreeTop *)
OMR	Compilation	decInlineDepth(_Bool)
OMR	Compilation	diagnosticImpl(const char *)
OMR	Compilation	diagnosticImplVA(const char *,va_list)
OMR	Compilation	dumpFlowGraph(TR::CFG *)
OMR	Compilation	dumpMethodGraph(int,TR::ResolvedMethodSymbol *)
OMR	Compilation	dumpMethodTrees(char *,TR::ResolvedMethodSymbol *)
OMR	Compilation	dumpMethodTrees(char *,const char *,TR::ResolvedMethodSymbol *)
OMR	Compilation	externalName()
OMR	Compilation	fe()
OMR	Compilation	findDevirtualizedCall(TR::Node *)
OMR	Compilation	findExtraPrefetchInfo(TR::Node *,_Bool)
OMR	Compilation	findLastTree()
OMR	Compilation	findOrCreateDebug()
OMR	Compilation	findOrCreateDevirtualizedCall(TR::Node *,class TR_OpaqueClassBlock *)
OMR	Compilation	findPrefetchInfo(TR::Node *)
OMR	Compilation	findVirtualGuardInfo(TR::Node *)
OMR	Compilation	foundOnTheStack(class TR_ResolvedMethod *,int32_t)
OMR	Compilation	freeKnownObjectTable()
OMR	Compilation	generateAccurateNodeCount()
OMR	Compilation	generateArraylets()
OMR	Compilation	getAccurateNodeCount()
OMR	Compilation	getAddressEnumerationOption(enum TR_CompilationOptions)
OMR	Compilation	getAotMethodCodeStart()
OMR	Compilation	getBitVectorPool()
OMR	Compilation	getCheckcastNullChkInfo()
OMR	Compilation	getClassesThatShouldNotBeLoaded()
OMR	Compilation	getClassesThatShouldNotBeNewlyExtended()
OMR	Compilation	getCodeCacheSwitched()
OMR	Compilation	getCompThreadID()
OMR	Compilation	getCpuTimeSpentInCompilation()
OMR	Compilation	getCurrentBlock()
OMR	Compilation	getCurrentCodeCache()
OMR	Compilation	getCurrentIlGenerator()
OMR	Compilation	getCurrentInlinedCallArgInfo()
OMR	Compilation	getCurrentInlinedCallSite()
OMR	Compilation	getCurrentInlinedSiteIndex()
OMR	Compilation	getCurrentMethod()
OMR	Compilation	getCurrentPeekingArgInfo()
OMR	Compilation	getCurrentSymRefTab()
OMR	Compilation	getDebug()
OMR	Compilation	getErrorCode()
OMR	Compilation	getExtraPrefetchInfo()
OMR	Compilation	getFailCHTableCommit()
OMR	Compilation	getFirstDevirtualizedCall()
OMR	Compilation	getFlowGraph()
OMR	Compilation	getGPUBlockDimX()
OMR	Compilation	getGPUKernelLineNumberList()
OMR	Compilation	getGPUParms()
OMR	Compilation	getGPUPtxCount()
OMR	Compilation	getGPUPtxList()
OMR	Compilation	getGlobalRegisterCandidates()
OMR	Compilation	getHCRMode()
OMR	Compilation	getHasMethodHandleInvoke()
OMR	Compilation	getHotnessName(enum TR_Hotness)
OMR	Compilation	getHotnessName()
OMR	Compilation	getILValidator()
OMR	Compilation	getInlineDepth()
OMR	Compilation	getInlinedCallArgInfoStack()
OMR	Compilation	getInlinedCallSite(uint32_t)
OMR	Compilation	getInlinedCallStack()
OMR	Compilation	getInlinedCallerSymRef(uint32_t)
OMR	Compilation	getInlinedCalls()
OMR	Compilation	getInlinedResolvedMethod(uint32_t)
OMR	Compilation	getInlinedResolvedMethodSymbol(uint32_t)
OMR	Compilation	getJittedMethodSymbol()
OMR	Compilation	getKnownObjectTable()
OMR	Compilation	getLastBegunOptIndex()
OMR	Compilation	getLastPerformedOptIndex()
OMR	Compilation	getLastPerformedOptSubIndex()
OMR	Compilation	getLineNumber(TR::Node *)
OMR	Compilation	getLineNumberInCurrentMethod(TR::Node *)
OMR	Compilation	getLoopWasVersionedWrtAsyncChecks()
OMR	Compilation	getMaxAliasIndex()
OMR	Compilation	getMaxInlineDepth()
OMR	Compilation	getMaxPeekedBytecodeSize()
OMR	Compilation	getMethodFromNode(TR::Node *)
OMR	Compilation	getMethodHotness()
OMR	Compilation	getMethodSnippetsToBePatchedOnClassUnload()
OMR	Compilation	getMethodSymbol()
OMR	Compilation	getNextOptLevel()
OMR	Compilation	getNodeCount()
OMR	Compilation	getNodeOpCodeLength()
OMR	Compilation	getNodePool()
OMR	Compilation	getNodesThatShouldPrefetchOffset()
OMR	Compilation	getNumInlinedCallSites()
OMR	Compilation	getNumLivePendingPushSlots()
OMR	Compilation	getNumLoopNestingLevels()
OMR	Compilation	getNumReservedIPICTrampolines()
OMR	Compilation	getOSRCallSiteRemat(uint32_t,uint32_t,TR::SymbolReference *&,TR::SymbolReference *&)
OMR	Compilation	getOSRCallSiteRematSize(uint32_t)
OMR	Compilation	getOSRCompilationData()
OMR	Compilation	getOSRInductionOffset(TR::Node *)
OMR	Compilation	getOSRMode()
OMR	Compilation	getOSRTransitionTarget()
OMR	Compilation	getOptIndex()
OMR	Compilation	getOptLevel()
OMR	Compilation	getOptSubIndex()
OMR	Compilation	getOptimizationPlan()
OMR	Compilation	getOptimizer()
OMR	Compilation	getOption(enum TR_CompilationOptions)
OMR	Compilation	getOptions()
OMR	Compilation	getOrCreateKnownObjectTable()
OMR	Compilation	getOutFile()
OMR	Compilation	getOwningMethodSymbol(class mcount_t)
OMR	Compilation	getOwningMethodSymbol(class TR_ResolvedMethod *)
OMR	Compilation	getOwningMethodSymbol(class TR_OpaqueMethodBlock *)
OMR	Compilation	getPeekingArgInfo()
OMR	Compilation	getPeekingSymRefTab()
OMR	Compilation	getPersistentInfo()
OMR	Compilation	getPrevSymRefTabSize()
OMR	Compilation	getProfilingMode()
OMR	Compilation	getRecompilationInfo()
OMR	Compilation	getResolvedMethodSymbolReference(class mcount_t)
OMR	Compilation	getReturnInfo()
OMR	Compilation	getScratchSpaceLimit()
OMR	Compilation	getSnippetsToBePatchedOnClassRedefinition()
OMR	Compilation	getSnippetsToBePatchedOnClassUnload()
OMR	Compilation	getSnippetsToBePatchedOnRegisterNative()
OMR	Compilation	getStartBlock()
OMR	Compilation	getStartTree()
OMR	Compilation	getStaticHCRPICSites()
OMR	Compilation	getStaticMethodPICSites()
OMR	Compilation	getStaticPICSites()
OMR	Compilation	getSymRefCount()
OMR	Compilation	getSymRefTab()
OMR	Compilation	getSymbolReferenceByReferenceNumber(int32_t)
OMR	Compilation	getToCommentMap()
OMR	Compilation	getToNumberMap()
OMR	Compilation	getToStringMap()
OMR	Compilation	getUsesBlockFrequencyInGRA()
OMR	Compilation	getVerboseOptTransformationCount()
OMR	Compilation	getVirtualGuards()
OMR	Compilation	getVisitCount()
OMR	Compilation	hasBlockFrequencyInfo()
OMR	Compilation	hasClassExtendAssumptions()
OMR	Compilation	hasClassPreInitializeAssumptions()
OMR	Compilation	hasClassRedefinitionAssumptions()
OMR	Compilation	hasClassUnloadAssumptions()
OMR	Compilation	hasColdBlocks()
OMR	Compilation	hasLargeNumberOfLoops()
OMR	Compilation	hasMethodOverrideAssumptions()
OMR	Compilation	hasNativeCall()
OMR	Compilation	hasNews()
OMR	Compilation	hasUnsafeSymbol()
OMR	Compilation	haveCommittedCallSiteInfo()
OMR	Compilation	ilGenRequest()
OMR	Compilation	ilGenTrace()
OMR	Compilation	incGPUPtxCount()
OMR	Compilation	incInlineDepth(class TR_OpaqueMethodBlock *,TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *)
OMR	Compilation	incInlineDepth(TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,int32_t,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *)
OMR	Compilation	incInlinedCalls()
OMR	Compilation	incNumLivePendingPushSlots(int32_t)
OMR	Compilation	incNumLoopNestingLevels(int32_t)
OMR	Compilation	incOptIndex()
OMR	Compilation	incOptSubIndex()
OMR	Compilation	incOrResetVisitCount()
OMR	Compilation	incVerboseOptTransformationCount(int32_t)
OMR	Compilation	incVisitCount()
OMR	Compilation	incrNodeOpCodeLength(int32_t)
OMR	Compilation	invalidateAliasRegion()
OMR	Compilation	isCpuExpensiveCompilation(int64_t)
OMR	Compilation	isDLT()
OMR	Compilation	isDisabled(OMR::Optimizations)
OMR	Compilation	isGPUCompilation()
OMR	Compilation	isGPUCompileCPUCode()
OMR	Compilation	isInlinedDirectCall(uint32_t)
OMR	Compilation	isJProfilingCompilation()
OMR	Compilation	isLoopTransferDone()
OMR	Compilation	isOSRTransitionTarget(TR::OSRTransitionTarget)
OMR	Compilation	isOptServer()
OMR	Compilation	isOutermostMethod()
OMR	Compilation	isPICSite(TR::Instruction *)
OMR	Compilation	isPeekingMethod()
OMR	Compilation	isPotentialOSRPoint(TR::Node *,TR::Node **,_Bool)
OMR	Compilation	isPotentialOSRPointWithSupport(TR::TreeTop *)
OMR	Compilation	isProfilingCompilation()
OMR	Compilation	isRecompilationEnabled()
OMR	Compilation	isServerInlining()
OMR	Compilation	isShortRunningMethod(int32_t)
OMR	Compilation	isVirtualGuardNOPingRequired(class TR_VirtualGuard *)
OMR	Compilation	jitPersistentAlloc(size_t)
OMR	Compilation	jitPersistentFree(void *)
OMR	Compilation	matchingCallStackPrefixLength(TR_ByteCodeInfo &)
OMR	Compilation	maxInternalPointers()
OMR	Compilation	mayHaveLoops()
OMR	Compilation	mustNotBeRecompiled()
OMR	Compilation	notYetRunMeansCold()
OMR	Compilation	omrVMThread()
OMR	Compilation	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator delete(void *,TR::Region &)
OMR	Compilation	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator delete(void *,size_t)
OMR	Compilation	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator delete[](void *,TR::Region &)
OMR	Compilation	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new(size_t,TR_ArenaAllocator *)
OMR	Compilation	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Compilation	operator new(size_t,class TR_PersistentMemory *)
OMR	Compilation	operator new(size_t,TR::Region &)
OMR	Compilation	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Compilation	operator new[](size_t,class TR_PersistentMemory *)
OMR	Compilation	operator new[](size_t,TR::Region &)
OMR	Compilation	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	osrInfrastructureRemoved()
OMR	Compilation	osrStateIsReliable()
OMR	Compilation	penalizePredsOfOSRCatchBlocksInGRA()
OMR	Compilation	pendingPushLivenessDuringIlgen()
OMR	Compilation	performOptimizations()
OMR	Compilation	performVirtualGuardNOPing()
OMR	Compilation	phaseMemProfiler()
OMR	Compilation	phaseTimer()
OMR	Compilation	primaryRandom()
OMR	Compilation	recordBegunOpt()
OMR	Compilation	recordPerformedOptTransformation()
OMR	Compilation	region()
OMR	Compilation	registerResolvedMethodSymbolReference(TR::SymbolReference *)
OMR	Compilation	removeExtraPrefetchInfo(TR::Node *)
OMR	Compilation	removePeekingArgInfo()
OMR	Compilation	removeVirtualGuard(class TR_VirtualGuard *)
OMR	Compilation	reportAnalysisPhase(uint8_t)
OMR	Compilation	reportFailure(const char *)
OMR	Compilation	reportILGeneratorPhase()
OMR	Compilation	reportOptimizationPhase(OMR::Optimizations)
OMR	Compilation	reportOptimizationPhaseForSnap(OMR::Optimizations)
OMR	Compilation	requiresAnalysisOSRPoint(TR::Node *)
OMR	Compilation	requiresSpineChecks()
OMR	Compilation	resetInlineDepth()
OMR	Compilation	resetVisitCounts(vcount_t,TR::ResolvedMethodSymbol *)
OMR	Compilation	resetVisitCounts(vcount_t)
OMR	Compilation	resetVisitCounts(vcount_t,TR::TreeTop *)
OMR	Compilation	restoreCompilationPhase(OMR::Compilation::CompilationPhase)
OMR	Compilation	restoreInlineDepth(TR_ByteCodeInfo &)
OMR	Compilation	restoreInlineDepthUntil(int32_t,TR_ByteCodeInfo &)
OMR	Compilation	saveCompilationPhase()
OMR	Compilation	self()
OMR	Compilation	setAllocatorName(const char *)
OMR	Compilation	setAotMethodCodeStart(void *)
OMR	Compilation	setCanAffordOSRControlFlow(_Bool)
OMR	Compilation	setCannotAttemptOSRDuring(uint32_t,_Bool)
OMR	Compilation	setCommittedCallSiteInfo(_Bool)
OMR	Compilation	setContainsBigDecimalLoad(_Bool)
OMR	Compilation	setCurrentBlock(TR::Block *)
OMR	Compilation	setCurrentCodeCache(TR::CodeCache *)
OMR	Compilation	setCurrentIlGenerator(class TR_IlGenerator *)
OMR	Compilation	setCurrentSymRefTab(TR::SymbolReferenceTable *)
OMR	Compilation	setDebug(class TR_Debug *)
OMR	Compilation	setErrorCode(int32_t)
OMR	Compilation	setFailCHTableCommit(_Bool)
OMR	Compilation	setGPUBlockDimX(int32_t)
OMR	Compilation	setGPUParms(void *)
OMR	Compilation	setGlobalRegisterCandidates(class TR_RegisterCandidates *)
OMR	Compilation	setHasClassExtendAssumptions(_Bool)
OMR	Compilation	setHasClassPreInitializeAssumptions(_Bool)
OMR	Compilation	setHasClassRedefinitionAssumptions(_Bool)
OMR	Compilation	setHasClassUnloadAssumptions(_Bool)
OMR	Compilation	setHasColdBlocks()
OMR	Compilation	setHasMethodHandleInvoke()
OMR	Compilation	setHasMethodOverrideAssumptions(_Bool)
OMR	Compilation	setHasNativeCall()
OMR	Compilation	setHasUnsafeSymbol()
OMR	Compilation	setILValidator(TR::ILValidator *)
OMR	Compilation	setIlVerifier(TR::IlVerifier *)
OMR	Compilation	setLoopTransferDone()
OMR	Compilation	setLoopWasVersionedWrtAsyncChecks(_Bool)
OMR	Compilation	setNextOptLevel(enum TR_Hotness)
OMR	Compilation	setNodeOpCodeLength(int32_t)
OMR	Compilation	setNumReservedIPICTrampolines(int32_t)
OMR	Compilation	setOSRCallSiteRemat(uint32_t,TR::SymbolReference *,TR::SymbolReference *)
OMR	Compilation	setOSRInfrastructureRemoved(_Bool)
OMR	Compilation	setOptIndex(int16_t)
OMR	Compilation	setOptimizationPlan(class TR_OptimizationPlan *)
OMR	Compilation	setOptimizer(TR::Optimizer *)
OMR	Compilation	setOption(enum TR_CompilationOptions)
OMR	Compilation	setOsrStateIsReliable(_Bool)
OMR	Compilation	setOutFile(TR::FILE *)
OMR	Compilation	setPeekingSymRefTab(TR::SymbolReferenceTable *)
OMR	Compilation	setPrevSymRefTabSize(int32_t)
OMR	Compilation	setRecompilationInfo(TR::Recompilation *)
OMR	Compilation	setReturnInfo(enum TR_ReturnInfo)
OMR	Compilation	setScratchSpaceLimit(size_t)
OMR	Compilation	setSeenClassPreventingInducedOSR()
OMR	Compilation	setSlotsSharedByRefAndNonRef(_Bool)
OMR	Compilation	setStartTree(TR::TreeTop *)
OMR	Compilation	setSupressEarlyInlining(_Bool)
OMR	Compilation	setSyncsMarked()
OMR	Compilation	setUseLongRegAllocation(_Bool)
OMR	Compilation	setUsesBlockFrequencyInGRA()
OMR	Compilation	setUsesPreexistence(_Bool)
OMR	Compilation	setVisitCount(vcount_t)
OMR	Compilation	shouldBeRecompiled()
OMR	Compilation	shutdown(class TR_FrontEnd *)
OMR	Compilation	signature()
OMR	Compilation	supportsInduceOSR()
OMR	Compilation	suppressAllocationInlining()
OMR	Compilation	supressEarlyInlining()
OMR	Compilation	switchCodeCache(TR::CodeCache *)
OMR	Compilation	syncsMarked()
OMR	Compilation	trHeapMemory()
OMR	Compilation	trMemory()
OMR	Compilation	trPersistentMemory()
OMR	Compilation	trStackMemory()
OMR	Compilation	trace(OMR::Optimizations)
OMR	Compilation	useAnchors()
OMR	Compilation	useCompressedPointers()
OMR	Compilation	useLongRegAllocation()
OMR	Compilation	useRegisterMaps()
OMR	Compilation	usesPreexistence()
OMR	Compilation	validateIL(TR::ILValidationContext)
OMR	Compilation	verifyBlocks(TR::ResolvedMethodSymbol *)
OMR	Compilation	verifyCFG(TR::ResolvedMethodSymbol *)
OMR	Compilation	verifyTrees(TR::ResolvedMethodSymbol *)
OMR	Compilation	~Compilation()
OMR	Compilation	getMetadataAssumptionList()
OMR	Compilation	hasIntStreamForEach()
OMR	Compilation	restoreCompilationPhase(CompilationPhase)
OMR	Compilation	setHasIntStreamForEach()
OMR	Compilation	setMetadataAssumptionList(OMR::RuntimeAssumption *)
OMR	CompilerEnv	CompilerEnv(class OMR::CompilerEnv &&)
OMR	CompilerEnv	CompilerEnv(TR::RawAllocator,const TR::PersistentAllocatorKit &)
OMR	CompilerEnv	CompilerEnv(const class OMR::CompilerEnv &)
OMR	CompilerEnv	initialize()
OMR	CompilerEnv	initializeHostEnvironment()
OMR	CompilerEnv	initializeTargetEnvironment()
OMR	CompilerEnv	isInitialized()
OMR	CompilerEnv	operator=(const class OMR::CompilerEnv &)
OMR	CompilerEnv	operator=(class OMR::CompilerEnv &&)
OMR	CompilerEnv	persistentAllocator()
OMR	CompilerEnv	self()
OMR	CompilerEnv	~CompilerEnv()
OMR	DataType	DataType(class OMR::DataType &&)
OMR	DataType	DataType()
OMR	DataType	DataType(TR::DataTypes)
OMR	DataType	DataType(const class OMR::DataType &)
OMR	DataType	canGetMaxPrecisionFromType()
OMR	DataType	getDataType()
OMR	DataType	getDataTypeConversion(TR::DataType,TR::DataType)
OMR	DataType	getFloatTypeFromSize(int32_t)
OMR	DataType	getIntegralTypeFromPrecision(int32_t)
OMR	DataType	getMaxPrecisionFromType()
OMR	DataType	getName(TR::DataType)
OMR	DataType	getPrefix(TR::DataType)
OMR	DataType	getSize(TR::DataType)
OMR	DataType	getVectorElementType()
OMR	DataType	getVectorIntegralType()
OMR	DataType	isAddress()
OMR	DataType	isAggregate()
OMR	DataType	isBFPorHFP()
OMR	DataType	isDouble()
OMR	DataType	isFloatingPoint()
OMR	DataType	isInt16()
OMR	DataType	isInt32()
OMR	DataType	isInt64()
OMR	DataType	isInt8()
OMR	DataType	isIntegral()
OMR	DataType	isVector()
OMR	DataType	operator int()
OMR	DataType	operator!=(TR::DataTypes)
OMR	DataType	operator!=(const TR::DataType &)
OMR	DataType	operator<(TR::DataTypes)
OMR	DataType	operator<(const TR::DataType &)
OMR	DataType	operator<=(const TR::DataType &)
OMR	DataType	operator<=(TR::DataTypes)
OMR	DataType	operator=(class OMR::DataType &&)
OMR	DataType	operator=(TR::DataTypes)
OMR	DataType	operator=(const TR::DataType &)
OMR	DataType	operator=(const class OMR::DataType &)
OMR	DataType	operator==(TR::DataTypes)
OMR	DataType	operator==(const TR::DataType &)
OMR	DataType	operator>(TR::DataTypes)
OMR	DataType	operator>(const TR::DataType &)
OMR	DataType	operator>=(TR::DataTypes)
OMR	DataType	operator>=(const TR::DataType &)
OMR	DataType	scalarToVector()
OMR	DataType	self()
OMR	DataType	setSize(TR::DataType,int32_t)
OMR	DataType	toString()
OMR	DataType	vectorToScalar()
OMR	DataType	~DataType()
OMR	DebugEnv	DebugEnv()
OMR	DebugEnv	DebugEnv(const class OMR::DebugEnv &)
OMR	DebugEnv	DebugEnv(class OMR::DebugEnv &&)
OMR	DebugEnv	breakPoint()
OMR	DebugEnv	codeByteColumnWidth()
OMR	DebugEnv	extraAssertMessage(TR::Compilation *)
OMR	DebugEnv	hexAddressFieldWidthInChars()
OMR	DebugEnv	hexAddressWidthInChars()
OMR	DebugEnv	operator=(const class OMR::DebugEnv &)
OMR	DebugEnv	operator=(class OMR::DebugEnv &&)
OMR	DebugEnv	pointerPrintfMaxLenInChars()
OMR	DebugEnv	~DebugEnv()
OMR	GCStackAtlas	GCStackAtlas(const class OMR::GCStackAtlas &)
OMR	GCStackAtlas	GCStackAtlas(uint32_t,uint32_t,class TR_Memory *)
OMR	GCStackAtlas	GCStackAtlas(class OMR::GCStackAtlas &&)
OMR	GCStackAtlas	addPinningArrayPtrForInternalPtrReg(TR::AutomaticSymbol *)
OMR	GCStackAtlas	addStackMap(class TR_GCStackMap *)
OMR	GCStackAtlas	assignGCIndex()
OMR	GCStackAtlas	close(TR::CodeGenerator *)
OMR	GCStackAtlas	decNumberOfMaps()
OMR	GCStackAtlas	getAtlasBits()
OMR	GCStackAtlas	getIndexOfFirstInternalPointer()
OMR	GCStackAtlas	getIndexOfFirstSpillTemp()
OMR	GCStackAtlas	getInternalPointerMap()
OMR	GCStackAtlas	getLocalBaseOffset()
OMR	GCStackAtlas	getLocalMap()
OMR	GCStackAtlas	getNumberOfDistinctPinningArrays()
OMR	GCStackAtlas	getNumberOfLocalSlotsMapped()
OMR	GCStackAtlas	getNumberOfMaps()
OMR	GCStackAtlas	getNumberOfParmSlotsMapped()
OMR	GCStackAtlas	getNumberOfPendingPushSlots()
OMR	GCStackAtlas	getNumberOfSlotsMapped()
OMR	GCStackAtlas	getNumberOfSlotsToBeInitialized()
OMR	GCStackAtlas	getOffsetOfFirstInternalPointer()
OMR	GCStackAtlas	getParameterMap()
OMR	GCStackAtlas	getParmBaseOffset()
OMR	GCStackAtlas	getPinningArrayPtrsForInternalPtrRegs()
OMR	GCStackAtlas	getStackAllocMap()
OMR	GCStackAtlas	getStackMapList()
OMR	GCStackAtlas	hasUninitializedPinningArrayPointer()
OMR	GCStackAtlas	jitPersistentAlloc(size_t)
OMR	GCStackAtlas	jitPersistentFree(void *)
OMR	GCStackAtlas	operator delete(void *,TR::Region &)
OMR	GCStackAtlas	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator delete(void *,size_t)
OMR	GCStackAtlas	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator delete[](void *,TR::Region &)
OMR	GCStackAtlas	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator new(size_t,TR::Region &)
OMR	GCStackAtlas	operator new(size_t,class TR_PersistentMemory *)
OMR	GCStackAtlas	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new(size_t,TR::Internal::PersistentNewType)
OMR	GCStackAtlas	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new(size_t,TR_ArenaAllocator *)
OMR	GCStackAtlas	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator new[](size_t,class TR_PersistentMemory *)
OMR	GCStackAtlas	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	GCStackAtlas	operator new[](size_t,TR::Region &)
OMR	GCStackAtlas	removePinningArrayPtrForInternalPtrReg(TR::AutomaticSymbol *)
OMR	GCStackAtlas	self()
OMR	GCStackAtlas	setAtlasBits(uint8_t *)
OMR	GCStackAtlas	setHasUninitializedPinningArrayPointer(_Bool)
OMR	GCStackAtlas	setIndexOfFirstInternalPointer(int32_t)
OMR	GCStackAtlas	setIndexOfFirstSpillTemp(uint32_t)
OMR	GCStackAtlas	setInternalPointerMap(class TR_InternalPointerMap *)
OMR	GCStackAtlas	setLocalBaseOffset(int32_t)
OMR	GCStackAtlas	setLocalMap(class TR_GCStackMap *)
OMR	GCStackAtlas	setNumberOfMaps(uint32_t)
OMR	GCStackAtlas	setNumberOfPendingPushSlots(uint32_t)
OMR	GCStackAtlas	setNumberOfSlotsMapped(uint32_t)
OMR	GCStackAtlas	setNumberOfSlotsToBeInitialized(uint32_t)
OMR	GCStackAtlas	setOffsetOfFirstInternalPointer(int32_t)
OMR	GCStackAtlas	setParameterMap(class TR_GCStackMap *)
OMR	GCStackAtlas	setParmBaseOffset(int32_t)
OMR	GCStackAtlas	setStackAllocMap(class TR_GCStackAllocMap *)
OMR	GCStackAtlas	trMemory()
OMR	GCStackAtlas	~GCStackAtlas()
OMR	GCStackAtlas	getNumberOfPaddingSlots()
OMR	GCStackAtlas	setNumberOfPaddingSlots(uint32_t)
OMR	IL	IL(class OMR::IL &&)
OMR	IL	IL(const class OMR::IL &)
OMR	IL	opCodeForCompareEquals(TR::DataType)
OMR	IL	opCodeForCompareGreaterOrEquals(TR::DataType)
OMR	IL	opCodeForCompareGreaterThan(TR::DataType)
OMR	IL	opCodeForCompareLessOrEquals(TR::DataType)
OMR	IL	opCodeForCompareLessThan(TR::DataType)
OMR	IL	opCodeForCompareNotEquals(TR::DataType)
OMR	IL	opCodeForConst(TR::DataType)
OMR	IL	opCodeForCorrespondingIndirectLoad(TR::ILOpCodes)
OMR	IL	opCodeForCorrespondingIndirectStore(TR::ILOpCodes)
OMR	IL	opCodeForDirectLoad(TR::DataType)
OMR	IL	opCodeForDirectStore(TR::DataType)
OMR	IL	opCodeForIfCompareEquals(TR::DataType)
OMR	IL	opCodeForIfCompareGreaterOrEquals(TR::DataType)
OMR	IL	opCodeForIfCompareGreaterThan(TR::DataType)
OMR	IL	opCodeForIfCompareLessOrEquals(TR::DataType)
OMR	IL	opCodeForIfCompareLessThan(TR::DataType)
OMR	IL	opCodeForIfCompareNotEquals(TR::DataType)
OMR	IL	opCodeForIndirectArrayLoad(TR::DataType)
OMR	IL	opCodeForIndirectArrayStore(TR::DataType)
OMR	IL	opCodeForIndirectLoad(TR::DataType)
OMR	IL	opCodeForIndirectStore(TR::DataType)
OMR	IL	opCodeForRegisterLoad(TR::DataType)
OMR	IL	opCodeForRegisterStore(TR::DataType)
OMR	IL	~IL()
OMR	IL	IL()
OMR	IO	fclose(TR::FILE *)
OMR	IO	fflush(TR::FILE *)
OMR	IO	fopen(char *,const char *,_Bool)
OMR	IO	fprintf(TR::FILE *,const char *)
OMR	IO	fseek(TR::FILE *,intptr_t,int32_t)
OMR	IO	ftell(TR::FILE *)
OMR	IO	printf(const char *)
OMR	IO	vfprintf(TR::FILE *,const char *,va_list)
OMR	Instruction	Instruction(class OMR::Instruction &&)
OMR	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR	Instruction	Instruction(const class OMR::Instruction &)
OMR	Instruction	Instruction()
OMR	Instruction	assignRegisters(enum TR_RegisterKinds)
OMR	Instruction	cg()
OMR	Instruction	defsRegister(TR::Register *)
OMR	Instruction	dependencyRefsRegister(TR::Register *)
OMR	Instruction	estimateBinaryLength(int32_t)
OMR	Instruction	generateBinaryEncoding()
OMR	Instruction	getBinaryEncoding()
OMR	Instruction	getBinaryLength()
OMR	Instruction	getBinaryLengthLowerBound()
OMR	Instruction	getEstimatedBinaryLength()
OMR	Instruction	getGCMap()
OMR	Instruction	getGCRegisterMask()
OMR	Instruction	getIndex()
OMR	Instruction	getKind()
OMR	Instruction	getLabelSymbol()
OMR	Instruction	getLiveLocals()
OMR	Instruction	getLiveMonitors()
OMR	Instruction	getMaxPatchableInstructionLength()
OMR	Instruction	getNext()
OMR	Instruction	getNode()
OMR	Instruction	getOpCode()
OMR	Instruction	getOpCodeValue()
OMR	Instruction	getPrev()
OMR	Instruction	getRegisterSaveDescription()
OMR	Instruction	getSnippetForGC()
OMR	Instruction	isMergeableGuard()
OMR	Instruction	isPatchBarrier()
OMR	Instruction	isVirtualGuardNOPInstruction()
OMR	Instruction	jitPersistentAlloc(size_t)
OMR	Instruction	jitPersistentFree(void *)
OMR	Instruction	move(TR::Instruction *)
OMR	Instruction	needsAOTRelocation()
OMR	Instruction	needsGCMap()
OMR	Instruction	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Instruction	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator delete(void *,TR::Region &)
OMR	Instruction	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator delete(void *,size_t)
OMR	Instruction	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Instruction	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator delete[](void *,TR::Region &)
OMR	Instruction	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator new(size_t,TR::Region &)
OMR	Instruction	operator new(size_t,TR_ArenaAllocator *)
OMR	Instruction	operator new(size_t,class TR_PersistentMemory *)
OMR	Instruction	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Instruction	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Instruction	operator new[](size_t,class TR_PersistentMemory *)
OMR	Instruction	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Instruction	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Instruction	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Instruction	operator new[](size_t,TR::Region &)
OMR	Instruction	operator=(const class OMR::Instruction &)
OMR	Instruction	operator=(class OMR::Instruction &&)
OMR	Instruction	refsRegister(TR::Register *)
OMR	Instruction	remove()
OMR	Instruction	requiresAtomicPatching()
OMR	Instruction	self()
OMR	Instruction	setBinaryEncoding(uint8_t *)
OMR	Instruction	setBinaryLength(uint8_t)
OMR	Instruction	setEstimatedBinaryLength(uint8_t)
OMR	Instruction	setGCMap(class TR_GCStackMap *)
OMR	Instruction	setIndex(OMR::Instruction::TIndex)
OMR	Instruction	setLiveLocals(class TR_BitVector *)
OMR	Instruction	setLiveMonitors(class TR_BitVector *)
OMR	Instruction	setNeedsAOTRelocation(_Bool)
OMR	Instruction	setNeedsGCMap(OMR::Instruction::TCollectableReferenceMask)
OMR	Instruction	setNext(TR::Instruction *)
OMR	Instruction	setNode(TR::Node *)
OMR	Instruction	setOpCodeValue(TR::class InstOpCode::Mnemonic)
OMR	Instruction	setPrev(TR::Instruction *)
OMR	Instruction	setRegisterSaveDescription(int32_t)
OMR	Instruction	useRegister(TR::Register *)
OMR	Instruction	usesRegister(TR::Register *)
OMR	Instruction	~Instruction()
OMR	Instruction	setIndex(TIndex)
OMR	Instruction	setNeedsGCMap(TCollectableReferenceMask)
OMR	KnownObjectTable	KnownObjectTable(const class OMR::KnownObjectTable &)
OMR	KnownObjectTable	KnownObjectTable(class OMR::KnownObjectTable &&)
OMR	KnownObjectTable	KnownObjectTable(TR::Compilation *)
OMR	KnownObjectTable	addArrayWithConstantElements(OMR::KnownObjectTable::Index)
OMR	KnownObjectTable	comp()
OMR	KnownObjectTable	dumpTo(TR::FILE *,TR::Compilation *)
OMR	KnownObjectTable	fe()
OMR	KnownObjectTable	getEndIndex()
OMR	KnownObjectTable	getExistingIndexAt(uintptrj_t *)
OMR	KnownObjectTable	getIndex(uintptrj_t)
OMR	KnownObjectTable	getIndex(uintptrj_t,_Bool)
OMR	KnownObjectTable	getIndexAt(uintptrj_t *)
OMR	KnownObjectTable	getIndexAt(uintptrj_t *,_Bool)
OMR	KnownObjectTable	getPointer(OMR::KnownObjectTable::Index)
OMR	KnownObjectTable	getPointerLocation(OMR::KnownObjectTable::Index)
OMR	KnownObjectTable	getfPointerLocationAt(uintptrj_t *)
OMR	KnownObjectTable	isArrayWithConstantElements(OMR::KnownObjectTable::Index)
OMR	KnownObjectTable	isNull(OMR::KnownObjectTable::Index)
OMR	KnownObjectTable	operator=(class OMR::KnownObjectTable &&)
OMR	KnownObjectTable	operator=(const class OMR::KnownObjectTable &)
OMR	KnownObjectTable	self()
OMR	KnownObjectTable	setComp(TR::Compilation *)
OMR	KnownObjectTable	setFe(class TR_FrontEnd *)
OMR	KnownObjectTable	~KnownObjectTable()
OMR	KnownObjectTable	addArrayWithConstantElements(Index)
OMR	KnownObjectTable	getPointer(Index)
OMR	KnownObjectTable	getPointerLocation(Index)
OMR	KnownObjectTable	isArrayWithConstantElements(Index)
OMR	KnownObjectTable	isNull(Index)
OMR	LabelSymbol	LabelSymbol(class OMR::LabelSymbol &&)
OMR	LabelSymbol	LabelSymbol(TR::CodeGenerator *)
OMR	LabelSymbol	LabelSymbol()
OMR	LabelSymbol	LabelSymbol(const class OMR::LabelSymbol &)
OMR	LabelSymbol	LabelSymbol(TR::CodeGenerator *,TR::Block *)
OMR	LabelSymbol	getCodeLocation()
OMR	LabelSymbol	getDistance()
OMR	LabelSymbol	getEstimatedCodeLocation()
OMR	LabelSymbol	getInstruction()
OMR	LabelSymbol	getName(class TR_Debug *)
OMR	LabelSymbol	getSnippet()
OMR	LabelSymbol	isTargeted()
OMR	LabelSymbol	makeRelativeLabelSymbol(intptr_t)
OMR	LabelSymbol	operator=(const class OMR::LabelSymbol &)
OMR	LabelSymbol	operator=(class OMR::LabelSymbol &&)
OMR	LabelSymbol	self()
OMR	LabelSymbol	setCodeLocation(uint8_t *)
OMR	LabelSymbol	setDirectlyTargeted()
OMR	LabelSymbol	setEstimatedCodeLocation(int32_t)
OMR	LabelSymbol	setInstruction(TR::Instruction *)
OMR	LabelSymbol	setSnippet(TR::Snippet *)
OMR	LabelSymbol	~LabelSymbol()
OMR	Machine	Machine(class OMR::Machine &&)
OMR	Machine	Machine(const class OMR::Machine &)
OMR	Machine	Machine()
OMR	Machine	Machine(TR::CodeGenerator *,uint8_t,uint8_t,uint8_t)
OMR	Machine	cg()
OMR	Machine	getFirstGlobalRegisterNumber(enum TR_RegisterKinds)
OMR	Machine	getLastGlobalRegisterNumber()
OMR	Machine	getLastGlobalRegisterNumber(enum TR_RegisterKinds)
OMR	Machine	getLastRealRegisterGlobalRegisterNumber()
OMR	Machine	getNextGlobalRegisterNumber()
OMR	Machine	getNumberOfFPRs()
OMR	Machine	getNumberOfGPRs()
OMR	Machine	getNumberOfRegisters(enum TR_RegisterKinds)
OMR	Machine	getRealRegister(TR_GlobalRegisterNumber)
OMR	Machine	jitPersistentAlloc(size_t)
OMR	Machine	jitPersistentFree(void *)
OMR	Machine	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator delete(void *,size_t)
OMR	Machine	operator delete(void *,TR::Region &)
OMR	Machine	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Machine	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Machine	operator delete[](void *,TR::Region &)
OMR	Machine	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Machine	operator new(size_t,class TR_PersistentMemory *)
OMR	Machine	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Machine	operator new(size_t,TR_ArenaAllocator *)
OMR	Machine	operator new(size_t,TR::Region &)
OMR	Machine	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Machine	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Machine	operator new[](size_t,class TR_PersistentMemory *)
OMR	Machine	operator new[](size_t,TR::Region &)
OMR	Machine	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Machine	operator=(const class OMR::Machine &)
OMR	Machine	operator=(class OMR::Machine &&)
OMR	Machine	self()
OMR	Machine	setFirstGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber)
OMR	Machine	setLastGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber)
OMR	Machine	setLastRealRegisterGlobalRegisterNumber(TR_GlobalRegisterNumber)
OMR	Machine	setNumberOfFPRs(uint8_t)
OMR	Machine	setNumberOfGPRs(uint8_t)
OMR	Machine	setNumberOfRegisters(enum TR_RegisterKinds,uint8_t)
OMR	Machine	~Machine()
OMR	Machine	Machine(uint8_t,uint8_t,uint8_t)
OMR	MethodSymbol	MethodSymbol(class OMR::MethodSymbol &&)
OMR	MethodSymbol	MethodSymbol(const class OMR::MethodSymbol &)
OMR	MethodSymbol	MethodSymbol(enum TR_LinkageConventions,class TR_Method *)
OMR	MethodSymbol	firstArgumentIsReceiver()
OMR	MethodSymbol	getLinkageConvention()
OMR	MethodSymbol	getMandatoryRecognizedMethod()
OMR	MethodSymbol	getMethod()
OMR	MethodSymbol	getMethodAddress()
OMR	MethodSymbol	getMethodKind()
OMR	MethodSymbol	getRecognizedMethod()
OMR	MethodSymbol	hasVeryRefinedAliasSets()
OMR	MethodSymbol	isComputed()
OMR	MethodSymbol	isComputedStatic()
OMR	MethodSymbol	isComputedVirtual()
OMR	MethodSymbol	isEHAware()
OMR	MethodSymbol	isHelper()
OMR	MethodSymbol	isInlinedByCG()
OMR	MethodSymbol	isInterface()
OMR	MethodSymbol	isInterpreted()
OMR	MethodSymbol	isJITInternalNative()
OMR	MethodSymbol	isJNI()
OMR	MethodSymbol	isNative()
OMR	MethodSymbol	isNonReturning()
OMR	MethodSymbol	isPureFunction()
OMR	MethodSymbol	isSpecial()
OMR	MethodSymbol	isStatic()
OMR	MethodSymbol	isSynchronised()
OMR	MethodSymbol	isSystemLinkageDispatch()
OMR	MethodSymbol	isVMInternalNative()
OMR	MethodSymbol	isVirtual()
OMR	MethodSymbol	operator=(class OMR::MethodSymbol &&)
OMR	MethodSymbol	operator=(const class OMR::MethodSymbol &)
OMR	MethodSymbol	preservesAllRegisters()
OMR	MethodSymbol	safeToSkipArrayStoreChecks()
OMR	MethodSymbol	safeToSkipBoundChecks()
OMR	MethodSymbol	safeToSkipCheckCasts()
OMR	MethodSymbol	safeToSkipChecksOnArrayCopies()
OMR	MethodSymbol	safeToSkipDivChecks()
OMR	MethodSymbol	safeToSkipNullChecks()
OMR	MethodSymbol	safeToSkipZeroInitializationOnNewarrays()
OMR	MethodSymbol	self()
OMR	MethodSymbol	setEHAware()
OMR	MethodSymbol	setHasVeryRefinedAliasSets(_Bool)
OMR	MethodSymbol	setHelper()
OMR	MethodSymbol	setInterface()
OMR	MethodSymbol	setInterpreted(_Bool)
OMR	MethodSymbol	setIsInlinedByCG()
OMR	MethodSymbol	setJITInternalNative(_Bool)
OMR	MethodSymbol	setJNI()
OMR	MethodSymbol	setLinkage(enum TR_LinkageConventions)
OMR	MethodSymbol	setMethod(class TR_Method *)
OMR	MethodSymbol	setMethodAddress(void *)
OMR	MethodSymbol	setMethodKind(int32_t)
OMR	MethodSymbol	setNonReturning()
OMR	MethodSymbol	setPreservesAllRegisters()
OMR	MethodSymbol	setSpecial()
OMR	MethodSymbol	setStatic()
OMR	MethodSymbol	setSynchronised()
OMR	MethodSymbol	setSystemLinkageDispatch()
OMR	MethodSymbol	setTreatAsAlwaysExpandBIF(_Bool)
OMR	MethodSymbol	setUnsynchronised()
OMR	MethodSymbol	setVMInternalNative(_Bool)
OMR	MethodSymbol	setVirtual()
OMR	MethodSymbol	treatAsAlwaysExpandBIF()
OMR	MethodSymbol	~MethodSymbol()
OMR	Node	Node()
OMR	Node	Node(const class OMR::Node &)
OMR	Node	Node(TR::Node *,TR::ILOpCodes,uint16_t)
OMR	Node	Node(TR::Node *,uint16_t)
OMR	Node	aconst(uintptrj_t)
OMR	Node	aconst(TR::Node *,uintptrj_t,uint8_t)
OMR	Node	aconst(TR::Node *,uintptrj_t)
OMR	Node	addChildren(TR::Node **,uint16_t)
OMR	Node	addChildrenAndSymRef(uint16_t,TR::Node *)
OMR	Node	addChildrenAndSymRef(uint16_t,TR::SymbolReference *)
OMR	Node	addExtensionElements(uint16_t)
OMR	Node	addressPointsAtObject()
OMR	Node	anchorConstChildren()
OMR	Node	bconst(TR::Node *,int8_t)
OMR	Node	bconst(int8_t)
OMR	Node	buconst(TR::Node *,uint8_t)
OMR	Node	buconst(uint8_t)
OMR	Node	canCauseGC()
OMR	Node	canCheckReferenceIsNonNull()
OMR	Node	canChkNodeCreatedByPRE()
OMR	Node	canDesynchronizeCall()
OMR	Node	canEvaluate()
OMR	Node	canGCandExcept()
OMR	Node	canGCandReturn()
OMR	Node	canGet32bitIntegralValue()
OMR	Node	canGet64bitIntegralValue()
OMR	Node	canOmitSync()
OMR	Node	canSkipSync()
OMR	Node	canSkipZeroInitialization()
OMR	Node	cannotOverflow()
OMR	Node	cannotTrackLocalStringUses()
OMR	Node	cannotTrackLocalUses()
OMR	Node	cconst(uint16_t)
OMR	Node	cconst(TR::Node *,uint16_t)
OMR	Node	childIterator(int32_t)
OMR	Node	childrenWereSwapped()
OMR	Node	chkAllocationCanBeRemoved()
OMR	Node	chkAndBitOpMem()
OMR	Node	chkArrayChkPrimitiveArray1()
OMR	Node	chkArrayChkPrimitiveArray2()
OMR	Node	chkArrayChkReferenceArray1()
OMR	Node	chkArrayChkReferenceArray2()
OMR	Node	chkArrayCmpLen()
OMR	Node	chkArrayCmpSign()
OMR	Node	chkArrayTRT()
OMR	Node	chkBackwardArrayCopy()
OMR	Node	chkByteToByteTranslate()
OMR	Node	chkByteToCharTranslate()
OMR	Node	chkCannotOverflow()
OMR	Node	chkCannotTrackLocalStringUses()
OMR	Node	chkCannotTrackLocalUses()
OMR	Node	chkCharArrayTRT()
OMR	Node	chkCharToByteTranslate()
OMR	Node	chkCharToCharTranslate()
OMR	Node	chkClassPointerConstant()
OMR	Node	chkCompressionSequence()
OMR	Node	chkDesynchronizeCall()
OMR	Node	chkDontMoveUnderBranch()
OMR	Node	chkDontTransformArrayCopyCall()
OMR	Node	chkEscapesInColdBlock()
OMR	Node	chkFoldedImplicitNULLCHK()
OMR	Node	chkForwardArrayCopy()
OMR	Node	chkHalfWordElementArrayCopy()
OMR	Node	chkHeapObjectWrtBar()
OMR	Node	chkHeapificationAlloc()
OMR	Node	chkHeapificationStore()
OMR	Node	chkHighWordZero()
OMR	Node	chkIsPrivatizedInlinerArg()
OMR	Node	chkIsReferenceNonNull()
OMR	Node	chkLiveMonitorInitStore()
OMR	Node	chkLocalObjectMonitor()
OMR	Node	chkMethodPointerConstant()
OMR	Node	chkNOPLongStore()
OMR	Node	chkNeedsPrecisionAdjustment()
OMR	Node	chkNoArrayStoreCheckArrayCopy()
OMR	Node	chkNodeCreatedByPRE()
OMR	Node	chkNodeRecognizedArrayCopyCall()
OMR	Node	chkNonHeapObjectWrtBar()
OMR	Node	chkNormalizeNanValues()
OMR	Node	chkNormalizedShift()
OMR	Node	chkOmitSync()
OMR	Node	chkOpsNodeRequiresConditionCodes()
OMR	Node	chkOrBitOpMem()
OMR	Node	chkPointsToNonNull()
OMR	Node	chkPointsToNull()
OMR	Node	chkPrimitiveLockedRegion()
OMR	Node	chkRarePathForwardArrayCopy()
OMR	Node	chkReadMonitor()
OMR	Node	chkReferenceArrayCopy()
OMR	Node	chkReturnIsDummy()
OMR	Node	chkSafeToSkipTableBoundCheck()
OMR	Node	chkSeenRealReference()
OMR	Node	chkSimpleDivCheck()
OMR	Node	chkSkipSync()
OMR	Node	chkSkipWrtBar()
OMR	Node	chkSkipZeroInitialization()
OMR	Node	chkSourceByteArrayTranslate()
OMR	Node	chkSourceCellIsTermChar()
OMR	Node	chkStaticMonitor()
OMR	Node	chkStoreAlreadyEvaluated()
OMR	Node	chkStoredValueIsIrrelevant()
OMR	Node	chkSyncMethodMonitor()
OMR	Node	chkTableBackedByRawStorage()
OMR	Node	chkTargetByteArrayTranslate()
OMR	Node	chkTermCharNodeIsHint()
OMR	Node	chkTheVirtualCallNodeForAGuardedInlinedCall()
OMR	Node	chkThrowInsertedByOSR()
OMR	Node	chkUnsigned()
OMR	Node	chkUseCallForFloatToFixedConversion()
OMR	Node	chkWordElementArrayCopy()
OMR	Node	chkXorBitOpMem()
OMR	Node	collectSymbolReferencesInNode(class TR_BitVector &,vcount_t)
OMR	Node	computeDataType()
OMR	Node	computeIsCollectedReference()
OMR	Node	computeIsInternalPointer()
OMR	Node	containsCall()
OMR	Node	containsCompressionSequence()
OMR	Node	containsDoNotPropagateNode(vcount_t)
OMR	Node	containsNode(TR::Node *,vcount_t)
OMR	Node	copy(TR::Node *)
OMR	Node	copy(TR::Node *,int32_t)
OMR	Node	copyByteCodeInfo(TR::Node *)
OMR	Node	copyChildren(TR::Node *,uint16_t,_Bool)
OMR	Node	copyNodeExtension(TR::NodeExtension *,uint16_t,size_t)
OMR	Node	copyValidProperties(TR::Node *,TR::Node *)
OMR	Node	countChildren(TR::ILOpCodes)
OMR	Node	countNumberOfNodesInSubtree(vcount_t)
OMR	Node	create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *)
OMR	Node	create(TR::Node *,TR::ILOpCodes,uint16_t,int32_t,TR::TreeTop *)
OMR	Node	create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *)
OMR	Node	create(TR::ILOpCodes,uint16_t)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::TreeTop *)
OMR	Node	create(TR::Node *,TR::ILOpCodes,uint16_t,TR::TreeTop *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	create(TR::Node *,TR::ILOpCodes,uint16_t)
OMR	Node	create(TR::ILOpCodes,uint16_t,int32_t,TR::TreeTop *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	create(TR::ILOpCodes,uint16_t,TR::Node *)
OMR	Node	createAddConstantToAddress(TR::Node *,intptr_t,TR::Node *)
OMR	Node	createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t)
OMR	Node	createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t,uint8_t)
OMR	Node	createAllocationFence(TR::Node *,TR::Node *)
OMR	Node	createArrayOperation(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	createArrayStoreCheckInfo()
OMR	Node	createArraycopy()
OMR	Node	createArraycopy(TR::Node *,TR::Node *,TR::Node *)
OMR	Node	createArraycopy(TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	createCase(TR::Node *,TR::TreeTop *,CASECONST_TYPE)
OMR	Node	createCompressedRefsAnchor(TR::Node *)
OMR	Node	createConstDead(TR::Node *,TR::DataType,intptrj_t)
OMR	Node	createConstOne(TR::Node *,TR::DataType)
OMR	Node	createConstZeroValue(TR::Node *,TR::DataType)
OMR	Node	createInternal(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *)
OMR	Node	createLiteralPoolAddress(TR::Node *,size_t)
OMR	Node	createLoad(TR::Node *,TR::SymbolReference *)
OMR	Node	createLoad(TR::SymbolReference *)
OMR	Node	createLongIfNeeded()
OMR	Node	createNodeExtension(uint16_t)
OMR	Node	createOnStack(TR::Node *,TR::ILOpCodes,uint16_t)
OMR	Node	createRelative32BitFenceNode(void *)
OMR	Node	createRelative32BitFenceNode(TR::Node *,void *)
OMR	Node	createStore(TR::SymbolReference *,TR::Node *,TR::ILOpCodes)
OMR	Node	createStore(TR::SymbolReference *,TR::Node *,TR::ILOpCodes,size_t)
OMR	Node	createStore(TR::SymbolReference *,TR::Node *)
OMR	Node	createStore(TR::Node *,TR::SymbolReference *,TR::Node *)
OMR	Node	createStoresForVar(TR::SymbolReference *&,TR::TreeTop *,_Bool)
OMR	Node	createVectorConst(TR::Node *,TR::DataType)
OMR	Node	createVectorConversion(TR::Node *,TR::DataType)
OMR	Node	createWithRoomForFive(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Node *,TR::Node *,void *)
OMR	Node	createWithRoomForOneMore(TR::ILOpCodes,uint16_t,void *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	createWithRoomForThree(TR::ILOpCodes,TR::Node *,TR::Node *,void *)
OMR	Node	createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,uintptr_t,TR::SymbolReference *)
OMR	Node	createWithSymRef(TR::ILOpCodes,uint16_t,TR::SymbolReference *,uintptr_t)
OMR	Node	createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,uintptr_t,TR::SymbolReference *)
OMR	Node	createWithSymRef(TR::ILOpCodes,uint16_t,TR::SymbolReference *)
OMR	Node	createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::SymbolReference *)
OMR	Node	createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::SymbolReference *)
OMR	Node	createbranch(TR::ILOpCodes,TR::Node *,TR::TreeTop *)
OMR	Node	createif(TR::ILOpCodes,TR::Node *,TR::Node *,TR::TreeTop *)
OMR	Node	decFutureUseCount()
OMR	Node	decLocalIndex()
OMR	Node	decReferenceCount()
OMR	Node	devirtualizeCall(TR::TreeTop *)
OMR	Node	divisionCannotOverflow()
OMR	Node	dontEliminateStores(_Bool)
OMR	Node	duplicateTree(_Bool)
OMR	Node	duplicateTreeForCodeMotion()
OMR	Node	duplicateTreeWithCommoning(TR::Allocator)
OMR	Node	duplicateTreeWithCommoningImpl(CS2::HashTable<TR::Node *, TR::Node *, TR::Allocator> &)
OMR	Node	duplicateTree_DEPRECATED(_Bool)
OMR	Node	escapesInColdBlock()
OMR	Node	exceptionsRaised()
OMR	Node	extractTheNullCheck(TR::TreeTop *)
OMR	Node	findChild(TR::ILOpCodes,_Bool)
OMR	Node	findChildIndex(TR::Node *)
OMR	Node	freeExtensionIfExists()
OMR	Node	gatherAllNodesWhichMightKillCondCode(vcount_t,TR::list<TR::Node *> &)
OMR	Node	get32bitIntegralValue()
OMR	Node	get64bitIntegralValue()
OMR	Node	get64bitIntegralValueAsUnsigned()
OMR	Node	getAOTMethod()
OMR	Node	getAddress()
OMR	Node	getAllocation()
OMR	Node	getAndDecChild(int32_t)
OMR	Node	getArgument(int32_t)
OMR	Node	getArrayComponentClassInNode()
OMR	Node	getArrayCopyElementType()
OMR	Node	getArrayStoreClassInNode()
OMR	Node	getArrayStride()
OMR	Node	getBlock(_Bool)
OMR	Node	getBranchDestination()
OMR	Node	getByte()
OMR	Node	getByteCodeIndex()
OMR	Node	getByteCodeInfo()
OMR	Node	getCaseConstant()
OMR	Node	getCaseIndexUpperBound()
OMR	Node	getChild(int32_t)
OMR	Node	getConstValue()
OMR	Node	getDataType()
OMR	Node	getDouble()
OMR	Node	getDoubleBits()
OMR	Node	getEvaluationPriority(TR::CodeGenerator *)
OMR	Node	getExtendedChild(int32_t)
OMR	Node	getFirstArgument()
OMR	Node	getFirstArgumentIndex()
OMR	Node	getFirstChild()
OMR	Node	getFlags()
OMR	Node	getFloat()
OMR	Node	getFloatBits()
OMR	Node	getFutureUseCount()
OMR	Node	getGlobalIndex()
OMR	Node	getGlobalRegisterNumber()
OMR	Node	getHighGlobalRegisterNumber()
OMR	Node	getInlinedSiteIndex()
OMR	Node	getInt()
OMR	Node	getIsHPREligible()
OMR	Node	getLabel()
OMR	Node	getLastChild()
OMR	Node	getLiteralPoolOffset()
OMR	Node	getLocalIndex()
OMR	Node	getLongInt()
OMR	Node	getLongIntHigh()
OMR	Node	getLongIntLow()
OMR	Node	getLowGlobalRegisterNumber()
OMR	Node	getMaxIntegerPrecision()
OMR	Node	getMethod()
OMR	Node	getMonitorClass(class TR_ResolvedMethod *)
OMR	Node	getMonitorClassInNode()
OMR	Node	getMonitorInfo()
OMR	Node	getName(class TR_Debug *)
OMR	Node	getNullCheckReference()
OMR	Node	getNumArguments()
OMR	Node	getNumChildren()
OMR	Node	getNumRelocations()
OMR	Node	getNumberOfSlots()
OMR	Node	getOpCode()
OMR	Node	getOpCodeValue()
OMR	Node	getOverflowCheckOperation()
OMR	Node	getOwningMethod()
OMR	Node	getPinningArrayPointer()
OMR	Node	getReferenceCount()
OMR	Node	getRegLoadStoreSymbolReference()
OMR	Node	getRegister()
OMR	Node	getRelocationDestination(uint32_t)
OMR	Node	getRelocationType()
OMR	Node	getRoundedSize()
OMR	Node	getSecondChild()
OMR	Node	getShortInt()
OMR	Node	getSize()
OMR	Node	getSourceCellIsTermChar()
OMR	Node	getStoreNode()
OMR	Node	getSymbol()
OMR	Node	getSymbolReference()
OMR	Node	getSymbolReferenceOfAnyType()
OMR	Node	getTableBackedByRawStorage()
OMR	Node	getTermCharNodeIsHint()
OMR	Node	getThirdChild()
OMR	Node	getType()
OMR	Node	getTypeSignature(int32_t &,enum TR_AllocationKind)
OMR	Node	getUnionPropertyA_Type()
OMR	Node	getUnsignedByte()
OMR	Node	getUnsignedConstValue()
OMR	Node	getUnsignedInt()
OMR	Node	getUnsignedLongInt()
OMR	Node	getUnsignedLongIntHigh()
OMR	Node	getUnsignedLongIntLow()
OMR	Node	getUnsignedShortInt()
OMR	Node	getUseDefIndex()
OMR	Node	getValueChild()
OMR	Node	getVirtualCallNodeForGuard()
OMR	Node	getVirtualCallTreeForGuard()
OMR	Node	getVisitCount()
OMR	Node	hasArrayStoreCheckInfo()
OMR	Node	hasArrayStride()
OMR	Node	hasBeenRun()
OMR	Node	hasBeenVisitedForHints()
OMR	Node	hasBlock()
OMR	Node	hasBranchDestinationNode()
OMR	Node	hasChild(TR::Node *)
OMR	Node	hasDataType()
OMR	Node	hasFoldedImplicitNULLCHK()
OMR	Node	hasMonitorClassInNode()
OMR	Node	hasNodeExtension()
OMR	Node	hasPinningArrayPointer()
OMR	Node	hasRegLoadStoreSymbolReference()
OMR	Node	hasSymbolReference()
OMR	Node	hasSymbolReferenceOfAnyType()
OMR	Node	hasUnresolvedSymbolReference()
OMR	Node	iconst(TR::Node *,int32_t)
OMR	Node	iconst(int32_t)
OMR	Node	incFutureUseCount()
OMR	Node	incLocalIndex()
OMR	Node	incReferenceCount()
OMR	Node	incVisitCount()
OMR	Node	initializeFutureUseCounts(vcount_t)
OMR	Node	isAbstractGuard()
OMR	Node	isAdjunct()
OMR	Node	isAndBitOpMem()
OMR	Node	isArrayChkPrimitiveArray1()
OMR	Node	isArrayChkPrimitiveArray2()
OMR	Node	isArrayChkReferenceArray1()
OMR	Node	isArrayChkReferenceArray2()
OMR	Node	isArrayCmpLen()
OMR	Node	isArrayCmpSign()
OMR	Node	isArrayCopyCall()
OMR	Node	isArrayTRT()
OMR	Node	isArraysetLengthMultipleOfPointerSize()
OMR	Node	isBackwardArrayCopy()
OMR	Node	isBigDecimalLoad()
OMR	Node	isBreakpointGuard()
OMR	Node	isByteToByteTranslate()
OMR	Node	isByteToCharTranslate()
OMR	Node	isCharArrayTRT()
OMR	Node	isCharToByteTranslate()
OMR	Node	isCharToCharTranslate()
OMR	Node	isClassPointerConstant()
OMR	Node	isClassUnloadingConst()
OMR	Node	isConstZeroBytes()
OMR	Node	isConstZeroValue()
OMR	Node	isCopyToNewVirtualRegister()
OMR	Node	isDirectMemoryUpdate()
OMR	Node	isDirectMethodGuard()
OMR	Node	isDoNotPropagateNode()
OMR	Node	isDontMoveUnderBranch()
OMR	Node	isDontTransformArrayCopyCall()
OMR	Node	isDualCyclic()
OMR	Node	isDualHigh()
OMR	Node	isDummyGuard()
OMR	Node	isEligibleForHighWordOpcode()
OMR	Node	isExtendedTo32BitAtSource()
OMR	Node	isExtendedTo64BitAtSource()
OMR	Node	isFPStrictCompliant()
OMR	Node	isFloatToFixedConversion()
OMR	Node	isForwardArrayCopy()
OMR	Node	isGCSafePointWithSymRef()
OMR	Node	isHCRGuard()
OMR	Node	isHalfWordElementArrayCopy()
OMR	Node	isHeapObjectWrtBar()
OMR	Node	isHeapificationAlloc()
OMR	Node	isHeapificationStore()
OMR	Node	isHierarchyGuard()
OMR	Node	isHighWordZero()
OMR	Node	isInterfaceGuard()
OMR	Node	isInternalPointer()
OMR	Node	isInvalid8BitGlobalRegister()
OMR	Node	isLegalCallToCreate(TR::ILOpCodes)
OMR	Node	isLikelyStackWrtBar()
OMR	Node	isLiveMonitorInitStore()
OMR	Node	isLoadAndTest()
OMR	Node	isLoadFence()
OMR	Node	isLocalObjectMonitor()
OMR	Node	isMaxLoopIterationGuard()
OMR	Node	isMethodEnterExitGuard()
OMR	Node	isMethodPointerConstant()
OMR	Node	isMutableCallSiteTargetGuard()
OMR	Node	isNOPLongStore()
OMR	Node	isNegative()
OMR	Node	isNoArrayStoreCheckArrayCopy()
OMR	Node	isNodeCreatedByPRE()
OMR	Node	isNodeRecognizedArrayCopyCall()
OMR	Node	isNonDegenerateArrayCopy()
OMR	Node	isNonHeapObjectWrtBar()
OMR	Node	isNonNegative()
OMR	Node	isNonNull()
OMR	Node	isNonPositive()
OMR	Node	isNonZero()
OMR	Node	isNonoverriddenGuard()
OMR	Node	isNopableInlineGuard()
OMR	Node	isNormalizedShift()
OMR	Node	isNotCollected()
OMR	Node	isNull()
OMR	Node	isOSRGuard()
OMR	Node	isOrBitOpMem()
OMR	Node	isPositive()
OMR	Node	isPowerOfTwo()
OMR	Node	isPreparedForDirectJNI()
OMR	Node	isPrimitiveLockedRegion()
OMR	Node	isPrivatizedInlinerArg()
OMR	Node	isProfiledGuard()
OMR	Node	isProfilingCode()
OMR	Node	isPureCall()
OMR	Node	isRarePathForwardArrayCopy()
OMR	Node	isReadMonitor()
OMR	Node	isReferenceArrayCopy()
OMR	Node	isReferenceNonNull()
OMR	Node	isRematerializable(TR::Node *,_Bool)
OMR	Node	isRematerializeable()
OMR	Node	isReturnDummy()
OMR	Node	isSafeForCGToFastPathUnsafeCall()
OMR	Node	isSafeToReplaceNode(TR::TreeTop *)
OMR	Node	isSafeToSkipTableBoundCheck()
OMR	Node	isSeenRealReference()
OMR	Node	isSideEffectGuard()
OMR	Node	isSignExtendedAtSource()
OMR	Node	isSignExtendedTo32BitAtSource()
OMR	Node	isSignExtendedTo64BitAtSource()
OMR	Node	isSimpleDivCheck()
OMR	Node	isSingleRef()
OMR	Node	isSingleRefUnevaluated()
OMR	Node	isSourceByteArrayTranslate()
OMR	Node	isStaticMonitor()
OMR	Node	isStopTheWorldGuard()
OMR	Node	isStoreAlreadyEvaluated()
OMR	Node	isStoreFence()
OMR	Node	isSyncMethodMonitor()
OMR	Node	isTargetByteArrayTranslate()
OMR	Node	isTernaryHigh()
OMR	Node	isTheVirtualCallNodeForAGuardedInlinedCall()
OMR	Node	isTheVirtualGuardForAGuardedInlinedCall()
OMR	Node	isThisPointer()
OMR	Node	isUnneededConversion()
OMR	Node	isUnneededIALoad()
OMR	Node	isUnsafeStaticWrtBar()
OMR	Node	isUnsafeToDuplicateAndExecuteAgain(int32_t *)
OMR	Node	isUnsigned()
OMR	Node	isUseBranchOnCount()
OMR	Node	isVersionableIfWithMaxExpr()
OMR	Node	isVersionableIfWithMinExpr()
OMR	Node	isWordElementArrayCopy()
OMR	Node	isXorBitOpMem()
OMR	Node	isZero()
OMR	Node	isZeroExtendedAtSource()
OMR	Node	isZeroExtendedTo32BitAtSource()
OMR	Node	isZeroExtendedTo64BitAtSource()
OMR	Node	isZeroExtension()
OMR	Node	isl2aForCompressedArrayletLeafLoad()
OMR	Node	iuconst(TR::Node *,uint32_t)
OMR	Node	iuconst(uint32_t)
OMR	Node	lconst(int64_t)
OMR	Node	lconst(TR::Node *,int64_t)
OMR	Node	luconst(uint64_t)
OMR	Node	luconst(TR::Node *,uint64_t)
OMR	Node	markedAllocationCanBeRemoved()
OMR	Node	mayKill(_Bool)
OMR	Node	mayModifyValue(TR::SymbolReference *)
OMR	Node	mayUse()
OMR	Node	mightHaveVolatileSymbolReference()
OMR	Node	needsPrecisionAdjustment()
OMR	Node	needsSignExtension()
OMR	Node	nodeMightKillCondCode()
OMR	Node	nodeRequiresConditionCodes()
OMR	Node	normalizeNanValues()
OMR	Node	notifyChangeToValueOfNode()
OMR	Node	oneParentSupportsLazyClobber(TR::Compilation *)
OMR	Node	operator new(size_t,TR::NodePool &)
OMR	Node	operator new(size_t,void *)
OMR	Node	operator=(const TR::Node &)
OMR	Node	parentSupportsLazyClobber()
OMR	Node	performsVolatileAccess(vcount_t)
OMR	Node	pointsToNonNull()
OMR	Node	pointsToNull()
OMR	Node	printAllocationCanBeRemoved()
OMR	Node	printAndBitOpMem()
OMR	Node	printArrayCmpLen()
OMR	Node	printArrayCmpSign()
OMR	Node	printArrayTRT()
OMR	Node	printCanDesynchronizeCall()
OMR	Node	printCanSkipZeroInitialization()
OMR	Node	printCannotOverflow()
OMR	Node	printCannotTrackLocalStringUses()
OMR	Node	printCannotTrackLocalUses()
OMR	Node	printCharArrayTRT()
OMR	Node	printContainsCompressionSequence()
OMR	Node	printCopyToNewVirtualRegister()
OMR	Node	printEscapesInColdBlock()
OMR	Node	printFullSubtree()
OMR	Node	printHasFoldedImplicitNULLCHK()
OMR	Node	printIsAbstractGuard()
OMR	Node	printIsArrayChkPrimitiveArray1()
OMR	Node	printIsArrayChkPrimitiveArray2()
OMR	Node	printIsArrayChkReferenceArray1()
OMR	Node	printIsArrayChkReferenceArray2()
OMR	Node	printIsBackwardArrayCopy()
OMR	Node	printIsBreakpointGuard()
OMR	Node	printIsByteToByteTranslate()
OMR	Node	printIsByteToCharTranslate()
OMR	Node	printIsCharToByteTranslate()
OMR	Node	printIsCharToCharTranslate()
OMR	Node	printIsClassPointerConstant()
OMR	Node	printIsDirectMemoryUpdate()
OMR	Node	printIsDirectMethodGuard()
OMR	Node	printIsDontMoveUnderBranch()
OMR	Node	printIsDontTransformArrayCopyCall()
OMR	Node	printIsDummyGuard()
OMR	Node	printIsFPStrictCompliant()
OMR	Node	printIsForwardArrayCopy()
OMR	Node	printIsHCRGuard()
OMR	Node	printIsHPREligible()
OMR	Node	printIsHalfWordElementArrayCopy()
OMR	Node	printIsHeapObjectWrtBar()
OMR	Node	printIsHeapificationAlloc()
OMR	Node	printIsHeapificationStore()
OMR	Node	printIsHierarchyGuard()
OMR	Node	printIsHighWordZero()
OMR	Node	printIsInterfaceGuard()
OMR	Node	printIsInternalPointer()
OMR	Node	printIsInvalid8BitGlobalRegister()
OMR	Node	printIsLiveMonitorInitStore()
OMR	Node	printIsLocalObjectMonitor()
OMR	Node	printIsMaxLoopIterationGuard()
OMR	Node	printIsMethodEnterExitGuard()
OMR	Node	printIsMethodPointerConstant()
OMR	Node	printIsMutableCallSiteTargetGuard()
OMR	Node	printIsNOPLongStore()
OMR	Node	printIsNoArrayStoreCheckArrayCopy()
OMR	Node	printIsNodeCreatedByPRE()
OMR	Node	printIsNodeRecognizedArrayCopyCall()
OMR	Node	printIsNonHeapObjectWrtBar()
OMR	Node	printIsNonNegative()
OMR	Node	printIsNonPositive()
OMR	Node	printIsNonZero()
OMR	Node	printIsNonoverriddenGuard()
OMR	Node	printIsNormalizedShift()
OMR	Node	printIsOSRGuard()
OMR	Node	printIsOmitSync()
OMR	Node	printIsPrimitiveLockedRegion()
OMR	Node	printIsPrivatizedInlinerArg()
OMR	Node	printIsProfiledGuard()
OMR	Node	printIsProfilingCode()
OMR	Node	printIsRarePathForwardArrayCopy()
OMR	Node	printIsReadMonitor()
OMR	Node	printIsReferenceArrayCopy()
OMR	Node	printIsReferenceNonNull()
OMR	Node	printIsSafeToSkipTableBoundCheck()
OMR	Node	printIsSeenRealReference()
OMR	Node	printIsSideEffectGuard()
OMR	Node	printIsSignExtendedTo32BitAtSource()
OMR	Node	printIsSignExtendedTo64BitAtSource()
OMR	Node	printIsSimpleDivCheck()
OMR	Node	printIsSkipSync()
OMR	Node	printIsSkipWrtBar()
OMR	Node	printIsStaticMonitor()
OMR	Node	printIsStoredValueIsIrrelevant()
OMR	Node	printIsSyncMethodMonitor()
OMR	Node	printIsTheVirtualCallNodeForAGuardedInlinedCall()
OMR	Node	printIsThrowInsertedByOSR()
OMR	Node	printIsUnneededConversion()
OMR	Node	printIsUnsigned()
OMR	Node	printIsWordElementArrayCopy()
OMR	Node	printIsZero()
OMR	Node	printIsZeroExtendedTo32BitAtSource()
OMR	Node	printIsZeroExtendedTo64BitAtSource()
OMR	Node	printNeedsPrecisionAdjustment()
OMR	Node	printNeedsSignExtension()
OMR	Node	printNormalizeNanValues()
OMR	Node	printOrBitOpMem()
OMR	Node	printParentSupportsLazyClobber()
OMR	Node	printPointsToNonNull()
OMR	Node	printPointsToNull()
OMR	Node	printRequiresConditionCodes()
OMR	Node	printReturnIsDummy()
OMR	Node	printSetSourceIsByteArrayTranslate()
OMR	Node	printSetTableBackedByRawStorage()
OMR	Node	printSetTargetIsByteArrayTranslate()
OMR	Node	printSetTermCharNodeIsHint()
OMR	Node	printSetUseSignExtensionMode()
OMR	Node	printSkipSignExtension()
OMR	Node	printSourceCellIsTermChar()
OMR	Node	printStoreAlreadyEvaluated()
OMR	Node	printUseCallForFloatToFixedConversion()
OMR	Node	printXorBitOpMem()
OMR	Node	recreate(TR::Node *,TR::ILOpCodes)
OMR	Node	recreateAndCopyValidPropertiesImpl(TR::Node *,TR::ILOpCodes,TR::SymbolReference *)
OMR	Node	recreateWithSymRef(TR::Node *,TR::ILOpCodes,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *)
OMR	Node	recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::SymbolReference *)
OMR	Node	recursivelyDecReferenceCount()
OMR	Node	recursivelyDecReferenceCountFromCodeGen()
OMR	Node	removeAllChildren()
OMR	Node	removeChild(int32_t)
OMR	Node	removeLastChild()
OMR	Node	requiresRegisterPair(TR::Compilation *)
OMR	Node	resetFlagsForCodeMotion()
OMR	Node	resetIsHPREligible()
OMR	Node	resetIsNodeCreatedByPRE()
OMR	Node	resetIsTheVirtualCallNodeForAGuardedInlinedCall()
OMR	Node	resetIsTheVirtualGuardForAGuardedInlinedCall()
OMR	Node	resetVisitCounts(vcount_t)
OMR	Node	reverseBranch(TR::TreeTop *)
OMR	Node	rotateChildren(int32_t,int32_t)
OMR	Node	safeToDoRecursiveDecrement()
OMR	Node	sconst(int16_t)
OMR	Node	sconst(TR::Node *,int16_t)
OMR	Node	self()
OMR	Node	set64bitIntegralValue(int64_t)
OMR	Node	setAddress(uint64_t)
OMR	Node	setAlignTLHAlloc(_Bool)
OMR	Node	setAllocation(TR::Node *)
OMR	Node	setAllocationCanBeRemoved(_Bool)
OMR	Node	setAndBitOpMem(_Bool)
OMR	Node	setAndIncChild(int32_t,TR::Node *)
OMR	Node	setAndIncValueChild(TR::Node *)
OMR	Node	setArrayChkPrimitiveArray1(_Bool)
OMR	Node	setArrayChkPrimitiveArray2(_Bool)
OMR	Node	setArrayChkReferenceArray1(_Bool)
OMR	Node	setArrayChkReferenceArray2(_Bool)
OMR	Node	setArrayCmpLen(_Bool)
OMR	Node	setArrayCmpSign(_Bool)
OMR	Node	setArrayComponentClassInNode(class TR_OpaqueClassBlock *)
OMR	Node	setArrayCopyElementType(TR::DataType)
OMR	Node	setArrayStoreClassInNode(class TR_OpaqueClassBlock *)
OMR	Node	setArrayStride(int32_t)
OMR	Node	setArrayTRT(_Bool)
OMR	Node	setArraysetLengthMultipleOfPointerSize(_Bool)
OMR	Node	setBackwardArrayCopy(_Bool)
OMR	Node	setBlock(TR::Block *)
OMR	Node	setBranchDestination(TR::TreeTop *)
OMR	Node	setByte(int8_t)
OMR	Node	setByteCodeIndex(uint32_t)
OMR	Node	setByteCodeInfo(const TR_ByteCodeInfo &)
OMR	Node	setCanSkipZeroInitialization(_Bool)
OMR	Node	setCannotOverflow(_Bool)
OMR	Node	setCannotTrackLocalStringUses(_Bool)
OMR	Node	setCannotTrackLocalUses(_Bool)
OMR	Node	setCaseConstant(CASECONST_TYPE)
OMR	Node	setCharArrayTRT(_Bool)
OMR	Node	setChild(int32_t,TR::Node *)
OMR	Node	setConstValue(int64_t)
OMR	Node	setContainsCall(_Bool)
OMR	Node	setContainsCompressionSequence(_Bool)
OMR	Node	setCopyToNewVirtualRegister(_Bool)
OMR	Node	setDataType(TR::DataType)
OMR	Node	setDesynchronizeCall(_Bool)
OMR	Node	setDirectMemoryUpdate(_Bool)
OMR	Node	setDontTransformArrayCopyCall()
OMR	Node	setDouble(double)
OMR	Node	setDoubleBits(uint64_t)
OMR	Node	setEscapesInColdBlock(_Bool)
OMR	Node	setEvaluationPriority(int32_t)
OMR	Node	setFirst(TR::Node *)
OMR	Node	setFlags(OMR::flags32_t)
OMR	Node	setFloat(float)
OMR	Node	setFloatBits(uint32_t)
OMR	Node	setForwardArrayCopy(_Bool)
OMR	Node	setFutureUseCount(scount_t)
OMR	Node	setGlobalIndex(ncount_t)
OMR	Node	setGlobalRegisterNumber(TR_GlobalRegisterNumber)
OMR	Node	setHalfWordElementArrayCopy(_Bool)
OMR	Node	setHasBeenVisitedForHints(_Bool)
OMR	Node	setHasFoldedImplicitNULLCHK(_Bool)
OMR	Node	setHasMonitorClassInNode(_Bool)
OMR	Node	setHasNodeExtension(_Bool)
OMR	Node	setHeapificationAlloc(_Bool)
OMR	Node	setHeapificationStore(_Bool)
OMR	Node	setHighGlobalRegisterNumber(TR_GlobalRegisterNumber)
OMR	Node	setInlinedSiteIndex(int16_t)
OMR	Node	setInt(int32_t)
OMR	Node	setIsAbstractGuard()
OMR	Node	setIsAdjunct(_Bool)
OMR	Node	setIsBigDecimalLoad()
OMR	Node	setIsBreakpointGuard()
OMR	Node	setIsClassPointerConstant(_Bool)
OMR	Node	setIsDirectMethodGuard(_Bool)
OMR	Node	setIsDontMoveUnderBranch(_Bool)
OMR	Node	setIsDummyGuard()
OMR	Node	setIsFPStrictCompliant(_Bool)
OMR	Node	setIsHCRGuard()
OMR	Node	setIsHPREligible()
OMR	Node	setIsHeapObjectWrtBar(_Bool)
OMR	Node	setIsHierarchyGuard()
OMR	Node	setIsHighWordZero(_Bool)
OMR	Node	setIsInterfaceGuard()
OMR	Node	setIsInternalPointer(_Bool)
OMR	Node	setIsInvalid8BitGlobalRegister(_Bool)
OMR	Node	setIsLoadAndTest(_Bool)
OMR	Node	setIsLoadFence()
OMR	Node	setIsMaxLoopIterationGuard(_Bool)
OMR	Node	setIsMethodEnterExitGuard(_Bool)
OMR	Node	setIsMethodPointerConstant(_Bool)
OMR	Node	setIsMutableCallSiteTargetGuard()
OMR	Node	setIsNodeCreatedByPRE()
OMR	Node	setIsNonHeapObjectWrtBar(_Bool)
OMR	Node	setIsNonNegative(_Bool)
OMR	Node	setIsNonNull(_Bool)
OMR	Node	setIsNonPositive(_Bool)
OMR	Node	setIsNonZero(_Bool)
OMR	Node	setIsNonoverriddenGuard()
OMR	Node	setIsNotRematerializeable()
OMR	Node	setIsNull(_Bool)
OMR	Node	setIsOSRGuard()
OMR	Node	setIsPowerOfTwo(_Bool)
OMR	Node	setIsPrivatizedInlinerArg(_Bool)
OMR	Node	setIsProfiledGuard()
OMR	Node	setIsProfilingCode()
OMR	Node	setIsSafeForCGToFastPathUnsafeCall(_Bool)
OMR	Node	setIsSafeToSkipTableBoundCheck(_Bool)
OMR	Node	setIsSideEffectGuard()
OMR	Node	setIsStoreFence()
OMR	Node	setIsTheVirtualCallNodeForAGuardedInlinedCall()
OMR	Node	setIsUnsafeStaticWrtBar(_Bool)
OMR	Node	setIsUseBranchOnCount(_Bool)
OMR	Node	setIsVersionableIfWithMaxExpr(TR::Compilation *)
OMR	Node	setIsVersionableIfWithMinExpr(TR::Compilation *)
OMR	Node	setIsZero(_Bool)
OMR	Node	setLabel(TR::LabelSymbol *)
OMR	Node	setLikelyStackWrtBar(_Bool)
OMR	Node	setLiteralPoolOffset(size_t,size_t)
OMR	Node	setLiveMonitorInitStore(_Bool)
OMR	Node	setLocalIndex(scount_t)
OMR	Node	setLocalObjectMonitor(_Bool)
OMR	Node	setLongInt(int64_t)
OMR	Node	setLowGlobalRegisterNumber(TR_GlobalRegisterNumber)
OMR	Node	setMethod(class TR_OpaqueMethodBlock *)
OMR	Node	setMonitorClassInNode(class TR_OpaqueClassBlock *)
OMR	Node	setMonitorInfo(void *)
OMR	Node	setNOPLongStore(_Bool)
OMR	Node	setNeedsPrecisionAdjustment(_Bool)
OMR	Node	setNeedsSignExtension(_Bool)
OMR	Node	setNoArrayStoreCheckArrayCopy(_Bool)
OMR	Node	setNodeIsRecognizedArrayCopyCall(_Bool)
OMR	Node	setNodeRequiresConditionCodes(_Bool)
OMR	Node	setNormalizeNanValues(_Bool)
OMR	Node	setNormalizedShift(_Bool)
OMR	Node	setNullCheckReference(TR::Node *)
OMR	Node	setNumChildren(uint16_t)
OMR	Node	setNumRelocations(uint32_t)
OMR	Node	setOmitSync(_Bool)
OMR	Node	setOpCodeValue(TR::ILOpCodes)
OMR	Node	setOrBitOpMem(_Bool)
OMR	Node	setOverflowCheckOperation(TR::ILOpCodes)
OMR	Node	setParentSupportsLazyClobber(_Bool)
OMR	Node	setPinningArrayPointer(TR::AutomaticSymbol *)
OMR	Node	setPointsToNonNull(_Bool)
OMR	Node	setPointsToNull(_Bool)
OMR	Node	setPreparedForDirectJNI()
OMR	Node	setPrimitiveLockedRegion(_Bool)
OMR	Node	setRarePathForwardArrayCopy(_Bool)
OMR	Node	setReadMonitor(_Bool)
OMR	Node	setReferenceCount(rcount_t)
OMR	Node	setReferenceIsNonNull(_Bool)
OMR	Node	setRegLoadStoreSymbolReference(TR::SymbolReference *)
OMR	Node	setRegister(TR::Register *)
OMR	Node	setRelocationDestination(uint32_t,void *)
OMR	Node	setRelocationType(uint32_t)
OMR	Node	setReturnIsDummy()
OMR	Node	setSecond(TR::Node *)
OMR	Node	setSeenRealReference(_Bool)
OMR	Node	setShortInt(int16_t)
OMR	Node	setSignExtendTo32BitAtSource(_Bool)
OMR	Node	setSignExtendTo64BitAtSource(_Bool)
OMR	Node	setSimpleDivCheck(_Bool)
OMR	Node	setSkipSignExtension(_Bool)
OMR	Node	setSkipSync(_Bool)
OMR	Node	setSkipWrtBar(_Bool)
OMR	Node	setSourceCellIsTermChar(_Bool)
OMR	Node	setSourceIsByteArrayTranslate(_Bool)
OMR	Node	setStaticMonitor(_Bool)
OMR	Node	setStoreAlreadyEvaluated(_Bool)
OMR	Node	setStoredValueIsIrrelevant(_Bool)
OMR	Node	setSwappedChildren(_Bool)
OMR	Node	setSymbolReference(TR::SymbolReference *)
OMR	Node	setSyncMethodMonitor(_Bool)
OMR	Node	setTableBackedByRawStorage(_Bool)
OMR	Node	setTargetIsByteArrayTranslate(_Bool)
OMR	Node	setTermCharNodeIsHint(_Bool)
OMR	Node	setThrowInsertedByOSR(_Bool)
OMR	Node	setUnneededConversion(_Bool)
OMR	Node	setUnneededIALoad(_Bool)
OMR	Node	setUnsigned(_Bool)
OMR	Node	setUnsignedByte(uint8_t)
OMR	Node	setUnsignedInt(uint32_t)
OMR	Node	setUnsignedLongInt(uint64_t)
OMR	Node	setUnsignedShortInt(uint16_t)
OMR	Node	setUseCallForFloatToFixedConversion(_Bool)
OMR	Node	setUseDefIndex(uint16_t)
OMR	Node	setUseSignExtensionMode(_Bool)
OMR	Node	setValueChild(TR::Node *)
OMR	Node	setVisitCount(vcount_t)
OMR	Node	setWordElementArrayCopy(_Bool)
OMR	Node	setXorBitOpMem(_Bool)
OMR	Node	setZeroExtendTo32BitAtSource(_Bool)
OMR	Node	setZeroExtendTo64BitAtSource(_Bool)
OMR	Node	shouldAlignTLHAlloc()
OMR	Node	sizeOfExtension()
OMR	Node	skipConversions()
OMR	Node	skipSignExtension()
OMR	Node	skipWrtBar()
OMR	Node	storedValueIsIrrelevant()
OMR	Node	swapChildren()
OMR	Node	throwInsertedByOSR()
OMR	Node	uncommon()
OMR	Node	uncommonChild(int32_t)
OMR	Node	unsetRegister()
OMR	Node	useCallForFloatToFixedConversion()
OMR	Node	useSignExtensionMode()
OMR	Node	uses64BitGPRs()
OMR	Node	~Node()
OMR	Node	setFlags(flags32_t)
OMR	Node	operator=(const class OMR::Node &)
OMR	Options	Options(const class OMR::Options &)
OMR	Options	Options(class OMR::Options &&)
OMR	Options	Options(TR::Options &)
OMR	Options	Options()
OMR	Options	Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t)
OMR	Options	addOptionSet(TR::OptionSet *)
OMR	Options	allowRecompilation()
OMR	Options	alwaysCallWriteBarrier()
OMR	Options	anOptionSetContainsACountValue()
OMR	Options	breakOnLoad(char *,void *,TR::OptionTable *)
OMR	Options	canJITCompile()
OMR	Options	checkDisableFlagForAllMethods(OMR::Optimizations,_Bool)
OMR	Options	clearBitsFromStringSet(char *,void *,TR::OptionTable *)
OMR	Options	closeLogFile(class TR_FrontEnd *,TR::FILE *)
OMR	Options	closeLogsForOtherCompilationThreads(class TR_FrontEnd *)
OMR	Options	compareOptionsForBinarySearch(const TR::OptionTable &,const TR::OptionTable &)
OMR	Options	configureOptReporting(char *,void *,TR::OptionTable *)
OMR	Options	counterIsEnabled(const char *,int8_t,TR::SimpleRegex *)
OMR	Options	createDebug()
OMR	Options	debugCounterHistogramIsEnabled(const char *,int8_t)
OMR	Options	debugCounterInsertedFormat(class TR_Memory *,const char *,const char *)
OMR	Options	disableCHOpts()
OMR	Options	disableForAllMethods(OMR::Optimizations)
OMR	Options	disableMoreOpts(char *,void *,TR::OptionTable *)
OMR	Options	disableOptimization(char *,void *,TR::OptionTable *)
OMR	Options	disableSamplingThread()
OMR	Options	dontTraceOptimization(char *,void *,TR::OptionTable *)
OMR	Options	dynamicDebugCounterIsEnabled(const char *,int8_t)
OMR	Options	enableDebugCounters()
OMR	Options	enableOptimization(char *,void *,TR::OptionTable *)
OMR	Options	enableTracing(OMR::Optimizations)
OMR	Options	feLatePostProcess(void *,TR::OptionSet *)
OMR	Options	fePostProcessAOT(void *)
OMR	Options	fePostProcessJIT(void *)
OMR	Options	fePreProcess(void *)
OMR	Options	findLogFileForCompilationThread(int32_t)
OMR	Options	findOptionSet(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,enum TR_Hotness,_Bool)
OMR	Options	findOptionSet(int32_t,int32_t,const char *,enum TR_Hotness,_Bool)
OMR	Options	findOptionSet(class TR_Memory *,class TR_ResolvedMethod *,_Bool)
OMR	Options	findOrCreateDebug()
OMR	Options	gcIsUsingConcurrentMark()
OMR	Options	generateWriteBarriers()
OMR	Options	get390LitPoolBufferSize()
OMR	Options	get390StackBufferSize()
OMR	Options	getAOTCmdLineOptions()
OMR	Options	getAOTCompile()
OMR	Options	getActiveCardTableBase()
OMR	Options	getAddressEnumerationOption(uint32_t)
OMR	Options	getAggressivityLevel()
OMR	Options	getAllOptions(uint32_t)
OMR	Options	getAlwaysWorthInliningThreshold()
OMR	Options	getAnyOption(uint32_t)
OMR	Options	getAnyTraceCGOption()
OMR	Options	getAotrtDebugLevel()
OMR	Options	getBigCalleeFrequencyCutoffAtHot()
OMR	Options	getBigCalleeFrequencyCutoffAtWarm()
OMR	Options	getBigCalleeHotOptThreshold()
OMR	Options	getBigCalleeScorchingOptThreshold()
OMR	Options	getBigCalleeThreshold()
OMR	Options	getBigCalleeThresholdForColdCallsAtHot()
OMR	Options	getBigCalleeThresholdForColdCallsAtWarm()
OMR	Options	getBlockShufflingSequence()
OMR	Options	getBreakOnCreate()
OMR	Options	getBreakOnOpts()
OMR	Options	getBreakOnPrint()
OMR	Options	getBreakOnThrow()
OMR	Options	getClassesWithFoldableFinalFields()
OMR	Options	getCmdLineOptions()
OMR	Options	getCompilationStrategyName()
OMR	Options	getCountValue(_Bool,enum TR_Hotness)
OMR	Options	getCountsAreProvidedByUser()
OMR	Options	getCustomStrategy()
OMR	Options	getCustomStrategySize()
OMR	Options	getDLTOptLevel()
OMR	Options	getDebug()
OMR	Options	getDebugCounterBucketGranularity()
OMR	Options	getDebugCounterWarmupSeconds()
OMR	Options	getDebugEnableFlag(uint32_t)
OMR	Options	getDebugOnCreate()
OMR	Options	getDefaultCountString()
OMR	Options	getDefaultOptions()
OMR	Options	getDelayCompile()
OMR	Options	getDeterministicMode()
OMR	Options	getDisableDLTBytecodeIndex()
OMR	Options	getDisabledIdiomPatterns()
OMR	Options	getDisabledInlineSites()
OMR	Options	getDisabledOptTransformations()
OMR	Options	getDisabledOpts()
OMR	Options	getDontInline()
OMR	Options	getDumbInlinerBytecodeSizeCutoff()
OMR	Options	getDumbInlinerBytecodeSizeDivisor()
OMR	Options	getDumbInlinerBytecodeSizeMaxCutoff()
OMR	Options	getDumbInlinerBytecodeSizeMinCutoff()
OMR	Options	getEnableDLTBytecodeIndex()
OMR	Options	getEnableGPU(uint32_t)
OMR	Options	getEnableSCHintFlags()
OMR	Options	getFirstOptIndex()
OMR	Options	getFirstOptTransformationIndex()
OMR	Options	getFirstOptionSet()
OMR	Options	getFixedOptLevel()
OMR	Options	getGCRCount()
OMR	Options	getGCRDecCount()
OMR	Options	getGCRResetCount()
OMR	Options	getGcCardSize()
OMR	Options	getGcMode()
OMR	Options	getHeapAddressToCardAddressShift()
OMR	Options	getHeapBase()
OMR	Options	getHeapBaseForBarrierRange0()
OMR	Options	getHeapSizeForBarrierRange0()
OMR	Options	getHeapTop()
OMR	Options	getInduceOSR()
OMR	Options	getInitialBCount()
OMR	Options	getInitialColdRunBCount()
OMR	Options	getInitialColdRunCount()
OMR	Options	getInitialCount()
OMR	Options	getInitialHotnessLevel(_Bool)
OMR	Options	getInitialMILCount()
OMR	Options	getInitialSCount()
OMR	Options	getInlineCntrAllBucketSize()
OMR	Options	getInlineCntrCalleeTooBigBucketSize()
OMR	Options	getInlineCntrCalleeTooDeepBucketSize()
OMR	Options	getInlineCntrColdAndNotTinyBucketSize()
OMR	Options	getInlineCntrDepthExceededBucketSize()
OMR	Options	getInlineCntrRanOutOfBudgetBucketSize()
OMR	Options	getInlineCntrWarmCalleeHasTooManyNodesBucketSize()
OMR	Options	getInlineCntrWarmCalleeTooBigBucketSize()
OMR	Options	getInlineCntrWarmCallerHasTooManyNodesBucketSize()
OMR	Options	getInlinerArgumentHeuristicFraction()
OMR	Options	getInlinerBorderFrequency()
OMR	Options	getInlinerCGBorderFrequency()
OMR	Options	getInlinerCGColdBorderFrequency()
OMR	Options	getInlinerCGVeryColdBorderFrequency()
OMR	Options	getInlinerColdBorderFrequency()
OMR	Options	getInlinerVeryColdBorderFrequency()
OMR	Options	getInlinerVeryColdBorderFrequencyAtCold()
OMR	Options	getInlinerVeryLargeCompiledMethodFaninThreshold()
OMR	Options	getInlinerVeryLargeCompiledMethodThreshold()
OMR	Options	getInsertGCRTrees()
OMR	Options	getJITCmdLineOptions()
OMR	Options	getJitMethodEntryAlignmentBoundary(TR::CodeGenerator *)
OMR	Options	getLabelTargetNOPLimit()
OMR	Options	getLargeCompiledMethodExemptionFreqCutoff()
OMR	Options	getLargeNumberOfLoops()
OMR	Options	getLastIpaOptTransformationIndex()
OMR	Options	getLastOptIndex()
OMR	Options	getLastOptSubIndex()
OMR	Options	getLastOptTransformationIndex()
OMR	Options	getLastSearchCount()
OMR	Options	getLockReserveClass()
OMR	Options	getLogFile()
OMR	Options	getLogFileName()
OMR	Options	getLogListForOtherCompThreads()
OMR	Options	getLoopyAsyncCheckInsertionMaxEntryFreq()
OMR	Options	getMaxInlinedCalls()
OMR	Options	getMaxLastOptTransformationIndex()
OMR	Options	getMaxLimitedGRACandidates()
OMR	Options	getMaxLimitedGRARegs()
OMR	Options	getMaxNumPrexAssumptions()
OMR	Options	getMaxNumVisitedSubclasses()
OMR	Options	getMaxPeekedBytecodeSize()
OMR	Options	getMaxSpreadCountLoopless()
OMR	Options	getMaxSpreadCountLoopy()
OMR	Options	getMaxStaticPICSlots(enum TR_Hotness)
OMR	Options	getMaxSzForVPInliningWarm()
OMR	Options	getMaxUnloadedAddressRanges()
OMR	Options	getMinFirstOptTransformationIndex()
OMR	Options	getMinProfiledCheckcastFrequency()
OMR	Options	getNextHotnessLevel(_Bool,enum TR_Hotness)
OMR	Options	getNumInterfaceCallCacheSlots()
OMR	Options	getNumInterfaceCallStaticSlots()
OMR	Options	getNumLimitedGRARegsWithheld()
OMR	Options	getNumRestrictedGPRs()
OMR	Options	getNumUsableCompilationThreads()
OMR	Options	getNumericValue(char *&)
OMR	Options	getObjectFileName()
OMR	Options	getOnlyInline()
OMR	Options	getOptLevel()
OMR	Options	getOptLevelDowngraded()
OMR	Options	getOption(uint32_t)
OMR	Options	getOptsToTrace()
OMR	Options	getPackedTestRegex()
OMR	Options	getProfilingCompNodecountThreshold()
OMR	Options	getProfilingCount()
OMR	Options	getProfilingFrequency()
OMR	Options	getRandomSeed()
OMR	Options	getRegisterAssignmentTraceOption(uint32_t)
OMR	Options	getSamplingFrequency()
OMR	Options	getSamplingJProfilingOption(enum TR_SamplingJProfilingFlags)
OMR	Options	getScratchSpaceLimit()
OMR	Options	getScratchSpaceLowerBound()
OMR	Options	getSlipTrap()
OMR	Options	getStackPCDumpNumberOfBuffers()
OMR	Options	getStackPCDumpNumberOfFrames()
OMR	Options	getStoreSinkingLastOpt()
OMR	Options	getSuffixLogsFormat()
OMR	Options	getTOCSize()
OMR	Options	getTraceCGOption(uint32_t)
OMR	Options	getTraceForCodeMining()
OMR	Options	getTraceILDeadCode(uint32_t)
OMR	Options	getTraceLRA(uint32_t)
OMR	Options	getTraceRAOption(uint32_t)
OMR	Options	getTraceRegisterITF(uint32_t)
OMR	Options	getTraceSimplifier(uint32_t)
OMR	Options	getTraceSpillCosts(uint32_t)
OMR	Options	getTrampolineSpacePercentage()
OMR	Options	getTrivialInlinerMaxSize()
OMR	Options	getTryToInline()
OMR	Options	getVerboseOptTransformationsRegex()
OMR	Options	getVerboseOption(enum TR_VerboseFlags)
OMR	Options	getVerboseOptionName(enum TR_VerboseFlags)
OMR	Options	hasOptionSets()
OMR	Options	hasSomeLogFile()
OMR	Options	helpOption(char *,void *,TR::OptionTable *)
OMR	Options	inlinefileOption(char *,void *,TR::OptionTable *)
OMR	Options	insertDebuggingCounters()
OMR	Options	isAnySamplingJProfilingOptionSet()
OMR	Options	isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags)
OMR	Options	isAnyVerboseOptionSet()
OMR	Options	isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags)
OMR	Options	isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags)
OMR	Options	isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags)
OMR	Options	isAnyVerboseOptionSet(enum TR_VerboseFlags)
OMR	Options	isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags)
OMR	Options	isDisabled(OMR::Optimizations)
OMR	Options	isDisabledForAllMethods(OMR::Optimizations)
OMR	Options	isDisabledForAnyMethod(OMR::Optimizations)
OMR	Options	isFullyInitialized()
OMR	Options	isOptionSetForAnyMethod(enum TR_CompilationOptions)
OMR	Options	isQuickstartDetected()
OMR	Options	isVariableActiveCardTableBase()
OMR	Options	isVariableHeapBaseForBarrierRange0()
OMR	Options	isVariableHeapSizeForBarrierRange0()
OMR	Options	isVerboseFileSet()
OMR	Options	jitLatePostProcess(TR::OptionSet *,void *)
OMR	Options	jitPersistentAlloc(size_t)
OMR	Options	jitPersistentFree(void *)
OMR	Options	jitPostProcess()
OMR	Options	jitPreProcess()
OMR	Options	latePostProcess(TR::Options *,void *,_Bool)
OMR	Options	latePostProcessAOT(void *)
OMR	Options	latePostProcessJIT(void *)
OMR	Options	limitOption(char *,void *,TR::OptionTable *)
OMR	Options	limitfileOption(char *,void *,TR::OptionTable *)
OMR	Options	needWriteBarriers()
OMR	Options	negateProcessingMethod(TR::OptionFunctionPtr)
OMR	Options	openLogFile(int32_t)
OMR	Options	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Options	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator delete(void *,size_t)
OMR	Options	operator delete(void *,TR::Region &)
OMR	Options	operator delete[](void *,TR::Region &)
OMR	Options	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Options	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator new(size_t,TR_ArenaAllocator *)
OMR	Options	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Options	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Options	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator new(size_t,class TR_PersistentMemory *)
OMR	Options	operator new(size_t,TR::Region &)
OMR	Options	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Options	operator new[](size_t,class TR_PersistentMemory *)
OMR	Options	operator new[](size_t,TR::Region &)
OMR	Options	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Options	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Options	printOptions(char *,char *)
OMR	Options	processOption(char *,TR::OptionTable *,void *,int32_t,TR::OptionSet *)
OMR	Options	processOptionSet(char *,TR::OptionSet *,void *,_Bool)
OMR	Options	processOptionSet(char *,char *,TR::Options *,_Bool)
OMR	Options	processOptionSet(char *,char *,TR::OptionSet *)
OMR	Options	processOptions(char *,char *,TR::Options *)
OMR	Options	processOptions(char *,char *,void *,class TR_FrontEnd *,TR::Options *)
OMR	Options	processOptionsAOT(char *,void *,class TR_FrontEnd *)
OMR	Options	processOptionsJIT(char *,void *,class TR_FrontEnd *)
OMR	Options	realTimeGC()
OMR	Options	requiresDebugObject()
OMR	Options	requiresLogFile()
OMR	Options	resetBit(char *,void *,TR::OptionTable *)
OMR	Options	resetSamplingJProfilingOption(enum TR_SamplingJProfilingFlags)
OMR	Options	resetVerboseOption(enum TR_VerboseFlags)
OMR	Options	safelyCloseLogs(TR::Options *,class TR_MCTLogs *&,class TR_FrontEnd *)
OMR	Options	self()
OMR	Options	set32BitHexadecimal(char *,void *,TR::OptionTable *)
OMR	Options	set32BitNumeric(char *,void *,TR::OptionTable *)
OMR	Options	set32BitNumericInJitConfig(char *,void *,TR::OptionTable *)
OMR	Options	set32BitSignedNumeric(char *,void *,TR::OptionTable *)
OMR	Options	set32BitValue(char *,void *,TR::OptionTable *)
OMR	Options	set64BitSignedNumeric(char *,void *,TR::OptionTable *)
OMR	Options	setAOTCmdLineOptions(TR::Options *)
OMR	Options	setAOTCompile(_Bool)
OMR	Options	setActiveCardTableBase(uintptr_t)
OMR	Options	setAddressEnumerationBits(char *,void *,TR::OptionTable *)
OMR	Options	setAggressiveQuickStart()
OMR	Options	setAllowRecompilation(_Bool)
OMR	Options	setAnOptionSetContainsACountValue(_Bool)
OMR	Options	setBit(char *,void *,TR::OptionTable *)
OMR	Options	setBitsFromStringSet(char *,void *,TR::OptionTable *)
OMR	Options	setCanJITCompile(_Bool)
OMR	Options	setConservativeDefaultBehavior()
OMR	Options	setConservativeQuickStart()
OMR	Options	setCount(char *,void *,TR::OptionTable *)
OMR	Options	setCounts()
OMR	Options	setDebug(char *,void *,TR::OptionTable *)
OMR	Options	setDefaultsForDeterministicMode()
OMR	Options	setDisabled(OMR::Optimizations,_Bool)
OMR	Options	setDumbInlinerBytecodeSizeCutoff(int32_t)
OMR	Options	setFixedOptLevel(int32_t)
OMR	Options	setForAllMethods(enum TR_CompilationOptions)
OMR	Options	setGCRCount(int32_t)
OMR	Options	setGcCardSize(uintptr_t)
OMR	Options	setGcMode(enum TR_WriteBarrierKind)
OMR	Options	setGlobalAggressiveAOT()
OMR	Options	setHeapAddressToCardAddressShift(uintptr_t)
OMR	Options	setHeapBase(uintptr_t)
OMR	Options	setHeapBaseForBarrierRange0(uintptr_t)
OMR	Options	setHeapSizeForBarrierRange0(uintptr_t)
OMR	Options	setHeapTop(uintptr_t)
OMR	Options	setInitialBCount(int32_t)
OMR	Options	setInitialCount(int32_t)
OMR	Options	setInitialMILCount(int32_t)
OMR	Options	setInlinerBorderFrequency(int32_t)
OMR	Options	setInlinerCGBorderFrequency(int32_t)
OMR	Options	setInlinerCGColdBorderFrequency(int32_t)
OMR	Options	setInlinerCGVeryColdBorderFrequency(int32_t)
OMR	Options	setInlinerColdBorderFrequency(int32_t)
OMR	Options	setInlinerVeryColdBorderFrequency(int32_t)
OMR	Options	setInlinerVeryColdBorderFrequencyAtCold(int32_t)
OMR	Options	setInsertGCRTrees()
OMR	Options	setIsFullyInitialized()
OMR	Options	setIsVariableActiveCardTableBase(uintptr_t)
OMR	Options	setIsVariableHeapBaseForBarrierRange0(uintptr_t)
OMR	Options	setIsVariableHeapSizeForBarrierRange0(uintptr_t)
OMR	Options	setJitMethodEntryAlignmentBoundary(int32_t)
OMR	Options	setLocalAggressiveAOT()
OMR	Options	setLogFile(TR::FILE *)
OMR	Options	setLogForCompilationThread(int32_t,TR::Options *)
OMR	Options	setLogListForOtherCompThreads(class TR_MCTLogs *)
OMR	Options	setMoreAggressiveInlining()
OMR	Options	setNumeric(char *,void *,TR::OptionTable *)
OMR	Options	setOptLevel(int32_t)
OMR	Options	setOption(uint32_t,_Bool)
OMR	Options	setOptionInAllOptionSets(uint32_t,_Bool)
OMR	Options	setQuickStart()
OMR	Options	setRealTimeGC(_Bool)
OMR	Options	setRegex(char *,void *,TR::OptionTable *)
OMR	Options	setSamplingJProfilingBits(char *,void *,TR::OptionTable *)
OMR	Options	setSamplingJProfilingOption(enum TR_SamplingJProfilingFlags)
OMR	Options	setScratchSpaceLimit(size_t)
OMR	Options	setScratchSpaceLowerBound(size_t)
OMR	Options	setSharedClassCache(_Bool)
OMR	Options	setStatic32BitValue(char *,void *,TR::OptionTable *)
OMR	Options	setStaticBool(char *,void *,TR::OptionTable *)
OMR	Options	setStaticHexadecimal(char *,void *,TR::OptionTable *)
OMR	Options	setStaticNumeric(char *,void *,TR::OptionTable *)
OMR	Options	setStaticNumericKBAdjusted(char *,void *,TR::OptionTable *)
OMR	Options	setStaticRegex(char *,void *,TR::OptionTable *)
OMR	Options	setStaticString(char *,void *,TR::OptionTable *)
OMR	Options	setString(char *,void *,TR::OptionTable *)
OMR	Options	setStringForPrivateBase(char *,void *,TR::OptionTable *)
OMR	Options	setStringInJitConfig(char *,void *,TR::OptionTable *)
OMR	Options	setTarget()
OMR	Options	setTrivialInlinerMaxSize(int32_t)
OMR	Options	setValue(char *,void *,TR::OptionTable *)
OMR	Options	setVerboseBits(char *,void *,TR::OptionTable *)
OMR	Options	setVerboseBitsHelper(char *,OMR::Options::VerboseOptionFlagArray *,uintptrj_t)
OMR	Options	setVerboseBitsInJitPrivateConfig(char *,void *,TR::OptionTable *)
OMR	Options	setVerboseOption(enum TR_VerboseFlags)
OMR	Options	setVerboseOptions(uint64_t)
OMR	Options	sharedClassCache()
OMR	Options	showOptionsInEffect()
OMR	Options	showPID()
OMR	Options	shutdown(class TR_FrontEnd *)
OMR	Options	startupTimeMatters()
OMR	Options	staticDebugCounterIsEnabled(const char *,int8_t)
OMR	Options	suppressLogFileBecauseDebugObjectNotCreated(_Bool)
OMR	Options	trace(OMR::Optimizations)
OMR	Options	traceOptimization(char *,void *,TR::OptionTable *)
OMR	Options	tracingOptimization()
OMR	Options	useCompressedPointers()
OMR	Options	validateOptions(void *,class TR_FrontEnd *)
OMR	Options	validateOptionsTables(void *,class TR_FrontEnd *)
OMR	Options	versionOption(char *,void *,TR::OptionTable *)
OMR	Options	operator=(class OMR::Options &&)
OMR	Options	operator=(const class OMR::Options &)
OMR	Options	setVerboseBitsHelper(char *,VerboseOptionFlagArray *,uintptrj_t)
OMR	Options	~Options()
OMR	RealRegister	RealRegister(const class OMR::RealRegister &)
OMR	RealRegister	RealRegister(class OMR::RealRegister &&)
OMR	RealRegister	RealRegister(TR::CodeGenerator *,OMR::RealRegister::RegNum)
OMR	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,uint16_t,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR	RealRegister	block()
OMR	RealRegister	getAvailableRegistersMask(enum TR_RegisterKinds)
OMR	RealRegister	getBitPosInMask(TR_RegisterMask)
OMR	RealRegister	getHasBeenAssignedInMethod()
OMR	RealRegister	getIsAssignedMoreThanOnce()
OMR	RealRegister	getIsAssignedOnce()
OMR	RealRegister	getIsFreeOnExit()
OMR	RealRegister	getIsSpillExtendedOutOfLoop()
OMR	RealRegister	getRealRegister()
OMR	RealRegister	getRealRegisterMask()
OMR	RealRegister	getRegister()
OMR	RealRegister	getRegisterNumber()
OMR	RealRegister	getState()
OMR	RealRegister	getWeight()
OMR	RealRegister	operator=(class OMR::RealRegister &&)
OMR	RealRegister	operator=(const class OMR::RealRegister &)
OMR	RealRegister	regMaskToRealRegister(TR_RegisterMask,enum TR_RegisterKinds,TR::CodeGenerator *)
OMR	RealRegister	resetState(OMR::RealRegister::RegState)
OMR	RealRegister	self()
OMR	RealRegister	setAssignedRegister(TR::Register *)
OMR	RealRegister	setHasBeenAssignedInMethod(_Bool)
OMR	RealRegister	setIsAssignedMoreThanOnce(_Bool)
OMR	RealRegister	setIsAssignedOnce(_Bool)
OMR	RealRegister	setIsFreeOnExit(_Bool)
OMR	RealRegister	setIsSpillExtendedOutOfLoop(_Bool)
OMR	RealRegister	setRealRegisterMask(OMR::RealRegister::RegMask)
OMR	RealRegister	setRegisterNumber(OMR::RealRegister::RegNum)
OMR	RealRegister	setState(OMR::RealRegister::RegState,_Bool)
OMR	RealRegister	setWeight(uint16_t)
OMR	RealRegister	unblock()
OMR	RealRegister	~RealRegister()
OMR	RealRegister	RealRegister(TR::CodeGenerator *,RegNum)
OMR	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,uint16_t,RegNum,RegMask,TR::CodeGenerator *)
OMR	RealRegister	resetState(RegState)
OMR	RealRegister	setRealRegisterMask(RegMask)
OMR	RealRegister	setRegisterNumber(RegNum)
OMR	RealRegister	setState(RegState,_Bool)
OMR	Register	Register(class OMR::Register &&)
OMR	Register	Register(const class OMR::Register &)
OMR	Register	Register(uint32_t)
OMR	Register	Register(enum TR_RegisterKinds)
OMR	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR	Register	block()
OMR	Register	containsCollectedReference()
OMR	Register	containsInternalPointer()
OMR	Register	decFutureUseCount(ncount_t)
OMR	Register	decOutOfLineUseCount(ncount_t)
OMR	Register	decTotalUseCount(ncount_t)
OMR	Register	getAssignedRealRegister()
OMR	Register	getAssignedRegister()
OMR	Register	getAssociation()
OMR	Register	getBackingStorage()
OMR	Register	getCCRegister()
OMR	Register	getEndOfRange()
OMR	Register	getFlags()
OMR	Register	getFutureUseCount()
OMR	Register	getHighOrder()
OMR	Register	getIndex()
OMR	Register	getKind()
OMR	Register	getKindAsMask()
OMR	Register	getLowOrder()
OMR	Register	getOutOfLineUseCount()
OMR	Register	getPinningArrayPointer()
OMR	Register	getRealRegister()
OMR	Register	getRegister()
OMR	Register	getRegisterKindName(TR::Compilation *,enum TR_RegisterKinds)
OMR	Register	getRegisterName(TR::Compilation *,enum TR_RegisterSizes)
OMR	Register	getRegisterPair()
OMR	Register	getSiblingRegister()
OMR	Register	getStartOfRange()
OMR	Register	getStartOfRangeNode()
OMR	Register	getTotalUseCount()
OMR	Register	incFutureUseCount(ncount_t)
OMR	Register	incOutOfLineUseCount(ncount_t)
OMR	Register	incTotalUseCount(ncount_t)
OMR	Register	isLive()
OMR	Register	isPlaceholderReg()
OMR	Register	isSinglePrecision()
OMR	Register	isUpperHalfDead()
OMR	Register	jitPersistentAlloc(size_t)
OMR	Register	jitPersistentFree(void *)
OMR	Register	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator delete(void *,size_t)
OMR	Register	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Register	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator delete(void *,TR::Region &)
OMR	Register	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Register	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator delete[](void *,TR::Region &)
OMR	Register	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Register	operator new(size_t,TR_ArenaAllocator *)
OMR	Register	operator new(size_t,class TR_PersistentMemory *)
OMR	Register	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Register	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator new(size_t,TR::Region &)
OMR	Register	operator new[](size_t,class TR_PersistentMemory *)
OMR	Register	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Register	operator new[](size_t,TR::Region &)
OMR	Register	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Register	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Register	operator=(class OMR::Register &&)
OMR	Register	operator=(const class OMR::Register &)
OMR	Register	print(TR::Compilation *,TR::FILE *,enum TR_RegisterSizes)
OMR	Register	resetIsLive()
OMR	Register	resetPlaceholderReg()
OMR	Register	self()
OMR	Register	setAssignedRegister(TR::Register *)
OMR	Register	setAssociation(uint32_t)
OMR	Register	setBackingStorage(class TR_BackingStore *)
OMR	Register	setCCRegister(TR::Register *)
OMR	Register	setContainsCollectedReference()
OMR	Register	setContainsInternalPointer()
OMR	Register	setEndOfRange(TR::Instruction *)
OMR	Register	setFlags(uint32_t)
OMR	Register	setFutureUseCount(ncount_t)
OMR	Register	setIndex(uint32_t)
OMR	Register	setIsLive()
OMR	Register	setIsSinglePrecision(_Bool)
OMR	Register	setIsUpperHalfDead(_Bool)
OMR	Register	setKind(enum TR_RegisterKinds)
OMR	Register	setOutOfLineUseCount(ncount_t)
OMR	Register	setPinningArrayPointer(TR::AutomaticSymbol *)
OMR	Register	setPlaceholderReg()
OMR	Register	setSiblingRegister(TR::Register *)
OMR	Register	setStartOfRange(TR::Instruction *)
OMR	Register	setStartOfRangeNode(TR::Node *)
OMR	Register	setTotalUseCount(ncount_t)
OMR	Register	unblock()
OMR	Register	~Register()
OMR	Register	getColouredRegister()
OMR	Register	setColouredRegister(TR::Register *)
OMR	RegisterIterator	getCurrent()
OMR	RegisterIterator	getFirst()
OMR	RegisterIterator	getNext()
OMR	RegisterIterator	jitPersistentAlloc(size_t)
OMR	RegisterIterator	jitPersistentFree(void *)
OMR	RegisterIterator	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator delete(void *,size_t)
OMR	RegisterIterator	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	RegisterIterator	operator delete(void *,TR::Region &)
OMR	RegisterIterator	operator delete[](void *,TR::Region &)
OMR	RegisterIterator	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	RegisterIterator	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator new(size_t,class TR_PersistentMemory *)
OMR	RegisterIterator	operator new(size_t,TR::Internal::PersistentNewType)
OMR	RegisterIterator	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator new(size_t,TR_ArenaAllocator *)
OMR	RegisterIterator	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	RegisterIterator	operator new(size_t,TR::Region &)
OMR	RegisterIterator	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator new[](size_t,TR::Region &)
OMR	RegisterIterator	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	RegisterIterator	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	RegisterIterator	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	RegisterIterator	operator new[](size_t,class TR_PersistentMemory *)
OMR	RegisterIterator	operator=(class OMR::RegisterIterator &&)
OMR	RegisterIterator	operator=(const class OMR::RegisterIterator &)
OMR	RegisterIterator	~RegisterIterator()
OMR	RegisterMappedSymbol	RegisterMappedSymbol(class OMR::RegisterMappedSymbol &&)
OMR	RegisterMappedSymbol	RegisterMappedSymbol(const class OMR::RegisterMappedSymbol &)
OMR	RegisterMappedSymbol	RegisterMappedSymbol(TR::DataType,uint32_t)
OMR	RegisterMappedSymbol	RegisterMappedSymbol(int32_t)
OMR	RegisterMappedSymbol	RegisterMappedSymbol(TR::DataType)
OMR	RegisterMappedSymbol	getGCMapIndex()
OMR	RegisterMappedSymbol	getLiveLocalIndex()
OMR	RegisterMappedSymbol	getMethodMetaDataType()
OMR	RegisterMappedSymbol	getOffset()
OMR	RegisterMappedSymbol	isLiveLocalIndexUninitialized()
OMR	RegisterMappedSymbol	operator=(const class OMR::RegisterMappedSymbol &)
OMR	RegisterMappedSymbol	operator=(class OMR::RegisterMappedSymbol &&)
OMR	RegisterMappedSymbol	self()
OMR	RegisterMappedSymbol	setGCMapIndex(int32_t)
OMR	RegisterMappedSymbol	setLiveLocalIndex(uint16_t,class TR_FrontEnd *)
OMR	RegisterMappedSymbol	setLiveLocalIndexUninitialized()
OMR	RegisterMappedSymbol	setMethodMetaDataType(enum TR_MethodMetaDataType)
OMR	RegisterMappedSymbol	setOffset(int32_t)
OMR	RegisterMappedSymbol	~RegisterMappedSymbol()
OMR	ResolvedMethodSymbol	ResolvedMethodSymbol(const class OMR::ResolvedMethodSymbol &)
OMR	ResolvedMethodSymbol	ResolvedMethodSymbol(class OMR::ResolvedMethodSymbol &&)
OMR	ResolvedMethodSymbol	ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *)
OMR	ResolvedMethodSymbol	addAutomatic(TR::AutomaticSymbol *)
OMR	ResolvedMethodSymbol	addMethodMetaDataSymbol(TR::RegisterMappedSymbol *)
OMR	ResolvedMethodSymbol	addOSRPoint(class TR_OSRPoint *)
OMR	ResolvedMethodSymbol	addProfilingOffsetInfo(int32_t,int32_t)
OMR	ResolvedMethodSymbol	addTrivialDeadTreeBlock(TR::Block *)
OMR	ResolvedMethodSymbol	addVariableSizeSymbol(TR::AutomaticSymbol *)
OMR	ResolvedMethodSymbol	canDirectNativeCall()
OMR	ResolvedMethodSymbol	canInjectInduceOSR(TR::Node *)
OMR	ResolvedMethodSymbol	canReplaceWithHWInstr()
OMR	ResolvedMethodSymbol	cannotAttemptOSRAt(TR_ByteCodeInfo &,TR::Block *,TR::Compilation *)
OMR	ResolvedMethodSymbol	cannotAttemptOSRDuring(int32_t,TR::Compilation *,_Bool)
OMR	ResolvedMethodSymbol	catchBlocksHaveRealPredecessors(TR::CFG *,TR::Compilation *)
OMR	ResolvedMethodSymbol	cleanupUnreachableOSRBlocks(int32_t,TR::Compilation *)
OMR	ResolvedMethodSymbol	clearProfilingOffsetInfo()
OMR	ResolvedMethodSymbol	comp()
OMR	ResolvedMethodSymbol	containsOnlySinglePrecision()
OMR	ResolvedMethodSymbol	detectInternalCycles(TR::CFG *,TR::Compilation *)
OMR	ResolvedMethodSymbol	doJSR292PerfTweaks()
OMR	ResolvedMethodSymbol	dumpProfilingOffsetInfo(TR::Compilation *)
OMR	ResolvedMethodSymbol	findOSRPoint(TR_ByteCodeInfo &)
OMR	ResolvedMethodSymbol	genAndAttachOSRCodeBlocks(int32_t)
OMR	ResolvedMethodSymbol	genIL(class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *,TR::IlGenRequest &)
OMR	ResolvedMethodSymbol	genInduceOSRCall(TR::TreeTop *,int32_t,int32_t,_Bool,_Bool,TR::CFG *)
OMR	ResolvedMethodSymbol	genInduceOSRCall(TR::TreeTop *,int32_t,class TR_OSRMethodData *,int32_t,_Bool,_Bool,TR::CFG *)
OMR	ResolvedMethodSymbol	genInduceOSRCallAndCleanUpFollowingTreesImmediately(TR::TreeTop *,TR_ByteCodeInfo,_Bool,TR::Compilation *)
OMR	ResolvedMethodSymbol	genInduceOSRCallNode(TR::TreeTop *,int32_t,_Bool,_Bool,TR::CFG *)
OMR	ResolvedMethodSymbol	genOSRHelperCall(int32_t,TR::SymbolReferenceTable *,TR::CFG *)
OMR	ResolvedMethodSymbol	genPartialIL(class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *,_Bool,class TR_InlineBlocks *)
OMR	ResolvedMethodSymbol	generateAccurateNodeCount()
OMR	ResolvedMethodSymbol	getArrayCopyTempSlot(class TR_FrontEnd *)
OMR	ResolvedMethodSymbol	getAutoSymRefs(int32_t)
OMR	ResolvedMethodSymbol	getAutoSymRefs()
OMR	ResolvedMethodSymbol	getAutomaticList()
OMR	ResolvedMethodSymbol	getFirstJitTempIndex()
OMR	ResolvedMethodSymbol	getFirstTreeTop()
OMR	ResolvedMethodSymbol	getFlowGraph()
OMR	ResolvedMethodSymbol	getLastTreeTop(TR::Block *)
OMR	ResolvedMethodSymbol	getLocalMappingCursor()
OMR	ResolvedMethodSymbol	getLogicalParameterList(TR::Compilation *)
OMR	ResolvedMethodSymbol	getMethodMetaDataList()
OMR	ResolvedMethodSymbol	getNumOSRPoints()
OMR	ResolvedMethodSymbol	getNumPPSlots()
OMR	ResolvedMethodSymbol	getNumParameterSlots()
OMR	ResolvedMethodSymbol	getNumberOfBackEdges()
OMR	ResolvedMethodSymbol	getOSRByteCodeInfo(TR::Node *)
OMR	ResolvedMethodSymbol	getOSRPoints()
OMR	ResolvedMethodSymbol	getOSRTransitionTreeTop(TR::TreeTop *)
OMR	ResolvedMethodSymbol	getObjectTempSlots()
OMR	ResolvedMethodSymbol	getParameterList()
OMR	ResolvedMethodSymbol	getParmSymRef(int32_t)
OMR	ResolvedMethodSymbol	getPendingPushSymRefs(int32_t)
OMR	ResolvedMethodSymbol	getPendingPushSymRefs()
OMR	ResolvedMethodSymbol	getProfilerFrequency(int32_t)
OMR	ResolvedMethodSymbol	getProfilingByteCodeIndex(int32_t)
OMR	ResolvedMethodSymbol	getProloguePushSlots()
OMR	ResolvedMethodSymbol	getPythonConstsSymbolRef()
OMR	ResolvedMethodSymbol	getResolvedMethod()
OMR	ResolvedMethodSymbol	getResolvedMethodIndex()
OMR	ResolvedMethodSymbol	getScalarTempSlots()
OMR	ResolvedMethodSymbol	getSyncObjectTemp()
OMR	ResolvedMethodSymbol	getSyncObjectTempIndex()
OMR	ResolvedMethodSymbol	getTempIndex()
OMR	ResolvedMethodSymbol	getThisTempForObjectCtor()
OMR	ResolvedMethodSymbol	getThisTempForObjectCtorIndex()
OMR	ResolvedMethodSymbol	getTrivialDeadTreeBlocksList()
OMR	ResolvedMethodSymbol	getVariableSizeSymbolList()
OMR	ResolvedMethodSymbol	hasBranches()
OMR	ResolvedMethodSymbol	hasCheckCasts()
OMR	ResolvedMethodSymbol	hasCheckcastsOrInstanceOfs()
OMR	ResolvedMethodSymbol	hasDememoizationOpportunities()
OMR	ResolvedMethodSymbol	hasEscapeAnalysisOpportunities()
OMR	ResolvedMethodSymbol	hasInstanceOfs()
OMR	ResolvedMethodSymbol	hasMethodHandleInvokes()
OMR	ResolvedMethodSymbol	hasNews()
OMR	ResolvedMethodSymbol	hasOSRProhibitions()
OMR	ResolvedMethodSymbol	hasSnapshots()
OMR	ResolvedMethodSymbol	hasThisCalls()
OMR	ResolvedMethodSymbol	hasUnkilledTemps()
OMR	ResolvedMethodSymbol	incTempIndex(class TR_FrontEnd *)
OMR	ResolvedMethodSymbol	induceImmediateOSRWithoutChecksBefore(TR::TreeTop *)
OMR	ResolvedMethodSymbol	induceOSRAfter(TR::TreeTop *,TR_ByteCodeInfo,TR::TreeTop *,_Bool,int32_t,TR::TreeTop **)
OMR	ResolvedMethodSymbol	initForCompilation(TR::Compilation *)
OMR	ResolvedMethodSymbol	insertRematableStoresFromCallSites(TR::Compilation *,int32_t,TR::TreeTop *)
OMR	ResolvedMethodSymbol	insertStoresForDeadStackSlots(TR::Compilation *,TR_ByteCodeInfo &,TR::TreeTop *,_Bool)
OMR	ResolvedMethodSymbol	insertStoresForDeadStackSlotsBeforeInducingOSR(TR::Compilation *,int32_t,TR_ByteCodeInfo &,TR::TreeTop *)
OMR	ResolvedMethodSymbol	isNoTemps()
OMR	ResolvedMethodSymbol	isOSRRelatedNode(TR::Node *,TR_ByteCodeInfo &)
OMR	ResolvedMethodSymbol	isOSRRelatedNode(TR::Node *)
OMR	ResolvedMethodSymbol	isSideEffectFree()
OMR	ResolvedMethodSymbol	matchInduceOSRCall(TR::TreeTop *,int16_t,int16_t,const char *)
OMR	ResolvedMethodSymbol	mayContainMonitors()
OMR	ResolvedMethodSymbol	mayHaveIndirectCalls()
OMR	ResolvedMethodSymbol	mayHaveInlineableCall()
OMR	ResolvedMethodSymbol	mayHaveLongOps()
OMR	ResolvedMethodSymbol	mayHaveLoops()
OMR	ResolvedMethodSymbol	mayHaveNestedLoops()
OMR	ResolvedMethodSymbol	operator=(class OMR::ResolvedMethodSymbol &&)
OMR	ResolvedMethodSymbol	operator=(const class OMR::ResolvedMethodSymbol &)
OMR	ResolvedMethodSymbol	prependEmptyFirstBlock()
OMR	ResolvedMethodSymbol	recursivelyCountChildren(TR::Node *)
OMR	ResolvedMethodSymbol	removeTree(TR::TreeTop *)
OMR	ResolvedMethodSymbol	removeUnusedLocals()
OMR	ResolvedMethodSymbol	resetLiveLocalIndices()
OMR	ResolvedMethodSymbol	self()
OMR	ResolvedMethodSymbol	setAutoSymRefs(TR_Array<List<TR::SymbolReference> > *)
OMR	ResolvedMethodSymbol	setAutomaticList(List<TR::AutomaticSymbol>)
OMR	ResolvedMethodSymbol	setCanDirectNativeCall(_Bool)
OMR	ResolvedMethodSymbol	setCanReplaceWithHWInstr(_Bool)
OMR	ResolvedMethodSymbol	setCannotAttemptOSR(int32_t)
OMR	ResolvedMethodSymbol	setComp(TR::Compilation *)
OMR	ResolvedMethodSymbol	setContainsOnlySinglePrecision(_Bool)
OMR	ResolvedMethodSymbol	setFirstJitTempIndex(int32_t)
OMR	ResolvedMethodSymbol	setFirstTreeTop(TR::TreeTop *)
OMR	ResolvedMethodSymbol	setFlowGraph(TR::CFG *)
OMR	ResolvedMethodSymbol	setHasBranches(_Bool)
OMR	ResolvedMethodSymbol	setHasCheckCasts(_Bool)
OMR	ResolvedMethodSymbol	setHasDememoizationOpportunities(_Bool)
OMR	ResolvedMethodSymbol	setHasInstanceOfs(_Bool)
OMR	ResolvedMethodSymbol	setHasMethodHandleInvokes(_Bool)
OMR	ResolvedMethodSymbol	setHasNews(_Bool)
OMR	ResolvedMethodSymbol	setHasSnapshots(_Bool)
OMR	ResolvedMethodSymbol	setHasThisCalls(_Bool)
OMR	ResolvedMethodSymbol	setHasUnkilledTemps(_Bool)
OMR	ResolvedMethodSymbol	setIsSideEffectFree(_Bool)
OMR	ResolvedMethodSymbol	setLocalMappingCursor(uint32_t)
OMR	ResolvedMethodSymbol	setMayContainMonitors(_Bool)
OMR	ResolvedMethodSymbol	setMayHaveIndirectCalls(_Bool)
OMR	ResolvedMethodSymbol	setMayHaveInlineableCall(_Bool)
OMR	ResolvedMethodSymbol	setMayHaveLongOps(_Bool)
OMR	ResolvedMethodSymbol	setMayHaveLoops(_Bool)
OMR	ResolvedMethodSymbol	setMayHaveNestedLoops(_Bool)
OMR	ResolvedMethodSymbol	setNoTemps(_Bool)
OMR	ResolvedMethodSymbol	setObjectTempSlots(uint32_t)
OMR	ResolvedMethodSymbol	setParameterList()
OMR	ResolvedMethodSymbol	setParmSymRef(int32_t,TR::SymbolReference *)
OMR	ResolvedMethodSymbol	setPendingPushSymRefs(TR_Array<List<TR::SymbolReference> > *)
OMR	ResolvedMethodSymbol	setProfilerFrequency(int32_t,int32_t)
OMR	ResolvedMethodSymbol	setProloguePushSlots(uint32_t)
OMR	ResolvedMethodSymbol	setResolvedMethod(class TR_ResolvedMethod *)
OMR	ResolvedMethodSymbol	setResolvedMethodIndex(class mcount_t)
OMR	ResolvedMethodSymbol	setScalarTempSlots(uint32_t)
OMR	ResolvedMethodSymbol	setSyncObjectTemp(TR::SymbolReference *)
OMR	ResolvedMethodSymbol	setTempIndex(int32_t,class TR_FrontEnd *)
OMR	ResolvedMethodSymbol	setThisTempForObjectCtor(TR::SymbolReference *)
OMR	ResolvedMethodSymbol	setUnimplementedOpcode(uint8_t)
OMR	ResolvedMethodSymbol	setUsesSinglePrecisionMode(_Bool)
OMR	ResolvedMethodSymbol	sharesStackSlot(TR::SymbolReference *)
OMR	ResolvedMethodSymbol	sharesStackSlots(TR::Compilation *)
OMR	ResolvedMethodSymbol	signature(class TR_Memory *)
OMR	ResolvedMethodSymbol	skipArrayStoreChecks()
OMR	ResolvedMethodSymbol	skipBoundChecks()
OMR	ResolvedMethodSymbol	skipCheckCasts()
OMR	ResolvedMethodSymbol	skipChecksOnArrayCopies()
OMR	ResolvedMethodSymbol	skipDivChecks()
OMR	ResolvedMethodSymbol	skipNullChecks()
OMR	ResolvedMethodSymbol	skipZeroInitializationOnNewarrays()
OMR	ResolvedMethodSymbol	supportsInduceOSR(TR_ByteCodeInfo &,TR::Block *,TR::Compilation *,_Bool)
OMR	ResolvedMethodSymbol	uncheckedSetTempIndex(int32_t)
OMR	ResolvedMethodSymbol	unimplementedOpcode()
OMR	ResolvedMethodSymbol	usesSinglePrecisionMode()
OMR	ResolvedMethodSymbol	~ResolvedMethodSymbol()
OMR	Snippet	Snippet(class OMR::Snippet &&)
OMR	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR	Snippet	Snippet(const class OMR::Snippet &)
OMR	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR	Snippet	cg()
OMR	Snippet	emitSnippet()
OMR	Snippet	emitSnippetBody()
OMR	Snippet	gcMap()
OMR	Snippet	getBlock()
OMR	Snippet	getLength(int32_t)
OMR	Snippet	getNode()
OMR	Snippet	getSnippetLabel()
OMR	Snippet	jitPersistentAlloc(size_t)
OMR	Snippet	jitPersistentFree(void *)
OMR	Snippet	needsExceptionTableEntry()
OMR	Snippet	operator delete(void *,TR::Region &)
OMR	Snippet	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Snippet	operator delete(void *,size_t)
OMR	Snippet	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Snippet	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator delete[](void *,TR::Region &)
OMR	Snippet	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Snippet	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Snippet	operator new(size_t,class TR_PersistentMemory *)
OMR	Snippet	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator new(size_t,TR_ArenaAllocator *)
OMR	Snippet	operator new(size_t,TR::Region &)
OMR	Snippet	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Snippet	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Snippet	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Snippet	operator new[](size_t,class TR_PersistentMemory *)
OMR	Snippet	operator new[](size_t,TR::Region &)
OMR	Snippet	operator=(class OMR::Snippet &&)
OMR	Snippet	operator=(const class OMR::Snippet &)
OMR	Snippet	prepareSnippetForGCSafePoint()
OMR	Snippet	print(TR::FILE *,class TR_Debug *)
OMR	Snippet	resetNeedsExceptionTableEntry()
OMR	Snippet	self()
OMR	Snippet	setBlock(TR::Block *)
OMR	Snippet	setCodeGenerator(TR::CodeGenerator *)
OMR	Snippet	setEstimatedCodeLocation(int32_t)
OMR	Snippet	setNeedsExceptionTableEntry()
OMR	Snippet	setNode(TR::Node *)
OMR	Snippet	setSnippetLabel(TR::LabelSymbol *)
OMR	Snippet	~Snippet()
OMR	StaticSymbol	StaticSymbol(class OMR::StaticSymbol &&)
OMR	StaticSymbol	StaticSymbol(TR::DataType,uint32_t)
OMR	StaticSymbol	StaticSymbol(TR::DataType,void *)
OMR	StaticSymbol	StaticSymbol(TR::DataType)
OMR	StaticSymbol	StaticSymbol(const class OMR::StaticSymbol &)
OMR	StaticSymbol	getName()
OMR	StaticSymbol	getStaticAddress()
OMR	StaticSymbol	getTOCIndex()
OMR	StaticSymbol	makeNamed(const char *)
OMR	StaticSymbol	operator=(class OMR::StaticSymbol &&)
OMR	StaticSymbol	operator=(const class OMR::StaticSymbol &)
OMR	StaticSymbol	self()
OMR	StaticSymbol	setStaticAddress(void *)
OMR	StaticSymbol	setTOCIndex(uint32_t)
OMR	StaticSymbol	setUpDLPFlags(int32_t)
OMR	StaticSymbol	~StaticSymbol()
OMR	Symbol	Symbol(TR::DataType,uint32_t)
OMR	Symbol	Symbol(TR::DataType)
OMR	Symbol	Symbol()
OMR	Symbol	Symbol(const class OMR::Symbol &)
OMR	Symbol	addressIsCPIndexOfStatic()
OMR	Symbol	behaveLikeNonTemp()
OMR	Symbol	castToAutoMarkerSymbol()
OMR	Symbol	castToAutoSymbol()
OMR	Symbol	castToCallSiteTableEntrySymbol()
OMR	Symbol	castToInternalPointerAutoSymbol()
OMR	Symbol	castToJittedMethodSymbol()
OMR	Symbol	castToLabelSymbol()
OMR	Symbol	castToLocalObjectSymbol()
OMR	Symbol	castToMethodMetaDataSymbol()
OMR	Symbol	castToMethodSymbol()
OMR	Symbol	castToMethodTypeTableEntrySymbol()
OMR	Symbol	castToNamedStaticSymbol()
OMR	Symbol	castToParmSymbol()
OMR	Symbol	castToRegisterMappedSymbol()
OMR	Symbol	castToResolvedMethodSymbol()
OMR	Symbol	castToShadowSymbol()
OMR	Symbol	castToStaticSymbol()
OMR	Symbol	castToVariableSizeSymbol()
OMR	Symbol	convertSigCharToType(char)
OMR	Symbol	convertTypeToNumberOfSlots(TR::DataType)
OMR	Symbol	convertTypeToSize(TR::DataType)
OMR	Symbol	dontEliminateStores(TR::Compilation *,_Bool)
OMR	Symbol	getAutoSymbol()
OMR	Symbol	getCallSiteTableEntrySymbol()
OMR	Symbol	getDataType()
OMR	Symbol	getFlags()
OMR	Symbol	getFlags2()
OMR	Symbol	getInternalPointerAutoSymbol()
OMR	Symbol	getJittedMethodSymbol()
OMR	Symbol	getKind()
OMR	Symbol	getLabelSymbol()
OMR	Symbol	getLocalIndex()
OMR	Symbol	getLocalObjectSymbol()
OMR	Symbol	getMethodMetaDataSymbol()
OMR	Symbol	getMethodSymbol()
OMR	Symbol	getMethodTypeTableEntrySymbol()
OMR	Symbol	getName()
OMR	Symbol	getNamedShadowSymbol()
OMR	Symbol	getNumberOfSlots()
OMR	Symbol	getOffset()
OMR	Symbol	getParmSymbol()
OMR	Symbol	getRecognizedStaticSymbol()
OMR	Symbol	getRegisterMappedSymbol()
OMR	Symbol	getResolvedMethodSymbol()
OMR	Symbol	getRestrictedRegisterNumber()
OMR	Symbol	getRoundedSize()
OMR	Symbol	getShadowSymbol()
OMR	Symbol	getSize()
OMR	Symbol	getStaticSymbol()
OMR	Symbol	getType()
OMR	Symbol	getVariableSizeSymbol()
OMR	Symbol	holdsMonitoredObject()
OMR	Symbol	isAddressOfClassObject()
OMR	Symbol	isArrayShadowSymbol()
OMR	Symbol	isArrayletShadowSymbol()
OMR	Symbol	isAuto()
OMR	Symbol	isAutoAddressTaken()
OMR	Symbol	isAutoField()
OMR	Symbol	isAutoMarkerSymbol()
OMR	Symbol	isAutoOrParm()
OMR	Symbol	isCallSiteTableEntry()
OMR	Symbol	isClassObject()
OMR	Symbol	isCollectedReference()
OMR	Symbol	isCompiledMethod()
OMR	Symbol	isConst()
OMR	Symbol	isConstMethodHandle()
OMR	Symbol	isConstMethodType()
OMR	Symbol	isConstObjectRef()
OMR	Symbol	isConstString()
OMR	Symbol	isCountForRecompile()
OMR	Symbol	isEndInternalControlFlow()
OMR	Symbol	isEndOfColdInstructionStream()
OMR	Symbol	isFinal()
OMR	Symbol	isFixedObjectRef()
OMR	Symbol	isGCRPatchPoint()
OMR	Symbol	isGlobalFragmentShadowSymbol()
OMR	Symbol	isGlobalLabel()
OMR	Symbol	isHasAddrTaken()
OMR	Symbol	isImmutableField()
OMR	Symbol	isInGlobalRegister()
OMR	Symbol	isInitializedReference()
OMR	Symbol	isInternalControlFlowMerge()
OMR	Symbol	isInternalPointer()
OMR	Symbol	isInternalPointerAuto()
OMR	Symbol	isJittedMethod()
OMR	Symbol	isLabel()
OMR	Symbol	isLocalObject()
OMR	Symbol	isMemoryTypeShadowSymbol()
OMR	Symbol	isMethod()
OMR	Symbol	isMethodMetaData()
OMR	Symbol	isMethodTypeTableEntry()
OMR	Symbol	isNamed()
OMR	Symbol	isNamedShadowSymbol()
OMR	Symbol	isNonLinear()
OMR	Symbol	isNotCollected()
OMR	Symbol	isNotDataAddress()
OMR	Symbol	isOrdered()
OMR	Symbol	isParm()
OMR	Symbol	isParmField()
OMR	Symbol	isParmHasToBeOnStack()
OMR	Symbol	isPendingPush()
OMR	Symbol	isPinningArrayPointer()
OMR	Symbol	isPrivate()
OMR	Symbol	isPythonConstantShadowSymbol()
OMR	Symbol	isPythonLocalVariableShadowSymbol()
OMR	Symbol	isPythonNameShadowSymbol()
OMR	Symbol	isRecognizedShadow()
OMR	Symbol	isRecognizedStatic()
OMR	Symbol	isRecompilationCounter()
OMR	Symbol	isReferenced()
OMR	Symbol	isReferencedParameter()
OMR	Symbol	isRegisterMappedSymbol()
OMR	Symbol	isRegularShadow()
OMR	Symbol	isReinstatedReceiver()
OMR	Symbol	isRelativeLabel()
OMR	Symbol	isResolvedMethod()
OMR	Symbol	isShadow()
OMR	Symbol	isSlotSharedByRefAndNonRef()
OMR	Symbol	isSpillTempAuto()
OMR	Symbol	isSpillTempLoaded()
OMR	Symbol	isStartInternalControlFlow()
OMR	Symbol	isStartOfColdInstructionStream()
OMR	Symbol	isStartPC()
OMR	Symbol	isStatic()
OMR	Symbol	isStaticField()
OMR	Symbol	isSyncVolatile()
OMR	Symbol	isThisTempForObjectCtor()
OMR	Symbol	isUnsafeShadowSymbol()
OMR	Symbol	isVariableSizeSymbol()
OMR	Symbol	isVolatile()
OMR	Symbol	isWeakSymbol()
OMR	Symbol	jitPersistentAlloc(size_t)
OMR	Symbol	jitPersistentFree(void *)
OMR	Symbol	operator delete(void *,size_t)
OMR	Symbol	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator delete(void *,TR::Region &)
OMR	Symbol	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete[](void *,TR::Region &)
OMR	Symbol	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator new(size_t,TR::Region &)
OMR	Symbol	operator new(size_t,TR_ArenaAllocator *)
OMR	Symbol	operator new(size_t,class TR_PersistentMemory *)
OMR	Symbol	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Symbol	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator new[](size_t,TR::Region &)
OMR	Symbol	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator new[](size_t,class TR_PersistentMemory *)
OMR	Symbol	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Symbol	operator=(const class OMR::Symbol &)
OMR	Symbol	resetReferencedParameter()
OMR	Symbol	resetVolatile()
OMR	Symbol	self()
OMR	Symbol	setAddressIsCPIndexOfStatic(_Bool)
OMR	Symbol	setAddressOfClassObject()
OMR	Symbol	setArrayShadowSymbol()
OMR	Symbol	setArrayletShadowSymbol()
OMR	Symbol	setAutoAddressTaken()
OMR	Symbol	setAutoMarkerSymbol()
OMR	Symbol	setBehaveLikeNonTemp()
OMR	Symbol	setCallSiteTableEntry()
OMR	Symbol	setClassObject()
OMR	Symbol	setCompiledMethod()
OMR	Symbol	setConst()
OMR	Symbol	setConstMethodHandle()
OMR	Symbol	setConstMethodType()
OMR	Symbol	setConstString()
OMR	Symbol	setCountForRecompile()
OMR	Symbol	setDataType(TR::DataType)
OMR	Symbol	setEndInternalControlFlow()
OMR	Symbol	setEndOfColdInstructionStream()
OMR	Symbol	setFinal()
OMR	Symbol	setFlagValue(uint32_t,_Bool)
OMR	Symbol	setGCRPatchPoint()
OMR	Symbol	setGlobalFragmentShadowSymbol()
OMR	Symbol	setGlobalLabel()
OMR	Symbol	setHasAddrTaken()
OMR	Symbol	setHoldsMonitoredObject()
OMR	Symbol	setImmutableField()
OMR	Symbol	setInitializedReference()
OMR	Symbol	setInternalControlFlowMerge()
OMR	Symbol	setInternalPointer()
OMR	Symbol	setIsInGlobalRegister(_Bool)
OMR	Symbol	setIsLabel()
OMR	Symbol	setIsPendingPush()
OMR	Symbol	setLocalIndex(uint16_t)
OMR	Symbol	setLocalObject()
OMR	Symbol	setMemoryTypeShadowSymbol()
OMR	Symbol	setMethodTypeTableEntry()
OMR	Symbol	setName(const char *)
OMR	Symbol	setNamedShadowSymbol()
OMR	Symbol	setNonLinear()
OMR	Symbol	setNotCollected()
OMR	Symbol	setNotDataAddress()
OMR	Symbol	setOrdered()
OMR	Symbol	setParmHasToBeOnStack()
OMR	Symbol	setPinningArrayPointer()
OMR	Symbol	setPrivate()
OMR	Symbol	setPythonConstantShadowSymbol()
OMR	Symbol	setPythonLocalVariableShadowSymbol()
OMR	Symbol	setPythonNameShadowSymbol()
OMR	Symbol	setRecompilationCounter()
OMR	Symbol	setReferencedParameter()
OMR	Symbol	setReinstatedReceiver()
OMR	Symbol	setRelativeLabel()
OMR	Symbol	setSize(size_t)
OMR	Symbol	setSlotSharedByRefAndNonRef(_Bool)
OMR	Symbol	setSpillTempAuto()
OMR	Symbol	setSpillTempLoaded()
OMR	Symbol	setStartInternalControlFlow()
OMR	Symbol	setStartOfColdInstructionStream()
OMR	Symbol	setStartPC()
OMR	Symbol	setThisTempForObjectCtor()
OMR	Symbol	setUninitializedReference()
OMR	Symbol	setUnsafeShadowSymbol()
OMR	Symbol	setVariableSizeSymbol()
OMR	Symbol	setVolatile()
OMR	Symbol	~Symbol()
OMR	SymbolReference	SymbolReference(class OMR::SymbolReference &&)
OMR	SymbolReference	SymbolReference(const class OMR::SymbolReference &)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t)
OMR	SymbolReference	SymbolReference()
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t)
OMR	SymbolReference	addToOffset(intptrj_t)
OMR	SymbolReference	canCauseGC()
OMR	SymbolReference	canGCandExcept()
OMR	SymbolReference	canGCandReturn()
OMR	SymbolReference	canKill(TR::SymbolReference *)
OMR	SymbolReference	copyAliasSets(TR::SymbolReference *,TR::SymbolReferenceTable *)
OMR	SymbolReference	copyFlags(TR::SymbolReference *)
OMR	SymbolReference	copyRefNumIfPossible(TR::SymbolReference *,TR::SymbolReferenceTable *)
OMR	SymbolReference	create(TR::SymbolReferenceTable *,TR::Symbol *,TR::class KnownObjectTable::Index)
OMR	SymbolReference	getCPIndex()
OMR	SymbolReference	getExtraInfo()
OMR	SymbolReference	getIndependentSymRefs()
OMR	SymbolReference	getKnownObjectIndex()
OMR	SymbolReference	getKnownObjectReferenceLocation(TR::Compilation *)
OMR	SymbolReference	getMethodAddress()
OMR	SymbolReference	getName(class TR_Debug *)
OMR	SymbolReference	getOffset()
OMR	SymbolReference	getOwningMethod(TR::Compilation *)
OMR	SymbolReference	getOwningMethodIndex()
OMR	SymbolReference	getOwningMethodSymbol(TR::Compilation *)
OMR	SymbolReference	getReferenceNumber()
OMR	SymbolReference	getSize()
OMR	SymbolReference	getSymbol()
OMR	SymbolReference	getTypeSignature(int32_t &,enum TR_AllocationKind,_Bool *)
OMR	SymbolReference	getUnresolvedIndex()
OMR	SymbolReference	getUseDefAliases(_Bool,_Bool)
OMR	SymbolReference	getUseDefAliasesBV(_Bool,_Bool)
OMR	SymbolReference	getUseDefAliasesIncludingGCSafePoint(_Bool)
OMR	SymbolReference	getUseonlyAliases()
OMR	SymbolReference	getUseonlyAliasesBV(TR::SymbolReferenceTable *)
OMR	SymbolReference	hasBeenAccessedAtRuntime()
OMR	SymbolReference	hasKnownObjectIndex()
OMR	SymbolReference	hasTemporaryNegativeOffset()
OMR	SymbolReference	holdsMonitoredObjectForSyncMethod()
OMR	SymbolReference	init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool)
OMR	SymbolReference	isAdjunct()
OMR	SymbolReference	isDual()
OMR	SymbolReference	isFromLiteralPool()
OMR	SymbolReference	isInitMethod()
OMR	SymbolReference	isLitPoolReference()
OMR	SymbolReference	isLiteralPoolAddress()
OMR	SymbolReference	isOverriddenBitAddress()
OMR	SymbolReference	isSideEffectInfo()
OMR	SymbolReference	isTempVariableSizeSymRef()
OMR	SymbolReference	isTemporary(TR::Compilation *)
OMR	SymbolReference	isThisPointer()
OMR	SymbolReference	isUnresolved()
OMR	SymbolReference	isUnresolvedFieldInCP(TR::Compilation *)
OMR	SymbolReference	isUnresolvedMethodInCP(TR::Compilation *)
OMR	SymbolReference	jitPersistentAlloc(size_t)
OMR	SymbolReference	jitPersistentFree(void *)
OMR	SymbolReference	makeIndependent(TR::SymbolReferenceTable *,TR::SymbolReference *)
OMR	SymbolReference	maybeVolatile()
OMR	SymbolReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	SymbolReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator delete(void *,size_t)
OMR	SymbolReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator delete(void *,TR::Region &)
OMR	SymbolReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator delete[](void *,TR::Region &)
OMR	SymbolReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	SymbolReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator new(size_t,TR::Region &)
OMR	SymbolReference	operator new(size_t,class TR_PersistentMemory *)
OMR	SymbolReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR	SymbolReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	SymbolReference	operator new(size_t,TR_ArenaAllocator *)
OMR	SymbolReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	SymbolReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	SymbolReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	SymbolReference	operator new[](size_t,TR::Region &)
OMR	SymbolReference	operator new[](size_t,class TR_PersistentMemory *)
OMR	SymbolReference	operator=(class OMR::SymbolReference &&)
OMR	SymbolReference	operator=(const class OMR::SymbolReference &)
OMR	SymbolReference	reallySharesSymbol()
OMR	SymbolReference	reallySharesSymbol(TR::Compilation *)
OMR	SymbolReference	resetHasTemporaryNegativeOffset()
OMR	SymbolReference	self()
OMR	SymbolReference	setAliasedTo(TR::SymbolReference *,_Bool)
OMR	SymbolReference	setAliasedTo(class TR_BitVector &,TR::SymbolReferenceTable *,_Bool)
OMR	SymbolReference	setCPIndex(int32_t)
OMR	SymbolReference	setCanGCandExcept()
OMR	SymbolReference	setCanGCandReturn()
OMR	SymbolReference	setEmptyUseDefAliases(TR::SymbolReferenceTable *)
OMR	SymbolReference	setExtraInfo(struct TR_ExtraInfoForNew *)
OMR	SymbolReference	setFromLiteralPool()
OMR	SymbolReference	setHasBeenAccessedAtRuntime(enum TR_YesNoMaybe)
OMR	SymbolReference	setHasTemporaryNegativeOffset()
OMR	SymbolReference	setHoldsMonitoredObjectForSyncMethod()
OMR	SymbolReference	setIndependentSymRefs(class TR_BitVector *)
OMR	SymbolReference	setInitMethod()
OMR	SymbolReference	setIsAdjunct()
OMR	SymbolReference	setIsDual()
OMR	SymbolReference	setIsTempVariableSizeSymRef()
OMR	SymbolReference	setLiteralPoolAddress()
OMR	SymbolReference	setLiteralPoolAliases(class TR_BitVector *,TR::SymbolReferenceTable *)
OMR	SymbolReference	setOffset(intptrj_t)
OMR	SymbolReference	setOverriddenBitAddress()
OMR	SymbolReference	setOwningMethodIndex(class mcount_t)
OMR	SymbolReference	setReallySharesSymbol()
OMR	SymbolReference	setReferenceNumber(int32_t)
OMR	SymbolReference	setSharedShadowAliases(class TR_BitVector *,TR::SymbolReferenceTable *)
OMR	SymbolReference	setSharedStaticAliases(class TR_BitVector *,TR::SymbolReferenceTable *)
OMR	SymbolReference	setSideEffectInfo()
OMR	SymbolReference	setSize(uint32_t)
OMR	SymbolReference	setStackAllocatedArrayAccess()
OMR	SymbolReference	setSymbol(TR::Symbol *)
OMR	SymbolReference	setUnresolved()
OMR	SymbolReference	setUseDefAliases(class TR_BitVector *)
OMR	SymbolReference	sharesSymbol(_Bool)
OMR	SymbolReference	stackAllocatedArrayAccess()
OMR	SymbolReference	storeCanBeRemoved()
OMR	SymbolReference	willUse(TR::SymbolReference *,TR::SymbolReferenceTable *)
OMR	SymbolReference	~SymbolReference()
OMR	TreeEvaluator	badILOpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	checkNonNegativePowerOfTwo(int32_t)
OMR	TreeEvaluator	checkNonNegativePowerOfTwo(int64_t)
OMR	TreeEvaluator	checkPositiveOrNegativePowerOfTwo(int32_t)
OMR	TreeEvaluator	checkPositiveOrNegativePowerOfTwo(int64_t)
OMR	TreeEvaluator	classDepth(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	compressedRefsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	computeCCEvaluator(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	evaluateNodesWithFutureUses(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	getHighGlobalRegisterNumberIfAny(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	initializeStrictlyFutureUseCounts(TR::Node *,vcount_t,TR::CodeGenerator *)
OMR	TreeEvaluator	instanceOfOrCheckCastNeedEqualityTest(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	instanceOfOrCheckCastNeedSuperTest(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	isStaticClassSymRef(TR::SymbolReference *)
OMR	TreeEvaluator	nodeIsIAddOverflowCheck(TR::Node *,struct OMR::TreeEvaluator::TR_ArithmeticOverflowCheckNodes *)
OMR	TreeEvaluator	nodeIsIArithmeticOverflowCheck(TR::Node *,struct OMR::TreeEvaluator::TR_ArithmeticOverflowCheckNodes *)
OMR	TreeEvaluator	nodeIsISubOverflowCheck(TR::Node *,struct OMR::TreeEvaluator::TR_ArithmeticOverflowCheckNodes *)
OMR	TreeEvaluator	nodeIsLAddOverflowCheck(TR::Node *,struct OMR::TreeEvaluator::TR_ArithmeticOverflowCheckNodes *)
OMR	TreeEvaluator	nodeIsLArithmeticOverflowCheck(TR::Node *,struct OMR::TreeEvaluator::TR_ArithmeticOverflowCheckNodes *)
OMR	TreeEvaluator	nodeIsLSubOverflowCheck(TR::Node *,struct OMR::TreeEvaluator::TR_ArithmeticOverflowCheckNodes *)
OMR	TreeEvaluator	unImpOpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR	TreeEvaluator	TreeEvaluator(class OMR::TreeEvaluator &&)
OMR	TreeEvaluator	TreeEvaluator(const class OMR::TreeEvaluator &)
OMR	TreeEvaluator	TreeEvaluator()
OMR	TreeEvaluator	~TreeEvaluator()
OMR	TreeTop	TreeTop(class OMR::TreeTop &&)
OMR	TreeTop	TreeTop(TR::TreeTop *,TR::Node *,TR::Compilation *)
OMR	TreeTop	TreeTop(const class OMR::TreeTop &)
OMR	TreeTop	TreeTop(TR::Node *,TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	adjustBranchOrSwitchTreeTop(TR::Compilation *,TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	create(TR::Compilation *,TR::TreeTop *,TR::Node *)
OMR	TreeTop	create(TR::Compilation *,TR::Node *,TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	create(TR::Compilation *)
OMR	TreeTop	createIncTree(TR::Compilation *,TR::Node *,TR::SymbolReference *,int32_t,TR::TreeTop *,_Bool)
OMR	TreeTop	createResetTree(TR::Compilation *,TR::Node *,TR::SymbolReference *,int32_t,TR::TreeTop *,_Bool)
OMR	TreeTop	duplicateTree()
OMR	TreeTop	getEnclosingBlock(_Bool)
OMR	TreeTop	getExtendedBlockExitTreeTop()
OMR	TreeTop	getLastInstruction()
OMR	TreeTop	getNextRealTreeTop()
OMR	TreeTop	getNextTreeTop()
OMR	TreeTop	getNode()
OMR	TreeTop	getPrevRealTreeTop()
OMR	TreeTop	getPrevTreeTop()
OMR	TreeTop	insertAfter(TR::TreeTop *)
OMR	TreeTop	insertBefore(TR::TreeTop *)
OMR	TreeTop	insertNewTreeTop(TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	insertTreeTops(TR::Compilation *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	insertTreeTopsAfterMe(TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	insertTreeTopsBeforeMe(TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	isLegalToChangeBranchDestination(TR::Compilation *)
OMR	TreeTop	isPossibleDef()
OMR	TreeTop	jitPersistentAlloc(size_t)
OMR	TreeTop	jitPersistentFree(void *)
OMR	TreeTop	join(TR::TreeTop *)
OMR	TreeTop	operator new(size_t,_Bool,class TR_Memory *)
OMR	TreeTop	removeDeadTrees(TR::Compilation *,TR::TreeTop *,TR::TreeTop *)
OMR	TreeTop	removeDeadTrees(TR::Compilation *,TR::TreeTop *[])
OMR	TreeTop	self()
OMR	TreeTop	setLastInstruction(TR::Instruction *)
OMR	TreeTop	setNextTreeTop(TR::TreeTop *)
OMR	TreeTop	setNode(TR::Node *)
OMR	TreeTop	setPrevTreeTop(TR::TreeTop *)
OMR	TreeTop	unlink(_Bool)
OMR	TreeTop	~TreeTop()
OMR	VMEnv	OSRFrameHeaderSizeInBytes(TR::Compilation *)
OMR	VMEnv	OSRFrameSizeInBytes(TR::Compilation *,class TR_OpaqueMethodBlock *)
OMR	VMEnv	VMEnv()
OMR	VMEnv	VMEnv(class OMR::VMEnv &&)
OMR	VMEnv	VMEnv(const class OMR::VMEnv &)
OMR	VMEnv	acquireVMAccessIfNeeded(TR::Compilation *)
OMR	VMEnv	acquireVMAccessIfNeeded(struct OMR_VMThread *)
OMR	VMEnv	canAnyMethodEventsBeHooked(TR::Compilation *)
OMR	VMEnv	canMethodEnterEventBeHooked(TR::Compilation *)
OMR	VMEnv	canMethodExitEventBeHooked(TR::Compilation *)
OMR	VMEnv	cpuTimeSpentInCompilationThread(TR::Compilation *)
OMR	VMEnv	ensureOSRBufferSize(TR::Compilation *,uintptrj_t,uintptrj_t,uintptrj_t)
OMR	VMEnv	getHighResClock(TR::Compilation *)
OMR	VMEnv	getHighResClock(struct OMR_VMThread *)
OMR	VMEnv	getHighResClockResolution()
OMR	VMEnv	getOverflowSafeAllocSize(TR::Compilation *)
OMR	VMEnv	getUSecClock(TR::Compilation *)
OMR	VMEnv	getUSecClock()
OMR	VMEnv	getUSecClock(struct OMR_VMThread *)
OMR	VMEnv	hasAccess(TR::Compilation *)
OMR	VMEnv	hasAccess(struct OMR_VMThread *)
OMR	VMEnv	hasResumableTrapHandler(struct OMR_VMThread *)
OMR	VMEnv	hasResumableTrapHandler(TR::Compilation *)
OMR	VMEnv	heapBaseAddress()
OMR	VMEnv	heapTailPaddingSizeInBytes()
OMR	VMEnv	maxHeapSizeInBytes()
OMR	VMEnv	operator=(class OMR::VMEnv &&)
OMR	VMEnv	operator=(const class OMR::VMEnv &)
OMR	VMEnv	releaseAccess(struct OMR_VMThread *)
OMR	VMEnv	releaseAccess(TR::Compilation *)
OMR	VMEnv	releaseVMAccessIfNeeded(TR::Compilation *,_Bool)
OMR	VMEnv	releaseVMAccessIfNeeded(struct OMR_VMThread *,_Bool)
OMR	VMEnv	self()
OMR	VMEnv	thisThreadGetConcurrentScavengeActiveByteAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetEvacuateBaseAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetEvacuateTopAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetGSHandlerAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetGSIntermediateResultOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetGSOperandAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetOSRReturnAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetPendingExceptionOffset()
OMR	VMEnv	tryToAcquireAccess(struct OMR_VMThread *,_Bool *)
OMR	VMEnv	tryToAcquireAccess(TR::Compilation *,_Bool *)
OMR	VMEnv	~VMEnv()
OMR	VMEnv	acquireVMAccessIfNeeded(OMR_VMThread *)
OMR	VMEnv	getHighResClock(OMR_VMThread *)
OMR	VMEnv	getUSecClock(OMR_VMThread *)
OMR	VMEnv	hasAccess(OMR_VMThread *)
OMR	VMEnv	hasResumableTrapHandler(OMR_VMThread *)
OMR	VMEnv	releaseAccess(OMR_VMThread *)
OMR	VMEnv	releaseVMAccessIfNeeded(OMR_VMThread *,_Bool)
OMR	VMEnv	tryToAcquireAccess(OMR_VMThread *,_Bool *)
OMR	VMMethodEnv	VMMethodEnv(const class OMR::VMMethodEnv &)
OMR	VMMethodEnv	VMMethodEnv(class OMR::VMMethodEnv &&)
OMR	VMMethodEnv	VMMethodEnv()
OMR	VMMethodEnv	hasBackwardBranches(class TR_OpaqueMethodBlock *)
OMR	VMMethodEnv	isCompiledMethod(class TR_OpaqueMethodBlock *)
OMR	VMMethodEnv	operator=(class OMR::VMMethodEnv &&)
OMR	VMMethodEnv	operator=(const class OMR::VMMethodEnv &)
OMR	VMMethodEnv	startPC(class TR_OpaqueMethodBlock *)
OMR	VMMethodEnv	~VMMethodEnv()
OMR::X86::AMD64	CodeGenerator	CodeGenerator()
OMR::X86::AMD64	CodeGenerator	CodeGenerator(class OMR::X86::AMD64::CodeGenerator &&)
OMR::X86::AMD64	CodeGenerator	CodeGenerator(const class OMR::X86::AMD64::CodeGenerator &)
OMR::X86::AMD64	CodeGenerator	getGlobalFPRsPreservedAcrossCalls()
OMR::X86::AMD64	CodeGenerator	getGlobalGPRsPreservedAcrossCalls()
OMR::X86::AMD64	CodeGenerator	getLinkageGlobalRegisterNumber(int8_t,TR::DataType)
OMR::X86::AMD64	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *)
OMR::X86::AMD64	CodeGenerator	initLinkageToGlobalRegisterMap()
OMR::X86::AMD64	CodeGenerator	internalPointerSupportImplemented()
OMR::X86::AMD64	CodeGenerator	longClobberEvaluate(TR::Node *)
OMR::X86::AMD64	CodeGenerator	opCodeIsNoOpOnThisPlatform(TR::ILOpCode &)
OMR::X86::AMD64	CodeGenerator	operator=(const class OMR::X86::AMD64::CodeGenerator &)
OMR::X86::AMD64	CodeGenerator	operator=(class OMR::X86::AMD64::CodeGenerator &&)
OMR::X86::AMD64	CodeGenerator	~CodeGenerator()
OMR::X86::AMD64	Machine	Machine(class OMR::X86::AMD64::Machine &&)
OMR::X86::AMD64	Machine	Machine(const class OMR::X86::AMD64::Machine &)
OMR::X86::AMD64	Machine	Machine(TR::CodeGenerator *)
OMR::X86::AMD64	Machine	disableNewPickRegister()
OMR::X86::AMD64	Machine	enableNewPickRegister()
OMR::X86::AMD64	Machine	numGPRRegsWithheld(TR::CodeGenerator *)
OMR::X86::AMD64	Machine	numRegsWithheld(TR::CodeGenerator *)
OMR::X86::AMD64	Machine	operator=(const class OMR::X86::AMD64::Machine &)
OMR::X86::AMD64	Machine	operator=(class OMR::X86::AMD64::Machine &&)
OMR::X86::AMD64	Machine	~Machine()
OMR::X86::AMD64	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::X86::AMD64	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::X86::AMD64	RealRegister	RealRegister(class OMR::X86::AMD64::RealRegister &&)
OMR::X86::AMD64	RealRegister	RealRegister(const class OMR::X86::AMD64::RealRegister &)
OMR::X86::AMD64	RealRegister	fprMask(OMR::RealRegister::RegNum)
OMR::X86::AMD64	RealRegister	gprMask(OMR::RealRegister::RegNum)
OMR::X86::AMD64	RealRegister	mmIndex(uint8_t)
OMR::X86::AMD64	RealRegister	mmrMask(OMR::RealRegister::RegNum)
OMR::X86::AMD64	RealRegister	needsDisp()
OMR::X86::AMD64	RealRegister	needsSIB()
OMR::X86::AMD64	RealRegister	operator=(const class OMR::X86::AMD64::RealRegister &)
OMR::X86::AMD64	RealRegister	operator=(class OMR::X86::AMD64::RealRegister &&)
OMR::X86::AMD64	RealRegister	rIndex(uint8_t)
OMR::X86::AMD64	RealRegister	rexBits(uint8_t,_Bool)
OMR::X86::AMD64	RealRegister	setBaseRegisterFieldInSIB(uint8_t *)
OMR::X86::AMD64	RealRegister	setIndexRegisterFieldInSIB(uint8_t *)
OMR::X86::AMD64	RealRegister	setRMRegisterFieldInModRM(uint8_t *)
OMR::X86::AMD64	RealRegister	setRegisterFieldInModRM(uint8_t *)
OMR::X86::AMD64	RealRegister	setRegisterFieldInOpcode(uint8_t *)
OMR::X86::AMD64	RealRegister	setRegisterNumber()
OMR::X86::AMD64	RealRegister	xmmIndex(uint8_t)
OMR::X86::AMD64	RealRegister	xmmrMask(OMR::RealRegister::RegNum)
OMR::X86::AMD64	RealRegister	~RealRegister()
OMR::X86::AMD64	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::X86::AMD64	RealRegister	fprMask(RegNum)
OMR::X86::AMD64	RealRegister	gprMask(RegNum)
OMR::X86::AMD64	RealRegister	mmrMask(RegNum)
OMR::X86::AMD64	RealRegister	xmmrMask(RegNum)
OMR::X86::AMD64	TreeEvaluator	acmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	aconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	aiaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	b2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	bu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	c2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	dbits2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	i2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	ifacmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	iflcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	iflcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	iflcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	iflcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	iflcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	iflcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	iu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	l2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	l2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	l2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	laddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	landEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lbits2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lcmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	longStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	lxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	s2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	su2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::AMD64	TreeEvaluator	TreeEvaluator()
OMR::X86::AMD64	TreeEvaluator	TreeEvaluator(const class OMR::X86::AMD64::TreeEvaluator &)
OMR::X86::AMD64	TreeEvaluator	TreeEvaluator(class OMR::X86::AMD64::TreeEvaluator &&)
OMR::X86::AMD64	TreeEvaluator	~TreeEvaluator()
OMR::X86	CodeGenerator	CodeGenerator()
OMR::X86	CodeGenerator	CodeGenerator(const class OMR::X86::CodeGenerator &)
OMR::X86	CodeGenerator	CodeGenerator(class OMR::X86::CodeGenerator &&)
OMR::X86	CodeGenerator	addClobberingInstruction(TR::ClobberingInstruction *)
OMR::X86	CodeGenerator	addDependentDiscardableRegister(TR::Register *)
OMR::X86	CodeGenerator	addLiveDiscardableRegister(TR::Register *)
OMR::X86	CodeGenerator	addMetaDataForBranchTableAddress(uint8_t *,TR::Node *,TR::X86MemTableInstruction *)
OMR::X86	CodeGenerator	alignment(void *,intptrj_t,intptrj_t)
OMR::X86	CodeGenerator	alignment(intptrj_t,intptrj_t,intptrj_t)
OMR::X86	CodeGenerator	allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *)
OMR::X86	CodeGenerator	allowGuardMerging()
OMR::X86	CodeGenerator	allowVMThreadRematerialization()
OMR::X86	CodeGenerator	apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR::X86	CodeGenerator	apply32BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t)
OMR::X86	CodeGenerator	arrayInitMinimumNumberOfBytes()
OMR::X86	CodeGenerator	arrayTranslateAndTestMinimumNumberOfIterations()
OMR::X86	CodeGenerator	arrayTranslateMinimumNumberOfElements(_Bool,_Bool)
OMR::X86	CodeGenerator	beginInstructionSelection()
OMR::X86	CodeGenerator	branchDisplacementToHelperOrTrampoline(uint8_t *,TR::SymbolReference *)
OMR::X86	CodeGenerator	buildRegisterMapForInstruction(class TR_GCStackMap *)
OMR::X86	CodeGenerator	canFoldLargeOffsetInAddressing()
OMR::X86	CodeGenerator	canNullChkBeImplicit(TR::Node *)
OMR::X86	CodeGenerator	canTransformUnsafeCopyToArrayCopy()
OMR::X86	CodeGenerator	clobberLiveDependentDiscardableRegisters(TR::ClobberingInstruction *,TR::Register *)
OMR::X86	CodeGenerator	clobberLiveDiscardableRegisters(TR::Instruction *,TR::MemoryReference *)
OMR::X86	CodeGenerator	codegenSupportsUnsignedIntegerDivide()
OMR::X86	CodeGenerator	computeRegisterSaveDescription(class TR_BitVector *,_Bool)
OMR::X86	CodeGenerator	create16ByteData(TR::Node *,void *)
OMR::X86	CodeGenerator	create2ByteData(TR::Node *,int16_t)
OMR::X86	CodeGenerator	create4ByteData(TR::Node *,int32_t)
OMR::X86	CodeGenerator	create8ByteData(TR::Node *,int64_t)
OMR::X86	CodeGenerator	createLinkage(enum TR_LinkageConventions)
OMR::X86	CodeGenerator	deactivateDependentDiscardableRegisters(TR::Register *)
OMR::X86	CodeGenerator	doBackwardsRegisterAssignment(enum TR_RegisterKinds,TR::Instruction *,TR::Instruction *)
OMR::X86	CodeGenerator	doBinaryEncoding()
OMR::X86	CodeGenerator	doRegisterAssignment(enum TR_RegisterKinds)
OMR::X86	CodeGenerator	doRematerialization()
OMR::X86	CodeGenerator	doubleClobberEvaluate(TR::Node *)
OMR::X86	CodeGenerator	dumpDataSnippets(TR::FILE *)
OMR::X86	CodeGenerator	dumpPostFPRegisterAssignment(TR::Instruction *,TR::Instruction *)
OMR::X86	CodeGenerator	dumpPostGPRegisterAssignment(TR::Instruction *,TR::Instruction *)
OMR::X86	CodeGenerator	dumpPreFPRegisterAssignment(TR::Instruction *)
OMR::X86	CodeGenerator	dumpPreGPRegisterAssignment(TR::Instruction *)
OMR::X86	CodeGenerator	emitDataSnippets()
OMR::X86	CodeGenerator	enableBetterSpillPlacements()
OMR::X86	CodeGenerator	enableImplicitDivideCheck()
OMR::X86	CodeGenerator	enableRegisterAssociations()
OMR::X86	CodeGenerator	enableRegisterInterferences()
OMR::X86	CodeGenerator	enableRegisterWeights()
OMR::X86	CodeGenerator	enableRematerialisation()
OMR::X86	CodeGenerator	enableSinglePrecisionMethods()
OMR::X86	CodeGenerator	enableTLHPrefetching()
OMR::X86	CodeGenerator	endInstructionSelection()
OMR::X86	CodeGenerator	estimateBinaryLength(TR::MemoryReference *)
OMR::X86	CodeGenerator	findBetterSpillPlacement(TR::Register *,int32_t)
OMR::X86	CodeGenerator	findOrCreate16ByteConstant(TR::Node *,void *)
OMR::X86	CodeGenerator	findOrCreate2ByteConstant(TR::Node *,int16_t)
OMR::X86	CodeGenerator	findOrCreate4ByteConstant(TR::Node *,int32_t)
OMR::X86	CodeGenerator	findOrCreate8ByteConstant(TR::Node *,int64_t)
OMR::X86	CodeGenerator	findOrCreateConstant(TR::Node *,void *,uint8_t)
OMR::X86	CodeGenerator	findOrCreateCurrentTimeMillisTempSymRef()
OMR::X86	CodeGenerator	findOutlinedInstructionsFromLabel(TR::LabelSymbol *)
OMR::X86	CodeGenerator	findOutlinedInstructionsFromLabelForShrinkWrapping(TR::LabelSymbol *)
OMR::X86	CodeGenerator	findOutlinedInstructionsFromMergeLabel(TR::LabelSymbol *)
OMR::X86	CodeGenerator	floatClobberEvaluate(TR::Node *)
OMR::X86	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &)
OMR::X86	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *)
OMR::X86	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &)
OMR::X86	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *)
OMR::X86	CodeGenerator	generateMasmListingSyntax()
OMR::X86	CodeGenerator	generatePadding(uint8_t *,intptrj_t,TR::Instruction *,enum TR_PaddingProperties,_Bool)
OMR::X86	CodeGenerator	generateScratchRegisterManager(int32_t)
OMR::X86	CodeGenerator	generateSwitchToInterpreterPrePrologue(TR::Instruction *,uint8_t,uint8_t)
OMR::X86	CodeGenerator	getAssignmentDirection()
OMR::X86	CodeGenerator	getClobberingInstructions()
OMR::X86	CodeGenerator	getDependentDiscardableRegisters()
OMR::X86	CodeGenerator	getDoubleWordConversionTemp()
OMR::X86	CodeGenerator	getFrameRegister()
OMR::X86	CodeGenerator	getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions)
OMR::X86	CodeGenerator	getInstructionPatchAlignmentBoundary()
OMR::X86	CodeGenerator	getLargestNegConstThatMustBeMaterialized()
OMR::X86	CodeGenerator	getLastCatchAppendInstruction()
OMR::X86	CodeGenerator	getLiveDiscardableRegisters()
OMR::X86	CodeGenerator	getLowestCommonCodePatchingAlignmentBoundary()
OMR::X86	CodeGenerator	getMaximumNumbersOfAssignableFPRs()
OMR::X86	CodeGenerator	getMaximumNumbersOfAssignableGPRs()
OMR::X86	CodeGenerator	getMaximumNumbersOfAssignableVRs()
OMR::X86	CodeGenerator	getMethodMetaDataRegister()
OMR::X86	CodeGenerator	getNanoTimeTemp()
OMR::X86	CodeGenerator	getOutlinedInstructionsList()
OMR::X86	CodeGenerator	getPicSlotCount()
OMR::X86	CodeGenerator	getProperties()
OMR::X86	CodeGenerator	getReturnTypeInfoInstruction()
OMR::X86	CodeGenerator	getSizeOfCombinedBuffer()
OMR::X86	CodeGenerator	getSmallestPosConstThatMustBeMaterialized()
OMR::X86	CodeGenerator	getSpilledIntRegisters()
OMR::X86	CodeGenerator	getSupportsBitOpCodes()
OMR::X86	CodeGenerator	getSupportsBitPermute()
OMR::X86	CodeGenerator	getSupportsEncodeUtf16BigWithSurrogateTest()
OMR::X86	CodeGenerator	getSupportsEncodeUtf16LittleWithSurrogateTest()
OMR::X86	CodeGenerator	getSupportsIbyteswap()
OMR::X86	CodeGenerator	getSupportsNewObjectAlignment()
OMR::X86	CodeGenerator	getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType)
OMR::X86	CodeGenerator	getSupportsTenuredObjectAlignment()
OMR::X86	CodeGenerator	getSwitchToInterpreterLabel()
OMR::X86	CodeGenerator	getWordConversionTemp()
OMR::X86	CodeGenerator	getX86ProcessorInfo()
OMR::X86	CodeGenerator	getX87RegisterIterator()
OMR::X86	CodeGenerator	getXMMDoubleLoadOpCode()
OMR::X86	CodeGenerator	gprClobberEvaluate(TR::Node *,enum TR_X86OpCodes)
OMR::X86	CodeGenerator	hasComplexAddressingMode()
OMR::X86	CodeGenerator	hasDataSnippets()
OMR::X86	CodeGenerator	hasTMEvaluator()
OMR::X86	CodeGenerator	incPicSlotCountBy(int32_t)
OMR::X86	CodeGenerator	initialize(TR::Compilation *)
OMR::X86	CodeGenerator	initializeVFPState(TR::class RealRegister::RegNum,int32_t)
OMR::X86	CodeGenerator	intClobberEvaluate(TR::Node *)
OMR::X86	CodeGenerator	internalPointerSupportImplemented()
OMR::X86	CodeGenerator	isAddressScaleIndexSupported(int32_t)
OMR::X86	CodeGenerator	isAlignmentInstruction(TR::Instruction *)
OMR::X86	CodeGenerator	isBranchInstruction(TR::Instruction *)
OMR::X86	CodeGenerator	isFenceInstruction(TR::Instruction *)
OMR::X86	CodeGenerator	isLabelInstruction(TR::Instruction *)
OMR::X86	CodeGenerator	isObjectOfSizeWorthAligning(uint32_t)
OMR::X86	CodeGenerator	isPreservedRegister(int32_t)
OMR::X86	CodeGenerator	isReturnInstruction(TR::Instruction *)
OMR::X86	CodeGenerator	isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **)
OMR::X86	CodeGenerator	longClobberEvaluate(TR::Node *)
OMR::X86	CodeGenerator	mapAutosTo8ByteSlots()
OMR::X86	CodeGenerator	materializesHeapBase()
OMR::X86	CodeGenerator	methodEnterExitTracingEnabled()
OMR::X86	CodeGenerator	needToAvoidCommoningInGRA()
OMR::X86	CodeGenerator	nodeIsFoldableMemOperand(TR::Node *,TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR::X86	CodeGenerator	nodeResultGPRCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR::X86	CodeGenerator	nopsAlsoProcessedByRelocations()
OMR::X86	CodeGenerator	operator=(class OMR::X86::CodeGenerator &&)
OMR::X86	CodeGenerator	operator=(const class OMR::X86::CodeGenerator &)
OMR::X86	CodeGenerator	patchableRangeNeedsAlignment(void *,intptrj_t,intptrj_t,intptrj_t)
OMR::X86	CodeGenerator	performNonLinearRegisterAssignmentAtBranch(TR::X86LabelInstruction *,enum TR_RegisterKinds)
OMR::X86	CodeGenerator	pickNOPRegister(TR::Instruction *)
OMR::X86	CodeGenerator	prepareForNonLinearRegisterAssignmentAtMerge(TR::X86LabelInstruction *)
OMR::X86	CodeGenerator	processClobberingInstructions(TR::ClobberingInstruction *,TR::Instruction *)
OMR::X86	CodeGenerator	processIncomingParameterUsage(class TR_BitVector **,int32_t)
OMR::X86	CodeGenerator	processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool)
OMR::X86	CodeGenerator	pushPreservedRegisters()
OMR::X86	CodeGenerator	reactivateDependentDiscardableRegisters(TR::Register *)
OMR::X86	CodeGenerator	removeBetterSpillPlacementCandidate(TR::RealRegister *)
OMR::X86	CodeGenerator	removeLiveDiscardableRegister(TR::Register *)
OMR::X86	CodeGenerator	removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &)
OMR::X86	CodeGenerator	reserveNTrampolines(int32_t)
OMR::X86	CodeGenerator	resetEnableBetterSpillPlacements()
OMR::X86	CodeGenerator	resetEnableRematerialisation()
OMR::X86	CodeGenerator	saveBetterSpillPlacements(TR::Instruction *)
OMR::X86	CodeGenerator	setAssignmentDirection(OMR::X86::CodeGenerator::RegisterAssignmentDirection)
OMR::X86	CodeGenerator	setEnableBetterSpillPlacements()
OMR::X86	CodeGenerator	setEnableImplicitDivideCheck()
OMR::X86	CodeGenerator	setEnableRegisterAssociations()
OMR::X86	CodeGenerator	setEnableRegisterInterferences()
OMR::X86	CodeGenerator	setEnableRegisterWeights()
OMR::X86	CodeGenerator	setEnableRematerialisation()
OMR::X86	CodeGenerator	setEnableSinglePrecisionMethods()
OMR::X86	CodeGenerator	setEnableTLHPrefetching()
OMR::X86	CodeGenerator	setEstimatedLocationsForDataSnippetLabels(int32_t)
OMR::X86	CodeGenerator	setGenerateMasmListingSyntax()
OMR::X86	CodeGenerator	setInstructionPatchAlignmentBoundary(int32_t)
OMR::X86	CodeGenerator	setLastCatchAppendInstruction(TR::Instruction *)
OMR::X86	CodeGenerator	setLowestCommonCodePatchingAlignmentBoundary(int32_t)
OMR::X86	CodeGenerator	setMapAutosTo8ByteSlots()
OMR::X86	CodeGenerator	setMethodEnterExitTracingEnabled()
OMR::X86	CodeGenerator	setPicSlotCount(int32_t)
OMR::X86	CodeGenerator	setPushPreservedRegisters()
OMR::X86	CodeGenerator	setSwitchToInterpreterLabel(TR::LabelSymbol *)
OMR::X86	CodeGenerator	setTargetSupportsSoftwarePrefetches()
OMR::X86	CodeGenerator	setUseGPRsForWin32CTMConversion()
OMR::X86	CodeGenerator	setUseLongDivideHelperForWin32CTMConversion()
OMR::X86	CodeGenerator	setUseSSEForDoublePrecision()
OMR::X86	CodeGenerator	setUseSSEForSinglePrecision()
OMR::X86	CodeGenerator	setVFPState(const struct TR_VFPState &)
OMR::X86	CodeGenerator	setX87RegisterIterator(TR::RegisterIterator *)
OMR::X86	CodeGenerator	setXMMDoubleLoadOpCode(enum TR_X86OpCodes)
OMR::X86	CodeGenerator	shortClobberEvaluate(TR::Node *)
OMR::X86	CodeGenerator	simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR::X86	CodeGenerator	splitBlockEntry(TR::Instruction *)
OMR::X86	CodeGenerator	splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool)
OMR::X86	CodeGenerator	supportsAddressRematerialization()
OMR::X86	CodeGenerator	supportsAtomicAdd()
OMR::X86	CodeGenerator	supportsCMOV()
OMR::X86	CodeGenerator	supportsComplexAddressing()
OMR::X86	CodeGenerator	supportsConstantRematerialization()
OMR::X86	CodeGenerator	supportsDebugCounters(TR::DebugCounterInjectionPoint)
OMR::X86	CodeGenerator	supportsDirectJNICallsForAOT()
OMR::X86	CodeGenerator	supportsFS0VMThreadRematerialization()
OMR::X86	CodeGenerator	supportsIndirectMemoryRematerialization()
OMR::X86	CodeGenerator	supportsInliningOfIsInstance()
OMR::X86	CodeGenerator	supportsLocalMemoryRematerialization()
OMR::X86	CodeGenerator	supportsMergingGuards()
OMR::X86	CodeGenerator	supportsPassThroughCopyToNewVirtualRegister()
OMR::X86	CodeGenerator	supportsSinglePrecisionSQRT()
OMR::X86	CodeGenerator	supportsStaticMemoryRematerialization()
OMR::X86	CodeGenerator	supportsXMMRRematerialization()
OMR::X86	CodeGenerator	targetSupportsSoftwarePrefetches()
OMR::X86	CodeGenerator	updateSnippetMapWithRSD(TR::Instruction *,int32_t)
OMR::X86	CodeGenerator	useGPRsForWin32CTMConversion()
OMR::X86	CodeGenerator	useLongDivideHelperForWin32CTMConversion()
OMR::X86	CodeGenerator	useSSEFor(TR::DataType)
OMR::X86	CodeGenerator	useSSEForDoublePrecision()
OMR::X86	CodeGenerator	useSSEForSingleAndDoublePrecision()
OMR::X86	CodeGenerator	useSSEForSinglePrecision()
OMR::X86	CodeGenerator	vfpResetInstruction()
OMR::X86	CodeGenerator	vfpState()
OMR::X86	CodeGenerator	willBeEvaluatedAsCallByCodeGen(TR::Node *,TR::Compilation *)
OMR::X86	CodeGenerator	~CodeGenerator()
OMR::X86	CodeGenerator	setAssignmentDirection(RegisterAssignmentDirection)
OMR::X86	DebugEnv	DebugEnv()
OMR::X86	DebugEnv	DebugEnv(const class OMR::X86::DebugEnv &)
OMR::X86	DebugEnv	DebugEnv(class OMR::X86::DebugEnv &&)
OMR::X86	DebugEnv	operator=(const class OMR::X86::DebugEnv &)
OMR::X86	DebugEnv	operator=(class OMR::X86::DebugEnv &&)
OMR::X86	DebugEnv	~DebugEnv()
OMR::X86	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::X86	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::X86	Instruction	Instruction(const class OMR::X86::Instruction &)
OMR::X86	Instruction	Instruction(class OMR::X86::Instruction &&)
OMR::X86	Instruction	aboutToAssignDefdRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions)
OMR::X86	Instruction	aboutToAssignMemRef(TR::MemoryReference *)
OMR::X86	Instruction	aboutToAssignRegDeps(enum OMR::X86::Instruction::TR_UpperHalfRefConditions,enum OMR::X86::Instruction::TR_UpperHalfRefConditions)
OMR::X86	Instruction	aboutToAssignRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions,enum OMR::X86::Instruction::TR_UpperHalfRefConditions)
OMR::X86	Instruction	aboutToAssignUsedRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions)
OMR::X86	Instruction	adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)
OMR::X86	Instruction	adjustVFPStateForCall(struct TR_VFPState *,int32_t,TR::CodeGenerator *)
OMR::X86	Instruction	assignRegisters(enum TR_RegisterKinds)
OMR::X86	Instruction	assumeValidInstruction()
OMR::X86	Instruction	clobberRegsForRematerialisation()
OMR::X86	Instruction	defsRegister(TR::Register *)
OMR::X86	Instruction	dependencyRefsRegister(TR::Register *)
OMR::X86	Instruction	description()
OMR::X86	Instruction	enlarge(int32_t,int32_t,_Bool)
OMR::X86	Instruction	estimateBinaryLength(int32_t)
OMR::X86	Instruction	generateBinaryEncoding()
OMR::X86	Instruction	generateOperand(uint8_t *)
OMR::X86	Instruction	generateRepeatedRexPrefix(uint8_t *)
OMR::X86	Instruction	getDependencyConditions()
OMR::X86	Instruction	getIA32ImmInstruction()
OMR::X86	Instruction	getIA32LabelInstruction()
OMR::X86	Instruction	getIA32RegInstruction()
OMR::X86	Instruction	getKind()
OMR::X86	Instruction	getMaxPatchableInstructionLength()
OMR::X86	Instruction	getMemoryReference()
OMR::X86	Instruction	getNumOperandReferencedFPRegisters()
OMR::X86	Instruction	getNumOperandReferencedGPRegisters()
OMR::X86	Instruction	getOpCode()
OMR::X86	Instruction	getOpCodeValue()
OMR::X86	Instruction	getSourceRegister()
OMR::X86	Instruction	getSourceRightRegister()
OMR::X86	Instruction	getTargetRegister()
OMR::X86	Instruction	initialize(TR::CodeGenerator *,TR::RegisterDependencyConditions *,enum TR_X86OpCodes,_Bool)
OMR::X86	Instruction	isBranchOp()
OMR::X86	Instruction	isLabel()
OMR::X86	Instruction	isPatchBarrier()
OMR::X86	Instruction	isRegRegMove()
OMR::X86	Instruction	needsLockPrefix()
OMR::X86	Instruction	needsRepPrefix()
OMR::X86	Instruction	operandSizeRexBits()
OMR::X86	Instruction	operator=(const class OMR::X86::Instruction &)
OMR::X86	Instruction	operator=(class OMR::X86::Instruction &&)
OMR::X86	Instruction	refsRegister(TR::Register *)
OMR::X86	Instruction	registerRefKindApplies(enum OMR::X86::Instruction::TR_UpperHalfRefConditions)
OMR::X86	Instruction	rexBits()
OMR::X86	Instruction	rexRepeatCount()
OMR::X86	Instruction	setDependencyConditions(TR::RegisterDependencyConditions *)
OMR::X86	Instruction	setIsUpperHalfDead(TR::Register *,_Bool,enum OMR::X86::Instruction::TR_UpperHalfRefConditions)
OMR::X86	Instruction	setOpCodeValue(enum TR_X86OpCodes)
OMR::X86	Instruction	setRexRepeatCount(uint8_t)
OMR::X86	Instruction	totalReferencedFPRegisters(TR::CodeGenerator *)
OMR::X86	Instruction	totalReferencedGPRegisters(TR::CodeGenerator *)
OMR::X86	Instruction	usesRegister(TR::Register *)
OMR::X86	Instruction	~Instruction()
OMR::X86	Machine	Machine(class OMR::X86::Machine &&)
OMR::X86	Machine	Machine(uint8_t,uint8_t,TR::CodeGenerator *,TR::RealRegister **,TR::Register **,uint8_t,uint8_t,uint8_t,TR::Register **,uint32_t *)
OMR::X86	Machine	Machine(const class OMR::X86::Machine &)
OMR::X86	Machine	adjustRegisterUseCountsDown(TR::list<OMR::RegisterUsage *> *,_Bool)
OMR::X86	Machine	adjustRegisterUseCountsUp(TR::list<OMR::RegisterUsage *> *,_Bool)
OMR::X86	Machine	captureRegisterAssociations()
OMR::X86	Machine	captureRegisterFile()
OMR::X86	Machine	captureSpilledRegistersList()
OMR::X86	Machine	clearRegisterAssociations()
OMR::X86	Machine	cloneRegisterFile(TR::RealRegister **,enum TR_AllocationKind)
OMR::X86	Machine	coerceGPRegisterAssignment(TR::Instruction *,TR::Register *,enum TR_RegisterSizes)
OMR::X86	Machine	coerceGPRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,_Bool)
OMR::X86	Machine	coerceXMMRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,_Bool)
OMR::X86	Machine	createCondForLiveAndSpilledGPRs(_Bool,TR::list<TR::Register *> *)
OMR::X86	Machine	createDepCondForLiveGPRs()
OMR::X86	Machine	createRegisterAssociationDirective(TR::Instruction *)
OMR::X86	Machine	disassociateUnspilledBackingStorage()
OMR::X86	Machine	findBestFreeGPRegister(TR::Instruction *,TR::Register *,enum TR_RegisterSizes,_Bool)
OMR::X86	Machine	findFreeFPRegister()
OMR::X86	Machine	fpCoerceRegistersToTopOfStack(TR::Instruction *,TR::Register *,TR::Register *,_Bool)
OMR::X86	Machine	fpDeterminePopOpCode(enum TR_X86OpCodes)
OMR::X86	Machine	fpDetermineReverseOpCode(enum TR_X86OpCodes)
OMR::X86	Machine	fpGetNumberOfLiveFPRs()
OMR::X86	Machine	fpGetNumberOfLiveXMMRs()
OMR::X86	Machine	fpMapToStackRelativeRegister(TR::Register *)
OMR::X86	Machine	fpMapToStackRelativeRegister(int32_t)
OMR::X86	Machine	fpSpillFPR(TR::Instruction *,TR::Register *)
OMR::X86	Machine	fpSpillStack(TR::Instruction *)
OMR::X86	Machine	fpStackCoerce(TR::Register *,int32_t)
OMR::X86	Machine	fpStackFXCH(TR::Instruction *,TR::Register *,_Bool)
OMR::X86	Machine	fpStackFXCH(TR::Instruction *,int32_t)
OMR::X86	Machine	fpStackPop()
OMR::X86	Machine	fpStackPush(TR::Register *)
OMR::X86	Machine	freeBestFPRegister(TR::Instruction *)
OMR::X86	Machine	freeBestGPRegister(TR::Instruction *,TR::Register *,enum TR_RegisterSizes,TR::class RealRegister::RegNum,_Bool)
OMR::X86	Machine	getCopiedFPStackRegister(int32_t)
OMR::X86	Machine	getDebug()
OMR::X86	Machine	getDummyLocalMR(TR::DataType)
OMR::X86	Machine	getFPStackLocationPtr(int32_t)
OMR::X86	Machine	getFPStackRegister(int32_t)
OMR::X86	Machine	getFPStackRegisterNode(int32_t)
OMR::X86	Machine	getFPStackShape()
OMR::X86	Machine	getFPTopOfStack()
OMR::X86	Machine	getFPTopOfStackPtr()
OMR::X86	Machine	getGlobalFPRPartitionLimit()
OMR::X86	Machine	getGlobalGPRPartitionLimit()
OMR::X86	Machine	getGlobalReg(TR::class RealRegister::RegNum)
OMR::X86	Machine	getGlobalRegisterTable(const struct TR::X86LinkageProperties &)
OMR::X86	Machine	getLast8BitGlobalGPRRegisterNumber()
OMR::X86	Machine	getLastGlobalFPRRegisterNumber()
OMR::X86	Machine	getLastGlobalGPRRegisterNumber()
OMR::X86	Machine	getNumGlobalGPRs()
OMR::X86	Machine	getRegisterAssociations()
OMR::X86	Machine	getRegisterFile()
OMR::X86	Machine	getSpilledRegistersList()
OMR::X86	Machine	getVirtualAssociatedWithReal(TR::class RealRegister::RegNum)
OMR::X86	Machine	getX86RealRegister(TR::class RealRegister::RegNum)
OMR::X86	Machine	getXMMGlobalRegister(int32_t)
OMR::X86	Machine	initialiseFPStackRegisterFile()
OMR::X86	Machine	initialiseRegisterFile(const struct TR::X86LinkageProperties &)
OMR::X86	Machine	installRegisterFile(TR::RealRegister **)
OMR::X86	Machine	isFPRTopOfStack(TR::Register *)
OMR::X86	Machine	isFPStackFull()
OMR::X86	Machine	operator=(class OMR::X86::Machine &&)
OMR::X86	Machine	operator=(const class OMR::X86::Machine &)
OMR::X86	Machine	popEntireStack()
OMR::X86	Machine	printFPRegisterStatus(class TR_FrontEnd *,TR::FILE *)
OMR::X86	Machine	printGPRegisterStatus(class TR_FrontEnd *,TR::RealRegister **,TR::FILE *)
OMR::X86	Machine	purgeDeadRegistersFromRegisterFile()
OMR::X86	Machine	resetFPStackRegisters()
OMR::X86	Machine	resetXMMGlobalRegisters()
OMR::X86	Machine	reverseFPRSpillState(TR::Instruction *,TR::Register *)
OMR::X86	Machine	reverseGPRSpillState(TR::Instruction *,TR::Register *,TR::RealRegister *,enum TR_RegisterSizes)
OMR::X86	Machine	setCopiedFPStackRegister(int32_t,class TR_X86FPStackRegister *)
OMR::X86	Machine	setFPStackRegister(int32_t,class TR_X86FPStackRegister *)
OMR::X86	Machine	setFPStackRegisterNode(int32_t,TR::Node *)
OMR::X86	Machine	setFPTopOfStack(TR::Register *)
OMR::X86	Machine	setGPRWeightsFromAssociations()
OMR::X86	Machine	setRegisterAssociations(TR::Register **)
OMR::X86	Machine	setRegisterFile(TR::RealRegister **)
OMR::X86	Machine	setSpilledRegistersList(List<TR::Register> *)
OMR::X86	Machine	setVirtualAssociatedWithReal(TR::class RealRegister::RegNum,TR::Register *)
OMR::X86	Machine	setXMMGlobalRegister(int32_t,TR::Register *)
OMR::X86	Machine	swapGPRegisters(TR::Instruction *,TR::class RealRegister::RegNum,TR::class RealRegister::RegNum)
OMR::X86	Machine	~Machine()
OMR::X86	Machine	cg()
OMR::X86	RealRegister	RealRegister(class OMR::X86::RealRegister &&)
OMR::X86	RealRegister	RealRegister(const class OMR::X86::RealRegister &)
OMR::X86	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::X86	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::X86	RealRegister	getAvailableRegistersMask(enum TR_RegisterKinds)
OMR::X86	RealRegister	getRealRegisterMask(enum TR_RegisterKinds,OMR::RealRegister::RegNum)
OMR::X86	RealRegister	operator=(class OMR::X86::RealRegister &&)
OMR::X86	RealRegister	operator=(const class OMR::X86::RealRegister &)
OMR::X86	RealRegister	regMaskToRealRegister(TR_RegisterMask,enum TR_RegisterKinds,TR::CodeGenerator *)
OMR::X86	RealRegister	~RealRegister()
OMR::X86	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::X86	RealRegister	getRealRegisterMask(enum TR_RegisterKinds,RegNum)
OMR::X86	Register	Register(uint32_t)
OMR::X86	Register	Register(enum TR_RegisterKinds)
OMR::X86	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR::X86	Register	Register(class OMR::X86::Register &&)
OMR::X86	Register	Register(const class OMR::X86::Register &)
OMR::X86	Register	areUpperBitsZero()
OMR::X86	Register	getInterference()
OMR::X86	Register	getLiveRegisterInfo()
OMR::X86	Register	getMemRef()
OMR::X86	Register	getRematerializationInfo()
OMR::X86	Register	hasBetterSpillPlacement()
OMR::X86	Register	isAssignedAsByteRegister()
OMR::X86	Register	isDiscardable()
OMR::X86	Register	isSpilledToSecondHalf()
OMR::X86	Register	mayNeedPrecisionAdjustment()
OMR::X86	Register	needsLazyClobbering()
OMR::X86	Register	needsPrecisionAdjustment()
OMR::X86	Register	operator=(const class OMR::X86::Register &)
OMR::X86	Register	operator=(class OMR::X86::Register &&)
OMR::X86	Register	resetIsDiscardable()
OMR::X86	Register	resetMayNeedPrecisionAdjustment()
OMR::X86	Register	resetNeedsPrecisionAdjustment()
OMR::X86	Register	setAssignedAsByteRegister(_Bool)
OMR::X86	Register	setHasBetterSpillPlacement(_Bool)
OMR::X86	Register	setInterference(uint32_t)
OMR::X86	Register	setIsDiscardable()
OMR::X86	Register	setIsSpilledToSecondHalf(_Bool)
OMR::X86	Register	setLiveRegisterInfo(class TR_LiveRegisterInfo *)
OMR::X86	Register	setMayNeedPrecisionAdjustment()
OMR::X86	Register	setMemRef(TR::MemoryReference *)
OMR::X86	Register	setNeedsLazyClobbering(_Bool)
OMR::X86	Register	setNeedsPrecisionAdjustment()
OMR::X86	Register	setRematerializationInfo(class TR_RematerializationInfo *)
OMR::X86	Register	setUpperBitsAreZero(_Bool)
OMR::X86	Register	~Register()
OMR::X86	RegisterIterator	RegisterIterator(class OMR::X86::RegisterIterator &&)
OMR::X86	RegisterIterator	RegisterIterator(const class OMR::X86::RegisterIterator &)
OMR::X86	RegisterIterator	RegisterIterator(TR::Machine *,enum TR_RegisterKinds)
OMR::X86	RegisterIterator	getCurrent()
OMR::X86	RegisterIterator	getFirst()
OMR::X86	RegisterIterator	getNext()
OMR::X86	RegisterIterator	~RegisterIterator()
OMR::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR::X86	Snippet	Snippet(const class OMR::X86::Snippet &)
OMR::X86	Snippet	Snippet(class OMR::X86::Snippet &&)
OMR::X86	Snippet	getKind()
OMR::X86	Snippet	operator=(class OMR::X86::Snippet &&)
OMR::X86	Snippet	operator=(const class OMR::X86::Snippet &)
OMR::X86	Snippet	~Snippet()
OMR::X86	TreeEvaluator	BBEndEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	BBStartEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	FloatingPointAndVectorBinaryArithmeticEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	GlRegDepsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	NOPEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	PrefetchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SIMDRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SIMDRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SIMDgetvelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SIMDloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SIMDsplatsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SIMDstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SSE2ArraycmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SSE2ArraycmpLenEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMarrayStoreCheckArrayCopyEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMifArrayCmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMifInstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMinlineCallEvaluator(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMmergenewEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMtestForReferenceArray(TR::Node *,TR::Register *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	a2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	aRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	aloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	analyseAddForLEA(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	analyseSubForLEA(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	arraycmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	arraycopyEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	arraysetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	arraytranslateAndTestEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	atomicorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	b2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	b2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	baddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bcmpEvaluator(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bcmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bitpermuteEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	borEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bu2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bu2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bucmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	butestEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	bztestnsetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	c2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	caddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	canUseFCOMIInstructions(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	candEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cmp2BytesEvaluator(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	coerceFPOperandsToXMMRs(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	coerceFPRToXMMR(TR::Node *,TR::Register *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	coerceXMMRToFPR(TR::Node *,TR::Register *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	commonFPRemEvaluator(TR::Node *,TR::CodeGenerator *,_Bool)
OMR::X86	TreeEvaluator	compare2BytesForOrder(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareBytesForOrder(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareDoubleAndBranchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareDoubleAndSetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareDoubleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareFloatAndBranchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareFloatAndSetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareFloatEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareFloatOrDoubleForOrder(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareGPMemoryToImmediate(TR::Node *,TR::MemoryReference *,int32_t,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareGPRegisterToConstantForEquality(TR::Node *,int32_t,TR::Register *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareGPRegisterToImmediate(TR::Node *,TR::Register *,int32_t,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareGPRegisterToImmediateForEquality(TR::Node *,TR::Register *,int32_t,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareIntegersForEquality(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareIntegersForOrder(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	compareIntegersForOrder(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	constNodeValueIs32BitSigned(TR::Node *,intptrj_t *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	conversionAnalyser(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	corEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	csubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	cxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	d2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	d2cEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	d2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	d2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	d2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	dRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	dRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	daddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	dconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ddivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	directCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	dloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	dmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	dstoreEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	dsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	f2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	f2cEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	f2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	f2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	f2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	f2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	faddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fbits2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fenceEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	floadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	floatingPointStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fpBinaryArithmeticEvaluator(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fpConvertToInt(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fpConvertToLong(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fpRemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fpReturnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fpUnaryMaskEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	fsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	genArithmeticInstructionsForOverflowCHK(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	genNullTestSequence(TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	generateBranchOrSetOnFPCompare(TR::Node *,TR::Register *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	generateFPCompareResult(TR::Node *,TR::Register *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	generateIAddOrSubForOverflowCheck(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	generateLAddOrSubForOverflowCheck(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	generateLEAForLoadAddr(TR::Node *,TR::MemoryReference *,TR::SymbolReference *,TR::CodeGenerator *,_Bool)
OMR::X86	TreeEvaluator	generateMemoryShift(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	generateRegisterShift(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	getNodeIs64Bit(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	getOverflowCatchBlock(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	gotoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	i2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	i2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	i2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	i2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	iRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	iandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ibits2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ibyteswapEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	icmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	icmpsetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	iconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifbucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifscmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifscmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifscmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifscmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifscmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifsucmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifsucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifsucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifsucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifsucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ifxcmpoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	igotoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	iloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ilstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	indirectCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	insertLoadConstant(TR::Node *,TR::Register *,intptrj_t,enum TR_RematerializableTypes,TR::CodeGenerator *,TR::Instruction *)
OMR::X86	TreeEvaluator	insertLoadMemory(TR::Node *,TR::Register *,TR::MemoryReference *,enum TR_RematerializableTypes,TR::CodeGenerator *,TR::Instruction *)
OMR::X86	TreeEvaluator	insertPrecisionAdjustment(TR::Register *,TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	intOrLongClobberEvaluate(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerAbsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerAddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerCmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerCmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerCmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerCmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerCmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerCmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerConstNodeValue(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerDivOrRemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerDualAddOrSubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerDualMulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerEqualityHelper(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerIfCmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerIfCmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerIfCmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerIfCmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerIfCmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerIfCmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerMulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerMulhEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerNegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerOrderHelper(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerReturnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerRolEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerShlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerShrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerSubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	integerUshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	iorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	istoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	iternaryEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	iucmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ixorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	l2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	lRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	loadConstant(TR::Node *,intptrj_t,enum TR_RematerializableTypes,TR::CodeGenerator *,TR::Register *)
OMR::X86	TreeEvaluator	loadMemory(TR::Node *,TR::MemoryReference *,enum TR_RematerializableTypes,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	loadaddrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	logicalEvaluator(TR::Node *,enum TR_X86OpCodes [],TR::CodeGenerator *)
OMR::X86	TreeEvaluator	lookupEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	minmaxEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	negEvaluatorHelper(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	overflowCHKEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	padUnresolvedDataReferences(TR::Node *,TR::SymbolReference &,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	passThroughEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	performCall(TR::Node *,_Bool,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	performDload(TR::Node *,TR::MemoryReference *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	performFload(TR::Node *,TR::MemoryReference *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	performHelperCall(TR::Node *,TR::SymbolReference *,TR::ILOpCodes,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	performIload(TR::Node *,TR::MemoryReference *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	performSimpleAtomicMemoryUpdate(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	removeLiveDiscardableStatics(TR::CodeGenerator *)
OMR::X86	TreeEvaluator	returnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	reverseLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	reverseStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	rotateMask(_Bool)
OMR::X86	TreeEvaluator	s2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	saddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sbyteswapEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	scmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	scmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	scmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	scmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	scmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	scmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	setupProfiledGuardRelocation(TR::X86RegImmInstruction *,TR::Node *,TR_ExternalRelocationTargetKind)
OMR::X86	TreeEvaluator	shiftMask(_Bool)
OMR::X86	TreeEvaluator	signedIntegerDivOrRemAnalyser(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	snegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	ssubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	stopUsingCopyRegAddr(TR::Node *,TR::Register *&,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	stopUsingCopyRegInteger(TR::Node *,TR::Register *&,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	su2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sucmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sucmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sutestEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	sxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	tableEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	tabortEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	tfinishEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	treetopEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	tstartEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerCmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerCmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerCmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerCmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerIfCmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerIfCmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerIfCmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	unsignedIntegerIfCmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	zccAddSubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	SSE2IfArraycmpEvaluator(TR::Node *,TR::LabelSymbol *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	TreeEvaluator()
OMR::X86	TreeEvaluator	TreeEvaluator(class OMR::X86::TreeEvaluator &&)
OMR::X86	TreeEvaluator	TreeEvaluator(const class OMR::X86::TreeEvaluator &)
OMR::X86	TreeEvaluator	~TreeEvaluator()
TR	ArithEnv	ArithEnv()
TR	ArithEnv	ArithEnv(const class TR::ArithEnv &)
TR	ArithEnv	ArithEnv(class TR::ArithEnv &&)
TR	ArithEnv	operator=(class TR::ArithEnv &&)
TR	ArithEnv	operator=(const class TR::ArithEnv &)
TR	ArithEnv	~ArithEnv()
TR	AutomaticSymbol	AutomaticSymbol(TR::DataType,uint32_t,const char *)
TR	AutomaticSymbol	AutomaticSymbol(TR::DataType)
TR	AutomaticSymbol	AutomaticSymbol(TR::DataType,uint32_t)
TR	AutomaticSymbol	AutomaticSymbol(int32_t)
TR	AutomaticSymbol	operator=(class TR::AutomaticSymbol &&)
TR	AutomaticSymbol	operator=(const class TR::AutomaticSymbol &)
TR	AutomaticSymbol	~AutomaticSymbol()
TR	AutomaticSymbol	AutomaticSymbol(class TR::AutomaticSymbol &&)
TR	AutomaticSymbol	AutomaticSymbol(const class TR::AutomaticSymbol &)
TR	Block	Block(class TR_Memory *)
TR	Block	Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *)
TR	Block	Block(class TR::Block &&)
TR	Block	Block(class TR::Block &,TR::TreeTop *,TR::TreeTop *)
TR	Block	Block(const class TR::Block &)
TR	Block	operator=(const class TR::Block &)
TR	Block	operator=(class TR::Block &&)
TR	Block	~Block()
TR	ClassEnv	ClassEnv()
TR	ClassEnv	ClassEnv(const class TR::ClassEnv &)
TR	ClassEnv	ClassEnv(class TR::ClassEnv &&)
TR	ClassEnv	operator=(class TR::ClassEnv &&)
TR	ClassEnv	operator=(const class TR::ClassEnv &)
TR	ClassEnv	~ClassEnv()
TR	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
TR	CodeGenPhase	CodeGenPhase(class TR::CodeGenPhase &&)
TR	CodeGenPhase	CodeGenPhase(const class TR::CodeGenPhase &)
TR	CodeGenPhase	operator=(class TR::CodeGenPhase &&)
TR	CodeGenPhase	operator=(const class TR::CodeGenPhase &)
TR	CodeGenPhase	~CodeGenPhase()
TR	CodeGenerator	CodeGenerator()
TR	CodeGenerator	operator=(class TR::CodeGenerator &&)
TR	CodeGenerator	operator=(const class TR::CodeGenerator &)
TR	CodeGenerator	~CodeGenerator()
TR	CodeGenerator	CodeGenerator(class TR::CodeGenerator &&)
TR	CodeGenerator	CodeGenerator(const class TR::CodeGenerator &)
TR	CodeGenerator	CodeGenerator(class TR::CodeGenerator &)
TR	Compilation	Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *)
TR	Compilation	Compilation(class TR::Compilation &)
TR	Compilation	~Compilation()
TR	Compilation	Compilation(int32_t,J9VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *)
TR	CompilerEnv	CompilerEnv(TR::RawAllocator,const TR::PersistentAllocatorKit &)
TR	CompilerEnv	CompilerEnv(class TR::CompilerEnv &&)
TR	CompilerEnv	CompilerEnv(const class TR::CompilerEnv &)
TR	CompilerEnv	operator=(class TR::CompilerEnv &&)
TR	CompilerEnv	CompilerEnv(J9JavaVM *,class J9::RawAllocator,const TR::PersistentAllocatorKit &)
TR	DataType	DataType()
TR	DataType	DataType(TR::DataTypes)
TR	DataType	DataType(const class TR::DataType &)
TR	DataType	DataType(class TR::DataType &&)
TR	DataType	~DataType()
TR	DataType	operator=(class TR::DataType &&)
TR	DataType	operator=(const class TR::DataType &)
TR	DebugEnv	DebugEnv()
TR	DebugEnv	DebugEnv(const class TR::DebugEnv &)
TR	DebugEnv	DebugEnv(class TR::DebugEnv &&)
TR	DebugEnv	operator=(class TR::DebugEnv &&)
TR	DebugEnv	operator=(const class TR::DebugEnv &)
TR	DebugEnv	~DebugEnv()
TR	GCStackAtlas	GCStackAtlas(uint32_t,uint32_t,class TR_Memory *)
TR	GCStackAtlas	GCStackAtlas(class TR::GCStackAtlas &&)
TR	GCStackAtlas	GCStackAtlas(const class TR::GCStackAtlas &)
TR	IL	IL(class TR::IL &&)
TR	IL	IL(const class TR::IL &)
TR	IL	~IL()
TR	IL	IL()
TR	Instruction	Instruction(class TR::Instruction &&)
TR	Instruction	Instruction(const class TR::Instruction &)
TR	Instruction	Instruction(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
TR	Instruction	Instruction(enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *)
TR	Instruction	Instruction(TR::RegisterDependencyConditions *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *)
TR	Instruction	Instruction(TR::RegisterDependencyConditions *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *)
TR	Instruction	operator=(class TR::Instruction &&)
TR	Instruction	operator=(const class TR::Instruction &)
TR	Instruction	~Instruction()
TR	Instruction	Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,TR::CodeGenerator *)
TR	Instruction	Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *)
TR	Instruction	Instruction(TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::RegisterDependencyConditions *,TR::CodeGenerator *)
TR	Instruction	Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *)
TR	Instruction	Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterDependencyConditions *,TR::CodeGenerator *)
TR	KnownObjectTable	KnownObjectTable(TR::Compilation *)
TR	KnownObjectTable	operator=(const class TR::KnownObjectTable &)
TR	KnownObjectTable	operator=(class TR::KnownObjectTable &&)
TR	KnownObjectTable	~KnownObjectTable()
TR	KnownObjectTable	KnownObjectTable(const class TR::KnownObjectTable &)
TR	KnownObjectTable	KnownObjectTable(class TR::KnownObjectTable &&)
TR	LabelSymbol	LabelSymbol(TR::CodeGenerator *)
TR	LabelSymbol	LabelSymbol()
TR	LabelSymbol	LabelSymbol(TR::CodeGenerator *,TR::Block *)
TR	LabelSymbol	operator=(class TR::LabelSymbol &&)
TR	LabelSymbol	operator=(const class TR::LabelSymbol &)
TR	LabelSymbol	~LabelSymbol()
TR	LabelSymbol	LabelSymbol(class TR::LabelSymbol &&)
TR	LabelSymbol	LabelSymbol(const class TR::LabelSymbol &)
TR	Machine	Machine(TR::CodeGenerator *)
TR	Machine	operator=(const class TR::Machine &)
TR	Machine	operator=(class TR::Machine &&)
TR	Machine	~Machine()
TR	Machine	Machine(class TR::Machine &&)
TR	Machine	Machine(const class TR::Machine &)
TR	MethodSymbol	MethodSymbol(enum TR_LinkageConventions,class TR_Method *)
TR	MethodSymbol	MethodSymbol(class TR::MethodSymbol &&)
TR	MethodSymbol	MethodSymbol(const class TR::MethodSymbol &)
TR	MethodSymbol	operator=(const class TR::MethodSymbol &)
TR	MethodSymbol	operator=(class TR::MethodSymbol &&)
TR	MethodSymbol	~MethodSymbol()
TR	Node	Node()
TR	Node	Node(TR::Node *,TR::ILOpCodes,uint16_t)
TR	Node	Node(class TR::Node &)
TR	Node	Node(class TR::Node *,uint16_t)
TR	Node	~Node()
TR	Node	operator=(const class TR::Node &)
TR	Options	Options(TR::Options &)
TR	Options	Options()
TR	Options	Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t)
TR	RealRegister	RealRegister(class TR::RealRegister &&)
TR	RealRegister	RealRegister(const class TR::RealRegister &)
TR	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,TR::class RealRegister::RegNum,TR::class RealRegister::RegMask,TR::CodeGenerator *)
TR	RealRegister	operator=(const class TR::RealRegister &)
TR	RealRegister	operator=(class TR::RealRegister &&)
TR	RealRegister	~RealRegister()
TR	RealRegister	RealRegister(TR::CodeGenerator *)
TR	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
TR	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,TR::class RealRegister::RegNum,TR::class RealRegister::RegMask,TR::CodeGenerator *)
TR	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
TR	Register	Register(uint32_t)
TR	Register	Register(enum TR_RegisterKinds)
TR	Register	Register(enum TR_RegisterKinds,uint16_t)
TR	Register	Register(class TR::Register &&)
TR	Register	Register(const class TR::Register &)
TR	Register	operator=(class TR::Register &&)
TR	Register	operator=(const class TR::Register &)
TR	Register	~Register()
TR	RegisterIterator	RegisterIterator(TR::Machine *,enum TR_RegisterKinds)
TR	RegisterIterator	RegisterIterator(class TR::RegisterIterator &&)
TR	RegisterIterator	RegisterIterator(const class TR::RegisterIterator &)
TR	RegisterIterator	~RegisterIterator()
TR	RegisterMappedSymbol	RegisterMappedSymbol(TR::DataType,uint32_t)
TR	RegisterMappedSymbol	RegisterMappedSymbol(int32_t)
TR	RegisterMappedSymbol	RegisterMappedSymbol(TR::DataType)
TR	RegisterMappedSymbol	RegisterMappedSymbol(const class TR::RegisterMappedSymbol &)
TR	RegisterMappedSymbol	RegisterMappedSymbol(class TR::RegisterMappedSymbol &&)
TR	RegisterMappedSymbol	operator=(class TR::RegisterMappedSymbol &&)
TR	RegisterMappedSymbol	operator=(const class TR::RegisterMappedSymbol &)
TR	RegisterMappedSymbol	~RegisterMappedSymbol()
TR	ResolvedMethodSymbol	ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *)
TR	ResolvedMethodSymbol	operator=(class TR::ResolvedMethodSymbol &&)
TR	ResolvedMethodSymbol	operator=(const class TR::ResolvedMethodSymbol &)
TR	ResolvedMethodSymbol	~ResolvedMethodSymbol()
TR	ResolvedMethodSymbol	ResolvedMethodSymbol(class TR::ResolvedMethodSymbol &&)
TR	ResolvedMethodSymbol	ResolvedMethodSymbol(const class TR::ResolvedMethodSymbol &)
TR	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
TR	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
TR	Snippet	operator=(class TR::Snippet &&)
TR	Snippet	operator=(const class TR::Snippet &)
TR	Snippet	~Snippet()
TR	Snippet	Snippet(class TR::Snippet &&)
TR	Snippet	Snippet(const class TR::Snippet &)
TR	StaticSymbol	StaticSymbol(TR::DataType,uint32_t)
TR	StaticSymbol	StaticSymbol(TR::DataType,void *)
TR	StaticSymbol	StaticSymbol(TR::DataType)
TR	StaticSymbol	operator=(class TR::StaticSymbol &&)
TR	StaticSymbol	operator=(const class TR::StaticSymbol &)
TR	StaticSymbol	~StaticSymbol()
TR	StaticSymbol	StaticSymbol(const class TR::StaticSymbol &)
TR	StaticSymbol	StaticSymbol(class TR::StaticSymbol &&)
TR	Symbol	Symbol(TR::DataType,uint32_t)
TR	Symbol	Symbol(TR::DataType)
TR	Symbol	Symbol()
TR	Symbol	Symbol(class TR::Symbol &&)
TR	Symbol	Symbol(const class TR::Symbol &)
TR	Symbol	operator=(class TR::Symbol &&)
TR	Symbol	operator=(const class TR::Symbol &)
TR	Symbol	~Symbol()
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t)
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index)
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *)
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t)
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t)
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *)
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t)
TR	SymbolReference	operator=(class TR::SymbolReference &&)
TR	SymbolReference	operator=(const class TR::SymbolReference &)
TR	SymbolReference	~SymbolReference()
TR	SymbolReference	SymbolReference(const class TR::SymbolReference &)
TR	SymbolReference	SymbolReference(class TR::SymbolReference &&)
TR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t,TR::class KnownObjectTable::Index)
TR	TreeTop	TreeTop(TR::TreeTop *,TR::Node *,TR::Compilation *)
TR	TreeTop	TreeTop(TR::Node *,TR::TreeTop *,TR::TreeTop *)
TR	TreeTop	TreeTop()
TR	TreeTop	TreeTop(class TR::TreeTop &&)
TR	TreeTop	TreeTop(const class TR::TreeTop &)
TR	VMEnv	VMEnv()
TR	VMEnv	VMEnv(class TR::VMEnv &&)
TR	VMEnv	VMEnv(const class TR::VMEnv &)
TR	VMEnv	operator=(class TR::VMEnv &&)
TR	VMEnv	operator=(const class TR::VMEnv &)
TR	VMEnv	~VMEnv()
TR	VMMethodEnv	VMMethodEnv()
TR	VMMethodEnv	VMMethodEnv(const class TR::VMMethodEnv &)
TR	VMMethodEnv	VMMethodEnv(class TR::VMMethodEnv &&)
TR	VMMethodEnv	operator=(class TR::VMMethodEnv &&)
TR	VMMethodEnv	operator=(const class TR::VMMethodEnv &)
TR	VMMethodEnv	~VMMethodEnv()
TestCompiler	CodeGenerator	CodeGenerator()
TestCompiler	CodeGenerator	CodeGenerator(const class TestCompiler::CodeGenerator &)
TestCompiler	CodeGenerator	CodeGenerator(class TestCompiler::CodeGenerator &&)
TestCompiler	CodeGenerator	operator=(const class TestCompiler::CodeGenerator &)
TestCompiler	CodeGenerator	operator=(class TestCompiler::CodeGenerator &&)
TestCompiler	CodeGenerator	~CodeGenerator()
OMR	ParameterSymbol	ParameterSymbol(class OMR::ParameterSymbol &&)
OMR	ParameterSymbol	ParameterSymbol(const class OMR::ParameterSymbol &)
OMR	ParameterSymbol	ParameterSymbol(TR::DataType,int32_t)
OMR	ParameterSymbol	ParameterSymbol(TR::DataType,int32_t,size_t)
OMR	ParameterSymbol	getAllocatedHigh()
OMR	ParameterSymbol	getAllocatedIndex()
OMR	ParameterSymbol	getAllocatedLow()
OMR	ParameterSymbol	getFixedType()
OMR	ParameterSymbol	getIsPreexistent()
OMR	ParameterSymbol	getKnownObjectIndex()
OMR	ParameterSymbol	getLinkageRegisterIndex()
OMR	ParameterSymbol	getOrdinal()
OMR	ParameterSymbol	getParameterOffset()
OMR	ParameterSymbol	getSlot()
OMR	ParameterSymbol	getTypeSignature(int32_t &)
OMR	ParameterSymbol	hasKnownObjectIndex()
OMR	ParameterSymbol	isParmPassedInRegister()
OMR	ParameterSymbol	operator=(class OMR::ParameterSymbol &&)
OMR	ParameterSymbol	operator=(const class OMR::ParameterSymbol &)
OMR	ParameterSymbol	self()
OMR	ParameterSymbol	setAllocatedHigh(int8_t)
OMR	ParameterSymbol	setAllocatedIndex(int8_t)
OMR	ParameterSymbol	setAllocatedLow(int8_t)
OMR	ParameterSymbol	setFixedType(void *)
OMR	ParameterSymbol	setIsPreexistent(_Bool)
OMR	ParameterSymbol	setKnownObjectIndex(TR::class KnownObjectTable::Index)
OMR	ParameterSymbol	setLinkageRegisterIndex(int8_t)
OMR	ParameterSymbol	setOrdinal(int32_t)
OMR	ParameterSymbol	setParameterOffset(int32_t)
OMR	ParameterSymbol	setTypeSignature(const char *,int32_t)
OMR	ParameterSymbol	~ParameterSymbol()
TR	ParameterSymbol	ParameterSymbol(TR::DataType,int32_t)
TR	ParameterSymbol	ParameterSymbol(TR::DataType,int32_t,size_t)
TR	ParameterSymbol	operator=(const class TR::ParameterSymbol &)
TR	ParameterSymbol	operator=(class TR::ParameterSymbol &&)
TR	ParameterSymbol	~ParameterSymbol()
TR	ParameterSymbol	ParameterSymbol(class TR::ParameterSymbol &&)
TR	ParameterSymbol	ParameterSymbol(const class TR::ParameterSymbol &)
OMR	Optimization	Optimization(const class OMR::Optimization &)
OMR	Optimization	Optimization(TR::OptimizationManager *)
OMR	Optimization	allocator()
OMR	Optimization	anchorAllChildren(TR::Node *,TR::TreeTop *)
OMR	Optimization	anchorChildren(TR::Node *,TR::TreeTop *,uint32_t,_Bool,TR::Node *)
OMR	Optimization	anchorNode(TR::Node *,TR::TreeTop *)
OMR	Optimization	cg()
OMR	Optimization	changeConditionalToUnconditional(TR::Node *&,TR::Block *,int,TR::TreeTop *,const char *)
OMR	Optimization	comp()
OMR	Optimization	fe()
OMR	Optimization	generateAnchor(TR::Node *,TR::TreeTop *)
OMR	Optimization	getDebug()
OMR	Optimization	getLastRun()
OMR	Optimization	getSymRefTab()
OMR	Optimization	id()
OMR	Optimization	manager()
OMR	Optimization	name()
OMR	Optimization	nodeIsOrderDependent(TR::Node *,uint32_t,_Bool)
OMR	Optimization	operator delete(void *,size_t)
OMR	Optimization	operator new(size_t,TR::Allocator)
OMR	Optimization	operator=(const class OMR::Optimization &)
OMR	Optimization	optDetailString()
OMR	Optimization	optimizer()
OMR	Optimization	perform()
OMR	Optimization	performOnBlock(TR::Block *)
OMR	Optimization	postPerform()
OMR	Optimization	postPerformOnBlocks()
OMR	Optimization	prePerform()
OMR	Optimization	prePerformOnBlocks()
OMR	Optimization	prepareToReplaceNode(TR::Node *,TR::ILOpCodes)
OMR	Optimization	prepareToReplaceNode(TR::Node *)
OMR	Optimization	prepareToStopUsingNode(TR::Node *,TR::TreeTop *,_Bool)
OMR	Optimization	removeNode(TR::Node *,TR::TreeTop *)
OMR	Optimization	removeOrconvertIfToGoto(TR::Node *&,TR::Block *,int,TR::TreeTop *,TR::TreeTop *&,TR::TreeTop *&,const char *)
OMR	Optimization	replaceNode(TR::Node *,TR::Node *,TR::TreeTop *,_Bool)
OMR	Optimization	replaceNodeWithChild(TR::Node *,TR::Node *,TR::TreeTop *,TR::Block *,_Bool)
OMR	Optimization	requestDeadTreesCleanup(_Bool,TR::Block *)
OMR	Optimization	requestOpt(OMR::Optimizations,_Bool,TR::Block *)
OMR	Optimization	self()
OMR	Optimization	setTrace(_Bool)
OMR	Optimization	shouldPerform()
OMR	Optimization	trHeapMemory()
OMR	Optimization	trMemory()
OMR	Optimization	trPersistentMemory()
OMR	Optimization	trStackMemory()
OMR	Optimization	trace()
OMR	Optimization	~Optimization()
OMR	OptimizationManager	OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *)
OMR	OptimizationManager	OptimizationManager(const class OMR::OptimizationManager &)
OMR	OptimizationManager	allocator()
OMR	OptimizationManager	cg()
OMR	OptimizationManager	comp()
OMR	OptimizationManager	enabled()
OMR	OptimizationManager	factory()
OMR	OptimizationManager	fe()
OMR	OptimizationManager	flags()
OMR	OptimizationManager	getAlteredCode()
OMR	OptimizationManager	getCanAddSymbolReference()
OMR	OptimizationManager	getCannotOmitTrivialDefs()
OMR	OptimizationManager	getCheckStructure()
OMR	OptimizationManager	getCheckTheCFG()
OMR	OptimizationManager	getDebug()
OMR	OptimizationManager	getDoNotSetFrequencies()
OMR	OptimizationManager	getDoesNotRequireAliasSets()
OMR	OptimizationManager	getDoesNotRequireLoadsAsDefsInUseDefs()
OMR	OptimizationManager	getDoesNotRequireTreeDumps()
OMR	OptimizationManager	getDumpStructure()
OMR	OptimizationManager	getLastRun()
OMR	OptimizationManager	getMaintainsUseDefInfo()
OMR	OptimizationManager	getOptData()
OMR	OptimizationManager	getOptPolicy()
OMR	OptimizationManager	getOptUtil()
OMR	OptimizationManager	getPerformOnlyOnEnabledBlocks()
OMR	OptimizationManager	getPrefersGlobalsUseDefInfo()
OMR	OptimizationManager	getPrefersGlobalsValueNumbering()
OMR	OptimizationManager	getRequestedBlocks()
OMR	OptimizationManager	getRequiresAccurateNodeCount()
OMR	OptimizationManager	getRequiresGlobalsUseDefInfo()
OMR	OptimizationManager	getRequiresGlobalsValueNumbering()
OMR	OptimizationManager	getRequiresLocalsUseDefInfo()
OMR	OptimizationManager	getRequiresLocalsValueNumbering()
OMR	OptimizationManager	getRequiresStructure()
OMR	OptimizationManager	getRequiresUseDefInfo()
OMR	OptimizationManager	getRequiresValueNumbering()
OMR	OptimizationManager	getStronglyPrefersGlobalsValueNumbering()
OMR	OptimizationManager	getSupportsIlGenOptLevel()
OMR	OptimizationManager	getSymRefTab()
OMR	OptimizationManager	getVerifyBlocks()
OMR	OptimizationManager	getVerifyTrees()
OMR	OptimizationManager	groupOfOpts()
OMR	OptimizationManager	id()
OMR	OptimizationManager	incNumPassesCompleted()
OMR	OptimizationManager	name()
OMR	OptimizationManager	numPassesCompleted()
OMR	OptimizationManager	operator delete(void *,size_t)
OMR	OptimizationManager	operator new(size_t,TR::Allocator)
OMR	OptimizationManager	operator=(const class OMR::OptimizationManager &)
OMR	OptimizationManager	optimizer()
OMR	OptimizationManager	performChecks()
OMR	OptimizationManager	requested(TR::Block *)
OMR	OptimizationManager	self()
OMR	OptimizationManager	setAlteredCode(_Bool)
OMR	OptimizationManager	setCanAddSymbolReference(_Bool)
OMR	OptimizationManager	setCannotOmitTrivialDefs(_Bool)
OMR	OptimizationManager	setCheckStructure(_Bool)
OMR	OptimizationManager	setCheckTheCFG(_Bool)
OMR	OptimizationManager	setDoNotSetFrequencies(_Bool)
OMR	OptimizationManager	setDoesNotRequireAliasSets(_Bool)
OMR	OptimizationManager	setDoesNotRequireLoadsAsDefsInUseDefs(_Bool)
OMR	OptimizationManager	setDumpStructure(_Bool)
OMR	OptimizationManager	setEnabled(_Bool)
OMR	OptimizationManager	setFlags(OMR::flags32_t)
OMR	OptimizationManager	setLastRun(_Bool)
OMR	OptimizationManager	setMaintainsUseDefInfo(_Bool)
OMR	OptimizationManager	setNumPassesCompleted(int32_t)
OMR	OptimizationManager	setOptData(TR::OptimizationData *)
OMR	OptimizationManager	setOptPolicy(TR::OptimizationPolicy *)
OMR	OptimizationManager	setOptUtil(TR::OptimizationUtil *)
OMR	OptimizationManager	setPerformOnlyOnEnabledBlocks(_Bool)
OMR	OptimizationManager	setPrefersGlobalsUseDefInfo(_Bool)
OMR	OptimizationManager	setPrefersGlobalsValueNumbering(_Bool)
OMR	OptimizationManager	setRequested(_Bool,TR::Block *)
OMR	OptimizationManager	setRequiresAccurateNodeCount(_Bool)
OMR	OptimizationManager	setRequiresGlobalsUseDefInfo(_Bool)
OMR	OptimizationManager	setRequiresGlobalsValueNumbering(_Bool)
OMR	OptimizationManager	setRequiresLocalsUseDefInfo(_Bool)
OMR	OptimizationManager	setRequiresLocalsValueNumbering(_Bool)
OMR	OptimizationManager	setRequiresStructure(_Bool)
OMR	OptimizationManager	setStronglyPrefersGlobalsValueNumbering(_Bool)
OMR	OptimizationManager	setSupportsIlGenOptLevel(_Bool)
OMR	OptimizationManager	setTrace(_Bool)
OMR	OptimizationManager	setVerifyBlocks(_Bool)
OMR	OptimizationManager	setVerifyTrees(_Bool)
OMR	OptimizationManager	trHeapMemory()
OMR	OptimizationManager	trMemory()
OMR	OptimizationManager	trPersistentMemory()
OMR	OptimizationManager	trStackMemory()
OMR	OptimizationManager	trace()
OMR	OptimizationManager	~OptimizationManager()
OMR	OptimizationManager	setFlags(flags32_t)
TR	Optimization	Optimization(TR::OptimizationManager *)
TR	Optimization	Optimization(const class TR::Optimization &)
TR	Optimization	Optimization(class TR::Optimization &&)
TR	Optimization	operator=(class TR::Optimization &&)
TR	Optimization	operator=(const class TR::Optimization &)
TR	Optimization	~Optimization()
TR	OptimizationManager	OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *)
TR	OptimizationManager	OptimizationManager(const class TR::OptimizationManager &)
TR	OptimizationManager	OptimizationManager(class TR::OptimizationManager &&)
TR	OptimizationManager	operator=(class TR::OptimizationManager &&)
TR	OptimizationManager	operator=(const class TR::OptimizationManager &)
TR	OptimizationManager	~OptimizationManager()
OMR	MonitorTable	MonitorTable(class OMR::MonitorTable &&)
OMR	MonitorTable	MonitorTable()
OMR	MonitorTable	MonitorTable(const class OMR::MonitorTable &)
OMR	MonitorTable	create(char *)
OMR	MonitorTable	free()
OMR	MonitorTable	get()
OMR	MonitorTable	getMemoryAllocMonitor()
OMR	MonitorTable	getScratchMemoryPoolMonitor()
OMR	MonitorTable	removeAndDestroy(TR::Monitor *)
OMR	MonitorTable	self()
OMR	MonitorTable	~MonitorTable()
TR	MonitorTable	MonitorTable()
TR	MonitorTable	MonitorTable(class TR::MonitorTable &&)
TR	MonitorTable	MonitorTable(const class TR::MonitorTable &)
OMR	IlGenRequest	IlGenRequest(class OMR::IlGenRequest &&)
OMR	IlGenRequest	IlGenRequest(const class OMR::IlGenRequest &)
OMR	IlGenRequest	IlGenRequest(TR::IlGeneratorMethodDetails &)
OMR	IlGenRequest	details()
OMR	IlGenRequest	getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *)
OMR	IlGenRequest	operator=(class OMR::IlGenRequest &&)
OMR	IlGenRequest	operator=(const class OMR::IlGenRequest &)
OMR	IlGenRequest	print(class TR_FrontEnd *,TR::FILE *,const char *)
OMR	IlGenRequest	~IlGenRequest()
OMR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(const class OMR::IlGeneratorMethodDetails &)
OMR	IlGeneratorMethodDetails	IlGeneratorMethodDetails()
OMR	IlGeneratorMethodDetails	create(TR::IlGeneratorMethodDetails &,class TR_ResolvedMethod *)
OMR	IlGeneratorMethodDetails	getIlVerifier()
OMR	IlGeneratorMethodDetails	isMethodInProgress()
OMR	IlGeneratorMethodDetails	operator new(size_t,TR::IlGeneratorMethodDetails &)
OMR	IlGeneratorMethodDetails	operator new(size_t,TR::IlGeneratorMethodDetails *)
OMR	IlGeneratorMethodDetails	operator=(const class OMR::IlGeneratorMethodDetails &)
OMR	IlGeneratorMethodDetails	print(class TR_FrontEnd *,TR::FILE *)
OMR	IlGeneratorMethodDetails	sameAs(TR::IlGeneratorMethodDetails &)
OMR	IlGeneratorMethodDetails	self()
OMR	IlGeneratorMethodDetails	setIlVerifier(TR::IlVerifier *)
OMR	IlGeneratorMethodDetails	supportsInvalidation()
OMR	IlGeneratorMethodDetails	~IlGeneratorMethodDetails()
TR	IlGenRequest	IlGenRequest(TR::IlGeneratorMethodDetails &)
TR	IlGenRequest	IlGenRequest(class TR::IlGenRequest &&)
TR	IlGenRequest	IlGenRequest(const class TR::IlGenRequest &)
TR	IlGenRequest	allowIlGenOptimizations()
TR	IlGenRequest	operator=(class TR::IlGenRequest &&)
TR	IlGenRequest	operator=(const class TR::IlGenRequest &)
TR	IlGenRequest	~IlGenRequest()
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails()
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class TR_ResolvedMethod *)
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(TR::ResolvedMethod *)
TR	IlGeneratorMethodDetails	operator=(class TR::IlGeneratorMethodDetails &&)
TR	IlGeneratorMethodDetails	operator=(const class TR::IlGeneratorMethodDetails &)
TR	IlGeneratorMethodDetails	~IlGeneratorMethodDetails()
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class TR::IlGeneratorMethodDetails &&)
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(const class TR::IlGeneratorMethodDetails &)
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(J9Method *const)
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(const TR::IlGeneratorMethodDetails &)
TR	IlGeneratorMethodDetails	operator=(const TR::IlGeneratorMethodDetails &)
TR	IlGeneratorMethodDetails	IlGeneratorMethodDetails(struct J9Method *const)
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails()
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class TR_ResolvedMethod *)
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails(TR::ResolvedMethod *)
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class TestCompiler::IlGeneratorMethodDetails &&)
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails(const class TestCompiler::IlGeneratorMethodDetails &)
TestCompiler	IlGeneratorMethodDetails	getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *,_Bool,class TR_InlineBlocks *)
TestCompiler	IlGeneratorMethodDetails	getMethod()
TestCompiler	IlGeneratorMethodDetails	getResolvedMethod()
TestCompiler	IlGeneratorMethodDetails	operator=(class TestCompiler::IlGeneratorMethodDetails &&)
TestCompiler	IlGeneratorMethodDetails	operator=(const class TestCompiler::IlGeneratorMethodDetails &)
TestCompiler	IlGeneratorMethodDetails	print(class TR_FrontEnd *,TR::FILE *)
TestCompiler	IlGeneratorMethodDetails	sameAs(TR::IlGeneratorMethodDetails &,class TR_FrontEnd *)
TestCompiler	IlGeneratorMethodDetails	~IlGeneratorMethodDetails()
OMR	TransformUtil	TransformUtil(const class OMR::TransformUtil &)
OMR	TransformUtil	TransformUtil()
OMR	TransformUtil	TransformUtil(class OMR::TransformUtil &&)
OMR	TransformUtil	convertWidthToShift(int32_t)
OMR	TransformUtil	fieldShouldBeCompressed(TR::Node *,TR::Compilation *)
OMR	TransformUtil	isNoopConversion(TR::Compilation *,TR::Node *)
OMR	TransformUtil	jitPersistentAlloc(size_t)
OMR	TransformUtil	jitPersistentFree(void *)
OMR	TransformUtil	operator delete(void *,size_t)
OMR	TransformUtil	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	TransformUtil	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator delete(void *,TR::Region &)
OMR	TransformUtil	operator delete[](void *,TR::Region &)
OMR	TransformUtil	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	TransformUtil	operator new(size_t,class TR_PersistentMemory *)
OMR	TransformUtil	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	TransformUtil	operator new(size_t,TR::Internal::PersistentNewType)
OMR	TransformUtil	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator new(size_t,TR::Region &)
OMR	TransformUtil	operator new(size_t,TR_ArenaAllocator *)
OMR	TransformUtil	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator new[](size_t,class TR_PersistentMemory *)
OMR	TransformUtil	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	TransformUtil	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	TransformUtil	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	TransformUtil	operator new[](size_t,TR::Region &)
OMR	TransformUtil	recursivelySetNodeVisitCount(TR::Node *,vcount_t)
OMR	TransformUtil	removeTree(TR::Compilation *,TR::TreeTop *)
OMR	TransformUtil	scalarizeAddressParameter(TR::Compilation *,TR::Node *,size_t,TR::DataType,TR::SymbolReference *,_Bool)
OMR	TransformUtil	scalarizeArrayCopy(TR::Compilation *,TR::Node *,TR::TreeTop *,_Bool,_Bool &,TR::SymbolReference *,TR::SymbolReference *,_Bool)
OMR	TransformUtil	self()
OMR	TransformUtil	transformDirectLoad(TR::Compilation *,TR::Node *)
OMR	TransformUtil	transformIndirectLoad(TR::Compilation *,TR::Node *)
OMR	TransformUtil	transformIndirectLoadChain(TR::Compilation *,TR::Node *,TR::Node *,TR::class KnownObjectTable::Index,TR::Node **)
OMR	TransformUtil	transformIndirectLoadChainAt(TR::Compilation *,TR::Node *,TR::Node *,uintptrj_t *,TR::Node **)
OMR	TransformUtil	~TransformUtil()
TR	TransformUtil	TransformUtil()
OMR	Linkage	Linkage(class OMR::Linkage &&)
OMR	Linkage	Linkage(const class OMR::Linkage &)
OMR	Linkage	Linkage()
OMR	Linkage	argumentRegisterKind(TR::Node *)
OMR	Linkage	composeSavesRestores(TR::Instruction *,int32_t,int32_t,int32_t,int32_t,_Bool)
OMR	Linkage	createEpilogue(TR::Instruction *)
OMR	Linkage	createPrologue(TR::Instruction *)
OMR	Linkage	getKilledRegisters(TR::Node *)
OMR	Linkage	getRegisterSaveSize()
OMR	Linkage	getRightToLeft()
OMR	Linkage	getSavedRegisters(TR::Node *,int32_t)
OMR	Linkage	hasToBeOnStack(TR::ParameterSymbol *)
OMR	Linkage	isSpecialNonVolatileArgumentRegister(int8_t)
OMR	Linkage	jitPersistentAlloc(size_t)
OMR	Linkage	jitPersistentFree(void *)
OMR	Linkage	mapPreservedRegistersToStackOffsets(int32_t *,int32_t &,class TR_BitVector *&)
OMR	Linkage	mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &)
OMR	Linkage	mapStack(TR::ResolvedMethodSymbol *)
OMR	Linkage	numArgumentRegisters(enum TR_RegisterKinds)
OMR	Linkage	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Linkage	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator delete(void *,size_t)
OMR	Linkage	operator delete(void *,TR::Region &)
OMR	Linkage	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Linkage	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator delete[](void *,TR::Region &)
OMR	Linkage	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator new(size_t,class TR_PersistentMemory *)
OMR	Linkage	operator new(size_t,TR_ArenaAllocator *)
OMR	Linkage	operator new(size_t,TR::Region &)
OMR	Linkage	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Linkage	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Linkage	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator new[](size_t,TR::Region &)
OMR	Linkage	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Linkage	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Linkage	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Linkage	operator new[](size_t,class TR_PersistentMemory *)
OMR	Linkage	operator=(class OMR::Linkage &&)
OMR	Linkage	operator=(const class OMR::Linkage &)
OMR	Linkage	restorePreservedRegister(TR::Instruction *,int32_t,int32_t)
OMR	Linkage	savePreservedRegister(TR::Instruction *,int32_t,int32_t)
OMR	Linkage	self()
OMR	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *)
OMR	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &)
OMR	Linkage	useCachedStaticAreaAddresses(TR::Compilation *)
OMR	Linkage	~Linkage()
OMR::X86	Linkage	Linkage(const class OMR::X86::Linkage &)
OMR::X86	Linkage	Linkage(TR::CodeGenerator *)
OMR::X86	Linkage	Linkage(class OMR::X86::Linkage &&)
OMR::X86	Linkage	alignLocalObjectWithCollectedFields(uint32_t &)
OMR::X86	Linkage	alignLocalObjectWithoutCollectedFields(uint32_t &)
OMR::X86	Linkage	associatePreservedRegisters(TR::RegisterDependencyConditions *,TR::Register *)
OMR::X86	Linkage	buildDirectDispatch(TR::Node *,_Bool)
OMR::X86	Linkage	buildIndirectDispatch(TR::Node *)
OMR::X86	Linkage	cg()
OMR::X86	Linkage	coerceFPReturnValueToXMMR(TR::Node *,TR::RegisterDependencyConditions *,TR::MethodSymbol *,TR::Register *)
OMR::X86	Linkage	comp()
OMR::X86	Linkage	copyGlRegDepsToParameterSymbols(TR::Node *,TR::CodeGenerator *)
OMR::X86	Linkage	copyLinkageInfoToParameterSymbols()
OMR::X86	Linkage	copyStackParametersToLinkageRegisters(TR::Instruction *)
OMR::X86	Linkage	createEpilogue(TR::Instruction *)
OMR::X86	Linkage	createPrologue(TR::Instruction *)
OMR::X86	Linkage	deallocateFrameIfNeeded(TR::Instruction *,int32_t)
OMR::X86	Linkage	ensureMinimumFirstInstructionSize(uint8_t)
OMR::X86	Linkage	fe()
OMR::X86	Linkage	findReturnRegisterFromDependencies(TR::Node *,TR::RegisterDependencyConditions *,TR::MethodSymbol *,_Bool)
OMR::X86	Linkage	flushArguments(TR::Instruction *,TR::ResolvedMethodSymbol *,_Bool,_Bool)
OMR::X86	Linkage	flushArguments(TR::Node *,uint8_t *,_Bool,int32_t *,_Bool,_Bool)
OMR::X86	Linkage	fullRegisterMovType(TR::Register *)
OMR::X86	Linkage	getMinimumFirstInstructionSize()
OMR::X86	Linkage	getProperties()
OMR::X86	Linkage	getRightToLeft()
OMR::X86	Linkage	isFloat(TR_MovDataTypes)
OMR::X86	Linkage	loadArguments(TR::Instruction *,TR::ResolvedMethodSymbol *)
OMR::X86	Linkage	loadArguments(TR::Node *,uint8_t *,_Bool,int32_t *,_Bool)
OMR::X86	Linkage	machine()
OMR::X86	Linkage	mapCompactedStack(TR::ResolvedMethodSymbol *)
OMR::X86	Linkage	mapIncomingParms(TR::ResolvedMethodSymbol *)
OMR::X86	Linkage	mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &)
OMR::X86	Linkage	mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t,uint32_t &)
OMR::X86	Linkage	mapStack(TR::ResolvedMethodSymbol *)
OMR::X86	Linkage	movOpcodes(TR_MovOperandTypes,TR_MovDataTypes)
OMR::X86	Linkage	movRegisterKind(TR_MovDataTypes)
OMR::X86	Linkage	movType(TR::DataType)
OMR::X86	Linkage	needsFrameDeallocation()
OMR::X86	Linkage	numArgumentRegisters(enum TR_RegisterKinds)
OMR::X86	Linkage	operator=(const class OMR::X86::Linkage &)
OMR::X86	Linkage	operator=(class OMR::X86::Linkage &&)
OMR::X86	Linkage	paramMovType(TR::ParameterSymbol *)
OMR::X86	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *)
OMR::X86	Linkage	stopUsingKilledRegisters(TR::RegisterDependencyConditions *,TR::Register *)
OMR::X86	Linkage	storeArguments(TR::Instruction *,TR::ResolvedMethodSymbol *)
OMR::X86	Linkage	storeArguments(TR::Node *,uint8_t *,_Bool,int32_t *)
OMR::X86	Linkage	trHeapMemory()
OMR::X86	Linkage	trMemory()
OMR::X86	Linkage	trStackMemory()
OMR::X86	Linkage	~Linkage()
TR	Linkage	Linkage(TR::CodeGenerator *)
TR	Linkage	operator=(class TR::Linkage &&)
TR	Linkage	operator=(const class TR::Linkage &)
TR	Linkage	~Linkage()
TR	Linkage	Linkage(class TR::Linkage &&)
TR	Linkage	Linkage(const class TR::Linkage &)
TR	Linkage	Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions)
OMR	RegisterPair	FlattenRegisterPairs(TR_Queue<TR::Register> *)
OMR	RegisterPair	RegisterPair(class OMR::RegisterPair &&)
OMR	RegisterPair	RegisterPair(enum TR_RegisterKinds)
OMR	RegisterPair	RegisterPair()
OMR	RegisterPair	RegisterPair(TR::Register *,TR::Register *)
OMR	RegisterPair	RegisterPair(const class OMR::RegisterPair &)
OMR	RegisterPair	block()
OMR	RegisterPair	getHighOrder()
OMR	RegisterPair	getLowOrder()
OMR	RegisterPair	getRegister()
OMR	RegisterPair	getRegisterPair()
OMR	RegisterPair	operator=(class OMR::RegisterPair &&)
OMR	RegisterPair	operator=(const class OMR::RegisterPair &)
OMR	RegisterPair	setHighOrder(TR::Register *,TR::CodeGenerator *)
OMR	RegisterPair	setLowOrder(TR::Register *,TR::CodeGenerator *)
OMR	RegisterPair	unblock()
OMR	RegisterPair	usesRegister(TR::Register *)
OMR	RegisterPair	~RegisterPair()
TR	RegisterPair	RegisterPair(enum TR_RegisterKinds)
TR	RegisterPair	RegisterPair()
TR	RegisterPair	RegisterPair(TR::Register *,TR::Register *)
TR	RegisterPair	operator=(class TR::RegisterPair &&)
TR	RegisterPair	operator=(const class TR::RegisterPair &)
TR	RegisterPair	~RegisterPair()
TR	RegisterPair	RegisterPair(class TR::RegisterPair &&)
TR	RegisterPair	RegisterPair(const class TR::RegisterPair &)
OMR	AheadOfTimeCompile	AheadOfTimeCompile(const class OMR::AheadOfTimeCompile &)
OMR	AheadOfTimeCompile	AheadOfTimeCompile(uint32_t *,TR::Compilation *)
OMR	AheadOfTimeCompile	AheadOfTimeCompile(class OMR::AheadOfTimeCompile &&)
OMR	AheadOfTimeCompile	addToSizeOfAOTRelocations(uint32_t)
OMR	AheadOfTimeCompile	comp()
OMR	AheadOfTimeCompile	dumpRelocationData()
OMR	AheadOfTimeCompile	getAOTRelocationTargets()
OMR	AheadOfTimeCompile	getDebug()
OMR	AheadOfTimeCompile	getRelocationData()
OMR	AheadOfTimeCompile	getSizeOfAOTRelocationHeader(TR_ExternalRelocationTargetKind)
OMR	AheadOfTimeCompile	getSizeOfAOTRelocations()
OMR	AheadOfTimeCompile	initialiseAOTRelocationHeader(TR::IteratedExternalRelocation *)
OMR	AheadOfTimeCompile	jitPersistentAlloc(size_t)
OMR	AheadOfTimeCompile	jitPersistentFree(void *)
OMR	AheadOfTimeCompile	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator delete(void *,size_t)
OMR	AheadOfTimeCompile	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	AheadOfTimeCompile	operator delete(void *,TR::Region &)
OMR	AheadOfTimeCompile	operator delete[](void *,TR::Region &)
OMR	AheadOfTimeCompile	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	AheadOfTimeCompile	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator new(size_t,TR_ArenaAllocator *)
OMR	AheadOfTimeCompile	operator new(size_t,TR::Internal::PersistentNewType)
OMR	AheadOfTimeCompile	operator new(size_t,class TR_PersistentMemory *)
OMR	AheadOfTimeCompile	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	AheadOfTimeCompile	operator new(size_t,TR::Region &)
OMR	AheadOfTimeCompile	operator new[](size_t,class TR_PersistentMemory *)
OMR	AheadOfTimeCompile	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	AheadOfTimeCompile	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	AheadOfTimeCompile	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	AheadOfTimeCompile	operator new[](size_t,TR::Region &)
OMR	AheadOfTimeCompile	operator=(const class OMR::AheadOfTimeCompile &)
OMR	AheadOfTimeCompile	operator=(class OMR::AheadOfTimeCompile &&)
OMR	AheadOfTimeCompile	processRelocations()
OMR	AheadOfTimeCompile	self()
OMR	AheadOfTimeCompile	setAOTRelocationKindToHeaderSizeMap(uint32_t *)
OMR	AheadOfTimeCompile	setRelocationData(uint8_t *)
OMR	AheadOfTimeCompile	setSizeOfAOTRelocations(uint32_t)
OMR	AheadOfTimeCompile	trMemory()
OMR	AheadOfTimeCompile	traceRelocationOffsets(uint8_t *&,int32_t,const uint8_t *,_Bool)
OMR	AheadOfTimeCompile	~AheadOfTimeCompile()
TR	AheadOfTimeCompile	AheadOfTimeCompile(uint32_t *,TR::Compilation *)
TR	AheadOfTimeCompile	operator=(class TR::AheadOfTimeCompile &&)
TR	AheadOfTimeCompile	operator=(const class TR::AheadOfTimeCompile &)
TR	AheadOfTimeCompile	~AheadOfTimeCompile()
TR	AheadOfTimeCompile	AheadOfTimeCompile(TR::CodeGenerator *)
TR	AheadOfTimeCompile	AheadOfTimeCompile(class TR::AheadOfTimeCompile &&)
TR	AheadOfTimeCompile	AheadOfTimeCompile(const class TR::AheadOfTimeCompile &)
OMR	MemoryReference	MemoryReference()
OMR	MemoryReference	MemoryReference(class OMR::MemoryReference &&)
OMR	MemoryReference	MemoryReference(const class OMR::MemoryReference &)
OMR	MemoryReference	jitPersistentAlloc(size_t)
OMR	MemoryReference	jitPersistentFree(void *)
OMR	MemoryReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete(void *,size_t)
OMR	MemoryReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator delete(void *,TR::Region &)
OMR	MemoryReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete[](void *,TR::Region &)
OMR	MemoryReference	operator new(size_t,TR::Region &)
OMR	MemoryReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR	MemoryReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator new(size_t,TR_ArenaAllocator *)
OMR	MemoryReference	operator new(size_t,class TR_PersistentMemory *)
OMR	MemoryReference	operator new[](size_t,TR::Region &)
OMR	MemoryReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator new[](size_t,class TR_PersistentMemory *)
OMR	MemoryReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	MemoryReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator=(class OMR::MemoryReference &&)
OMR	MemoryReference	operator=(const class OMR::MemoryReference &)
OMR	MemoryReference	self()
OMR	MemoryReference	~MemoryReference()
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::MemoryReference &,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	MemoryReference(const class OMR::X86::AMD64::MemoryReference &)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	MemoryReference(class OMR::X86::AMD64::MemoryReference &&)
OMR::X86::AMD64	MemoryReference	MemoryReference(intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::SymbolReference *,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	addMetaDataForCodeAddressDisplacementOnly(intptrj_t,uint8_t *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	addMetaDataForCodeAddressWithLoad(uint8_t *,TR::Instruction *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	assignRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	blockRegisters()
OMR::X86::AMD64	MemoryReference	decNodeReferenceCounts(TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	estimateBinaryLength(TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	generateBinaryEncoding(uint8_t *,TR::Instruction *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	getAddressRegister()
OMR::X86::AMD64	MemoryReference	jitPersistentAlloc(size_t)
OMR::X86::AMD64	MemoryReference	jitPersistentFree(void *)
OMR::X86::AMD64	MemoryReference	needsAddressLoadInstruction(intptrj_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator delete(void *,size_t)
OMR::X86::AMD64	MemoryReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR::X86::AMD64	MemoryReference	operator delete(void *,TR::Region &)
OMR::X86::AMD64	MemoryReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR::X86::AMD64	MemoryReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator delete[](void *,TR::Region &)
OMR::X86::AMD64	MemoryReference	operator new(size_t,TR::Region &)
OMR::X86::AMD64	MemoryReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR::X86::AMD64	MemoryReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::X86::AMD64	MemoryReference	operator new(size_t,TR_ArenaAllocator *)
OMR::X86::AMD64	MemoryReference	operator new(size_t,class TR_PersistentMemory *)
OMR::X86::AMD64	MemoryReference	operator new[](size_t,TR::Region &)
OMR::X86::AMD64	MemoryReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::X86::AMD64	MemoryReference	operator new[](size_t,class TR_PersistentMemory *)
OMR::X86::AMD64	MemoryReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR::X86::AMD64	MemoryReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86::AMD64	MemoryReference	operator=(const class OMR::X86::AMD64::MemoryReference &)
OMR::X86::AMD64	MemoryReference	operator=(class OMR::X86::AMD64::MemoryReference &&)
OMR::X86::AMD64	MemoryReference	setPreferRIPRelative(_Bool)
OMR::X86::AMD64	MemoryReference	unblockRegisters()
OMR::X86::AMD64	MemoryReference	useRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	~MemoryReference()
OMR::X86	MemoryReference	MemoryReference(class OMR::X86::MemoryReference &&)
OMR::X86	MemoryReference	MemoryReference(const class OMR::X86::MemoryReference &)
OMR::X86	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool)
OMR::X86	MemoryReference	MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::SymbolReference *,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::MemoryReference &,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86	MemoryReference	ModRM(uint8_t *)
OMR::X86	MemoryReference	SIB(uint8_t *)
OMR::X86	MemoryReference	addMetaDataForCodeAddress(uint32_t,uint8_t *,TR::Node *,TR::CodeGenerator *)
OMR::X86	MemoryReference	assignRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::X86	MemoryReference	blockRegisters()
OMR::X86	MemoryReference	checkAndDecReferenceCount(TR::Node *,rcount_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	consolidateRegisters(TR::Node *,TR::CodeGenerator *)
OMR::X86	MemoryReference	convertMultiplierToStride(int32_t)
OMR::X86	MemoryReference	decNodeReferenceCounts(TR::CodeGenerator *)
OMR::X86	MemoryReference	enlarge(TR::CodeGenerator *,int32_t,int32_t,_Bool)
OMR::X86	MemoryReference	estimateBinaryLength(TR::CodeGenerator *)
OMR::X86	MemoryReference	evaluate(TR::Node *,TR::CodeGenerator *,TR::Node *)
OMR::X86	MemoryReference	generateBinaryEncoding(uint8_t *,TR::Instruction *,TR::CodeGenerator *)
OMR::X86	MemoryReference	getAddressRegister()
OMR::X86	MemoryReference	getBaseNode()
OMR::X86	MemoryReference	getBaseRegister()
OMR::X86	MemoryReference	getBinaryLengthLowerBound(TR::CodeGenerator *)
OMR::X86	MemoryReference	getDataSnippet()
OMR::X86	MemoryReference	getDisplacement()
OMR::X86	MemoryReference	getFlags()
OMR::X86	MemoryReference	getIndexNode()
OMR::X86	MemoryReference	getIndexRegister()
OMR::X86	MemoryReference	getLabel()
OMR::X86	MemoryReference	getNextRegister(TR::Register *)
OMR::X86	MemoryReference	getNumMRReferencedGPRegisters()
OMR::X86	MemoryReference	getReloKind()
OMR::X86	MemoryReference	getStride()
OMR::X86	MemoryReference	getStrideForNode(TR::Node *,TR::CodeGenerator *)
OMR::X86	MemoryReference	getStrideMultiplier()
OMR::X86	MemoryReference	getSymbolReference()
OMR::X86	MemoryReference	getUnresolvedDataSnippet()
OMR::X86	MemoryReference	hasUnresolvedDataSnippet()
OMR::X86	MemoryReference	hasUnresolvedVirtualCallSnippet()
OMR::X86	MemoryReference	ignoreVolatile()
OMR::X86	MemoryReference	inUpcastingMode()
OMR::X86	MemoryReference	initialize(TR::SymbolReference *,TR::CodeGenerator *)
OMR::X86	MemoryReference	isForceSIBByte()
OMR::X86	MemoryReference	isForceWideDisplacement()
OMR::X86	MemoryReference	isValidStrideMultiplier(int32_t)
OMR::X86	MemoryReference	isValidStrideShift(int32_t)
OMR::X86	MemoryReference	jitPersistentAlloc(size_t)
OMR::X86	MemoryReference	jitPersistentFree(void *)
OMR::X86	MemoryReference	needsCodeAbsoluteExternalRelocation()
OMR::X86	MemoryReference	needsSIBByte()
OMR::X86	MemoryReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete(void *,size_t)
OMR::X86	MemoryReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator delete(void *,TR::Region &)
OMR::X86	MemoryReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete[](void *,TR::Region &)
OMR::X86	MemoryReference	operator new(size_t,TR::Region &)
OMR::X86	MemoryReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR::X86	MemoryReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator new(size_t,TR_ArenaAllocator *)
OMR::X86	MemoryReference	operator new(size_t,class TR_PersistentMemory *)
OMR::X86	MemoryReference	operator new[](size_t,TR::Region &)
OMR::X86	MemoryReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator new[](size_t,class TR_PersistentMemory *)
OMR::X86	MemoryReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR::X86	MemoryReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator=(class OMR::X86::MemoryReference &&)
OMR::X86	MemoryReference	operator=(const class OMR::X86::MemoryReference &)
OMR::X86	MemoryReference	populateMemoryReference(TR::Node *,TR::CodeGenerator *,TR::Node *)
OMR::X86	MemoryReference	processAsFPVolatile()
OMR::X86	MemoryReference	processAsLongVolatileHigh()
OMR::X86	MemoryReference	processAsLongVolatileLow()
OMR::X86	MemoryReference	refsRegister(TR::Register *)
OMR::X86	MemoryReference	requiresLockPrefix()
OMR::X86	MemoryReference	rexBits()
OMR::X86	MemoryReference	setBaseNode(TR::Node *)
OMR::X86	MemoryReference	setBaseRegister(TR::Register *)
OMR::X86	MemoryReference	setConstantDataSnippet(TR::IA32DataSnippet *)
OMR::X86	MemoryReference	setFlags(uint8_t)
OMR::X86	MemoryReference	setForceSIBByte()
OMR::X86	MemoryReference	setForceWideDisplacement()
OMR::X86	MemoryReference	setHasUnresolvedDataSnippet()
OMR::X86	MemoryReference	setHasUnresolvedVirtualCallSnippet()
OMR::X86	MemoryReference	setIgnoreVolatile()
OMR::X86	MemoryReference	setInUpcastingMode(_Bool)
OMR::X86	MemoryReference	setIndexNode(TR::Node *)
OMR::X86	MemoryReference	setIndexRegister(TR::Register *)
OMR::X86	MemoryReference	setLabel(TR::LabelSymbol *)
OMR::X86	MemoryReference	setNeedsCodeAbsoluteExternalRelocation()
OMR::X86	MemoryReference	setProcessAsFPVolatile()
OMR::X86	MemoryReference	setProcessAsLongVolatileHigh()
OMR::X86	MemoryReference	setProcessAsLongVolatileLow()
OMR::X86	MemoryReference	setReloKind(int32_t)
OMR::X86	MemoryReference	setRequiresLockPrefix()
OMR::X86	MemoryReference	setStride(uint8_t)
OMR::X86	MemoryReference	setStrideFieldInSIB(uint8_t *)
OMR::X86	MemoryReference	setStrideFromMultiplier(uint8_t)
OMR::X86	MemoryReference	setUnresolvedDataSnippet(TR::UnresolvedDataSnippet *)
OMR::X86	MemoryReference	stopUsingRegisters(TR::CodeGenerator *)
OMR::X86	MemoryReference	unblockRegisters()
OMR::X86	MemoryReference	useRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::X86	MemoryReference	~MemoryReference()
TR	MemoryReference	MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_ScratchRegisterManager *)
TR	MemoryReference	MemoryReference(intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
TR	MemoryReference	MemoryReference(TR::SymbolReference *,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
TR	MemoryReference	MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
TR	MemoryReference	MemoryReference(class TR::MemoryReference &,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
TR	MemoryReference	operator=(class TR::MemoryReference &&)
TR	MemoryReference	operator=(const class TR::MemoryReference &)
TR	MemoryReference	~MemoryReference()
TR	MemoryReference	MemoryReference(class TR::MemoryReference &&)
TR	MemoryReference	MemoryReference(const class TR::MemoryReference &)
TR	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool)
TR	MemoryReference	MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(intptrj_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::SymbolReference *,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,uint32_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Register *,int32_t,uint8_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Node *,uint32_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Node *,class TR::MemoryReference &,int32_t,uint32_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *)
TR	MemoryReference	MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(int32_t,TR::CodeGenerator *,_Bool)
TR	MemoryReference	MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *)
TR	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *)
TR	MemoryReference	MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *)
TR	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *)
TR	MemoryReference	MemoryReference(class TR::MemoryReference &,int32_t,TR::CodeGenerator *)
OMR	CodeCacheConfig	CodeCacheConfig(class OMR::CodeCacheConfig &&)
OMR	CodeCacheConfig	CodeCacheConfig(const class OMR::CodeCacheConfig &)
OMR	CodeCacheConfig	CodeCacheConfig()
OMR	CodeCacheConfig	allowedToGrowCache()
OMR	CodeCacheConfig	canChangeNumCodeCaches()
OMR	CodeCacheConfig	ccPreLoadedCodeSize()
OMR	CodeCacheConfig	codeCacheAlignment()
OMR	CodeCacheConfig	codeCacheFreeBlockRecylingEnabled()
OMR	CodeCacheConfig	codeCacheHashEntryAllocatorSlabSize()
OMR	CodeCacheConfig	codeCacheHelperAlignment()
OMR	CodeCacheConfig	codeCacheHelperAlignmentMask()
OMR	CodeCacheConfig	codeCacheKB()
OMR	CodeCacheConfig	codeCacheMethodBodyAllocRetries()
OMR	CodeCacheConfig	codeCachePadKB()
OMR	CodeCacheConfig	codeCacheTempTrampolineSyncArraySize()
OMR	CodeCacheConfig	codeCacheTotalKB()
OMR	CodeCacheConfig	codeCacheTrampolineAlignmentBytes()
OMR	CodeCacheConfig	coldEyeCatcher()
OMR	CodeCacheConfig	doSanityChecks()
OMR	CodeCacheConfig	emitELFObjectFile()
OMR	CodeCacheConfig	emitElfObject()
OMR	CodeCacheConfig	largeCodePageFlags()
OMR	CodeCacheConfig	largeCodePageSize()
OMR	CodeCacheConfig	lowCodeCacheThreshold()
OMR	CodeCacheConfig	maxNumberOfCodeCaches()
OMR	CodeCacheConfig	mccCallbacks()
OMR	CodeCacheConfig	needsMethodTrampolines()
OMR	CodeCacheConfig	numRuntimeHelpers()
OMR	CodeCacheConfig	operator=(class OMR::CodeCacheConfig &&)
OMR	CodeCacheConfig	operator=(const class OMR::CodeCacheConfig &)
OMR	CodeCacheConfig	self()
OMR	CodeCacheConfig	setCodeCacheHelperAlignment(size_t)
OMR	CodeCacheConfig	trampolineCodeSize()
OMR	CodeCacheConfig	trampolineSpacePercentage()
OMR	CodeCacheConfig	verboseCodeCache()
OMR	CodeCacheConfig	verbosePerformance()
OMR	CodeCacheConfig	verboseReclamation()
OMR	CodeCacheConfig	warmEyeCatcher()
OMR	CodeCacheConfig	~CodeCacheConfig()
OMR	CodeCacheManager	CodeCacheManager(class OMR::CodeCacheManager &&)
OMR	CodeCacheManager	CodeCacheManager(const class OMR::CodeCacheManager &)
OMR	CodeCacheManager	CodeCacheManager(TR::RawAllocator)
OMR	CodeCacheManager	addCodeCache(TR::CodeCache *)
OMR	CodeCacheManager	addFreeBlock(void *,uint8_t *)
OMR	CodeCacheManager	allocateCodeCacheObject(TR::CodeCacheMemorySegment *,size_t,class OMR::CodeCacheHashEntrySlab *)
OMR	CodeCacheManager	allocateCodeCacheRepository(size_t)
OMR	CodeCacheManager	allocateCodeMemory(size_t,size_t,TR::CodeCache **,uint8_t **,_Bool,_Bool)
OMR	CodeCacheManager	allocateCodeMemoryWithRetries(size_t,size_t,TR::CodeCache **,int32_t,uint8_t **,_Bool,_Bool)
OMR	CodeCacheManager	allocateRepositoryCodeCache()
OMR	CodeCacheManager	almostOutOfCodeCache()
OMR	CodeCacheManager	cacheListMutex()
OMR	CodeCacheManager	canAddNewCodeCache()
OMR	CodeCacheManager	carveCodeCacheSpaceFromRepository(size_t,size_t &)
OMR	CodeCacheManager	chooseCacheStartAddress(size_t)
OMR	CodeCacheManager	codeCacheConfig()
OMR	CodeCacheManager	codeCacheIsFull()
OMR	CodeCacheManager	decreaseFreeSpaceInCodeCacheRepository(size_t)
OMR	CodeCacheManager	destroy()
OMR	CodeCacheManager	dumpCodeCaches()
OMR	CodeCacheManager	findCodeCacheFromPC(void *)
OMR	CodeCacheManager	findHelperTrampoline(void *,int32_t)
OMR	CodeCacheManager	findMethodTrampoline(class TR_OpaqueMethodBlock *,void *)
OMR	CodeCacheManager	freeMemory(void *)
OMR	CodeCacheManager	freeMemorySegment(TR::CodeCacheMemorySegment *)
OMR	CodeCacheManager	getCodeCacheRepositoryMonitor()
OMR	CodeCacheManager	getCurrentNumberOfCodeCaches()
OMR	CodeCacheManager	getFirstCodeCache()
OMR	CodeCacheManager	getMemory(size_t)
OMR	CodeCacheManager	getNewCacheMemorySegment(size_t,size_t &)
OMR	CodeCacheManager	getNewCodeCache(int32_t)
OMR	CodeCacheManager	getRepositoryCodeCacheAddress()
OMR	CodeCacheManager	increaseFreeSpaceInCodeCacheRepository(size_t)
OMR	CodeCacheManager	initialize(_Bool,uint32_t)
OMR	CodeCacheManager	initializeELFHeader()
OMR	CodeCacheManager	initializeELFHeaderForPlatform(struct OMR::ELFCodeCacheHeader *)
OMR	CodeCacheManager	initializeELFTrailer()
OMR	CodeCacheManager	initializeObjectFileGenerator()
OMR	CodeCacheManager	initialized()
OMR	CodeCacheManager	lateInitialization()
OMR	CodeCacheManager	lowCodeCacheSpaceThresholdReached()
OMR	CodeCacheManager	operator=(class OMR::CodeCacheManager &&)
OMR	CodeCacheManager	performSizeAdjustments(size_t &,size_t &,_Bool,_Bool)
OMR	CodeCacheManager	printMccStats()
OMR	CodeCacheManager	printOccupancyStats()
OMR	CodeCacheManager	printRemainingSpaceInCodeCaches()
OMR	CodeCacheManager	registerCompiledMethod(const char *,uint8_t *,uint32_t)
OMR	CodeCacheManager	registerStaticRelocation(const TR::StaticRelocation &)
OMR	CodeCacheManager	replaceTrampoline(class TR_OpaqueMethodBlock *,void *,void *,void *,void *,_Bool)
OMR	CodeCacheManager	repositoryCodeCacheCreated()
OMR	CodeCacheManager	reservationInterfaceCache(void *,class TR_OpaqueMethodBlock *)
OMR	CodeCacheManager	reserveCodeCache(_Bool,size_t,int32_t,int32_t *)
OMR	CodeCacheManager	self()
OMR	CodeCacheManager	setCodeCacheFull()
OMR	CodeCacheManager	setCodeCacheIsFull(_Bool)
OMR	CodeCacheManager	setHasFailedCodeCacheAllocation()
OMR	CodeCacheManager	setupMemorySegmentFromRepository(uint8_t *,uint8_t *,size_t &)
OMR	CodeCacheManager	synchronizeTrampolines()
OMR	CodeCacheManager	undoCarvingFromRepository(TR::CodeCacheMemorySegment *)
OMR	CodeCacheManager	unreserveCodeCache(TR::CodeCache *)
OMR	CodeCacheManager	usingRepository()
OMR	CodeCacheManager	~CodeCacheManager()
OMR	ELFRelocationResolver	ELFRelocationResolver()
OMR	ELFRelocationResolver	ELFRelocationResolver(const class OMR::ELFRelocationResolver &)
OMR	ELFRelocationResolver	ELFRelocationResolver(class OMR::ELFRelocationResolver &&)
OMR	ELFRelocationResolver	resolveRelocationType(const TR::StaticRelocation &)
OMR	ELFRelocationResolver	~ELFRelocationResolver()
OMR::X86::AMD64	ELFRelocationResolver	ELFRelocationResolver()
OMR::X86::AMD64	ELFRelocationResolver	ELFRelocationResolver(const class OMR::X86::AMD64::ELFRelocationResolver &)
OMR::X86::AMD64	ELFRelocationResolver	ELFRelocationResolver(class OMR::X86::AMD64::ELFRelocationResolver &&)
OMR::X86::AMD64	ELFRelocationResolver	resolveRelocationType(const TR::StaticRelocation &)
OMR::X86::AMD64	ELFRelocationResolver	~ELFRelocationResolver()
TR	CodeCacheConfig	CodeCacheConfig()
TR	CodeCacheConfig	CodeCacheConfig(const class TR::CodeCacheConfig &)
TR	CodeCacheConfig	CodeCacheConfig(class TR::CodeCacheConfig &&)
TR	CodeCacheConfig	operator=(class TR::CodeCacheConfig &&)
TR	CodeCacheConfig	operator=(const class TR::CodeCacheConfig &)
TR	CodeCacheConfig	~CodeCacheConfig()
TR	CodeCacheManager	CodeCacheManager(TR::RawAllocator)
TR	CodeCacheManager	CodeCacheManager(class TR::CodeCacheManager &&)
TR	CodeCacheManager	CodeCacheManager(const class TR::CodeCacheManager &)
TR	CodeCacheManager	~CodeCacheManager()
TR	CodeCacheManager	CodeCacheManager(class TR_FrontEnd *,TR::RawAllocator)
TR	ELFRelocationResolver	ELFRelocationResolver()
TR	ELFRelocationResolver	ELFRelocationResolver(class TR::ELFRelocationResolver &&)
TR	ELFRelocationResolver	ELFRelocationResolver(const class TR::ELFRelocationResolver &)
TR	ELFRelocationResolver	~ELFRelocationResolver()
TestCompiler	CodeCacheManager	CodeCacheManager(TR::RawAllocator)
TestCompiler	CodeCacheManager	CodeCacheManager(class TestCompiler::CodeCacheManager &&)
TestCompiler	CodeCacheManager	CodeCacheManager(const class TestCompiler::CodeCacheManager &)
TestCompiler	CodeCacheManager	allocateCodeCacheSegment(size_t,size_t &,void *)
TestCompiler	CodeCacheManager	instance()
TestCompiler	CodeCacheManager	operator new(size_t,TR::CodeCacheManager *)
TestCompiler	CodeCacheManager	self()
TestCompiler	CodeCacheManager	~CodeCacheManager()
OMR	CodeCache	CodeCache(class OMR::CodeCache &&)
OMR	CodeCache	CodeCache(const class OMR::CodeCache &)
OMR	CodeCache	CodeCache()
OMR	CodeCache	addFlags(uint32_t)
OMR	CodeCache	addFreeBlock(void *)
OMR	CodeCache	addFreeBlock2WithCallSite(uint8_t *,uint8_t *,char *,uint32_t)
OMR	CodeCache	addResolvedMethod(class TR_OpaqueMethodBlock *)
OMR	CodeCache	allocate(TR::CodeCacheManager *,size_t,int32_t)
OMR	CodeCache	allocateCodeMemory(size_t,size_t,uint8_t **,_Bool,_Bool)
OMR	CodeCache	allocateHashEntry()
OMR	CodeCache	allocateTempTrampoline()
OMR	CodeCache	allocateTempTrampolineSyncBlock()
OMR	CodeCache	allocateTrampoline()
OMR	CodeCache	almostFull()
OMR	CodeCache	checkForErrors()
OMR	CodeCache	createTrampoline(OMR::CodeCacheTrampolineCode *,void *,class TR_OpaqueMethodBlock *)
OMR	CodeCache	destroy(TR::CodeCacheManager *)
OMR	CodeCache	dumpCodeCache()
OMR	CodeCache	findFreeBlock(size_t,_Bool,_Bool)
OMR	CodeCache	findOrAddResolvedMethod(class TR_OpaqueMethodBlock *)
OMR	CodeCache	findResolvedMethod(class TR_OpaqueMethodBlock *)
OMR	CodeCache	findTrampoline(class TR_OpaqueMethodBlock *)
OMR	CodeCache	findTrampoline(int32_t)
OMR	CodeCache	flags()
OMR	CodeCache	freeBlockList()
OMR	CodeCache	freeHashEntry(struct OMR::CodeCacheHashEntry *)
OMR	CodeCache	getCCPreLoadedCodeAddress(enum TR_CCPreLoadedCode,TR::CodeGenerator *)
OMR	CodeCache	getCodeAlloc()
OMR	CodeCache	getCodeBase()
OMR	CodeCache	getCodeTop()
OMR	CodeCache	getFreeContiguousSpace()
OMR	CodeCache	getHelperBase()
OMR	CodeCache	getHelperTop()
OMR	CodeCache	getNextCodeCache()
OMR	CodeCache	getReservingCompThreadID()
OMR	CodeCache	getSizeOfLargestFreeColdBlock()
OMR	CodeCache	getSizeOfLargestFreeWarmBlock()
OMR	CodeCache	hashEntryFreeList()
OMR	CodeCache	hashEntrySlab()
OMR	CodeCache	initialize(TR::CodeCacheManager *,TR::CodeCacheMemorySegment *,size_t,class OMR::CodeCacheHashEntrySlab *)
OMR	CodeCache	isCCPreLoadedCodeInitialized()
OMR	CodeCache	isReserved()
OMR	CodeCache	linkTo(TR::CodeCache *)
OMR	CodeCache	manager()
OMR	CodeCache	next()
OMR	CodeCache	operator new(size_t,TR::CodeCache *)
OMR	CodeCache	patchCallPoint(class TR_OpaqueMethodBlock *,void *,void *,void *)
OMR	CodeCache	printFreeBlocks()
OMR	CodeCache	printOccupancyStats()
OMR	CodeCache	removeFreeBlock(size_t,struct OMR::CodeCacheFreeCacheBlock *,struct OMR::CodeCacheFreeCacheBlock *)
OMR	CodeCache	replaceTrampoline(class TR_OpaqueMethodBlock *,void *,void *,void *,_Bool)
OMR	CodeCache	reserve(int32_t)
OMR	CodeCache	reserveNTrampolines(int64_t)
OMR	CodeCache	reserveResolvedTrampoline(class TR_OpaqueMethodBlock *,_Bool)
OMR	CodeCache	reserveTrampoline()
OMR	CodeCache	resizeCodeMemory(void *,size_t)
OMR	CodeCache	saveTempTrampoline(struct OMR::CodeCacheHashEntry *)
OMR	CodeCache	segment()
OMR	CodeCache	self()
OMR	CodeCache	setAlmostFull(enum TR_YesNoMaybe)
OMR	CodeCache	setCCPreLoadedCodeAddress(enum TR_CCPreLoadedCode,void *)
OMR	CodeCache	setFreeBlockList(struct OMR::CodeCacheFreeCacheBlock *)
OMR	CodeCache	setHashEntryFreeList(struct OMR::CodeCacheHashEntry *)
OMR	CodeCache	setHashEntrySlab(class OMR::CodeCacheHashEntrySlab *)
OMR	CodeCache	setManager(TR::CodeCacheManager *)
OMR	CodeCache	setReservingCompThreadID(int32_t)
OMR	CodeCache	setTrampolineSyncList(struct OMR::CodeCacheTempTrampolineSyncBlock *)
OMR	CodeCache	syncTempTrampolines()
OMR	CodeCache	tempTrampolinesMax()
OMR	CodeCache	trampolineSyncList()
OMR	CodeCache	unreserve()
OMR	CodeCache	unreserveTrampoline()
OMR	CodeCache	updateMaxSizeOfFreeBlocks(struct OMR::CodeCacheFreeCacheBlock *,size_t)
OMR	CodeCache	writeMethodHeader(void *,size_t,_Bool)
OMR	CodeCache	~CodeCache()
OMR	CodeCache	createTrampoline(CodeCacheTrampolineCode *,void *,class TR_OpaqueMethodBlock *)
TR	CodeCache	CodeCache()
TR	CodeCache	CodeCache(class TR::CodeCache &&)
TR	CodeCache	CodeCache(const class TR::CodeCache &)
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment(const class OMR::CodeCacheMemorySegment &)
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment(class OMR::CodeCacheMemorySegment &&)
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,size_t)
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,uint8_t *)
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment()
OMR	CodeCacheMemorySegment	adjustAlloc(int64_t)
OMR	CodeCacheMemorySegment	free(TR::CodeCacheManager *)
OMR	CodeCacheMemorySegment	operator new(size_t,TR::CodeCacheMemorySegment *)
OMR	CodeCacheMemorySegment	segmentAlloc()
OMR	CodeCacheMemorySegment	segmentBase()
OMR	CodeCacheMemorySegment	segmentTop()
OMR	CodeCacheMemorySegment	self()
OMR	CodeCacheMemorySegment	setSegmentAlloc(uint8_t *)
OMR	CodeCacheMemorySegment	setSegmentBase(uint8_t *)
OMR	CodeCacheMemorySegment	setSegmentTop(uint8_t *)
OMR	CodeCacheMemorySegment	~CodeCacheMemorySegment()
TR	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,size_t)
TR	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,uint8_t *)
TR	CodeCacheMemorySegment	CodeCacheMemorySegment()
TR	CodeCacheMemorySegment	CodeCacheMemorySegment(class TR::CodeCacheMemorySegment &&)
TR	CodeCacheMemorySegment	CodeCacheMemorySegment(const class TR::CodeCacheMemorySegment &)
TR	CodeCacheMemorySegment	CodeCacheMemorySegment(J9MemorySegment *)
OMR::X86::I386	CodeGenerator	CodeGenerator()
OMR::X86::I386	CodeGenerator	CodeGenerator(const class OMR::X86::I386::CodeGenerator &)
OMR::X86::I386	CodeGenerator	CodeGenerator(class OMR::X86::I386::CodeGenerator &&)
OMR::X86::I386	CodeGenerator	codegenMulDecomposition(int64_t)
OMR::X86::I386	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *)
OMR::X86::I386	CodeGenerator	getRegisterMapInfoBitsMask()
OMR::X86::I386	CodeGenerator	getVMThreadGlobalRegisterNumber()
OMR::X86::I386	CodeGenerator	internalPointerSupportImplemented()
OMR::X86::I386	CodeGenerator	longClobberEvaluate(TR::Node *)
OMR::X86::I386	CodeGenerator	operator=(class OMR::X86::I386::CodeGenerator &&)
OMR::X86::I386	CodeGenerator	operator=(const class OMR::X86::I386::CodeGenerator &)
OMR::X86::I386	CodeGenerator	pickRegister(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &,TR_GlobalRegisterNumber &,TR_LinkHead<class TR_RegisterCandidate> *)
OMR::X86::I386	CodeGenerator	~CodeGenerator()
OMR::X86::I386	Machine	Machine(class OMR::X86::I386::Machine &&)
OMR::X86::I386	Machine	Machine(const class OMR::X86::I386::Machine &)
OMR::X86::I386	Machine	Machine(TR::CodeGenerator *)
OMR::X86::I386	Machine	operator=(const class OMR::X86::I386::Machine &)
OMR::X86::I386	Machine	operator=(class OMR::X86::I386::Machine &&)
OMR::X86::I386	Machine	~Machine()
OMR::X86::I386	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::X86::I386	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::X86::I386	RealRegister	RealRegister(const class OMR::X86::I386::RealRegister &)
OMR::X86::I386	RealRegister	RealRegister(class OMR::X86::I386::RealRegister &&)
OMR::X86::I386	RealRegister	fprMask(OMR::RealRegister::RegNum)
OMR::X86::I386	RealRegister	gprMask(OMR::RealRegister::RegNum)
OMR::X86::I386	RealRegister	mmIndex(uint8_t)
OMR::X86::I386	RealRegister	mmrMask(OMR::RealRegister::RegNum)
OMR::X86::I386	RealRegister	needsDisp()
OMR::X86::I386	RealRegister	needsSIB()
OMR::X86::I386	RealRegister	operator=(const class OMR::X86::I386::RealRegister &)
OMR::X86::I386	RealRegister	operator=(class OMR::X86::I386::RealRegister &&)
OMR::X86::I386	RealRegister	rexBits(uint8_t,_Bool)
OMR::X86::I386	RealRegister	setBaseRegisterFieldInSIB(uint8_t *)
OMR::X86::I386	RealRegister	setIndexRegisterFieldInSIB(uint8_t *)
OMR::X86::I386	RealRegister	setRMRegisterFieldInModRM(uint8_t *)
OMR::X86::I386	RealRegister	setRegisterFieldInModRM(uint8_t *)
OMR::X86::I386	RealRegister	setRegisterFieldInOpcode(uint8_t *)
OMR::X86::I386	RealRegister	setRegisterNumber()
OMR::X86::I386	RealRegister	xmmIndex(uint8_t)
OMR::X86::I386	RealRegister	xmmrMask(OMR::RealRegister::RegNum)
OMR::X86::I386	RealRegister	~RealRegister()
OMR::X86::I386	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::X86::I386	RealRegister	fprMask(RegNum)
OMR::X86::I386	RealRegister	gprMask(RegNum)
OMR::X86::I386	RealRegister	mmrMask(RegNum)
OMR::X86::I386	RealRegister	xmmrMask(RegNum)
OMR::X86::I386	TreeEvaluator	acmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	aconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	b2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	bu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	c2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	compareLongAndSetOrderedBoolean(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	compareLongsForOrder(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	dbits2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	dstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	i2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	ifacmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	iflcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	iflcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	iflcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	iflcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	iflcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	iflcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairAbsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairAddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairByteswapEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairDivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairDualMulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairMinMaxEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairMulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairNegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairRemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairReturnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairRolEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairShlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairShrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairSubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	integerPairUshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	iu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	l2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	l2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	l2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	landEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lbits2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lcmpsetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	longArithmeticCompareRegisterWithImmediate(TR::Node *,TR::Register *,TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lternaryEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lucmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	lxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	performLload(TR::Node *,TR::MemoryReference *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	s2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	su2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86::I386	TreeEvaluator	TreeEvaluator()
OMR::X86::I386	TreeEvaluator	TreeEvaluator(class OMR::X86::I386::TreeEvaluator &&)
OMR::X86::I386	TreeEvaluator	TreeEvaluator(const class OMR::X86::I386::TreeEvaluator &)
OMR::X86::I386	TreeEvaluator	~TreeEvaluator()
OMR::Power	CodeGenerator	CodeGenerator()
OMR::Power	CodeGenerator	CodeGenerator(class OMR::Power::CodeGenerator &&)
OMR::Power	CodeGenerator	CodeGenerator(const class OMR::Power::CodeGenerator &)
OMR::Power	CodeGenerator	addMetaDataFor32BitFixedLoadLabelAddressIntoReg(TR::Node *,TR::LabelSymbol *,TR::Instruction *,TR::Instruction *)
OMR::Power	CodeGenerator	addMetaDataFor64BitFixedLoadLabelAddressIntoReg(TR::Node *,TR::LabelSymbol *,TR::Register *,TR::Instruction **)
OMR::Power	CodeGenerator	addMetaDataForLoadAddressConstantFixed(TR::Node *,TR::Instruction *,TR::Register *,int16_t,intptrj_t)
OMR::Power	CodeGenerator	addMetaDataForLoadIntConstantFixed(TR::Node *,TR::Instruction *,TR::Instruction *,int16_t,int32_t)
OMR::Power	CodeGenerator	addRealRegisterInterference(TR::Register *,TR::class RealRegister::RegNum)
OMR::Power	CodeGenerator	allocateStackSlot()
OMR::Power	CodeGenerator	allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *)
OMR::Power	CodeGenerator	apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR::Power	CodeGenerator	apply16BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t)
OMR::Power	CodeGenerator	apply24BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR::Power	CodeGenerator	apply64BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *)
OMR::Power	CodeGenerator	arrayInitMinimumNumberOfBytes()
OMR::Power	CodeGenerator	arrayTranslateAndTestMinimumNumberOfIterations()
OMR::Power	CodeGenerator	arrayTranslateMinimumNumberOfElements(_Bool,_Bool)
OMR::Power	CodeGenerator	beginInstructionSelection()
OMR::Power	CodeGenerator	branchesAreExpensive()
OMR::Power	CodeGenerator	buildRegisterMapForInstruction(class TR_GCStackMap *)
OMR::Power	CodeGenerator	calculateRegisterPressure()
OMR::Power	CodeGenerator	canExceptByTrap()
OMR::Power	CodeGenerator	canTransformUnsafeCopyToArrayCopy()
OMR::Power	CodeGenerator	canTransformUnsafeSetMemory()
OMR::Power	CodeGenerator	checkAndFetchRequestor(TR::Instruction *,TR::Instruction **)
OMR::Power	CodeGenerator	computeCallInfoBitVector()
OMR::Power	CodeGenerator	computeRegisterSaveDescription(class TR_BitVector *,_Bool)
OMR::Power	CodeGenerator	createLinkage(enum TR_LinkageConventions)
OMR::Power	CodeGenerator	deleteInst(TR::Instruction *)
OMR::Power	CodeGenerator	doBinaryEncoding()
OMR::Power	CodeGenerator	doPeephole()
OMR::Power	CodeGenerator	doRegisterAssignment(enum TR_RegisterKinds)
OMR::Power	CodeGenerator	doRematerialization()
OMR::Power	CodeGenerator	dumpDataSnippets(TR::FILE *)
OMR::Power	CodeGenerator	emitDataSnippets()
OMR::Power	CodeGenerator	enableTLHPrefetching()
OMR::Power	CodeGenerator	endInstructionSelection()
OMR::Power	CodeGenerator	findOrCreateAddressConstant(void *,TR::DataType,TR::Instruction *,TR::Instruction *,TR::Instruction *,TR::Instruction *,TR::Node *,_Bool)
OMR::Power	CodeGenerator	findOrCreateFloatConstant(void *,TR::DataType,TR::Instruction *,TR::Instruction *,TR::Instruction *,TR::Instruction *)
OMR::Power	CodeGenerator	findOutLinedInstructionsFromLabel(TR::LabelSymbol *)
OMR::Power	CodeGenerator	findSnippetInstructionsFromLabel(TR::LabelSymbol *)
OMR::Power	CodeGenerator	fixedLoadLabelAddressIntoReg(TR::Node *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::Register *,_Bool)
OMR::Power	CodeGenerator	freeAndResetTransientLongs()
OMR::Power	CodeGenerator	generateBinaryEncodingPrologue(struct TR_PPCBinaryEncodingData *)
OMR::Power	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *)
OMR::Power	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *)
OMR::Power	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &)
OMR::Power	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &)
OMR::Power	CodeGenerator	generateGroupEndingNop(TR::Node *,TR::Instruction *)
OMR::Power	CodeGenerator	generateNop(TR::Node *,TR::Instruction *,enum TR_NOPKind)
OMR::Power	CodeGenerator	generateProbeNop(TR::Node *,TR::Instruction *)
OMR::Power	CodeGenerator	generateScratchRegisterManager(int32_t)
OMR::Power	CodeGenerator	generateSwitchToInterpreterPrePrologue(TR::Instruction *,TR::Node *)
OMR::Power	CodeGenerator	getArrayCmpLenScalarSymbolReference()
OMR::Power	CodeGenerator	getArrayCmpLenVMXSymbolReference()
OMR::Power	CodeGenerator	getArrayCmpScalarSymbolReference()
OMR::Power	CodeGenerator	getArrayCmpVMXSymbolReference()
OMR::Power	CodeGenerator	getArrayCopySymbolReference()
OMR::Power	CodeGenerator	getArrayTranslateTRTOSimpleVMXSymbolReference()
OMR::Power	CodeGenerator	getBlockCallInfo()
OMR::Power	CodeGenerator	getCollapseJNIReferenceFrameSymbolReference()
OMR::Power	CodeGenerator	getCountingPatchCallSiteSymbolReference()
OMR::Power	CodeGenerator	getCountingRecompileMethodSymbolReference()
OMR::Power	CodeGenerator	getCurrentBlockIndex()
OMR::Power	CodeGenerator	getDouble2LongSymbolReference()
OMR::Power	CodeGenerator	getDoubleRemainderSymbolReference()
OMR::Power	CodeGenerator	getFPR0DStaticGlueSymbolReference()
OMR::Power	CodeGenerator	getFPR0FStaticGlueSymbolReference()
OMR::Power	CodeGenerator	getForwardArrayCopySymbolReference()
OMR::Power	CodeGenerator	getForwardHalfWordArrayCopySymbolReference()
OMR::Power	CodeGenerator	getForwardWordArrayCopySymbolReference()
OMR::Power	CodeGenerator	getGPR3GPR4StaticGlueSymbolReference()
OMR::Power	CodeGenerator	getGPR3StaticGlueSymbolReference()
OMR::Power	CodeGenerator	getGeneralArrayCopySymbolReference()
OMR::Power	CodeGenerator	getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions)
OMR::Power	CodeGenerator	getHalfWordArrayCopySymbolReference()
OMR::Power	CodeGenerator	getInduceRecompilationSymbolReference()
OMR::Power	CodeGenerator	getInteger2DoubleSymbolReference()
OMR::Power	CodeGenerator	getInterfaceCallHelperSymbolReference()
OMR::Power	CodeGenerator	getInternalPtrMapBit()
OMR::Power	CodeGenerator	getItrgSendVirtual0SymbolReference()
OMR::Power	CodeGenerator	getItrgSendVirtual1SymbolReference()
OMR::Power	CodeGenerator	getItrgSendVirtualDSymbolReference()
OMR::Power	CodeGenerator	getItrgSendVirtualFSymbolReference()
OMR::Power	CodeGenerator	getItrgSendVirtualJSymbolReference()
OMR::Power	CodeGenerator	getLargestNegConstThatMustBeMaterialized()
OMR::Power	CodeGenerator	getLinkageGlobalRegisterNumber(int8_t,TR::DataType)
OMR::Power	CodeGenerator	getLong2DoubleSymbolReference()
OMR::Power	CodeGenerator	getLong2FloatSymbolReference()
OMR::Power	CodeGenerator	getLong2Float_mvSymbolReference()
OMR::Power	CodeGenerator	getLongDivideSymbolReference()
OMR::Power	CodeGenerator	getLongMultiplySymbolReference()
OMR::Power	CodeGenerator	getMaximumNumberOfFPRsAllowedAcrossEdge(TR::Node *)
OMR::Power	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *)
OMR::Power	CodeGenerator	getMaximumNumbersOfAssignableFPRs()
OMR::Power	CodeGenerator	getMaximumNumbersOfAssignableGPRs()
OMR::Power	CodeGenerator	getMaximumNumbersOfAssignableVRs()
OMR::Power	CodeGenerator	getMethodMetaDataRegister()
OMR::Power	CodeGenerator	getNativeStaticHelperForUnresolvedGlueSymbolReference()
OMR::Power	CodeGenerator	getNativeStaticHelperSymbolReference()
OMR::Power	CodeGenerator	getNextAvailableBlockIndex()
OMR::Power	CodeGenerator	getPPCOutOfLineCodeSectionList()
OMR::Power	CodeGenerator	getPreferredLoopUnrollFactor()
OMR::Power	CodeGenerator	getProperties()
OMR::Power	CodeGenerator	getReferenceArrayCopySymbolReference()
OMR::Power	CodeGenerator	getRevertToInterpreterGlueSymbolReference()
OMR::Power	CodeGenerator	getSamplingPatchCallSiteSymbolReference()
OMR::Power	CodeGenerator	getSamplingRecompileMethodSymbolReference()
OMR::Power	CodeGenerator	getSmallestPosConstThatMustBeMaterialized()
OMR::Power	CodeGenerator	getStackPointerRegister()
OMR::Power	CodeGenerator	getSupportsBitOpCodes()
OMR::Power	CodeGenerator	getSupportsConstantOffsetInAddressing(int64_t)
OMR::Power	CodeGenerator	getSupportsEncodeUtf16BigWithSurrogateTest()
OMR::Power	CodeGenerator	getSupportsEncodeUtf16LittleWithSurrogateTest()
OMR::Power	CodeGenerator	getSupportsIbyteswap()
OMR::Power	CodeGenerator	getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType)
OMR::Power	CodeGenerator	getSupportsTLE()
OMR::Power	CodeGenerator	getSupportsTenuredObjectAlignment()
OMR::Power	CodeGenerator	getSyncFPR0DStaticGlueSymbolReference()
OMR::Power	CodeGenerator	getSyncFPR0FStaticGlueSymbolReference()
OMR::Power	CodeGenerator	getSyncGPR3GPR4StaticGlueSymbolReference()
OMR::Power	CodeGenerator	getSyncGPR3StaticGlueSymbolReference()
OMR::Power	CodeGenerator	getSyncVoidStaticGlueSymbolReference()
OMR::Power	CodeGenerator	getTOCBase()
OMR::Power	CodeGenerator	getTOCBaseRegister()
OMR::Power	CodeGenerator	getTrackItems()
OMR::Power	CodeGenerator	getTrackStatics()
OMR::Power	CodeGenerator	getTransientLongRegisters()
OMR::Power	CodeGenerator	getUnresolvedClassGlue2SymbolReference()
OMR::Power	CodeGenerator	getUnresolvedClassGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedDirectVirtualGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedInstanceDataGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedInstanceDataStoreGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedSpecialGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedStaticDataGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedStaticDataStoreGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedStaticGlueSymbolReference()
OMR::Power	CodeGenerator	getUnresolvedStringGlueSymbolReference()
OMR::Power	CodeGenerator	getVirtualUnresolvedHelperSymbolReference()
OMR::Power	CodeGenerator	getVoidStaticGlueSymbolReference()
OMR::Power	CodeGenerator	getWordArrayCopySymbolReference()
OMR::Power	CodeGenerator	gprClobberEvaluate(TR::Node *)
OMR::Power	CodeGenerator	hasCall()
OMR::Power	CodeGenerator	hasDataSnippets()
OMR::Power	CodeGenerator	ilOpCodeIsSupported(TR::ILOpCodes)
OMR::Power	CodeGenerator	incNextAvailableBlockIndex()
OMR::Power	CodeGenerator	initialize()
OMR::Power	CodeGenerator	internalPointerSupportImplemented()
OMR::Power	CodeGenerator	is64BitProcessor()
OMR::Power	CodeGenerator	isAlignmentInstruction(TR::Instruction *)
OMR::Power	CodeGenerator	isBranchInstruction(TR::Instruction *)
OMR::Power	CodeGenerator	isDualTLH()
OMR::Power	CodeGenerator	isFenceInstruction(TR::Instruction *)
OMR::Power	CodeGenerator	isGlobalRegisterAvailable(TR_GlobalRegisterNumber,TR::DataType)
OMR::Power	CodeGenerator	isLabelInstruction(TR::Instruction *)
OMR::Power	CodeGenerator	isObjectOfSizeWorthAligning(uint32_t)
OMR::Power	CodeGenerator	isOutOfLineHotPath()
OMR::Power	CodeGenerator	isPreservedRegister(int32_t)
OMR::Power	CodeGenerator	isReturnInstruction(TR::Instruction *)
OMR::Power	CodeGenerator	isRotateAndMask(TR::Node *)
OMR::Power	CodeGenerator	isSnippetMatched(TR::Snippet *,int32_t,TR::SymbolReference *)
OMR::Power	CodeGenerator	isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **)
OMR::Power	CodeGenerator	itemTracking(int32_t,TR::LabelSymbol *)
OMR::Power	CodeGenerator	loadAddressConstantFixed(TR::Node *,intptrj_t,TR::Register *,TR::Instruction *,TR::Register *,int16_t,_Bool)
OMR::Power	CodeGenerator	loadIntConstantFixed(TR::Node *,int32_t,TR::Register *,TR::Instruction *,int16_t)
OMR::Power	CodeGenerator	materializesLargeConstants()
OMR::Power	CodeGenerator	mulDecompositionCostIsJustified(int,char [],char [],int64_t)
OMR::Power	CodeGenerator	needsNormalizationBeforeShifts()
OMR::Power	CodeGenerator	noStackFrame()
OMR::Power	CodeGenerator	operator=(const class OMR::Power::CodeGenerator &)
OMR::Power	CodeGenerator	operator=(class OMR::Power::CodeGenerator &&)
OMR::Power	CodeGenerator	pickRegister(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &,TR_GlobalRegisterNumber &,TR_LinkHead<class TR_RegisterCandidate> *)
OMR::Power	CodeGenerator	ppcCGOnClassUnloading(void *)
OMR::Power	CodeGenerator	processIncomingParameterUsage(class TR_BitVector **,int32_t)
OMR::Power	CodeGenerator	processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool)
OMR::Power	CodeGenerator	regMaskToRealRegister(TR_RegisterMask,enum TR_RegisterKinds)
OMR::Power	CodeGenerator	registerBitMask(int32_t)
OMR::Power	CodeGenerator	setBlockCallInfo(class TR_BitVector *)
OMR::Power	CodeGenerator	setCanExceptByTrap()
OMR::Power	CodeGenerator	setCurrentBlockIndex(int32_t)
OMR::Power	CodeGenerator	setEnableTLHPrefetching()
OMR::Power	CodeGenerator	setEstimatedLocationsForDataSnippetLabels(int32_t)
OMR::Power	CodeGenerator	setHasCall()
OMR::Power	CodeGenerator	setIsDualTLH()
OMR::Power	CodeGenerator	setIsOutOfLineHotPath(_Bool)
OMR::Power	CodeGenerator	setMethodMetaDataRegister(TR::RealRegister *)
OMR::Power	CodeGenerator	setNextAvailableBlockIndex(int32_t)
OMR::Power	CodeGenerator	setNoStackFrame()
OMR::Power	CodeGenerator	setRealRegisterAssociation(TR::Register *,TR::class RealRegister::RegNum)
OMR::Power	CodeGenerator	setStackPointerRegister(TR::RealRegister *)
OMR::Power	CodeGenerator	setTOCBaseRegister(TR::RealRegister *)
OMR::Power	CodeGenerator	setTrackItems(TR_Array<class TR_PPCLoadLabelItem *> *)
OMR::Power	CodeGenerator	setTrackStatics(TR_Array<TR::SymbolReference *> *)
OMR::Power	CodeGenerator	shouldValueBeInACommonedNode(int64_t)
OMR::Power	CodeGenerator	simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR::Power	CodeGenerator	splitBlockEntry(TR::Instruction *)
OMR::Power	CodeGenerator	splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool)
OMR::Power	CodeGenerator	staticTracking(TR::SymbolReference *)
OMR::Power	CodeGenerator	supportsAESInstructions()
OMR::Power	CodeGenerator	supportsDebugCounters(TR::DebugCounterInjectionPoint)
OMR::Power	CodeGenerator	supportsFusedMultiplyAdd()
OMR::Power	CodeGenerator	supportsNegativeFusedMultiplyAdd()
OMR::Power	CodeGenerator	supportsPassThroughCopyToNewVirtualRegister()
OMR::Power	CodeGenerator	supportsSinglePrecisionSQRT()
OMR::Power	CodeGenerator	supportsTransientPrefetch()
OMR::Power	CodeGenerator	updateSnippetMapWithRSD(TR::Instruction *,int32_t)
OMR::Power	CodeGenerator	~CodeGenerator()
OMR::Power	CodeGenerator	getAssignmentDirection()
OMR::Power	CodeGenerator	setAssignmentDirection(RegisterAssignmentDirection)
OMR::Power	DebugEnv	DebugEnv()
OMR::Power	DebugEnv	DebugEnv(const class OMR::Power::DebugEnv &)
OMR::Power	DebugEnv	DebugEnv(class OMR::Power::DebugEnv &&)
OMR::Power	DebugEnv	operator=(class OMR::Power::DebugEnv &&)
OMR::Power	DebugEnv	operator=(const class OMR::Power::DebugEnv &)
OMR::Power	DebugEnv	~DebugEnv()
OMR::Power	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Power	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Power	Instruction	Instruction(class OMR::Power::Instruction &&)
OMR::Power	Instruction	Instruction(const class OMR::Power::Instruction &)
OMR::Power	Instruction	MAX_LOOP_ALIGN_NOPS()
OMR::Power	Instruction	PPCNeedsGCMap(uint32_t)
OMR::Power	Instruction	assignRegisters(enum TR_RegisterKinds)
OMR::Power	Instruction	defsRealRegister(TR::Register *)
OMR::Power	Instruction	defsRegister(TR::Register *)
OMR::Power	Instruction	dependencyRefsRegister(TR::Register *)
OMR::Power	Instruction	description()
OMR::Power	Instruction	doubleFPOp()
OMR::Power	Instruction	estimateBinaryLength(int32_t)
OMR::Power	Instruction	fprOp()
OMR::Power	Instruction	generateBinaryEncoding()
OMR::Power	Instruction	getBinaryLengthLowerBound()
OMR::Power	Instruction	getBlockIndex()
OMR::Power	Instruction	getDependencyConditions()
OMR::Power	Instruction	getKind()
OMR::Power	Instruction	getMachineOpCode()
OMR::Power	Instruction	getMemoryBase()
OMR::Power	Instruction	getMemoryDataRegister()
OMR::Power	Instruction	getMemoryIndex()
OMR::Power	Instruction	getMemoryReference()
OMR::Power	Instruction	getOffset()
OMR::Power	Instruction	getOpCode()
OMR::Power	Instruction	getOpCodeValue()
OMR::Power	Instruction	getPPCConditionalBranchInstruction()
OMR::Power	Instruction	getPPCDepImmInstruction()
OMR::Power	Instruction	getPPCImmInstruction()
OMR::Power	Instruction	getPrimaryTargetRegister()
OMR::Power	Instruction	getRecordFormOpCode()
OMR::Power	Instruction	getSourceImmediate()
OMR::Power	Instruction	getSourceRegister(uint32_t)
OMR::Power	Instruction	getTargetRegister(uint32_t)
OMR::Power	Instruction	getTrg1Register()
OMR::Power	Instruction	gprOp()
OMR::Power	Instruction	hasRecordForm()
OMR::Power	Instruction	is4ByteLoad()
OMR::Power	Instruction	isAdmin()
OMR::Power	Instruction	isAsyncBranch()
OMR::Power	Instruction	isBeginBlock()
OMR::Power	Instruction	isBranchOp()
OMR::Power	Instruction	isCRLogical()
OMR::Power	Instruction	isCall()
OMR::Power	Instruction	isCompare()
OMR::Power	Instruction	isDebugFence()
OMR::Power	Instruction	isDoubleWord()
OMR::Power	Instruction	isExceptBranchOp()
OMR::Power	Instruction	isFXMult()
OMR::Power	Instruction	isFloat()
OMR::Power	Instruction	isLabel()
OMR::Power	Instruction	isLoad()
OMR::Power	Instruction	isLongRunningFPOp()
OMR::Power	Instruction	isNopCandidate()
OMR::Power	Instruction	isRecordForm()
OMR::Power	Instruction	isRegCopy()
OMR::Power	Instruction	isRotateOrShift()
OMR::Power	Instruction	isStore()
OMR::Power	Instruction	isSyncSideEffectFree()
OMR::Power	Instruction	isTMAbort()
OMR::Power	Instruction	isTrap()
OMR::Power	Instruction	isUpdate()
OMR::Power	Instruction	isVMX()
OMR::Power	Instruction	isVSX()
OMR::Power	Instruction	operator=(class OMR::Power::Instruction &&)
OMR::Power	Instruction	operator=(const class OMR::Power::Instruction &)
OMR::Power	Instruction	readsCarryFlag()
OMR::Power	Instruction	refsRegister(TR::Register *)
OMR::Power	Instruction	registersGoDead(struct TR_RegisterPressureState *)
OMR::Power	Instruction	registersGoLive(struct TR_RegisterPressureState *)
OMR::Power	Instruction	remove()
OMR::Power	Instruction	setAsyncBranch()
OMR::Power	Instruction	setBlockIndex(int32_t)
OMR::Power	Instruction	setDependencyConditions(TR::RegisterDependencyConditions *)
OMR::Power	Instruction	setExceptBranchOp()
OMR::Power	Instruction	setOpCodeValue(TR::class InstOpCode::Mnemonic)
OMR::Power	Instruction	setWillBePatched(_Bool)
OMR::Power	Instruction	setsCarryFlag()
OMR::Power	Instruction	setsCountRegister()
OMR::Power	Instruction	setsOverflowFlag()
OMR::Power	Instruction	singleFPOp()
OMR::Power	Instruction	updateImmediateField(uint32_t)
OMR::Power	Instruction	useAlternateFormat()
OMR::Power	Instruction	useAlternateFormatx()
OMR::Power	Instruction	usesCountRegister()
OMR::Power	Instruction	usesRegister(TR::Register *)
OMR::Power	Instruction	willBePatched()
OMR::Power	Instruction	~Instruction()
OMR::Power	Machine	Machine(const class OMR::Power::Machine &)
OMR::Power	Machine	Machine(class OMR::Power::Machine &&)
OMR::Power	Machine	Machine(TR::CodeGenerator *)
OMR::Power	Machine	assignOneRegister(TR::Instruction *,TR::Register *,_Bool)
OMR::Power	Machine	cloneRegisterFile(TR::RealRegister **,enum TR_AllocationKind)
OMR::Power	Machine	cloneRegisterFileByType(TR::RealRegister **,TR::RealRegister **,int32_t,int32_t,enum TR_RegisterKinds,enum TR_AllocationKind)
OMR::Power	Machine	coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum)
OMR::Power	Machine	createCondForLiveAndSpilledGPRs(_Bool,TR::list<TR::Register *> *)
OMR::Power	Machine	decFutureUseCountAndUnlatch(TR::Register *)
OMR::Power	Machine	disassociateUnspilledBackingStorage()
OMR::Power	Machine	findBestFreeRegister(TR::Instruction *,enum TR_RegisterKinds,_Bool,_Bool,TR::Register *)
OMR::Power	Machine	freeBestRegister(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool)
OMR::Power	Machine	getGlobalCCRPartitionLimit()
OMR::Power	Machine	getGlobalFPRPartitionLimit()
OMR::Power	Machine	getGlobalGPRPartitionLimit()
OMR::Power	Machine	getLinkRegisterKilled()
OMR::Power	Machine	getNumberOfLockedRegisters(enum TR_RegisterKinds)
OMR::Power	Machine	getPPCRealRegister(TR::class RealRegister::RegNum)
OMR::Power	Machine	getRegisterFile()
OMR::Power	Machine	getVirtualAssociatedWithReal(TR::class RealRegister::RegNum)
OMR::Power	Machine	initREGAssociations()
OMR::Power	Machine	initialiseRegisterFile()
OMR::Power	Machine	operator=(class OMR::Power::Machine &&)
OMR::Power	Machine	operator=(const class OMR::Power::Machine &)
OMR::Power	Machine	restoreRegisterStateFromSnapShot()
OMR::Power	Machine	reverseSpillState(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool)
OMR::Power	Machine	setLinkRegisterKilled(_Bool)
OMR::Power	Machine	setNumberOfLockedRegisters(enum TR_RegisterKinds,int)
OMR::Power	Machine	setRegisterFile(TR::RealRegister **)
OMR::Power	Machine	setVirtualAssociatedWithReal(TR::class RealRegister::RegNum,TR::Register *)
OMR::Power	Machine	takeRegisterStateSnapShot()
OMR::Power	Machine	~Machine()
OMR::Power	Machine	cg()
OMR::Power	MemoryReference	MemoryReference(class OMR::Power::MemoryReference &&)
OMR::Power	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,uint32_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(const class OMR::Power::MemoryReference &)
OMR::Power	MemoryReference	MemoryReference(TR::Register *,int32_t,uint8_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::Node *,uint32_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::Node *,TR::MemoryReference &,int32_t,uint32_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	accessStaticItem(TR::Node *,TR::SymbolReference *,_Bool,TR::CodeGenerator *)
OMR::Power	MemoryReference	addToOffset(TR::Node *,intptrj_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	adjustForResolution(TR::CodeGenerator *)
OMR::Power	MemoryReference	assignRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::Power	MemoryReference	blockRegisters()
OMR::Power	MemoryReference	bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *)
OMR::Power	MemoryReference	checkRegisters(TR::CodeGenerator *)
OMR::Power	MemoryReference	clearBaseModifiable()
OMR::Power	MemoryReference	clearIndexModifiable()
OMR::Power	MemoryReference	clearUingDelayedIndexedForm()
OMR::Power	MemoryReference	clearUingStaticTOC()
OMR::Power	MemoryReference	consolidateRegisters(TR::Register *,TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Power	MemoryReference	decNodeReferenceCounts(TR::CodeGenerator *)
OMR::Power	MemoryReference	estimateBinaryLength(TR::CodeGenerator &)
OMR::Power	MemoryReference	forceIndexedForm(TR::Node *,TR::CodeGenerator *,TR::Instruction *)
OMR::Power	MemoryReference	generateBinaryEncoding(TR::Instruction *,uint8_t *,TR::CodeGenerator *)
OMR::Power	MemoryReference	getBaseNode()
OMR::Power	MemoryReference	getBaseRegister()
OMR::Power	MemoryReference	getConditions()
OMR::Power	MemoryReference	getIndexNode()
OMR::Power	MemoryReference	getIndexRegister()
OMR::Power	MemoryReference	getLength()
OMR::Power	MemoryReference	getModBase()
OMR::Power	MemoryReference	getOffset()
OMR::Power	MemoryReference	getOffset(TR::Compilation &)
OMR::Power	MemoryReference	getStaticRelocation()
OMR::Power	MemoryReference	getSymbolReference()
OMR::Power	MemoryReference	getTOCOffset()
OMR::Power	MemoryReference	getUnresolvedSnippet()
OMR::Power	MemoryReference	hasDelayedOffset()
OMR::Power	MemoryReference	isBaseModifiable()
OMR::Power	MemoryReference	isIndexModifiable()
OMR::Power	MemoryReference	isTOCAccess()
OMR::Power	MemoryReference	isUsingDelayedIndexedForm()
OMR::Power	MemoryReference	isUsingStaticTOC()
OMR::Power	MemoryReference	jitPersistentAlloc(size_t)
OMR::Power	MemoryReference	jitPersistentFree(void *)
OMR::Power	MemoryReference	mapOpCode(TR::Instruction *)
OMR::Power	MemoryReference	offsetRequireWordAlignment()
OMR::Power	MemoryReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator delete(void *,size_t)
OMR::Power	MemoryReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR::Power	MemoryReference	operator delete(void *,TR::Region &)
OMR::Power	MemoryReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR::Power	MemoryReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator delete[](void *,TR::Region &)
OMR::Power	MemoryReference	operator new(size_t,TR_ArenaAllocator *)
OMR::Power	MemoryReference	operator new(size_t,class TR_PersistentMemory *)
OMR::Power	MemoryReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR::Power	MemoryReference	operator new(size_t,TR::Region &)
OMR::Power	MemoryReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::Power	MemoryReference	operator new[](size_t,TR::Region &)
OMR::Power	MemoryReference	operator new[](size_t,class TR_PersistentMemory *)
OMR::Power	MemoryReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR::Power	MemoryReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Power	MemoryReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::Power	MemoryReference	operator=(const class OMR::Power::MemoryReference &)
OMR::Power	MemoryReference	operator=(class OMR::Power::MemoryReference &&)
OMR::Power	MemoryReference	populateMemoryReference(TR::Node *,TR::CodeGenerator *)
OMR::Power	MemoryReference	refsRegister(TR::Register *)
OMR::Power	MemoryReference	setBaseModifiable()
OMR::Power	MemoryReference	setBaseNode(TR::Node *)
OMR::Power	MemoryReference	setBaseRegister(TR::Register *)
OMR::Power	MemoryReference	setIndexModifiable()
OMR::Power	MemoryReference	setIndexNode(TR::Node *)
OMR::Power	MemoryReference	setIndexRegister(TR::Register *)
OMR::Power	MemoryReference	setLength(uint32_t)
OMR::Power	MemoryReference	setModBase(TR::Register *)
OMR::Power	MemoryReference	setOffset(int32_t)
OMR::Power	MemoryReference	setOffsetRequiresWordAlignment(TR::Node *,TR::CodeGenerator *,TR::Instruction *)
OMR::Power	MemoryReference	setStaticRelocation(TR::PPCPairedRelocation *)
OMR::Power	MemoryReference	setSymbol(TR::Symbol *,TR::CodeGenerator *)
OMR::Power	MemoryReference	setUnresolvedSnippet(TR::UnresolvedDataSnippet *)
OMR::Power	MemoryReference	setUsingDelayedIndexedForm()
OMR::Power	MemoryReference	setUsingStaticTOC()
OMR::Power	MemoryReference	unblockRegisters()
OMR::Power	MemoryReference	useIndexedForm()
OMR::Power	MemoryReference	~MemoryReference()
OMR::Power	RealRegister	RealRegister(const class OMR::Power::RealRegister &)
OMR::Power	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::Power	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::Power	RealRegister	RealRegister(class OMR::Power::RealRegister &&)
OMR::Power	RealRegister	getAvailableRegistersMask(enum TR_RegisterKinds)
OMR::Power	RealRegister	getUseVSR()
OMR::Power	RealRegister	isConditionRegister()
OMR::Power	RealRegister	isNewVSR()
OMR::Power	RealRegister	operator=(const class OMR::Power::RealRegister &)
OMR::Power	RealRegister	operator=(class OMR::Power::RealRegister &&)
OMR::Power	RealRegister	regMaskToRealRegister(TR_RegisterMask,enum TR_RegisterKinds,TR::CodeGenerator *)
OMR::Power	RealRegister	setRegisterFieldBI(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldFRA(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldFRB(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldFRC(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldFRD(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldRA(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldRB(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldRC(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldRS(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldRT(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldXA(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldXB(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldXC(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldXS(uint32_t *)
OMR::Power	RealRegister	setRegisterFieldXT(uint32_t *)
OMR::Power	RealRegister	setUseVSR(_Bool)
OMR::Power	RealRegister	~RealRegister()
OMR::Power	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::Power	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR::Power	Register	Register(uint32_t)
OMR::Power	Register	Register(enum TR_RegisterKinds)
OMR::Power	Register	Register(const class OMR::Power::Register &)
OMR::Power	Register	Register(class OMR::Power::Register &&)
OMR::Power	Register	getInterference()
OMR::Power	Register	getLiveRegisterInfo()
OMR::Power	Register	isFlippedCCR()
OMR::Power	Register	operator=(class OMR::Power::Register &&)
OMR::Power	Register	operator=(const class OMR::Power::Register &)
OMR::Power	Register	resetFlippedCCR()
OMR::Power	Register	setFlippedCCR()
OMR::Power	Register	setInterference(uint64_t)
OMR::Power	Register	setLiveRegisterInfo(class TR_LiveRegisterInfo *)
OMR::Power	Register	~Register()
OMR::Power	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR::Power	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR::Power	Snippet	Snippet(class OMR::Power::Snippet &&)
OMR::Power	Snippet	Snippet(const class OMR::Power::Snippet &)
OMR::Power	Snippet	getKind()
OMR::Power	Snippet	operator=(class OMR::Power::Snippet &&)
OMR::Power	Snippet	operator=(const class OMR::Power::Snippet &)
OMR::Power	Snippet	~Snippet()
OMR::Power	TreeEvaluator	BBEndEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	BBStartEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	GlRegDepsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	NOPEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	NULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	PrefetchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	a2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	a2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	a2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	a2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	acmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	acmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	acmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	acmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	acmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	acmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	aconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	aloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	arraycmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	arraycopyEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	arraysetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	arraytranslateAndTestEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	astoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	asubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	b2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	b2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	b2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	baddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	borEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bu2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bu2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	buloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	bxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	c2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	caddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	candEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cmpsetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	commonByteLoadEvaluator(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	compareIntsForEquality(TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool)
OMR::Power	TreeEvaluator	compareIntsForEquality(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	compareIntsForOrder(TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool,_Bool)
OMR::Power	TreeEvaluator	compareIntsForOrder(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *,_Bool)
OMR::Power	TreeEvaluator	compareLongsForEquality(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	compareLongsForEquality(TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool)
OMR::Power	TreeEvaluator	compareLongsForOrder(TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *,_Bool)
OMR::Power	TreeEvaluator	compareLongsForOrder(TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool,_Bool)
OMR::Power	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	corEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	csubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	cxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	d2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	d2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	d2iuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	d2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dabsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	daddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dbits2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpgEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmplEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ddivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	deallocaEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dexpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dfloorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dintEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	directCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dloadHelper(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::class InstOpCode::Mnemonic)
OMR::Power	TreeEvaluator	dmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dnintEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dsqrtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dualMulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dualMulHelper32(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	dxfrsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	exceptionRangeFenceEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	f2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	f2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fabsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	faddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fbits2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpgEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmplEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	floadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	flushEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	freturnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fsqrtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	fsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	genBranchSequence(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	generateHelperBranchAndLinkInstruction(enum TR_RuntimeHelper,TR::Node *,TR::RegisterDependencyConditions *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	generateNullTestInstructions(TR::CodeGenerator *,TR::Register *,TR::Node *,_Bool)
OMR::Power	TreeEvaluator	getstackEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	getvelemDirectMoveHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	getvelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	getvelemMemoryMoveHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	gotoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	gprRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	gprRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	i2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	i2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	i2cEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	i2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	i2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	i2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iabsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ibits2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ibyteswapEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	icmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	icmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	icmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	icmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	icmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	icmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	idivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	idozEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iexpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifacmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifacmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifacmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifacmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifacmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifacmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifbcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifbcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifbcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifbcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifbcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifdcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iffcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ificmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ificmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ificmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ificmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ificmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifiucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifiucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifiucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifiucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iflucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifscmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifscmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifscmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifscmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifscmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifsucmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifsucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifsucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifsucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifsucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ifxcmpoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	igotoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ilstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	imulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	imulhEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	indirectCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	inegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	inlineVectorBinaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Power	TreeEvaluator	inlineVectorCompareAllOrAnyOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic)
OMR::Power	TreeEvaluator	inlineVectorCompareBranch(TR::Node *,TR::CodeGenerator *,_Bool,_Bool)
OMR::Power	TreeEvaluator	inlineVectorTernaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Power	TreeEvaluator	inlineVectorUnaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Power	TreeEvaluator	int2dbl(TR::Node *,TR::Register *,_Bool,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	integerBitCount(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	integerHighestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	integerLowestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	integerNumberOfLeadingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	integerNumberOfTrailingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ireturnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	irolEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ishflEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ishlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ishrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	istoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	isubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iternaryEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iu2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	iushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ixfrsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ixorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2buEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2cEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	l2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	labsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	laddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	landEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lbits2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lcmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ldivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lexpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	libmFuncEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lmulhEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	loadaddrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	long2dbl(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	long2float(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	longBitCount(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	longHighestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	longLowestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	longNumberOfLeadingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	longNumberOfTrailingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lookupEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lreturnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lrolEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lshflEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lxfrsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	lxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	maxEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	minEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	muloverEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	passThroughEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	performCall(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	postSyncConditions(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::MemoryReference *,TR::class InstOpCode::Mnemonic,_Bool)
OMR::Power	TreeEvaluator	preserveTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
OMR::Power	TreeEvaluator	resolveAndNULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	restoreTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
OMR::Power	TreeEvaluator	retrieveTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
OMR::Power	TreeEvaluator	returnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	reverseLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	reverseStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	s2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	s2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	s2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	saddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	scmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	scmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	scmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	scmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	scmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	setmemoryEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	smulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	snegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	ssubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	stopUsingCopyReg(TR::Node *,TR::Register *&,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	strcFuncEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	strcmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	su2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	su2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	su2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sucmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	sxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	tableEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	treetopEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	unImpOpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Power	TreeEvaluator	vdcmpalleqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpallgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpallgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpallleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpallltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Power	TreeEvaluator	vdcmpanyeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpanygeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpanygtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpanyleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpanyltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdgetelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdivDoubleHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdivFloatHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdivInt32Helper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdlogEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdmaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdmaxEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdmergeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdminEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdmsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdnmsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdselEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdsetelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vdsqrtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int)
OMR::Power	TreeEvaluator	vicmpalleqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpallgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpallgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpallleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpallltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpallneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int)
OMR::Power	TreeEvaluator	vicmpanyeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpanygeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpanygtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpanyleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpanyltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpanyneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vicmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vigetelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vimaxEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vimergeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	viminEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	viremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	visetelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vl2vdEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vmulDoubleHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vmulFloatHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vmulInt32Helper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vnegDoubleHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vnegFloatHelper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vnegInt32Helper(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vnotEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vpermEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vselectEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vsplatsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	vxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	xdRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	xfRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	Linkage	Linkage()
OMR::Power	Linkage	Linkage(class OMR::Power::Linkage &&)
OMR::Power	Linkage	Linkage(const class OMR::Power::Linkage &)
OMR::Power	Linkage	Linkage(TR::CodeGenerator *)
OMR::Power	Linkage	buildArgs(TR::Node *,TR::RegisterDependencyConditions *)
OMR::Power	Linkage	buildDirectDispatch(TR::Node *)
OMR::Power	Linkage	buildIndirectDispatch(TR::Node *)
OMR::Power	Linkage	buildVirtualDispatch(TR::Node *,TR::RegisterDependencyConditions *,uint32_t)
OMR::Power	Linkage	calculateActualParameterOffset(uintptr_t,TR::ParameterSymbol &)
OMR::Power	Linkage	calculateParameterRegisterOffset(uintptr_t,TR::ParameterSymbol &)
OMR::Power	Linkage	cg()
OMR::Power	Linkage	comp()
OMR::Power	Linkage	fe()
OMR::Power	Linkage	flushArguments(TR::Instruction *)
OMR::Power	Linkage	getOutgoingArgumentMemRef(int32_t,TR::Register *,TR::class InstOpCode::Mnemonic,TR::PPCMemoryArgument &,uint32_t)
OMR::Power	Linkage	getProperties()
OMR::Power	Linkage	getReturnInfoFromReturnType(TR::DataType)
OMR::Power	Linkage	hasToBeOnStack(TR::ParameterSymbol *)
OMR::Power	Linkage	initPPCRealRegisterLinkage()
OMR::Power	Linkage	loadUpArguments(TR::Instruction *)
OMR::Power	Linkage	mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &)
OMR::Power	Linkage	mapStack(TR::ResolvedMethodSymbol *)
OMR::Power	Linkage	numArgumentRegisters(enum TR_RegisterKinds)
OMR::Power	Linkage	operator=(class OMR::Power::Linkage &&)
OMR::Power	Linkage	operator=(const class OMR::Power::Linkage &)
OMR::Power	Linkage	pushAddressArg(TR::Node *)
OMR::Power	Linkage	pushDoubleArg(TR::Node *)
OMR::Power	Linkage	pushFloatArg(TR::Node *)
OMR::Power	Linkage	pushIntegerWordArg(TR::Node *)
OMR::Power	Linkage	pushLongArg(TR::Node *)
OMR::Power	Linkage	pushThis(TR::Node *)
OMR::Power	Linkage	saveArguments(TR::Instruction *,_Bool,_Bool,List<TR::ParameterSymbol> &)
OMR::Power	Linkage	saveArguments(TR::Instruction *,_Bool,_Bool)
OMR::Power	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *)
OMR::Power	Linkage	trHeapMemory()
OMR::Power	Linkage	trMemory()
OMR::Power	Linkage	trStackMemory()
OMR::Power	Linkage	~Linkage()
OMR::Power	RegisterIterator	RegisterIterator(class OMR::Power::RegisterIterator &&)
OMR::Power	RegisterIterator	RegisterIterator(const class OMR::Power::RegisterIterator &)
OMR::Power	RegisterIterator	RegisterIterator(TR::Machine *,enum TR_RegisterKinds)
OMR::Power	RegisterIterator	getCurrent()
OMR::Power	RegisterIterator	getFirst()
OMR::Power	RegisterIterator	getNext()
OMR::Power	RegisterIterator	~RegisterIterator()
OMR::Power	AheadOfTimeCompile	AheadOfTimeCompile(uint32_t *,TR::Compilation *)
OMR::Power	AheadOfTimeCompile	AheadOfTimeCompile(class OMR::Power::AheadOfTimeCompile &&)
OMR::Power	AheadOfTimeCompile	AheadOfTimeCompile(const class OMR::Power::AheadOfTimeCompile &)
OMR::Power	AheadOfTimeCompile	getRelocationList()
OMR::Power	AheadOfTimeCompile	operator=(const class OMR::Power::AheadOfTimeCompile &)
OMR::Power	AheadOfTimeCompile	operator=(class OMR::Power::AheadOfTimeCompile &&)
OMR::Power	AheadOfTimeCompile	~AheadOfTimeCompile()
OMR::Power	CodeCacheConfig	CodeCacheConfig()
OMR::Power	CodeCacheConfig	CodeCacheConfig(const class OMR::Power::CodeCacheConfig &)
OMR::Power	CodeCacheConfig	CodeCacheConfig(class OMR::Power::CodeCacheConfig &&)
OMR::Power	CodeCacheConfig	operator=(const class OMR::Power::CodeCacheConfig &)
OMR::Power	CodeCacheConfig	operator=(class OMR::Power::CodeCacheConfig &&)
OMR::Power	CodeCacheConfig	~CodeCacheConfig()
OMR::Z	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
OMR::Z	CodeGenPhase	CodeGenPhase(const class OMR::Z::CodeGenPhase &)
OMR::Z	CodeGenPhase	CodeGenPhase(class OMR::Z::CodeGenPhase &&)
OMR::Z	CodeGenPhase	getName()
OMR::Z	CodeGenPhase	getName(enum OMR::CodeGenPhase::PhaseValue)
OMR::Z	CodeGenPhase	getNumPhases()
OMR::Z	CodeGenPhase	operator=(class OMR::Z::CodeGenPhase &&)
OMR::Z	CodeGenPhase	operator=(const class OMR::Z::CodeGenPhase &)
OMR::Z	CodeGenPhase	performMarkLoadAsZeroOrSignExtensionPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR::Z	CodeGenPhase	performSetBranchOnCountFlagPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
OMR::Z	CodeGenPhase	~CodeGenPhase()
OMR::Z	CodeGenerator	AddFoldedMemRefToStack(TR::MemoryReference *)
OMR::Z	CodeGenerator	CodeGenerator()
OMR::Z	CodeGenerator	CodeGenerator(const class OMR::Z::CodeGenerator &)
OMR::Z	CodeGenerator	CodeGenerator(class OMR::Z::CodeGenerator &&)
OMR::Z	CodeGenerator	Create4ByteConstant(TR::Node *,int32_t,_Bool)
OMR::Z	CodeGenerator	Create8ByteConstant(TR::Node *,int64_t,_Bool)
OMR::Z	CodeGenerator	CreateConstant(TR::Node *,void *,uint16_t,_Bool)
OMR::Z	CodeGenerator	CreateLookupSwitchSnippet(TR::Node *,TR::Snippet *)
OMR::Z	CodeGenerator	CreateTargetAddressSnippet(TR::Node *,TR::Symbol *)
OMR::Z	CodeGenerator	CreateTargetAddressSnippet(TR::Node *,TR::LabelSymbol *)
OMR::Z	CodeGenerator	CreateTargetAddressSnippet(TR::Node *,TR::Snippet *)
OMR::Z	CodeGenerator	CreateWritableConstant(TR::Node *)
OMR::Z	CodeGenerator	IsInMemoryType(TR::DataType)
OMR::Z	CodeGenerator	RemoveMemRefFromStack(TR::MemoryReference *)
OMR::Z	CodeGenerator	StopUsingEscapedMemRefsRegisters(int32_t)
OMR::Z	CodeGenerator	addDataConstantSnippet(TR::S390ConstantDataSnippet *)
OMR::Z	CodeGenerator	addPICsListForInterfaceSnippet(TR::S390ConstantDataSnippet *,TR::list<TR_OpaqueClassBlock *> *)
OMR::Z	CodeGenerator	addVMThreadDependencies(TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	CodeGenerator	addVMThreadPostCondition(TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	CodeGenerator	addVMThreadPreCondition(TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	CodeGenerator	allocateArGprPair(TR::Register *,TR::Register *)
OMR::Z	CodeGenerator	allocateClobberableRegister(TR::Register *)
OMR::Z	CodeGenerator	allocateConsecutiveRegisterPair(TR::Register *,TR::Register *)
OMR::Z	CodeGenerator	allocateConsecutiveRegisterPair()
OMR::Z	CodeGenerator	allocateFPRegisterPair()
OMR::Z	CodeGenerator	allocateFPRegisterPair(TR::Register *,TR::Register *)
OMR::Z	CodeGenerator	allocateReusableTempSlot()
OMR::Z	CodeGenerator	allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *)
OMR::Z	CodeGenerator	anyLitPoolSnippets()
OMR::Z	CodeGenerator	anyNonConstantSnippets()
OMR::Z	CodeGenerator	apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool)
OMR::Z	CodeGenerator	apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool)
OMR::Z	CodeGenerator	apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR::Z	CodeGenerator	apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR::Z	CodeGenerator	apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *)
OMR::Z	CodeGenerator	arithmeticNeedsLiteralFromPool(TR::Node *)
OMR::Z	CodeGenerator	arrayInitMinimumNumberOfBytes()
OMR::Z	CodeGenerator	arrayTranslateAndTestMinimumNumberOfIterations()
OMR::Z	CodeGenerator	arrayTranslateMinimumNumberOfElements(_Bool,_Bool)
OMR::Z	CodeGenerator	arrayTranslateTableRequiresAlignment(_Bool,_Bool)
OMR::Z	CodeGenerator	beginInstructionSelection()
OMR::Z	CodeGenerator	biasDecimalFloatFrac(TR::DataType,int32_t)
OMR::Z	CodeGenerator	bitwiseOpNeedsLiteralFromPool(TR::Node *,TR::Node *)
OMR::Z	CodeGenerator	bndsChkNeedsLiteralFromPool(TR::Node *)
OMR::Z	CodeGenerator	buildRegisterMapForInstruction(class TR_GCStackMap *)
OMR::Z	CodeGenerator	canBeAffectedByStoreTagStalls()
OMR::Z	CodeGenerator	canExceptByTrap()
OMR::Z	CodeGenerator	canTransformUnsafeCopyToArrayCopy()
OMR::Z	CodeGenerator	canUseGoldenEagleImmediateInstruction(int64_t)
OMR::Z	CodeGenerator	canUseGoldenEagleImmediateInstruction(int32_t)
OMR::Z	CodeGenerator	canUseGoldenEagleUnsignedImmediateInstruction(int64_t)
OMR::Z	CodeGenerator	canUseImmedInstruction(int64_t)
OMR::Z	CodeGenerator	canUseRelativeLongInstructions(int64_t)
OMR::Z	CodeGenerator	ccInstruction()
OMR::Z	CodeGenerator	changeRegisterKind(TR::Register *,enum TR_RegisterKinds)
OMR::Z	CodeGenerator	checkBitWiseChild(TR::Node *)
OMR::Z	CodeGenerator	checkIfcmpxx(TR::Node *)
OMR::Z	CodeGenerator	checkIsUnneededIALoad(TR::Node *,TR::Node *,TR::TreeTop *)
OMR::Z	CodeGenerator	checkSimpleLoadStore(TR::Node *,TR::Node *,TR::Block *)
OMR::Z	CodeGenerator	clearHighOrderBits(TR::Node *,TR::Register *,TR::Register *,uint32_t)
OMR::Z	CodeGenerator	clearHighOrderBits(TR::Node *,TR::Register *,uint32_t)
OMR::Z	CodeGenerator	clearTotalRegisterMoves()
OMR::Z	CodeGenerator	clearTotalRegisterXfers()
OMR::Z	CodeGenerator	clearTotalSpills()
OMR::Z	CodeGenerator	codegenSupportsLoadlessBNDCheck()
OMR::Z	CodeGenerator	collectConflictingAddressNodes(TR::Node *,TR::Node *,TR::list<TR::Node *> *)
OMR::Z	CodeGenerator	computeRegisterSaveDescription(class TR_BitVector *,_Bool)
OMR::Z	CodeGenerator	considerAggregateSizeForGRA(int32_t)
OMR::Z	CodeGenerator	considerTypeForGRA(TR::DataType)
OMR::Z	CodeGenerator	considerTypeForGRA(TR::Node *)
OMR::Z	CodeGenerator	considerTypeForGRA(TR::SymbolReference *)
OMR::Z	CodeGenerator	constLoadNeedsLiteralFromPool(TR::Node *)
OMR::Z	CodeGenerator	constantDataSnippetExponent()
OMR::Z	CodeGenerator	copyRestrictedVirtual(TR::Register *,TR::Node *,TR::Instruction **)
OMR::Z	CodeGenerator	create64BitLiteralPoolSnippet(TR::DataType,int64_t)
OMR::Z	CodeGenerator	createBranchPreloadCallData(TR::LabelSymbol *,TR::SymbolReference *,TR::Instruction *)
OMR::Z	CodeGenerator	createConstantInstruction(TR::CodeGenerator *,TR::Node *,TR::Instruction *)
OMR::Z	CodeGenerator	createDepsForRRMemoryInstructions(TR::Node *,TR::RegisterPair *,TR::RegisterPair *,uint8_t)
OMR::Z	CodeGenerator	createLabelTable(TR::Node *,int32_t)
OMR::Z	CodeGenerator	createLinkage(enum TR_LinkageConventions)
OMR::Z	CodeGenerator	createLiteralPoolSnippet(TR::Node *)
OMR::Z	CodeGenerator	deleteInst(TR::Instruction *)
OMR::Z	CodeGenerator	directLoadAddressMatch(TR::Node *,TR::Node *,_Bool)
OMR::Z	CodeGenerator	doBinaryEncoding()
OMR::Z	CodeGenerator	doInstructionSelection()
OMR::Z	CodeGenerator	doPeephole()
OMR::Z	CodeGenerator	doRegisterAssignment(enum TR_RegisterKinds)
OMR::Z	CodeGenerator	doRematerialization()
OMR::Z	CodeGenerator	dumpDataSnippets(TR::FILE *)
OMR::Z	CodeGenerator	dumpPostGPRegisterAssignment(TR::Instruction *,TR::Instruction *)
OMR::Z	CodeGenerator	dumpPreGPRegisterAssignment(TR::Instruction *)
OMR::Z	CodeGenerator	dumpTargetAddressSnippets(TR::FILE *)
OMR::Z	CodeGenerator	emitDataSnippets()
OMR::Z	CodeGenerator	emitTargetAddressSnippets()
OMR::Z	CodeGenerator	enableLiteralPoolRegisterForGRA()
OMR::Z	CodeGenerator	enableRegisterAssociations()
OMR::Z	CodeGenerator	enableRegisterPairAssociation()
OMR::Z	CodeGenerator	enableTLHPrefetching()
OMR::Z	CodeGenerator	endAccumulatorSearchOnOperation(TR::Node *)
OMR::Z	CodeGenerator	endHintOnOperation(TR::Node *)
OMR::Z	CodeGenerator	endInstructionSelection()
OMR::Z	CodeGenerator	endInternalControlFlow(TR::Instruction *)
OMR::Z	CodeGenerator	ensure64BitRegister(TR::Register *)
OMR::Z	CodeGenerator	evaluateLengthMinusOneForMemoryOps(TR::Node *,_Bool,_Bool &)
OMR::Z	CodeGenerator	excludeInvariantsFromGRAEnabled()
OMR::Z	CodeGenerator	findOrCreate2ByteConstant(TR::Node *,int16_t,_Bool)
OMR::Z	CodeGenerator	findOrCreate4ByteConstant(TR::Node *,int32_t,_Bool)
OMR::Z	CodeGenerator	findOrCreate8ByteConstant(TR::Node *,int64_t,_Bool)
OMR::Z	CodeGenerator	findOrCreateConstant(TR::Node *,void *,uint16_t)
OMR::Z	CodeGenerator	findOrCreateTargetAddressSnippet(TR::Node *,uintptrj_t)
OMR::Z	CodeGenerator	findOutLinedInstructionsFromLabel(TR::LabelSymbol *)
OMR::Z	CodeGenerator	findS390OutOfLineCodeSectionFromLabel(TR::LabelSymbol *)
OMR::Z	CodeGenerator	foundConflictingNode(TR::Node *,TR::list<TR::Node *> *)
OMR::Z	CodeGenerator	fprClobberEvaluate(TR::Node *)
OMR::Z	CodeGenerator	freeAndResetTransientLongs()
OMR::Z	CodeGenerator	freeReusableTempSlot()
OMR::Z	CodeGenerator	genCopyFromLiteralPool(TR::Node *,int32_t,TR::MemoryReference *,size_t,TR::class InstOpCode::Mnemonic)
OMR::Z	CodeGenerator	genLoadAddressToRegister(TR::Register *,TR::MemoryReference *,TR::Node *,TR::Instruction *)
OMR::Z	CodeGenerator	genMemClear(TR::MemoryReference *,TR::Node *,int64_t)
OMR::Z	CodeGenerator	genMemCpy(TR::MemoryReference *,TR::Node *,TR::MemoryReference *,TR::Node *,int64_t)
OMR::Z	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *)
OMR::Z	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &)
OMR::Z	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &)
OMR::Z	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *)
OMR::Z	CodeGenerator	generateNop(TR::Node *,TR::Instruction *,enum TR_NOPKind)
OMR::Z	CodeGenerator	generateScratchRegisterManager(int32_t)
OMR::Z	CodeGenerator	getARSaveAreaForTM()
OMR::Z	CodeGenerator	getARegisterIterator()
OMR::Z	CodeGenerator	getAccumulatorNodeUsage()
OMR::Z	CodeGenerator	getAvailableHPRSpillMask()
OMR::Z	CodeGenerator	getBucketPlusIndexRegisters()
OMR::Z	CodeGenerator	getCallsForPreloadList()
OMR::Z	CodeGenerator	getCondCodeShouldBePreserved()
OMR::Z	CodeGenerator	getConditionalMovesEvaluationMode()
OMR::Z	CodeGenerator	getConstantDataSnippet(CS2::HashIndex)
OMR::Z	CodeGenerator	getConstantDataSnippets()
OMR::Z	CodeGenerator	getConstantDataStringSnippets()
OMR::Z	CodeGenerator	getConstantInstructionSnippets()
OMR::Z	CodeGenerator	getCurrentBCDCHKHandlerLabel()
OMR::Z	CodeGenerator	getCurrentBlockIndex()
OMR::Z	CodeGenerator	getCurrentCheckNodeBeingEvaluated()
OMR::Z	CodeGenerator	getCurrentCheckNodeRegDeps()
OMR::Z	CodeGenerator	getCurrentDEPEND()
OMR::Z	CodeGenerator	getCurrentRABlock()
OMR::Z	CodeGenerator	getEnableRIOverPrivateLinkage()
OMR::Z	CodeGenerator	getEntryPointRealRegister()
OMR::Z	CodeGenerator	getEntryPointRegister()
OMR::Z	CodeGenerator	getEstimatedExtentOfLitLoop()
OMR::Z	CodeGenerator	getExitPointsInMethod()
OMR::Z	CodeGenerator	getExtCodeBaseRealRegister()
OMR::Z	CodeGenerator	getExtCodeBaseRegisterIsFree()
OMR::Z	CodeGenerator	getFCondMoveBranchOpCond()
OMR::Z	CodeGenerator	getFirstConstantData()
OMR::Z	CodeGenerator	getFirstSnippet()
OMR::Z	CodeGenerator	getFirstTargetAddress()
OMR::Z	CodeGenerator	getGlobalFPRsPreservedAcrossCalls()
OMR::Z	CodeGenerator	getGlobalGPRFromHPR(TR_GlobalRegisterNumber)
OMR::Z	CodeGenerator	getGlobalGPRsPreservedAcrossCalls()
OMR::Z	CodeGenerator	getGlobalHPRFromGPR(TR_GlobalRegisterNumber)
OMR::Z	CodeGenerator	getGlobalRegisterNumber(uint32_t)
OMR::Z	CodeGenerator	getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions)
OMR::Z	CodeGenerator	getHPRegisterIterator()
OMR::Z	CodeGenerator	getLabelHashTable()
OMR::Z	CodeGenerator	getLargestNegConstThatMustBeMaterialized()
OMR::Z	CodeGenerator	getLinkageGlobalRegisterNumber(int8_t,TR::DataType)
OMR::Z	CodeGenerator	getLitPoolRealRegister()
OMR::Z	CodeGenerator	getLocalD2LSpill()
OMR::Z	CodeGenerator	getLocalF2ISpill()
OMR::Z	CodeGenerator	getMaskSize(int32_t,int32_t)
OMR::Z	CodeGenerator	getMaximumNumberOfAssignableGPRs()
OMR::Z	CodeGenerator	getMaximumNumberOfFPRsAllowedAcrossEdge(TR::Node *)
OMR::Z	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *)
OMR::Z	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Block *)
OMR::Z	CodeGenerator	getMaximumNumberOfVRFsAllowedAcrossEdge(TR::Node *)
OMR::Z	CodeGenerator	getMaximumNumbersOfAssignableFPRs()
OMR::Z	CodeGenerator	getMaximumNumbersOfAssignableGPRs()
OMR::Z	CodeGenerator	getMaximumNumbersOfAssignableVRs()
OMR::Z	CodeGenerator	getMethodMetaDataRealRegister()
OMR::Z	CodeGenerator	getMinByteForLongCompareNarrower()
OMR::Z	CodeGenerator	getMinShortForLongCompareNarrower()
OMR::Z	CodeGenerator	getNextAvailableBlockIndex()
OMR::Z	CodeGenerator	getNodeAddressOfCachedStatic()
OMR::Z	CodeGenerator	getPICsListForInterfaceSnippet(TR::S390ConstantDataSnippet *)
OMR::Z	CodeGenerator	getPreprologueOffset()
OMR::Z	CodeGenerator	getRAPassAR()
OMR::Z	CodeGenerator	getRCondMoveBranchOpCond()
OMR::Z	CodeGenerator	getReturnAddressRealRegister()
OMR::Z	CodeGenerator	getReturnAddressRegister()
OMR::Z	CodeGenerator	getS390Linkage()
OMR::Z	CodeGenerator	getS390OutOfLineCodeSectionList()
OMR::Z	CodeGenerator	getS390PrivateLinkage()
OMR::Z	CodeGenerator	getS390ProcessorInfo()
OMR::Z	CodeGenerator	getS390SystemLinkage()
OMR::Z	CodeGenerator	getSmallestPosConstThatMustBeMaterialized()
OMR::Z	CodeGenerator	getStackPointerRealRegister(TR::Symbol *)
OMR::Z	CodeGenerator	getStorageDestructiveOverlapInfo(TR::Node *,size_t,TR::Node *,size_t)
OMR::Z	CodeGenerator	getSupportsBitOpCodes()
OMR::Z	CodeGenerator	getSupportsBitPermute()
OMR::Z	CodeGenerator	getSupportsConstantOffsetInAddressing(int64_t)
OMR::Z	CodeGenerator	getSupportsEncodeUtf16BigWithSurrogateTest()
OMR::Z	CodeGenerator	getSupportsImplicitNullChecks()
OMR::Z	CodeGenerator	getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType)
OMR::Z	CodeGenerator	getTransientLongRegisters()
OMR::Z	CodeGenerator	getUsesZeroBasePtr()
OMR::Z	CodeGenerator	getVRFRegisterIterator()
OMR::Z	CodeGenerator	globalAccessRegistersSupported()
OMR::Z	CodeGenerator	gprClobberEvaluate(TR::Node *,_Bool,_Bool)
OMR::Z	CodeGenerator	hasDataSnippets()
OMR::Z	CodeGenerator	hasTargetAddressSnippets()
OMR::Z	CodeGenerator	hasWarmCallsBeforeReturn()
OMR::Z	CodeGenerator	hasWritableDataSnippets()
OMR::Z	CodeGenerator	ilOpCodeIsSupported(TR::ILOpCodes)
OMR::Z	CodeGenerator	incAccumulatorNodeUsage()
OMR::Z	CodeGenerator	incNextAvailableBlockIndex()
OMR::Z	CodeGenerator	incTotalRegisterMoves()
OMR::Z	CodeGenerator	incTotalRegisterXfers()
OMR::Z	CodeGenerator	incTotalSpills()
OMR::Z	CodeGenerator	inlineNDmemcpyWithPad(TR::Node *,int64_t *)
OMR::Z	CodeGenerator	insertInstructionPrefetches()
OMR::Z	CodeGenerator	insertInstructionPrefetchesForCalls(struct OMR::Z::CodeGenerator::TR_BranchPreloadCallData *)
OMR::Z	CodeGenerator	insertPad(TR::Node *,TR::Instruction *,uint32_t,_Bool)
OMR::Z	CodeGenerator	internalPointerSupportImplemented()
OMR::Z	CodeGenerator	isActiveArithmeticCC(TR::Register *)
OMR::Z	CodeGenerator	isActiveCompareCC(TR::class InstOpCode::Mnemonic,TR::Register *,TR::Register *)
OMR::Z	CodeGenerator	isActiveLogicalCC(TR::Node *,TR::Register *)
OMR::Z	CodeGenerator	isAddMemoryUpdate(TR::Node *,TR::Node *)
OMR::Z	CodeGenerator	isAddressOfPrivateStaticSymRefWithLockedReg(TR::SymbolReference *)
OMR::Z	CodeGenerator	isAddressOfStaticSymRefWithLockedReg(TR::SymbolReference *)
OMR::Z	CodeGenerator	isAddressScaleIndexSupported(int32_t)
OMR::Z	CodeGenerator	isAlignmentInstruction(TR::Instruction *)
OMR::Z	CodeGenerator	isBranchInstruction(TR::Instruction *)
OMR::Z	CodeGenerator	isCompressedClassPointerOfObjectHeader(TR::Node *)
OMR::Z	CodeGenerator	isDispInRange(int64_t)
OMR::Z	CodeGenerator	isExtCodeBaseFreeForAssignment()
OMR::Z	CodeGenerator	isFenceInstruction(TR::Instruction *)
OMR::Z	CodeGenerator	isGlobalPrivateStaticBaseRegisterOn()
OMR::Z	CodeGenerator	isGlobalRegisterAvailable(TR_GlobalRegisterNumber,TR::DataType)
OMR::Z	CodeGenerator	isGlobalStaticBaseRegisterOn()
OMR::Z	CodeGenerator	isIfFoldable(TR::Node *,int64_t)
OMR::Z	CodeGenerator	isInternalControlFlowReg(TR::Register *)
OMR::Z	CodeGenerator	isLabelInstruction(TR::Instruction *)
OMR::Z	CodeGenerator	isLitPoolFreeForAssignment()
OMR::Z	CodeGenerator	isLiteralPoolOnDemandOn()
OMR::Z	CodeGenerator	isMemcpyWithPadIfFoldable(TR::Node *,enum TR_MemCpyPadTypes)
OMR::Z	CodeGenerator	isOutOf32BitPositiveRange(int64_t,_Bool)
OMR::Z	CodeGenerator	isOutOfLineHotPath()
OMR::Z	CodeGenerator	isPrefetchNextStackCacheLine()
OMR::Z	CodeGenerator	isPreservedRegister(int32_t)
OMR::Z	CodeGenerator	isReturnInstruction(TR::Instruction *)
OMR::Z	CodeGenerator	isStackBased(TR::MemoryReference *)
OMR::Z	CodeGenerator	isStorageReferenceType(TR::Node *)
OMR::Z	CodeGenerator	isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **)
OMR::Z	CodeGenerator	isUsing32BitEvaluator(TR::Node *)
OMR::Z	CodeGenerator	isValidCompareConst(int64_t)
OMR::Z	CodeGenerator	loadAndStoreMayOverlap(TR::Node *,size_t,TR::Node *,size_t)
OMR::Z	CodeGenerator	loadOrStoreAddressesMatch(TR::Node *,TR::Node *)
OMR::Z	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
OMR::Z	CodeGenerator	lowerTreesPropagateBlockToNode(TR::Node *)
OMR::Z	CodeGenerator	lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t)
OMR::Z	CodeGenerator	maskAvailableHPRSpillMask(int64_t)
OMR::Z	CodeGenerator	materializesLargeConstants()
OMR::Z	CodeGenerator	mayImmedInstructionCauseOverFlow(TR::Node *)
OMR::Z	CodeGenerator	mulDecompositionCostIsJustified(int32_t,char [],char [],int64_t)
OMR::Z	CodeGenerator	needs64bitPrecision(TR::Node *)
OMR::Z	CodeGenerator	needsVMThreadDependency()
OMR::Z	CodeGenerator	nodeMayCauseException(TR::Node *)
OMR::Z	CodeGenerator	nodeRequiresATemporary(TR::Node *)
OMR::Z	CodeGenerator	opCodeIsNoOpOnThisPlatform(TR::ILOpCode &)
OMR::Z	CodeGenerator	operator=(const class OMR::Z::CodeGenerator &)
OMR::Z	CodeGenerator	operator=(class OMR::Z::CodeGenerator &&)
OMR::Z	CodeGenerator	possiblyConflictingNode(TR::Node *)
OMR::Z	CodeGenerator	preLowerTrees()
OMR::Z	CodeGenerator	prepareForGRA()
OMR::Z	CodeGenerator	prepareRegistersForAssignment()
OMR::Z	CodeGenerator	printStats(int32_t)
OMR::Z	CodeGenerator	processIncomingParameterUsage(class TR_BitVector **,int32_t)
OMR::Z	CodeGenerator	processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool)
OMR::Z	CodeGenerator	processUnusedNodeDuringEvaluation(TR::Node *)
OMR::Z	CodeGenerator	recordRegisterAssignment(TR::Register *,TR::Register *)
OMR::Z	CodeGenerator	registerBitMask(int32_t)
OMR::Z	CodeGenerator	reliesOnAParticularSignEncoding(TR::Node *)
OMR::Z	CodeGenerator	removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &)
OMR::Z	CodeGenerator	replaceInst(TR::Instruction *,TR::Instruction *)
OMR::Z	CodeGenerator	resetGlobalRegister(TR::class RealRegister::RegNum,class TR_BitVector &)
OMR::Z	CodeGenerator	resetRAPassAR()
OMR::Z	CodeGenerator	setARSaveAreaForTM(TR::SymbolReference *)
OMR::Z	CodeGenerator	setARegisterIterator(TR::RegisterIterator *)
OMR::Z	CodeGenerator	setAccumulatorNodeUsage(int32_t)
OMR::Z	CodeGenerator	setAvailableHPRSpillMask(int64_t)
OMR::Z	CodeGenerator	setBranchOnCountFlag(TR::Node *,vcount_t)
OMR::Z	CodeGenerator	setCCInstruction(TR::Instruction *)
OMR::Z	CodeGenerator	setCanExceptByTrap(_Bool)
OMR::Z	CodeGenerator	setCondCodeShouldBePreserved(_Bool)
OMR::Z	CodeGenerator	setConditionalMovesEvaluationMode(_Bool)
OMR::Z	CodeGenerator	setCurrentBCDCHKHandlerLabel(TR::LabelSymbol *)
OMR::Z	CodeGenerator	setCurrentBlockIndex(int32_t)
OMR::Z	CodeGenerator	setCurrentCheckNodeBeingEvaluated(TR::Node *)
OMR::Z	CodeGenerator	setCurrentCheckNodeRegDeps(TR::RegisterDependencyConditions *)
OMR::Z	CodeGenerator	setCurrentDEPEND(TR::Instruction *)
OMR::Z	CodeGenerator	setCurrentRABlock(TR::Block *)
OMR::Z	CodeGenerator	setDisableBranchPreload()
OMR::Z	CodeGenerator	setDisableBranchPreloadForCalls()
OMR::Z	CodeGenerator	setEnableBranchPreload()
OMR::Z	CodeGenerator	setEnableBranchPreloadForCalls()
OMR::Z	CodeGenerator	setEnableRIOverPrivateLinkage(_Bool)
OMR::Z	CodeGenerator	setEnableTLHPrefetching()
OMR::Z	CodeGenerator	setEstimatedLocationsForDataSnippetLabels(int32_t)
OMR::Z	CodeGenerator	setEstimatedLocationsForTargetAddressSnippetLabels(int32_t)
OMR::Z	CodeGenerator	setEstimatedOffsetForConstantDataSnippets(int32_t)
OMR::Z	CodeGenerator	setEstimatedOffsetForTargetAddressSnippets()
OMR::Z	CodeGenerator	setExitPointsInMethod(_Bool)
OMR::Z	CodeGenerator	setExtCodeBaseRegisterIsFree(_Bool)
OMR::Z	CodeGenerator	setFCondMoveBranchOpCond(TR::class InstOpCode::S390BranchCondition)
OMR::Z	CodeGenerator	setGlobalPrivateStaticBaseRegisterOn(_Bool)
OMR::Z	CodeGenerator	setGlobalRegister(TR::class RealRegister::RegNum,class TR_BitVector &)
OMR::Z	CodeGenerator	setGlobalStaticBaseRegisterOn(_Bool)
OMR::Z	CodeGenerator	setGlobalStaticBaseRegisterOnFlag()
OMR::Z	CodeGenerator	setHPRegisterIterator(TR::RegisterIterator *)
OMR::Z	CodeGenerator	setIsOutOfLineHotPath(_Bool)
OMR::Z	CodeGenerator	setLabelHashTable(class TR_HashTab *)
OMR::Z	CodeGenerator	setNextAvailableBlockIndex(int32_t)
OMR::Z	CodeGenerator	setNodeAddressOfCachedStaticTree(TR::Node *)
OMR::Z	CodeGenerator	setOnDemandLiteralPoolRun(_Bool)
OMR::Z	CodeGenerator	setPrefetchNextStackCacheLine(_Bool)
OMR::Z	CodeGenerator	setPreprologueOffset(int32_t)
OMR::Z	CodeGenerator	setRAPassAR()
OMR::Z	CodeGenerator	setRealRegisterAssociation(TR::Register *,TR::class RealRegister::RegNum)
OMR::Z	CodeGenerator	setRegister(TR::class RealRegister::RegNum,class TR_BitVector &)
OMR::Z	CodeGenerator	setSupportsHighWordFacility(_Bool)
OMR::Z	CodeGenerator	setSupportsImplicitNullChecks(_Bool)
OMR::Z	CodeGenerator	setUnavailableRegisters(TR::Block *,class TR_BitVector &)
OMR::Z	CodeGenerator	setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &)
OMR::Z	CodeGenerator	setUseDefRegisters(_Bool)
OMR::Z	CodeGenerator	setUsesZeroBasePtr(_Bool)
OMR::Z	CodeGenerator	setVMThreadRequired(_Bool)
OMR::Z	CodeGenerator	setVRFRegisterIterator(TR::RegisterIterator *)
OMR::Z	CodeGenerator	shouldValueBeInACommonedNode(int64_t)
OMR::Z	CodeGenerator	shouldYankCompressedRefs()
OMR::Z	CodeGenerator	signExtendedHighOrderBits(TR::Node *,TR::Register *,TR::Register *,uint32_t)
OMR::Z	CodeGenerator	signExtendedHighOrderBits(TR::Node *,TR::Register *,uint32_t)
OMR::Z	CodeGenerator	simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR::Z	CodeGenerator	splitBaseRegisterPairsForRRMemoryInstructions(TR::Node *,TR::RegisterPair *,TR::RegisterPair *)
OMR::Z	CodeGenerator	splitBlockEntry(TR::Instruction *)
OMR::Z	CodeGenerator	splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool)
OMR::Z	CodeGenerator	ssrClobberEvaluate(TR::Node *,TR::MemoryReference *)
OMR::Z	CodeGenerator	startInternalControlFlow(TR::Instruction *)
OMR::Z	CodeGenerator	supports32bitAiadd()
OMR::Z	CodeGenerator	supportsBranchPreload()
OMR::Z	CodeGenerator	supportsBranchPreloadForCalls()
OMR::Z	CodeGenerator	supportsDirectIntegralLoadStoresFromLiteralPool()
OMR::Z	CodeGenerator	supportsDirectJNICallsForAOT()
OMR::Z	CodeGenerator	supportsFusedMultiplyAdd()
OMR::Z	CodeGenerator	supportsHighWordFacility()
OMR::Z	CodeGenerator	supportsInliningOfIsInstance()
OMR::Z	CodeGenerator	supportsJITFreeSystemStackPointer()
OMR::Z	CodeGenerator	supportsLengthMinusOneForMemoryOpts()
OMR::Z	CodeGenerator	supportsLongRegAllocation()
OMR::Z	CodeGenerator	supportsMergingGuards()
OMR::Z	CodeGenerator	supportsOnDemandLiteralPool()
OMR::Z	CodeGenerator	supportsSinglePrecisionSQRT()
OMR::Z	CodeGenerator	supportsTrapsInTMRegion()
OMR::Z	CodeGenerator	updateSnippetMapWithRSD(TR::Instruction *,int32_t)
OMR::Z	CodeGenerator	upgradeToHPRInstruction(TR::Instruction *)
OMR::Z	CodeGenerator	useMVCLForMemcpyWithPad(TR::Node *,enum TR_MemCpyPadTypes)
OMR::Z	CodeGenerator	useRippleCopyOrXC(size_t,char *)
OMR::Z	CodeGenerator	usesImplicit64BitGPRs(TR::Node *)
OMR::Z	CodeGenerator	yankIndexScalingOp()
OMR::Z	CodeGenerator	~CodeGenerator()
OMR::Z	CodeGenerator	getAssignmentDirection()
OMR::Z	CodeGenerator	setAssignmentDirection(RegisterAssignmentDirection)
OMR::Z	DebugEnv	DebugEnv()
OMR::Z	DebugEnv	DebugEnv(const class OMR::Z::DebugEnv &)
OMR::Z	DebugEnv	DebugEnv(class OMR::Z::DebugEnv &&)
OMR::Z	DebugEnv	operator=(class OMR::Z::DebugEnv &&)
OMR::Z	DebugEnv	operator=(const class OMR::Z::DebugEnv &)
OMR::Z	DebugEnv	~DebugEnv()
OMR::Z	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Z	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Z	Instruction	Instruction(class OMR::Z::Instruction &&)
OMR::Z	Instruction	Instruction(const class OMR::Z::Instruction &)
OMR::Z	Instruction	addARDependencyCondition(TR::Register *,TR::Register *)
OMR::Z	Instruction	addComment(char *)
OMR::Z	Instruction	anySpilledRegisters(TR::MemoryReference **,int32_t)
OMR::Z	Instruction	anySpilledRegisters(TR::Register **,int32_t)
OMR::Z	Instruction	assignBestSpillRegister()
OMR::Z	Instruction	assignBestSpillRegister2()
OMR::Z	Instruction	assignFreeRegBitVector()
OMR::Z	Instruction	assignOrderedRegisters(enum TR_RegisterKinds)
OMR::Z	Instruction	assignRegisterNoDependencies(TR::Register *)
OMR::Z	Instruction	assignRegisters(enum TR_RegisterKinds)
OMR::Z	Instruction	assignRegistersAndDependencies(enum TR_RegisterKinds)
OMR::Z	Instruction	attemptOpAdjustmentForLongDisplacement()
OMR::Z	Instruction	block(TR::Register **,int32_t,TR::Register **,int,TR::MemoryReference **,TR::MemoryReference **)
OMR::Z	Instruction	blockHPR(TR::Register *)
OMR::Z	Instruction	checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *)
OMR::Z	Instruction	clearCCInfo()
OMR::Z	Instruction	containsRegister(TR::Register *)
OMR::Z	Instruction	defsAnyRegister(TR::Register *)
OMR::Z	Instruction	defsRegister(TR::Register *)
OMR::Z	Instruction	dependencyRefsRegister(TR::Register *)
OMR::Z	Instruction	description()
OMR::Z	Instruction	estimateBinaryLength(int32_t)
OMR::Z	Instruction	fprOp()
OMR::Z	Instruction	gatherRegPairsAtFrontOfArray(TR::Register **,int32_t)
OMR::Z	Instruction	generateBinaryEncoding()
OMR::Z	Instruction	getBinLocalFreeRegs()
OMR::Z	Instruction	getBlockIndex()
OMR::Z	Instruction	getDefinedRegisters(TR::list<TR::Register *> &)
OMR::Z	Instruction	getDependencyConditions()
OMR::Z	Instruction	getEstimatedBinaryOffset()
OMR::Z	Instruction	getKilledRegisters(TR::list<TR::Register *> &)
OMR::Z	Instruction	getKind()
OMR::Z	Instruction	getLocalLocalSpillReg1()
OMR::Z	Instruction	getLocalLocalSpillReg2()
OMR::Z	Instruction	getMachineOpCode()
OMR::Z	Instruction	getMemoryReference()
OMR::Z	Instruction	getMemoryReference2()
OMR::Z	Instruction	getName(class TR_Debug *)
OMR::Z	Instruction	getNumRegisterOperands()
OMR::Z	Instruction	getOneLocalLocalAllocFreeReg(TR::RealRegister **)
OMR::Z	Instruction	getOutOfLineEXInstr()
OMR::Z	Instruction	getRegForBinaryEncoding(TR::Register *)
OMR::Z	Instruction	getRegionNumber()
OMR::Z	Instruction	getRegisterOperand(uint32_t)
OMR::Z	Instruction	getRegisters(TR::list<TR::Register *> &)
OMR::Z	Instruction	getS390ImmInstruction()
OMR::Z	Instruction	getSourceRegister(uint32_t)
OMR::Z	Instruction	getTargetRegister(uint32_t)
OMR::Z	Instruction	getTwoLocalLocalAllocFreeReg(TR::RealRegister **,TR::RealRegister **)
OMR::Z	Instruction	getUsedRegisters(TR::list<TR::Register *> &)
OMR::Z	Instruction	hasLongDisplacementSupport()
OMR::Z	Instruction	implicitlySetsGPR0()
OMR::Z	Instruction	implicitlySetsGPR1()
OMR::Z	Instruction	implicitlySetsGPR2()
OMR::Z	Instruction	implicitlyUsesGPR0()
OMR::Z	Instruction	implicitlyUsesGPR1()
OMR::Z	Instruction	implicitlyUsesGPR2()
OMR::Z	Instruction	initialize(TR::RegisterDependencyConditions *)
OMR::Z	Instruction	initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool)
OMR::Z	Instruction	is4ByteLoad()
OMR::Z	Instruction	isAdmin()
OMR::Z	Instruction	isAsmGen()
OMR::Z	Instruction	isBeginBlock()
OMR::Z	Instruction	isBranchOp()
OMR::Z	Instruction	isBreakPoint()
OMR::Z	Instruction	isCCuseKnown()
OMR::Z	Instruction	isCCused()
OMR::Z	Instruction	isCall()
OMR::Z	Instruction	isCompare()
OMR::Z	Instruction	isDebugFence()
OMR::Z	Instruction	isDebugHookOp()
OMR::Z	Instruction	isDefRegister(TR::Register *)
OMR::Z	Instruction	isEndInternalControlFlow()
OMR::Z	Instruction	isExceptBranchOp()
OMR::Z	Instruction	isExtDisp()
OMR::Z	Instruction	isExtDisp2()
OMR::Z	Instruction	isFloat()
OMR::Z	Instruction	isHPRUpgradable(uint16_t)
OMR::Z	Instruction	isLabel()
OMR::Z	Instruction	isLoad()
OMR::Z	Instruction	isOutOfLineEX()
OMR::Z	Instruction	isRegInstruction()
OMR::Z	Instruction	isRet()
OMR::Z	Instruction	isStartInternalControlFlow()
OMR::Z	Instruction	isStore()
OMR::Z	Instruction	isTailCall()
OMR::Z	Instruction	isTrap()
OMR::Z	Instruction	isWillBePatched()
OMR::Z	Instruction	lastOperandIndex()
OMR::Z	Instruction	matchesAnyRegister(TR::Register *,TR::Register *,TR::Register *)
OMR::Z	Instruction	matchesAnyRegister(TR::Register *,TR::Register *)
OMR::Z	Instruction	matchesTargetRegister(TR::Register *)
OMR::Z	Instruction	numOperands()
OMR::Z	Instruction	opCodeCanBeAdjustedTo(TR::class InstOpCode::Mnemonic)
OMR::Z	Instruction	operator=(const class OMR::Z::Instruction &)
OMR::Z	Instruction	operator=(class OMR::Z::Instruction &&)
OMR::Z	Instruction	readCCInfo()
OMR::Z	Instruction	recordOperand(void *,int8_t &)
OMR::Z	Instruction	refsRegister(TR::Register *)
OMR::Z	Instruction	renameRegister(TR::Register *,TR::Register *)
OMR::Z	Instruction	resetDependencyConditions(TR::RegisterDependencyConditions *)
OMR::Z	Instruction	resetUseDefRegisters()
OMR::Z	Instruction	setBinLocalFreeRegs(uint32_t)
OMR::Z	Instruction	setBlockIndex(int32_t)
OMR::Z	Instruction	setBreakPoint(_Bool)
OMR::Z	Instruction	setCCInfo()
OMR::Z	Instruction	setCCuseKnown()
OMR::Z	Instruction	setCCused()
OMR::Z	Instruction	setDebugHookOp()
OMR::Z	Instruction	setDependencyConditions(TR::RegisterDependencyConditions *)
OMR::Z	Instruction	setDependencyConditionsNoBookKeeping(TR::RegisterDependencyConditions *)
OMR::Z	Instruction	setEndInternalControlFlow()
OMR::Z	Instruction	setEstimatedBinaryOffset(uint32_t)
OMR::Z	Instruction	setExceptBranchOp()
OMR::Z	Instruction	setExtDisp()
OMR::Z	Instruction	setExtDisp2()
OMR::Z	Instruction	setKind(enum OMR::Instruction::Kind)
OMR::Z	Instruction	setLocalLocalSpillReg1(TR::RealRegister *)
OMR::Z	Instruction	setLocalLocalSpillReg2(TR::RealRegister *)
OMR::Z	Instruction	setMaskField(uint32_t *,int8_t,int8_t)
OMR::Z	Instruction	setOutOfLineEX()
OMR::Z	Instruction	setRegionNumber(int16_t)
OMR::Z	Instruction	setRegisterOperand(uint32_t,TR::Register *)
OMR::Z	Instruction	setStartInternalControlFlow()
OMR::Z	Instruction	setThrowsImplicitException()
OMR::Z	Instruction	setThrowsImplicitNullPointerException()
OMR::Z	Instruction	setUseDefRegisters(_Bool)
OMR::Z	Instruction	setWillBePatched()
OMR::Z	Instruction	setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *)
OMR::Z	Instruction	sourceMemBase()
OMR::Z	Instruction	sourceRegBase()
OMR::Z	Instruction	sourceRegUsedInMemoryReference(uint32_t)
OMR::Z	Instruction	srcRegArrElem(int32_t)
OMR::Z	Instruction	startOfLiveRange(TR::Register *)
OMR::Z	Instruction	swap_operands(int,int)
OMR::Z	Instruction	targetMemBase()
OMR::Z	Instruction	targetRegBase()
OMR::Z	Instruction	tgtRegArrElem(int32_t)
OMR::Z	Instruction	throwsImplicitException()
OMR::Z	Instruction	throwsImplicitNullPointerException()
OMR::Z	Instruction	unblock(TR::Register **,int32_t,TR::Register **,int,TR::MemoryReference **,TR::MemoryReference **)
OMR::Z	Instruction	unblockHPR(TR::Register *)
OMR::Z	Instruction	updateDependencyConditions(TR::RegisterDependencyConditions *)
OMR::Z	Instruction	useRegister(TR::Register *,_Bool)
OMR::Z	Instruction	useSourceMemoryReference(TR::MemoryReference *)
OMR::Z	Instruction	useSourceRegister(TR::Register *)
OMR::Z	Instruction	useTargetMemoryReference(TR::MemoryReference *,TR::MemoryReference *)
OMR::Z	Instruction	useTargetRegister(TR::Register *)
OMR::Z	Instruction	usesOnlyRegister(TR::Register *)
OMR::Z	Instruction	usesRegister(TR::Register *)
OMR::Z	Instruction	~Instruction()
OMR::Z	Machine	Machine(class OMR::Z::Machine &&)
OMR::Z	Machine	Machine(const class OMR::Z::Machine &)
OMR::Z	Machine	Machine(TR::CodeGenerator *)
OMR::Z	Machine	addGlobalReg(TR::class RealRegister::RegNum,int32_t)
OMR::Z	Machine	addGlobalRegLater(TR::class RealRegister::RegNum,int32_t)
OMR::Z	Machine	addToUpgradedBlockedList(TR::RealRegister *)
OMR::Z	Machine	allocateUpgradedBlockedList(TR_Stack<TR::RealRegister *> *)
OMR::Z	Machine	assignBestRegister(TR::Register *,TR::Instruction *,_Bool,uint64_t)
OMR::Z	Machine	assignBestRegisterPair(TR::Register *,TR::Instruction *,_Bool,uint64_t)
OMR::Z	Machine	assignBestRegisterSingle(TR::Register *,TR::Instruction *,_Bool,uint64_t)
OMR::Z	Machine	blockVolatileAccessRegisters()
OMR::Z	Machine	blockVolatileHighRegisters()
OMR::Z	Machine	clearRegisterAssociations()
OMR::Z	Machine	coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,OMR::flags32_t)
OMR::Z	Machine	constructFreeRegBitVector(TR::Instruction *)
OMR::Z	Machine	createDepCondForLiveGPRs(TR::list<TR::Register *> *)
OMR::Z	Machine	createRegisterAssociationDirective(TR::Instruction *)
OMR::Z	Machine	filterColouredRegisterConflicts(TR::Register *,TR::Register *,TR::Instruction *)
OMR::Z	Machine	findBestFreeRegister(TR::Instruction *,enum TR_RegisterKinds,TR::Register *,uint64_t,_Bool)
OMR::Z	Machine	findBestFreeRegisterPair(TR::RealRegister **,TR::RealRegister **,enum TR_RegisterKinds,TR::Instruction *,uint64_t)
OMR::Z	Machine	findBestLegalEvenRegister(uint64_t)
OMR::Z	Machine	findBestLegalOddRegister(uint64_t)
OMR::Z	Machine	findBestLegalSiblingFPRegister(_Bool,uint64_t)
OMR::Z	Machine	findBestRegisterForShuffle(TR::Instruction *,TR::Register *,uint64_t)
OMR::Z	Machine	findBestSwapRegister(TR::Register *,TR::Register *)
OMR::Z	Machine	findGlobalRegisterIndex(TR::class RealRegister::RegNum)
OMR::Z	Machine	findRegNotUsedInInstruction(TR::Instruction *)
OMR::Z	Machine	findVirtRegInHighWordRegister(TR::Register *)
OMR::Z	Machine	freeBestFPRegisterPair(TR::RealRegister **,TR::RealRegister **,TR::Instruction *,uint64_t)
OMR::Z	Machine	freeBestRegister(TR::Instruction *,TR::Register *,enum TR_RegisterKinds,uint64_t,_Bool,_Bool)
OMR::Z	Machine	freeBestRegisterPair(TR::RealRegister **,TR::RealRegister **,enum TR_RegisterKinds,TR::Instruction *,uint64_t)
OMR::Z	Machine	freeHighWordRegister(TR::Instruction *,TR::RealRegister *,OMR::flags32_t)
OMR::Z	Machine	freeRealRegister(TR::Instruction *,TR::RealRegister *,_Bool)
OMR::Z	Machine	genBitMapOfAssignableGPRs()
OMR::Z	Machine	genBitVectOfLiveGPRPairs()
OMR::Z	Machine	getAGIDelay()
OMR::Z	Machine	getARSize()
OMR::Z	Machine	getAccessRegisterFromGlobalRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	getDebug()
OMR::Z	Machine	getFPRSize()
OMR::Z	Machine	getFirstGlobalAccessRegisterNumber()
OMR::Z	Machine	getFirstGlobalFPRRegisterNumber()
OMR::Z	Machine	getFirstGlobalGPRRegisterNumber()
OMR::Z	Machine	getFirstGlobalHPRRegisterNumber()
OMR::Z	Machine	getFirstGlobalVRFRegisterNumber()
OMR::Z	Machine	getFirstOverlappedGlobalFPRRegisterNumber()
OMR::Z	Machine	getFirstOverlappedGlobalVRFRegisterNumber()
OMR::Z	Machine	getGPRFromGlobalRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	getGPRSize()
OMR::Z	Machine	getGlobalCAARegisterNumber()
OMR::Z	Machine	getGlobalEntryPointRegisterNumber()
OMR::Z	Machine	getGlobalEnvironmentRegisterNumber()
OMR::Z	Machine	getGlobalParentDSARegisterNumber()
OMR::Z	Machine	getGlobalReg(TR::class RealRegister::RegNum)
OMR::Z	Machine	getGlobalRegisterTable()
OMR::Z	Machine	getGlobalReturnAddressRegisterNumber()
OMR::Z	Machine	getHPRFromGlobalRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	getHPRSize()
OMR::Z	Machine	getLast8BitGlobalGPRRegisterNumber()
OMR::Z	Machine	getLastGlobalAccessRegisterNumber()
OMR::Z	Machine	getLastGlobalCCRRegisterNumber()
OMR::Z	Machine	getLastGlobalFPRRegisterNumber()
OMR::Z	Machine	getLastGlobalGPRRegisterNumber()
OMR::Z	Machine	getLastGlobalHPRRegisterNumber()
OMR::Z	Machine	getLastGlobalVRFRegisterNumber()
OMR::Z	Machine	getLastLinkageFPR()
OMR::Z	Machine	getLastLinkageGPR()
OMR::Z	Machine	getLastOverlappedGlobalFPRRegisterNumber()
OMR::Z	Machine	getLastOverlappedGlobalVRFRegisterNumber()
OMR::Z	Machine	getLastVolatileNonLinkFPR()
OMR::Z	Machine	getLastVolatileNonLinkGPR()
OMR::Z	Machine	getNextRegFromUpgradedBlockedList()
OMR::Z	Machine	getRealRegister(TR_GlobalRegisterNumber)
OMR::Z	Machine	getRegisterFile(int32_t)
OMR::Z	Machine	getS390RealRegister(TR::class RealRegister::RegNum)
OMR::Z	Machine	getS390RealRegister(int32_t)
OMR::Z	Machine	getVRFSize()
OMR::Z	Machine	getVirtualAssociatedWithReal(TR::class RealRegister::RegNum)
OMR::Z	Machine	initGlobalVectorRegisterMap(uint32_t)
OMR::Z	Machine	initialiseRegisterFile()
OMR::Z	Machine	initializeFPRegPairTable()
OMR::Z	Machine	initializeGlobalRegisterTable()
OMR::Z	Machine	isAssignable(TR::Register *,TR::RealRegister *)
OMR::Z	Machine	isLegalEvenOddPair(TR::RealRegister *,TR::RealRegister *,uint64_t)
OMR::Z	Machine	isLegalEvenOddRestrictedPair(TR::RealRegister *,TR::RealRegister *,uint64_t)
OMR::Z	Machine	isLegalEvenRegister(TR::RealRegister *,_Bool,uint64_t,_Bool)
OMR::Z	Machine	isLegalFPPair(TR::RealRegister *,TR::RealRegister *,uint64_t)
OMR::Z	Machine	isLegalFirstOfFPRegister(TR::RealRegister *,_Bool,uint64_t,_Bool)
OMR::Z	Machine	isLegalOddRegister(TR::RealRegister *,_Bool,uint64_t,_Bool)
OMR::Z	Machine	isLegalSecondOfFPRegister(TR::RealRegister *,_Bool,uint64_t,_Bool)
OMR::Z	Machine	isRestrictedReg(TR::class RealRegister::RegNum)
OMR::Z	Machine	lockGlobalRegister(int32_t)
OMR::Z	Machine	operator=(class OMR::Z::Machine &&)
OMR::Z	Machine	operator=(const class OMR::Z::Machine &)
OMR::Z	Machine	registerCopy(TR::Instruction *,enum TR_RegisterKinds,TR::Register *,TR::Register *,TR::CodeGenerator *,OMR::flags32_t)
OMR::Z	Machine	registerExchange(TR::Instruction *,enum TR_RegisterKinds,TR::RealRegister *,TR::RealRegister *,TR::RealRegister *,TR::CodeGenerator *,OMR::flags32_t)
OMR::Z	Machine	releaseGlobalRegister(int32_t,TR::class RealRegister::RegNum)
OMR::Z	Machine	releaseLiteralPoolRegister()
OMR::Z	Machine	restoreRegisterStateFromSnapShot()
OMR::Z	Machine	reverseSpillState(TR::Instruction *,TR::Register *,TR::RealRegister *)
OMR::Z	Machine	setFirstGlobalAccessRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setFirstGlobalFPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setFirstGlobalGPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setFirstGlobalHPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setFirstGlobalVRFRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setFirstOverlappedGlobalFPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setFirstOverlappedGlobalVRFRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setGlobalCAARegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setGlobalEntryPointRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setGlobalEnvironmentRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setGlobalParentDSARegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setGlobalReturnAddressRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLast8BitGlobalGPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastGlobalAccessRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastGlobalCCRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastGlobalFPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastGlobalGPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastGlobalHPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastGlobalVRFRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastLinkageFPR(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastLinkageGPR(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastOverlappedGlobalFPRRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastOverlappedGlobalVRFRegisterNumber(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastVolatileNonLinkFPR(TR_GlobalRegisterNumber)
OMR::Z	Machine	setLastVolatileNonLinkGPR(TR_GlobalRegisterNumber)
OMR::Z	Machine	setRegisterWeightsFromAssociations()
OMR::Z	Machine	setVirtualAssociatedWithReal(TR::class RealRegister::RegNum,TR::Register *)
OMR::Z	Machine	shuffleOrSpillRegister(TR::Instruction *,TR::Register *,uint64_t)
OMR::Z	Machine	spillAllVolatileHighRegisters(TR::Instruction *)
OMR::Z	Machine	spillRegister(TR::Instruction *,TR::Register *,uint32_t)
OMR::Z	Machine	supportLockedRegisterAssignment()
OMR::Z	Machine	takeRegisterStateSnapShot()
OMR::Z	Machine	unblockVolatileAccessRegisters()
OMR::Z	Machine	unblockVolatileHighRegisters()
OMR::Z	Machine	~Machine()
OMR::Z	Machine	cg()
OMR::Z	Machine	coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,flags32_t)
OMR::Z	Machine	freeHighWordRegister(TR::Instruction *,TR::RealRegister *,flags32_t)
OMR::Z	Machine	registerCopy(TR::Instruction *,enum TR_RegisterKinds,TR::Register *,TR::Register *,TR::CodeGenerator *,flags32_t)
OMR::Z	Machine	registerExchange(TR::Instruction *,enum TR_RegisterKinds,TR::RealRegister *,TR::RealRegister *,TR::RealRegister *,TR::CodeGenerator *,flags32_t)
OMR::Z	RealRegister	RealRegister(const class OMR::Z::RealRegister &)
OMR::Z	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::Z	RealRegister	RealRegister(class OMR::Z::RealRegister &&)
OMR::Z	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::Z	RealRegister	getAssignedHigh()
OMR::Z	RealRegister	getHighWordRegister()
OMR::Z	RealRegister	getLowWordRegister()
OMR::Z	RealRegister	getModified()
OMR::Z	RealRegister	getSiblingWordRegister()
OMR::Z	RealRegister	isAR(OMR::RealRegister::RegNum)
OMR::Z	RealRegister	isFPR(OMR::RealRegister::RegNum)
OMR::Z	RealRegister	isGPR(OMR::RealRegister::RegNum)
OMR::Z	RealRegister	isHPR(OMR::RealRegister::RegNum)
OMR::Z	RealRegister	isHighWordRegister()
OMR::Z	RealRegister	isLowWordRegister()
OMR::Z	RealRegister	isPseudoRealReg(OMR::RealRegister::RegNum)
OMR::Z	RealRegister	isRealReg(OMR::RealRegister::RegNum)
OMR::Z	RealRegister	isVRF(OMR::RealRegister::RegNum)
OMR::Z	RealRegister	operator=(class OMR::Z::RealRegister &&)
OMR::Z	RealRegister	operator=(const class OMR::Z::RealRegister &)
OMR::Z	RealRegister	setAssignedHigh(_Bool)
OMR::Z	RealRegister	setBaseRegisterField(uint32_t *,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setBaseRegisterField(uint32_t *)
OMR::Z	RealRegister	setHasBeenAssignedInMethod(_Bool)
OMR::Z	RealRegister	setHighWordRegister(TR::RealRegister *)
OMR::Z	RealRegister	setIndexRegisterField(uint32_t *,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setIndexRegisterField(uint32_t *)
OMR::Z	RealRegister	setLowWordRegister(TR::RealRegister *)
OMR::Z	RealRegister	setModified(_Bool)
OMR::Z	RealRegister	setRegister1Field(uint32_t *,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setRegister1Field(uint32_t *)
OMR::Z	RealRegister	setRegister2Field(uint32_t *,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setRegister2Field(uint32_t *)
OMR::Z	RealRegister	setRegister3Field(uint32_t *,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setRegister3Field(uint32_t *)
OMR::Z	RealRegister	setRegister4Field(uint32_t *,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setRegister4Field(uint32_t *)
OMR::Z	RealRegister	setRegisterField(uint32_t *,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setRegisterField(uint32_t *)
OMR::Z	RealRegister	setRegisterField(uint32_t *,int32_t)
OMR::Z	RealRegister	setRegisterField(uint32_t *,int32_t,OMR::RealRegister::RegNum)
OMR::Z	RealRegister	setRegisterRXBField(uint32_t *,OMR::RealRegister::RegNum,int)
OMR::Z	RealRegister	~RealRegister()
OMR::Z	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::Z	RealRegister	isAR(RegNum)
OMR::Z	RealRegister	isFPR(RegNum)
OMR::Z	RealRegister	isGPR(RegNum)
OMR::Z	RealRegister	isHPR(RegNum)
OMR::Z	RealRegister	isPseudoRealReg(RegNum)
OMR::Z	RealRegister	isRealReg(RegNum)
OMR::Z	RealRegister	isVRF(RegNum)
OMR::Z	RealRegister	setBaseRegisterField(uint32_t *,RegNum)
OMR::Z	RealRegister	setIndexRegisterField(uint32_t *,RegNum)
OMR::Z	RealRegister	setRegister1Field(uint32_t *,RegNum)
OMR::Z	RealRegister	setRegister2Field(uint32_t *,RegNum)
OMR::Z	RealRegister	setRegister3Field(uint32_t *,RegNum)
OMR::Z	RealRegister	setRegister4Field(uint32_t *,RegNum)
OMR::Z	RealRegister	setRegisterField(uint32_t *,int32_t,RegNum)
OMR::Z	RealRegister	setRegisterField(uint32_t *,RegNum)
OMR::Z	RealRegister	setRegisterRXBField(uint32_t *,RegNum,int)
OMR::Z	Register	FlattenRegisterPairs(TR_Queue<TR::Register> *)
OMR::Z	Register	Register(uint32_t)
OMR::Z	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR::Z	Register	Register(enum TR_RegisterKinds)
OMR::Z	Register	Register(const class OMR::Z::Register &)
OMR::Z	Register	Register(class OMR::Z::Register &&)
OMR::Z	Register	alreadySignExtended()
OMR::Z	Register	assignToGPR()
OMR::Z	Register	assignToHPR()
OMR::Z	Register	containsCollectedReference()
OMR::Z	Register	decFutureUseCount(ncount_t)
OMR::Z	Register	getARofArGprPair()
OMR::Z	Register	getGPRofArGprPair()
OMR::Z	Register	getInterference()
OMR::Z	Register	getLiveRegisterInfo()
OMR::Z	Register	getMemRef()
OMR::Z	Register	getOpaquePseudoRegister()
OMR::Z	Register	getPseudoRegister()
OMR::Z	Register	is64BitReg()
OMR::Z	Register	isArGprPair()
OMR::Z	Register	isDependencySet()
OMR::Z	Register	isHighWordUpgradable()
OMR::Z	Register	isNotUsedInThisBB()
OMR::Z	Register	isPendingSpillOnDef()
OMR::Z	Register	isRedefined()
OMR::Z	Register	isSpilledToHPR()
OMR::Z	Register	isUpperBitsAreDirty()
OMR::Z	Register	isUsedInMemRef()
OMR::Z	Register	isValueLiveOnExit()
OMR::Z	Register	operator=(class OMR::Z::Register &&)
OMR::Z	Register	operator=(const class OMR::Z::Register &)
OMR::Z	Register	resetAlreadySignExtended()
OMR::Z	Register	resetIsLive()
OMR::Z	Register	resetNotUsedInThisBB()
OMR::Z	Register	resetPendingSpillOnDef()
OMR::Z	Register	resetValueLiveOnExit()
OMR::Z	Register	setAlreadySignExtended()
OMR::Z	Register	setAssignToHPR(_Bool)
OMR::Z	Register	setContainsCollectedReference()
OMR::Z	Register	setDependencySet(_Bool)
OMR::Z	Register	setInterference(uint32_t)
OMR::Z	Register	setIs64BitReg(_Bool)
OMR::Z	Register	setIsNotHighWordUpgradable(_Bool)
OMR::Z	Register	setIsUpperBitsAreDirty(_Bool)
OMR::Z	Register	setIsUsedInMemRef(_Bool)
OMR::Z	Register	setLiveRegisterInfo(class TR_LiveRegisterInfo *)
OMR::Z	Register	setMemRef(TR::MemoryReference *)
OMR::Z	Register	setNotUsedInThisBB()
OMR::Z	Register	setPendingSpillOnDef()
OMR::Z	Register	setPlaceholderReg()
OMR::Z	Register	setRedefined(_Bool)
OMR::Z	Register	setSpilledToHPR(_Bool)
OMR::Z	Register	setValueLiveOnExit()
OMR::Z	Register	usesAnyRegister(TR::Register *)
OMR::Z	Register	usesRegister(TR::Register *)
OMR::Z	Register	~Register()
OMR::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR::Z	Snippet	Snippet(class OMR::Z::Snippet &&)
OMR::Z	Snippet	Snippet(const class OMR::Z::Snippet &)
OMR::Z	Snippet	generateLoadVMThreadInstruction(TR::CodeGenerator *,uint8_t *)
OMR::Z	Snippet	generatePICBinary(TR::CodeGenerator *,uint8_t *,TR::SymbolReference *)
OMR::Z	Snippet	generateRuntimeInstrumentationOnOffInstruction(TR::CodeGenerator *,uint8_t *,TR::class InstOpCode::Mnemonic,_Bool)
OMR::Z	Snippet	getCodeBaseOffset()
OMR::Z	Snippet	getIsUsed()
OMR::Z	Snippet	getKind()
OMR::Z	Snippet	getLoadVMThreadInstructionLength(TR::CodeGenerator *)
OMR::Z	Snippet	getNeedLitPoolBasePtr()
OMR::Z	Snippet	getPICBinaryLength(TR::CodeGenerator *)
OMR::Z	Snippet	getPadBytes()
OMR::Z	Snippet	getRuntimeInstrumentationOnOffInstructionLength(TR::CodeGenerator *,_Bool)
OMR::Z	Snippet	getSnippetDestAddr()
OMR::Z	Snippet	isCallSnippet()
OMR::Z	Snippet	operator=(const class OMR::Z::Snippet &)
OMR::Z	Snippet	operator=(class OMR::Z::Snippet &&)
OMR::Z	Snippet	resetNeedLitPoolBasePtr()
OMR::Z	Snippet	setCodeBaseOffset(int32_t)
OMR::Z	Snippet	setIsUsed(_Bool)
OMR::Z	Snippet	setNeedLitPoolBasePtr()
OMR::Z	Snippet	setPadBytes(int8_t)
OMR::Z	Snippet	setSnippetDestAddr(intptrj_t)
OMR::Z	Snippet	setUsedTrampoline(_Bool)
OMR::Z	Snippet	usedTrampoline()
OMR::Z	Snippet	~Snippet()
OMR::Z	TreeEvaluator	BBEndEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	BBStartEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	DAAAddressPointer(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	GlRegDepsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	NOPEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	NULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	PrefetchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	a2oEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	aRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	acmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	aconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	addToRegDep(TR::RegisterDependencyConditions *,TR::Register *,_Bool)
OMR::Z	TreeEvaluator	addrAddHelper(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	aiaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	aladdEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	aletEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	aloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	arraycmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	arraycmpEvaluatorWithPad(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	arraycmpHelper(TR::Node *,TR::CodeGenerator *,_Bool,_Bool,int32_t,TR::LabelSymbol *,TR::Node *,_Bool,_Bool,TR::class InstOpCode::S390BranchCondition *)
OMR::Z	TreeEvaluator	arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool)
OMR::Z	TreeEvaluator	arraycopyEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	arraysetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	arraytranslateAndTestEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor)
OMR::Z	TreeEvaluator	arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor)
OMR::Z	TreeEvaluator	arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	asmEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	astoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	b2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	b2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	badILOpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	baddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	barrierFenceEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bitOpMemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bitpermuteEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	borEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	branchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bu2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bu2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bu2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	butestEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	bxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	caddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	candEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	commonButestEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	composeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	condCodeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	corEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	countReferencesInTree(TR::Node *,TR::Node *)
OMR::Z	TreeEvaluator	createDAACondDeps(TR::Node *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	csubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	cxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	d2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	d2cEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	d2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	d2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	d2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	d2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	daddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dbits2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dceilEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpgEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmplEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ddivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	deallocaEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dexpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dfloorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	directCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dnintEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dsqrtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dternaryEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dualMulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dualMulHelper32(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	evaluateLengthMinusOneForMemoryCmp(TR::Node *,TR::CodeGenerator *,_Bool,_Bool &)
OMR::Z	TreeEvaluator	evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	evaluateRegLoads(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	exceptionRangeFenceEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	f2bEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	f2cEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	f2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	f2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	f2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	f2sEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	faddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fbits2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fceilEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpgEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmplEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fenceEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fexpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ffloorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	floadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	floatRemHelper(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	floorCeilEvaluator(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int8_t)
OMR::Z	TreeEvaluator	fmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fnintEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	foldLookup(TR::CodeGenerator *,TR::Node *)
OMR::Z	TreeEvaluator	fremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fsqrtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	fxfrsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	genLoadForObjectHeaders(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *)
OMR::Z	TreeEvaluator	genLoadForObjectHeadersMasked(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *)
OMR::Z	TreeEvaluator	genNullTestForCompressedPointers(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::LabelSymbol *&)
OMR::Z	TreeEvaluator	getBranchConditionFromCompareOpCode(TR::ILOpCodes)
OMR::Z	TreeEvaluator	getCompareOpFromNode(TR::CodeGenerator *,TR::Node *)
OMR::Z	TreeEvaluator	getConditionCodeOrFold(TR::Node *,TR::CodeGenerator *,enum TR_FoldType,TR::Node *)
OMR::Z	TreeEvaluator	getConditionCodeOrFoldIf(TR::Node *,TR::CodeGenerator *,_Bool,TR::Node *)
OMR::Z	TreeEvaluator	getpmEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	getstackEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	getvelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	gotoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	i2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	i2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iabsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ibits2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ibranchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	icmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	icmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	icmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	icmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	icmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	icmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	idcallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	idivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	idloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	idstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifFoldingHelper(TR::Node *,TR::CodeGenerator *,_Bool &)
OMR::Z	TreeEvaluator	ifacmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifacmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifbcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifbcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifbcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifbcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifbcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifcallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifdcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iffcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ificmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ificmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ificmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ificmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ificmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iflcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iflcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iflcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iflcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iflcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iflcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifscmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifscmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifscmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifscmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifscmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifsucmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifsucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifsucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifsucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifsucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ifxcmpoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	igotoEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ilstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	imulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	indirectCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	inegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	inlineIfArraycmpEvaluator(TR::Node *,TR::CodeGenerator *,_Bool &)
OMR::Z	TreeEvaluator	inlineIfBifEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *)
OMR::Z	TreeEvaluator	inlineIfButestEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *)
OMR::Z	TreeEvaluator	inlineIfTestDataClassHelper(TR::Node *,TR::CodeGenerator *,_Bool &)
OMR::Z	TreeEvaluator	inlineVectorBinaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Z	TreeEvaluator	inlineVectorSetElementHelper(TR::Node *,TR::CodeGenerator *,int8_t,_Bool)
OMR::Z	TreeEvaluator	inlineVectorTernaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Z	TreeEvaluator	inlineVectorUnaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic)
OMR::Z	TreeEvaluator	integerBitCount(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	integerHighestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	integerLowestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	integerNumberOfLeadingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	integerNumberOfTrailingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	integerRolEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	isCandidateForBIFEvaluation(TR::Node *)
OMR::Z	TreeEvaluator	isCandidateForButestEvaluation(TR::Node *)
OMR::Z	TreeEvaluator	isCandidateForCompareEvaluation(TR::Node *)
OMR::Z	TreeEvaluator	isSingleRefUnevalAndCompareOrBu2iOverCompare(TR::Node *)
OMR::Z	TreeEvaluator	ishlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ishrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	istoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	isubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iu2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iucmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	iushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ixfrsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ixorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	l2aEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	l2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	l2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	labsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	laddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	landEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lbits2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lcmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ldivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	libmFuncEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	libxloptFuncEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lmulhEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	loadAutoOffsetEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	loadaddrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	long2StringEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	longBitCount(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	longHighestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	longLowestOneBit(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	longNumberOfLeadingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	longNumberOfTrailingZeros(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lookupEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lucmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lxfrsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	lxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	mapBranchConditionToLOCRCondition(TR::class InstOpCode::S390BranchCondition)
OMR::Z	TreeEvaluator	maxEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	mbranchEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	memcmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	minEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	mulhEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	o2xEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	passThroughEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	performCall(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	primitiveArraycopyEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *,TR::Node *)
OMR::Z	TreeEvaluator	referenceArraycopyEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *)
OMR::Z	TreeEvaluator	resolveAndNULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	returnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	riloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ristoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	rlloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	rlstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	rsloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	rsstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	s2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	s2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	saddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	scmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	scmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	scmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	scmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	scmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	setpmEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	smulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	snegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sshlEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sshrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	ssubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	su2dEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	su2fEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	su2iEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	su2lEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sucmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sucmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sucmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sucmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sucmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sushrEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	sxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	tableEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	tableEvaluatorCaseLabelHelper(TR::Node *,TR::CodeGenerator *,enum tableKind,int32_t,TR::Register *,TR::Register *,TR::Register *)
OMR::Z	TreeEvaluator	ternaryEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	treeContainsAllOtherUsesForNode(TR::Node *,TR::Node *)
OMR::Z	TreeEvaluator	treetopEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	trtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	tryToReplaceLongAndWithRotateInstruction(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	tryToReuseInputVectorRegs(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vDivOrRemHelper(TR::Node *,TR::CodeGenerator *,_Bool)
OMR::Z	TreeEvaluator	vRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vcomEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vconstEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vdecEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vdivEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vdmaddEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vdremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vectorElementShiftHelper(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vincEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vl2vdEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vloadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vmulEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vnegEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vrandEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vremEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vreturnEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vselEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vsetelemEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vsplatsEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vstoreEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vsubEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	vxorEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	x2oEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Z	TreeEvaluator	z990PopCountHelper(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *)
TestCompiler::Z	CodeGenerator	CodeGenerator()
TestCompiler::Z	CodeGenerator	CodeGenerator(class TestCompiler::Z::CodeGenerator &&)
TestCompiler::Z	CodeGenerator	CodeGenerator(const class TestCompiler::Z::CodeGenerator &)
TestCompiler::Z	CodeGenerator	operator=(const class TestCompiler::Z::CodeGenerator &)
TestCompiler::Z	CodeGenerator	operator=(class TestCompiler::Z::CodeGenerator &&)
TestCompiler::Z	CodeGenerator	~CodeGenerator()
OMR::Z	Linkage	Linkage(class OMR::Z::Linkage &&)
OMR::Z	Linkage	Linkage(const class OMR::Z::Linkage &)
OMR::Z	Linkage	Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions)
OMR::Z	Linkage	addFECustomizedReturnRegDependency(int64_t,TR::Linkage *,TR::DataType,TR::RegisterDependencyConditions *)
OMR::Z	Linkage	addSpecialRegDepsForBuildArgs(TR::Node *,TR::RegisterDependencyConditions *,int32_t &,int32_t)
OMR::Z	Linkage	alreadySaved(TR::class RealRegister::RegNum)
OMR::Z	Linkage	buildArgs(TR::Node *,TR::RegisterDependencyConditions *,_Bool,int64_t,TR::Register *&,_Bool)
OMR::Z	Linkage	buildDirectDispatch(TR::Node *)
OMR::Z	Linkage	buildIndirectDispatch(TR::Node *)
OMR::Z	Linkage	buildNativeDispatch(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,_Bool,_Bool,_Bool)
OMR::Z	Linkage	buildNativeDispatch(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType)
OMR::Z	Linkage	buildSystemLinkageDispatch(TR::Node *)
OMR::Z	Linkage	buildVirtualDispatch(TR::Node *,TR::RegisterDependencyConditions *,TR::Register *,uint32_t)
OMR::Z	Linkage	cachedCRENTSymRef()
OMR::Z	Linkage	cachedStaticSymRef()
OMR::Z	Linkage	canDataTypeBePassedByReference(TR::DataType)
OMR::Z	Linkage	cg()
OMR::Z	Linkage	checkPreservedRegisterUsage(_Bool *,int32_t)
OMR::Z	Linkage	clearCachedStackRegisterForOutgoingArguments(_Bool)
OMR::Z	Linkage	clearIntegerArgumentAddToPost(TR::class RealRegister::RegNum)
OMR::Z	Linkage	clearProperty(uint32_t)
OMR::Z	Linkage	comp()
OMR::Z	Linkage	computePreservedRegMask()
OMR::Z	Linkage	copyArgRegister(TR::Node *,TR::Node *,TR::Register *)
OMR::Z	Linkage	createEpilogue(TR::Instruction *)
OMR::Z	Linkage	createPrologue(TR::Instruction *)
OMR::Z	Linkage	doNotKillSpecialRegsForBuildArgs(TR::Linkage *,_Bool,int64_t &)
OMR::Z	Linkage	fe()
OMR::Z	Linkage	findPossibleCallInstruction(TR::Instruction *&,int32_t &,TR::Instruction **,_Bool *,int32_t)
OMR::Z	Linkage	generateDispatchReturnLable(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *&,TR::Register *,_Bool,TR::Node *)
OMR::Z	Linkage	getARWithZeroValue()
OMR::Z	Linkage	getCAAPointerRegister()
OMR::Z	Linkage	getDoubleReturnRegister()
OMR::Z	Linkage	getEntryPointRealRegister()
OMR::Z	Linkage	getEntryPointRegister()
OMR::Z	Linkage	getEnvironmentPointerRegister()
OMR::Z	Linkage	getExplicitLinkageType()
OMR::Z	Linkage	getExtCodeBaseRealRegister()
OMR::Z	Linkage	getExtCodeBaseRegister()
OMR::Z	Linkage	getFirstMaskedBit(int16_t,int32_t,int32_t)
OMR::Z	Linkage	getFirstMaskedBit(int16_t)
OMR::Z	Linkage	getFirstPrologueInstruction()
OMR::Z	Linkage	getFirstRestoredRegister(int32_t,int32_t)
OMR::Z	Linkage	getFirstSavedRegister(int32_t,int32_t)
OMR::Z	Linkage	getFloatArgument(TR::class RealRegister::RegNum)
OMR::Z	Linkage	getFloatArgumentRegister(uint32_t)
OMR::Z	Linkage	getFloatReturn(TR::class RealRegister::RegNum)
OMR::Z	Linkage	getFloatReturnRegister()
OMR::Z	Linkage	getFormalParameterGlobalRegister(TR::ParameterSymbol *)
OMR::Z	Linkage	getFrameType()
OMR::Z	Linkage	getIntegerArgument(TR::class RealRegister::RegNum)
OMR::Z	Linkage	getIntegerArgumentAddToPost(TR::class RealRegister::RegNum)
OMR::Z	Linkage	getIntegerArgumentRegister(uint32_t)
OMR::Z	Linkage	getIntegerReturn(TR::class RealRegister::RegNum)
OMR::Z	Linkage	getIntegerReturnRegister()
OMR::Z	Linkage	getIsLeafRoutine()
OMR::Z	Linkage	getJ9MethodArgumentRegister()
OMR::Z	Linkage	getJ9MethodArgumentRegisterRealRegister()
OMR::Z	Linkage	getLargestOutgoingArgumentAreaSize()
OMR::Z	Linkage	getLargestOutgoingArgumentAreaSize64()
OMR::Z	Linkage	getLastMaskedBit(int16_t,int32_t,int32_t)
OMR::Z	Linkage	getLastMaskedBit(int16_t)
OMR::Z	Linkage	getLastPrologueInstruction()
OMR::Z	Linkage	getLastRestoredRegister(int32_t,int32_t)
OMR::Z	Linkage	getLastSavedRegister(int32_t,int32_t)
OMR::Z	Linkage	getLengthStartForSSInstruction()
OMR::Z	Linkage	getLitPoolRealRegister()
OMR::Z	Linkage	getLitPoolRegister()
OMR::Z	Linkage	getLoadOpCodeForLinkage(TR::Node *)
OMR::Z	Linkage	getLongDoubleReturnRegister0()
OMR::Z	Linkage	getLongDoubleReturnRegister2()
OMR::Z	Linkage	getLongDoubleReturnRegister4()
OMR::Z	Linkage	getLongDoubleReturnRegister6()
OMR::Z	Linkage	getLongHighArgumentRegister(uint32_t)
OMR::Z	Linkage	getLongHighReturnRegister()
OMR::Z	Linkage	getLongLowReturnRegister()
OMR::Z	Linkage	getLongReturnRegister()
OMR::Z	Linkage	getMethodMetaDataRealRegister()
OMR::Z	Linkage	getMethodMetaDataRegister()
OMR::Z	Linkage	getNormalStackPointerRealRegister()
OMR::Z	Linkage	getNormalStackPointerRegister()
OMR::Z	Linkage	getNumFloatArgumentRegisters()
OMR::Z	Linkage	getNumIntegerArgumentRegisters()
OMR::Z	Linkage	getNumSpecialArgumentRegisters()
OMR::Z	Linkage	getNumStackPointerRegisters()
OMR::Z	Linkage	getNumVectorArgumentRegisters()
OMR::Z	Linkage	getNumberOfDependencyGPRegisters()
OMR::Z	Linkage	getOffsetToFirstLocal()
OMR::Z	Linkage	getOffsetToFirstParm()
OMR::Z	Linkage	getOffsetToLongDispSlot()
OMR::Z	Linkage	getOffsetToRegSaveArea()
OMR::Z	Linkage	getOpCodeForLinkage(TR::Node *,_Bool,_Bool)
OMR::Z	Linkage	getOutgoingParameterBlockSize()
OMR::Z	Linkage	getParentDSAPointerRegister()
OMR::Z	Linkage	getPreserved(TR::class RealRegister::RegNum)
OMR::Z	Linkage	getPrivateStaticBaseRealRegister()
OMR::Z	Linkage	getPrivateStaticBaseRegister()
OMR::Z	Linkage	getProperties()
OMR::Z	Linkage	getRaContextRestoreNeeded()
OMR::Z	Linkage	getRaContextSaveNeeded()
OMR::Z	Linkage	getRegCopyOpCodeForLinkage(TR::Node *)
OMR::Z	Linkage	getRegisterFlags()
OMR::Z	Linkage	getRegisterSaveSize()
OMR::Z	Linkage	getReturnAddressRealRegister()
OMR::Z	Linkage	getReturnAddressRegister()
OMR::Z	Linkage	getRightToLeft()
OMR::Z	Linkage	getS390RealRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	getSpecialArgumentRegister(uint32_t)
OMR::Z	Linkage	getStackPointerRealRegister()
OMR::Z	Linkage	getStackPointerRealRegister(uint32_t)
OMR::Z	Linkage	getStackPointerRegister()
OMR::Z	Linkage	getStackPointerRegister(uint32_t)
OMR::Z	Linkage	getStackRegisterForOutgoingArguments(TR::Node *,TR::RegisterDependencyConditions *)
OMR::Z	Linkage	getStackSizeCheckNeeded()
OMR::Z	Linkage	getStaticBaseRealRegister()
OMR::Z	Linkage	getStaticBaseRegister()
OMR::Z	Linkage	getStoreOpCodeForLinkage(TR::Node *)
OMR::Z	Linkage	getStrictestAutoSymbolAlignment()
OMR::Z	Linkage	getVTableIndexArgumentRegister()
OMR::Z	Linkage	getVTableIndexArgumentRegisterRealRegister()
OMR::Z	Linkage	getVectorArgumentRegister(uint32_t)
OMR::Z	Linkage	getVectorReturnRegister()
OMR::Z	Linkage	hasToBeOnStack(TR::ParameterSymbol *)
OMR::Z	Linkage	initS390RealRegisterLinkage()
OMR::Z	Linkage	isAggregateReturnedInIntRegisters(int32_t)
OMR::Z	Linkage	isAggregateReturnedInIntRegistersAndMemory(int32_t)
OMR::Z	Linkage	isAggregateReturnedInRegistersAndMemoryCall(TR::Node *)
OMR::Z	Linkage	isAggregateReturnedInRegistersCall(TR::Node *)
OMR::Z	Linkage	isAggregatesPassedInParmRegs()
OMR::Z	Linkage	isAggregatesPassedOnParmStack()
OMR::Z	Linkage	isAggregatesReturnedInRegs()
OMR::Z	Linkage	isAllParmsOnStack()
OMR::Z	Linkage	isAutoMappedBeforeAdjustedArea(TR::AutomaticSymbol *)
OMR::Z	Linkage	isCAASpecialArgumentRegister(int8_t)
OMR::Z	Linkage	isEnvironmentSpecialArgumentRegister(int8_t)
OMR::Z	Linkage	isFastLinkLinkageType()
OMR::Z	Linkage	isFirstParmAtFixedOffset()
OMR::Z	Linkage	isFloatParmDescriptors()
OMR::Z	Linkage	isForceSaveIncomingParameters()
OMR::Z	Linkage	isLongDoublePassedOnStorage()
OMR::Z	Linkage	isLongDoubleReturnedOnStorage()
OMR::Z	Linkage	isNeedsWidening()
OMR::Z	Linkage	isOSLinkageType()
OMR::Z	Linkage	isPadFloatParms()
OMR::Z	Linkage	isParentDSASpecialArgumentRegister(int8_t)
OMR::Z	Linkage	isParmBlockRegister()
OMR::Z	Linkage	isParmsInReverseOrder()
OMR::Z	Linkage	isParmsMappedBeforeAutos()
OMR::Z	Linkage	isSkipGPRsForFloatParms()
OMR::Z	Linkage	isSmallIntParmsAlignedRight()
OMR::Z	Linkage	isSpecialArgumentRegister(int8_t)
OMR::Z	Linkage	isSpecialArgumentRegisters()
OMR::Z	Linkage	isSplitLongParm()
OMR::Z	Linkage	isSymbolPassedByReference(TR::Symbol *)
OMR::Z	Linkage	isTwoStackSlotsForLongAndDouble()
OMR::Z	Linkage	isXPLinkLinkageType()
OMR::Z	Linkage	isZLinuxLinkageType()
OMR::Z	Linkage	killAndAssignRegister(int64_t,TR::RegisterDependencyConditions *,TR::Register **,TR::class RealRegister::RegNum,TR::CodeGenerator *,_Bool,_Bool)
OMR::Z	Linkage	killAndAssignRegister(int64_t,TR::RegisterDependencyConditions *,TR::Register **,TR::RealRegister *,TR::CodeGenerator *,_Bool,_Bool)
OMR::Z	Linkage	loadIntArgumentsFromStack(TR::Node *,TR::RegisterDependencyConditions *,TR::DataType,int32_t,int32_t,int32_t,TR::Register *)
OMR::Z	Linkage	loadUpArguments(TR::Instruction *)
OMR::Z	Linkage	lockAR(int32_t)
OMR::Z	Linkage	lockAccessRegisters()
OMR::Z	Linkage	lockGPR(int32_t)
OMR::Z	Linkage	lockRegister(TR::RealRegister *)
OMR::Z	Linkage	mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &)
OMR::Z	Linkage	mapStack(TR::ResolvedMethodSymbol *)
OMR::Z	Linkage	markPreservedRegsInBlock(int32_t)
OMR::Z	Linkage	markPreservedRegsInDep(TR::RegisterDependencyConditions *)
OMR::Z	Linkage	needsAlignment(TR::DataType,TR::CodeGenerator *)
OMR::Z	Linkage	numArgumentRegisters(enum TR_RegisterKinds)
OMR::Z	Linkage	operator=(class OMR::Z::Linkage &&)
OMR::Z	Linkage	operator=(const class OMR::Z::Linkage &)
OMR::Z	Linkage	performCallNativeFunctionForLinkage(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::Register *&,TR::SystemLinkage *,TR::RegisterDependencyConditions *&,TR::Register *,TR::Register *,_Bool)
OMR::Z	Linkage	pushAggregateArg(TR::Node *,TR::Node *,int32_t,int32_t,int32_t *,TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	Linkage	pushArg(TR::Node *,TR::Node *,int32_t,int32_t,int32_t *,TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	Linkage	pushJNIReferenceArg(TR::Node *,TR::Node *,int32_t,int32_t,int32_t *,TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	Linkage	pushLongArg32(TR::Node *,TR::Node *,int32_t,int32_t,int32_t *,TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	Linkage	pushVectorArg(TR::Node *,TR::Node *,int32_t,int32_t,int32_t *,TR::RegisterDependencyConditions *,TR::Register *)
OMR::Z	Linkage	removeOSCOnSavedArgument(TR::Instruction *,TR::Register *,int)
OMR::Z	Linkage	replaceCallWithJumpInstruction(TR::Instruction *)
OMR::Z	Linkage	resetRegisterFlags(TR::class RealRegister::RegNum,int32_t)
OMR::Z	Linkage	restorePreservedRegs(TR::class RealRegister::RegNum,TR::class RealRegister::RegNum,int32_t,TR::Instruction *,TR::Node *,TR::RealRegister *,TR::MemoryReference *,TR::class RealRegister::RegNum)
OMR::Z	Linkage	saveArguments(void *,_Bool,_Bool,int32_t,List<TR::ParameterSymbol> *)
OMR::Z	Linkage	setDoubleReturnRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setEntryPointRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setExplicitLinkageType(enum TR_S390LinkageConventions)
OMR::Z	Linkage	setExtCodeBaseRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setFirstPrologueInstruction(TR::Instruction *)
OMR::Z	Linkage	setFloatArgumentRegister(uint32_t,TR::class RealRegister::RegNum)
OMR::Z	Linkage	setFloatReturnRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setFrameType(enum FrameType)
OMR::Z	Linkage	setIntegerArgumentRegister(uint32_t,TR::class RealRegister::RegNum)
OMR::Z	Linkage	setIntegerReturnRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setJ9MethodArgumentRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLargestOutgoingArgumentAreaSize(int32_t)
OMR::Z	Linkage	setLargestOutgoingArgumentAreaSize64(int32_t)
OMR::Z	Linkage	setLastPrologueInstruction(TR::Instruction *)
OMR::Z	Linkage	setLitPoolRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLongDoubleReturnRegister0(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLongDoubleReturnRegister2(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLongDoubleReturnRegister4(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLongDoubleReturnRegister6(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLongHighReturnRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLongLowReturnRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setLongReturnRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setNumFloatArgumentRegisters(uint8_t)
OMR::Z	Linkage	setNumIntegerArgumentRegisters(uint8_t)
OMR::Z	Linkage	setNumSpecialArgumentRegisters(uint8_t)
OMR::Z	Linkage	setNumVectorArgumentRegisters(uint8_t)
OMR::Z	Linkage	setNumberOfDependencyGPRegisters(int32_t)
OMR::Z	Linkage	setOffsetToFirstLocal(uint32_t)
OMR::Z	Linkage	setOffsetToFirstParm(int32_t)
OMR::Z	Linkage	setOffsetToLongDispSlot(int32_t)
OMR::Z	Linkage	setOffsetToRegSaveArea(int32_t)
OMR::Z	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &)
OMR::Z	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *)
OMR::Z	Linkage	setPrivateStaticBaseRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setProperties(uint32_t)
OMR::Z	Linkage	setProperty(uint32_t)
OMR::Z	Linkage	setRaContextRestoreNeeded(_Bool)
OMR::Z	Linkage	setRaContextSaveNeeded(_Bool)
OMR::Z	Linkage	setRegisterFlag(TR::class RealRegister::RegNum,int32_t)
OMR::Z	Linkage	setRegisterFlags(TR::class RealRegister::RegNum,int32_t)
OMR::Z	Linkage	setReturnAddressRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setSpecialArgumentRegister(uint32_t,TR::class RealRegister::RegNum)
OMR::Z	Linkage	setStackPointerRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setStackPointerRegister(uint32_t,TR::class RealRegister::RegNum)
OMR::Z	Linkage	setStackSizeCheckNeeded(_Bool)
OMR::Z	Linkage	setStaticBaseRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setStrictestAutoSymbolAlignment(int32_t,_Bool)
OMR::Z	Linkage	setUsedRegisters(TR::Instruction *,_Bool *,int32_t)
OMR::Z	Linkage	setVTableIndexArgumentRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setVectorArgumentRegister(uint32_t,TR::class RealRegister::RegNum)
OMR::Z	Linkage	setVectorReturnRegister(TR::class RealRegister::RegNum)
OMR::Z	Linkage	setupBuildArgForLinkage(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *,_Bool,_Bool,int64_t &,TR::Node *,_Bool,TR::SystemLinkage *)
OMR::Z	Linkage	setupLiteralPoolRegister(TR::Snippet *)
OMR::Z	Linkage	setupRegisterDepForLinkage(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,int64_t &,TR::SystemLinkage *,TR::Node *&,_Bool &,TR::Register **,TR::Register *&)
OMR::Z	Linkage	shouldExcludeAutoFromMapper(TR::AutomaticSymbol *)
OMR::Z	Linkage	storeArgumentOnStack(TR::Node *,TR::class InstOpCode::Mnemonic,TR::Register *,int32_t *,TR::Register *)
OMR::Z	Linkage	storeExtraEnvRegForBuildArgs(TR::Node *,TR::Linkage *,TR::RegisterDependencyConditions *,_Bool,int32_t,int8_t,uint32_t &)
OMR::Z	Linkage	storeLongDoubleArgumentOnStack(TR::Node *,TR::DataType,TR::class InstOpCode::Mnemonic,TR::Register *,int32_t *,TR::Register *)
OMR::Z	Linkage	trHeapMemory()
OMR::Z	Linkage	trMemory()
OMR::Z	Linkage	trStackMemory()
OMR::Z	Linkage	unlockAR(int32_t)
OMR::Z	Linkage	unlockGPR(int32_t)
OMR::Z	Linkage	unlockRegister(TR::RealRegister *)
OMR::Z	Linkage	useCachedStaticAreaAddresses(TR::Compilation *)
OMR::Z	Linkage	~Linkage()
OMR::Z	MemoryReference	MemoryReference(class OMR::Z::MemoryReference &&)
OMR::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(const class OMR::Z::MemoryReference &)
OMR::Z	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *)
OMR::Z	MemoryReference	MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(int32_t,TR::CodeGenerator *,_Bool)
OMR::Z	MemoryReference	MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(class OMR::Z::MemoryReference &,int32_t,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *)
OMR::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *)
OMR::Z	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *)
OMR::Z	MemoryReference	ZeroBasePtr_EvaluateSubtree(TR::Node *,TR::CodeGenerator *,class OMR::Z::MemoryReference *)
OMR::Z	MemoryReference	addInstrSpecificRelocation(TR::CodeGenerator *,TR::Instruction *,int32_t,uint8_t *)
OMR::Z	MemoryReference	addToOffset(intptrj_t)
OMR::Z	MemoryReference	addToTemporaryNegativeOffset(TR::Node *,int32_t,TR::CodeGenerator *)
OMR::Z	MemoryReference	alignmentBumpMayRequire4KFixup(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	assignRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::Z	MemoryReference	blockRegisters()
OMR::Z	MemoryReference	bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *)
OMR::Z	MemoryReference	calcDisplacement(uint8_t *,TR::Instruction *,TR::CodeGenerator *)
OMR::Z	MemoryReference	canUseTargetRegAsScratchReg(TR::Instruction *)
OMR::Z	MemoryReference	consolidateRegisters(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	createLiteralPoolSnippet(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	createPatchableDataInLitpool(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::UnresolvedDataSnippet *)
OMR::Z	MemoryReference	createUnresolvedDataSnippet(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *,_Bool)
OMR::Z	MemoryReference	createUnresolvedDataSnippetForBaseNode(TR::CodeGenerator *,TR::Register *)
OMR::Z	MemoryReference	createUnresolvedDataSnippetForiaload(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *,_Bool &)
OMR::Z	MemoryReference	createUnresolvedSnippetWithNodeRegister(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *&)
OMR::Z	MemoryReference	decNodeReferenceCounts(TR::CodeGenerator *)
OMR::Z	MemoryReference	doEvaluate(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	eliminateNegativeDisplacement(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	enforce4KDisplacementLimit(TR::Node *,TR::CodeGenerator *,TR::Instruction *,_Bool,_Bool)
OMR::Z	MemoryReference	enforceDisplacementLimit(TR::Node *,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	enforceRSLFormatLimits(TR::Node *,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	enforceSSFormatLimits(TR::Node *,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	enforceVRXFormatLimits(TR::Node *,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	estimateBinaryLength(int32_t,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	forceEvaluation()
OMR::Z	MemoryReference	forceFirstTimeFolding()
OMR::Z	MemoryReference	forceFolding()
OMR::Z	MemoryReference	generateBinaryEncoding(uint8_t *,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	generateBinaryEncoding2(uint8_t *,TR::CodeGenerator *)
OMR::Z	MemoryReference	generateBinaryEncodingTouchUpForLongDisp(uint8_t *,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	getBaseNode()
OMR::Z	MemoryReference	getBaseRegister()
OMR::Z	MemoryReference	getCausesImplicitNullPointerException()
OMR::Z	MemoryReference	getCheckForLongDispSlot()
OMR::Z	MemoryReference	getConstantDataSnippet()
OMR::Z	MemoryReference	getDisp()
OMR::Z	MemoryReference	getDispAdjusted()
OMR::Z	MemoryReference	getFixedSizeForAlignment()
OMR::Z	MemoryReference	getIndexNode()
OMR::Z	MemoryReference	getIndexRegister()
OMR::Z	MemoryReference	getLeftAlignmentBump(TR::Instruction *,TR::CodeGenerator *)
OMR::Z	MemoryReference	getLeftMostByte()
OMR::Z	MemoryReference	getListingSymbolReference()
OMR::Z	MemoryReference	getLookupSwitchSnippet()
OMR::Z	MemoryReference	getMemRefUsedBefore()
OMR::Z	MemoryReference	getName()
OMR::Z	MemoryReference	getOffset()
OMR::Z	MemoryReference	getOriginalSymbolReference()
OMR::Z	MemoryReference	getPseudoLive()
OMR::Z	MemoryReference	getRightAlignmentBump(TR::Instruction *,TR::CodeGenerator *)
OMR::Z	MemoryReference	getSizeIncreaseBump(TR::Instruction *,TR::CodeGenerator *)
OMR::Z	MemoryReference	getSnippet()
OMR::Z	MemoryReference	getStorageReference()
OMR::Z	MemoryReference	getSymbolReference()
OMR::Z	MemoryReference	getTargetAddressSnippet()
OMR::Z	MemoryReference	getTargetSnippetInstruction()
OMR::Z	MemoryReference	getTotalSizeForAlignment()
OMR::Z	MemoryReference	getUnresolvedSnippet()
OMR::Z	MemoryReference	handleLargeOffset(TR::Node *,TR::MemoryReference *,TR::Register *,TR::CodeGenerator *,TR::Instruction *)
OMR::Z	MemoryReference	hasTemporaryNegativeOffset()
OMR::Z	MemoryReference	ignoreNegativeOffset()
OMR::Z	MemoryReference	initSnippetPointers(TR::Snippet *,TR::CodeGenerator *)
OMR::Z	MemoryReference	is2ndMemRef()
OMR::Z	MemoryReference	isAdjustedForLongDisplacement()
OMR::Z	MemoryReference	isAligned()
OMR::Z	MemoryReference	isBucketBaseRegMemRef()
OMR::Z	MemoryReference	isConstantDataSnippet()
OMR::Z	MemoryReference	isExposedConstantAddressing()
OMR::Z	MemoryReference	isLookupSwitchSnippet()
OMR::Z	MemoryReference	isMemRefMustNotSpill()
OMR::Z	MemoryReference	isOriginalSymRefForAliasingOnly()
OMR::Z	MemoryReference	isTargetAddressSnippet()
OMR::Z	MemoryReference	isUnresolvedDataSnippet()
OMR::Z	MemoryReference	jitPersistentAlloc(size_t)
OMR::Z	MemoryReference	jitPersistentFree(void *)
OMR::Z	MemoryReference	leftAlignMemRef()
OMR::Z	MemoryReference	markAndAdjustForLongDisplacementIfNeeded(TR::Node *,TR::CodeGenerator *,TR::Instruction *,_Bool *)
OMR::Z	MemoryReference	needsAdjustDisp(TR::Instruction *,class OMR::Z::MemoryReference *,TR::CodeGenerator *)
OMR::Z	MemoryReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator delete(void *,size_t)
OMR::Z	MemoryReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR::Z	MemoryReference	operator delete(void *,TR::Region &)
OMR::Z	MemoryReference	operator delete[](void *,TR::Region &)
OMR::Z	MemoryReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR::Z	MemoryReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator new(size_t,TR_ArenaAllocator *)
OMR::Z	MemoryReference	operator new(size_t,class TR_PersistentMemory *)
OMR::Z	MemoryReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::Z	MemoryReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR::Z	MemoryReference	operator new(size_t,TR::Region &)
OMR::Z	MemoryReference	operator new[](size_t,TR::Region &)
OMR::Z	MemoryReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR::Z	MemoryReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::Z	MemoryReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::Z	MemoryReference	operator new[](size_t,class TR_PersistentMemory *)
OMR::Z	MemoryReference	parmRegister(TR::ParameterSymbol *,TR::CodeGenerator *)
OMR::Z	MemoryReference	populateAddTree(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	populateAloadTree(TR::Node *,TR::CodeGenerator *,_Bool)
OMR::Z	MemoryReference	populateLoadAddrTree(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	populateMemoryReference(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	populateShiftLeftTree(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	populateThroughEvaluation(TR::Node *,TR::CodeGenerator *)
OMR::Z	MemoryReference	propagateAlignmentInfo(class OMR::Z::MemoryReference *)
OMR::Z	MemoryReference	refsRegister(TR::Register *)
OMR::Z	MemoryReference	resetForceFirstTimeFolding()
OMR::Z	MemoryReference	resetIs2ndMemRef()
OMR::Z	MemoryReference	resetLeftAlignMemRef()
OMR::Z	MemoryReference	resetMemRefUsedBefore()
OMR::Z	MemoryReference	resetRightAlignMemRef()
OMR::Z	MemoryReference	rightAlignMemRef()
OMR::Z	MemoryReference	separateIndexRegister(TR::Node *,TR::CodeGenerator *,_Bool,TR::Instruction *,_Bool)
OMR::Z	MemoryReference	setAdjustedForLongDisplacement()
OMR::Z	MemoryReference	setBaseNode(TR::Node *)
OMR::Z	MemoryReference	setBaseRegister(TR::Register *,TR::CodeGenerator *)
OMR::Z	MemoryReference	setBucketBaseRegMemRef()
OMR::Z	MemoryReference	setCausesImplicitNullPointerException()
OMR::Z	MemoryReference	setCheckForLongDispSlot()
OMR::Z	MemoryReference	setConstantDataSnippet()
OMR::Z	MemoryReference	setConstantDataSnippet(TR::S390ConstantDataSnippet *)
OMR::Z	MemoryReference	setCreatedDuringInstructionSelection()
OMR::Z	MemoryReference	setDisp(int32_t)
OMR::Z	MemoryReference	setDispAdjusted()
OMR::Z	MemoryReference	setFixedSizeForAlignment(int32_t)
OMR::Z	MemoryReference	setForceEvaluation()
OMR::Z	MemoryReference	setForceFirstTimeFolding()
OMR::Z	MemoryReference	setForceFolding()
OMR::Z	MemoryReference	setForceFoldingIfAdvantageous(TR::CodeGenerator *,TR::Node *)
OMR::Z	MemoryReference	setHasTemporaryNegativeOffset()
OMR::Z	MemoryReference	setIndexNode(TR::Node *)
OMR::Z	MemoryReference	setIndexRegister(TR::Register *)
OMR::Z	MemoryReference	setIs2ndMemRef()
OMR::Z	MemoryReference	setIsExposedConstantAddressing()
OMR::Z	MemoryReference	setIsOriginalSymRefForAliasingOnly()
OMR::Z	MemoryReference	setLeftAlignMemRef(int32_t)
OMR::Z	MemoryReference	setLeftMostByte(int32_t)
OMR::Z	MemoryReference	setListingSymbolReference(TR::SymbolReference *)
OMR::Z	MemoryReference	setLookupSwitchSnippet()
OMR::Z	MemoryReference	setLookupSwitchSnippet(TR::S390LookupSwitchSnippet *)
OMR::Z	MemoryReference	setMemRefAndGetUnresolvedData(TR::Snippet *&)
OMR::Z	MemoryReference	setMemRefMustNotSpill()
OMR::Z	MemoryReference	setMemRefUsedBefore()
OMR::Z	MemoryReference	setOffset(intptrj_t)
OMR::Z	MemoryReference	setOriginalSymbolReference(TR::SymbolReference *,TR::CodeGenerator *)
OMR::Z	MemoryReference	setPseudoLive()
OMR::Z	MemoryReference	setRightAlignMemRef()
OMR::Z	MemoryReference	setStorageReference(class TR_StorageReference *)
OMR::Z	MemoryReference	setSymbolReference(TR::SymbolReference *)
OMR::Z	MemoryReference	setTargetAddressSnippet()
OMR::Z	MemoryReference	setTargetAddressSnippet(TR::S390TargetAddressSnippet *)
OMR::Z	MemoryReference	setTargetSnippetInstruction(TR::Instruction *)
OMR::Z	MemoryReference	setUnresolvedDataSnippet()
OMR::Z	MemoryReference	setUnresolvedSnippet(TR::UnresolvedDataSnippet *)
OMR::Z	MemoryReference	setupCausesImplicitNullPointerException(TR::CodeGenerator *)
OMR::Z	MemoryReference	setupCheckForLongDispFlag(TR::CodeGenerator *)
OMR::Z	MemoryReference	shouldLabelForRAS(TR::SymbolReference *,TR::CodeGenerator *)
OMR::Z	MemoryReference	stopUsingMemRefRegister(TR::CodeGenerator *)
OMR::Z	MemoryReference	swapBaseRegister(TR::Register *,TR::CodeGenerator *)
OMR::Z	MemoryReference	symRefHasTemporaryNegativeOffset()
OMR::Z	MemoryReference	tryBaseIndexDispl(TR::CodeGenerator *,TR::Node *,TR::Node *)
OMR::Z	MemoryReference	tryForceFolding(TR::Node *,TR::CodeGenerator *,class TR_StorageReference *,TR::SymbolReference *&,TR::Symbol *&,List<TR::Node> &)
OMR::Z	MemoryReference	typeNeedsAlignment(TR::Node *)
OMR::Z	MemoryReference	unblockRegisters()
OMR::Z	MemoryReference	usesRegister(TR::Register *)
OMR::Z	MemoryReference	wasCreatedDuringInstructionSelection()
OMR::Z	MemoryReference	~MemoryReference()
OMR::Z	RegisterPair	RegisterPair(TR::Register *,TR::Register *)
OMR::Z	RegisterPair	RegisterPair(enum TR_RegisterKinds)
OMR::Z	RegisterPair	RegisterPair()
OMR::Z	RegisterPair	RegisterPair(const class OMR::Z::RegisterPair &)
OMR::Z	RegisterPair	RegisterPair(class OMR::Z::RegisterPair &&)
OMR::Z	RegisterPair	operator=(const class OMR::Z::RegisterPair &)
OMR::Z	RegisterPair	operator=(class OMR::Z::RegisterPair &&)
OMR::Z	RegisterPair	setHighOrder(TR::Register *,TR::CodeGenerator *)
OMR::Z	RegisterPair	setLowOrder(TR::Register *,TR::CodeGenerator *)
OMR::Z	RegisterPair	~RegisterPair()
OMR::Z	RegisterIterator	RegisterIterator(class OMR::Z::RegisterIterator &&)
OMR::Z	RegisterIterator	RegisterIterator(const class OMR::Z::RegisterIterator &)
OMR::Z	RegisterIterator	RegisterIterator(TR::Machine *,enum TR_RegisterKinds)
OMR::Z	RegisterIterator	getCurrent()
OMR::Z	RegisterIterator	getFirst()
OMR::Z	RegisterIterator	getNext()
OMR::Z	RegisterIterator	~RegisterIterator()
J9	ArithEnv	ArithEnv()
J9	ArithEnv	ArithEnv(class J9::ArithEnv &&)
J9	ArithEnv	ArithEnv(const class J9::ArithEnv &)
J9	ArithEnv	doubleAddDouble(double,double)
J9	ArithEnv	doubleDivideDouble(double,double)
J9	ArithEnv	doubleMultiplyDouble(double,double)
J9	ArithEnv	doubleNegate(double)
J9	ArithEnv	doubleRemainderDouble(double,double)
J9	ArithEnv	doubleSubtractDouble(double,double)
J9	ArithEnv	doubleToFloat(double)
J9	ArithEnv	floatAddFloat(float,float)
J9	ArithEnv	floatDivideFloat(float,float)
J9	ArithEnv	floatMultiplyFloat(float,float)
J9	ArithEnv	floatNegate(float)
J9	ArithEnv	floatRemainderFloat(float,float)
J9	ArithEnv	floatSubtractFloat(float,float)
J9	ArithEnv	floatToDouble(float)
J9	ArithEnv	longDivideLong(int64_t,int64_t)
J9	ArithEnv	longMultiplyLong(int64_t,int64_t)
J9	ArithEnv	longRemainderLong(int64_t,int64_t)
J9	ArithEnv	operator=(class J9::ArithEnv &&)
J9	ArithEnv	operator=(const class J9::ArithEnv &)
J9	ArithEnv	~ArithEnv()
J9	ClassEnv	ClassEnv()
J9	ClassEnv	ClassEnv(const class J9::ClassEnv &)
J9	ClassEnv	ClassEnv(class J9::ClassEnv &&)
J9	ClassEnv	classDepthOf(class TR_OpaqueClassBlock *)
J9	ClassEnv	classFlagsValue(class TR_OpaqueClassBlock *)
J9	ClassEnv	classFromJavaLangClass(TR::Compilation *,uintptrj_t)
J9	ClassEnv	classInstanceSize(class TR_OpaqueClassBlock *)
J9	ClassEnv	classNameChars(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &)
J9	ClassEnv	classNameChars(TR::Compilation *,TR::SymbolReference *,int32_t &)
J9	ClassEnv	classObjectsMayBeCollected()
J9	ClassEnv	classSignature(TR::Compilation *,class TR_OpaqueClassBlock *,class TR_Memory *)
J9	ClassEnv	classSignature_DEPRECATED(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &,class TR_Memory *)
J9	ClassEnv	classesOnHeap()
J9	ClassEnv	convertClassOffsetToClassPtr(class TR_OpaqueClassBlock *)
J9	ClassEnv	flagValueForArrayCheck(TR::Compilation *)
J9	ClassEnv	flagValueForFinalizerCheck(TR::Compilation *)
J9	ClassEnv	flagValueForPrimitiveTypeCheck(TR::Compilation *)
J9	ClassEnv	getArrayElementWidthInBytes(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	getClassFromJavaLangClass(uintptrj_t)
J9	ClassEnv	getStringCharacter(TR::Compilation *,uintptrj_t,int32_t)
J9	ClassEnv	getStringFieldByName(TR::Compilation *,TR::SymbolReference *,TR::SymbolReference *,void *&)
J9	ClassEnv	hasFinalFieldsInClass(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	hasFinalizer(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isAbstractClass(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isAnonymousClass(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isClassArray(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isClassFinal(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isClassInitialized(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isInterfaceClass(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isPrimitiveArray(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isPrimitiveClass(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isReferenceArray(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isString(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	isString(TR::Compilation *,uintptrj_t)
J9	ClassEnv	isStringClass(uintptrj_t)
J9	ClassEnv	isStringClass(class TR_OpaqueClassBlock *)
J9	ClassEnv	jitFieldsAreSame(TR::Compilation *,class TR_ResolvedMethod *,int32_t,class TR_ResolvedMethod *,int32_t,int32_t)
J9	ClassEnv	jitStaticsAreSame(TR::Compilation *,class TR_ResolvedMethod *,int32_t,class TR_ResolvedMethod *,int32_t)
J9	ClassEnv	objectClass(TR::Compilation *,uintptrj_t)
J9	ClassEnv	operator=(class J9::ClassEnv &&)
J9	ClassEnv	operator=(const class J9::ClassEnv &)
J9	ClassEnv	persistentClassPointerFromClassPointer(TR::Compilation *,class TR_OpaqueClassBlock *)
J9	ClassEnv	romClassObjectsMayBeCollected()
J9	ClassEnv	romClassOf(class TR_OpaqueClassBlock *)
J9	ClassEnv	sameClassLoaders(TR::Compilation *,class TR_OpaqueClassBlock *,class TR_OpaqueClassBlock *)
J9	ClassEnv	vTableSlot(TR::Compilation *,class TR_OpaqueMethodBlock *,class TR_OpaqueClassBlock *)
J9	ClassEnv	~ClassEnv()
J9	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
J9	CodeGenPhase	CodeGenPhase(class J9::CodeGenPhase &&)
J9	CodeGenPhase	CodeGenPhase(const class J9::CodeGenPhase &)
J9	CodeGenPhase	getName()
J9	CodeGenPhase	getName(enum OMR::CodeGenPhase::PhaseValue)
J9	CodeGenPhase	getNumPhases()
J9	CodeGenPhase	operator=(class J9::CodeGenPhase &&)
J9	CodeGenPhase	operator=(const class J9::CodeGenPhase &)
J9	CodeGenPhase	performAllocateLinkageRegistersPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performCompressedReferenceRematerializationPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performDetectEndOfVMThreadGlobalRegisterLiveRangePhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performFoldSignCleaningIntoStorePhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performIdentifyUnneededByteConvsPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performInsertEpilogueYieldPointsPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performLateSequentialConstantStoreSimplificationPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performMoveUpArrayLengthStoresPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performPopulateOSRBufferPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	performSplitWarmAndColdBlocksPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9	CodeGenPhase	reportPhase(enum OMR::CodeGenPhase::PhaseValue)
J9	CodeGenPhase	~CodeGenPhase()
J9	CodeGenerator	CodeGenerator()
J9	CodeGenerator	CodeGenerator(class J9::CodeGenerator &)
J9	CodeGenerator	CodeGenerator(class J9::CodeGenerator &&)
J9	CodeGenerator	addProjectSpecializedPairRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
J9	CodeGenerator	addProjectSpecializedRelocation(TR::Instruction *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
J9	CodeGenerator	addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
J9	CodeGenerator	allocateLinkageRegisters()
J9	CodeGenerator	allocateVariableSizeSymRef(int32_t)
J9	CodeGenerator	allocateVariableSizeSymbol(int32_t)
J9	CodeGenerator	alwaysGeneratedSign(TR::Node *)
J9	CodeGenerator	alwaysGeneratesAKnownCleanSign(TR::Node *)
J9	CodeGenerator	alwaysGeneratesAKnownPositiveCleanSign(TR::Node *)
J9	CodeGenerator	anchorRematNodesIfNeeded(TR::Node *,TR::TreeTop *,List<TR::Node> *)
J9	CodeGenerator	buildInterpreterEntryPoint()
J9	CodeGenerator	changeParmLoadsToRegLoads(TR::Node *,TR::Node **,class TR_BitVector *,class TR_BitVector &,vcount_t)
J9	CodeGenerator	checkForUnfreedVariableSizeSymRefs()
J9	CodeGenerator	collectSymRefs(TR::Node *,class TR_BitVector *,vcount_t)
J9	CodeGenerator	compressedReferenceRematerialization()
J9	CodeGenerator	createHWPRecords()
J9	CodeGenerator	createLinkageForCompilation()
J9	CodeGenerator	createStackAtlas()
J9	CodeGenerator	detectEndOfVMThreadGlobalRegisterLiveRange(TR::Block *)
J9	CodeGenerator	doInstructionSelection()
J9	CodeGenerator	dumpInvariant(CS2::ArrayOf<class gpuParameter, TR::Allocator>::Cursor,class NVVMIRBuffer &,_Bool)
J9	CodeGenerator	dumpNVVMIR(TR::TreeTop *,TR::TreeTop *,class TR_RegionStructure *,SharedSparseBitVector *,ListBase<TR::AutomaticSymbol> *,ListBase<TR::ParameterSymbol> *,_Bool,char *&,TR::Node *&,int,_Bool *)
J9	CodeGenerator	enableAESInHardwareTransformations()
J9	CodeGenerator	fej9()
J9	CodeGenerator	findExtraParms(TR::Node *,int32_t &,class TR_SharedMemoryAnnotations *,vcount_t)
J9	CodeGenerator	foldSignCleaningIntoStore()
J9	CodeGenerator	freeAllVariableSizeSymRefs()
J9	CodeGenerator	freeVariableSizeSymRef(TR::SymbolReference *,_Bool)
J9	CodeGenerator	genSymRefStoreToArray(TR::Node *,TR::Node *,TR::Node *,TR::Node *,int32_t,TR::TreeTop *)
J9	CodeGenerator	generateCatchBlockBBStartPrologue(TR::Node *,TR::Instruction *)
J9	CodeGenerator	generateGPU()
J9	CodeGenerator	getFreeVariableSizeSymRef(int)
J9	CodeGenerator	getLiveMonitors()
J9	CodeGenerator	getMinimumNumberOfNodesBetweenMonitorsForTLE()
J9	CodeGenerator	getStackLimitOffset()
J9	CodeGenerator	getSupportsInlineStringCaseConversion()
J9	CodeGenerator	getSupportsMaxPrecisionMilliTime()
J9	CodeGenerator	handleRecognizedField(TR::Node *,class NVVMIRBuffer &)
J9	CodeGenerator	handleRecognizedMethod(TR::Node *,class NVVMIRBuffer &,TR::Compilation *)
J9	CodeGenerator	hasFixedFrameC_CallingConvention()
J9	CodeGenerator	hasSignCleans()
J9	CodeGenerator	insertEpilogueYieldPoints()
J9	CodeGenerator	isMethodInAtomicLongGroup(TR::RecognizedMethod)
J9	CodeGenerator	jitAdd32BitPicToPatchOnClassRedefinition(void *,void *,_Bool)
J9	CodeGenerator	jitAdd32BitPicToPatchOnClassUnload(void *,void *)
J9	CodeGenerator	jitAddPicToPatchOnClassRedefinition(void *,void *,_Bool)
J9	CodeGenerator	jitAddPicToPatchOnClassUnload(void *,void *)
J9	CodeGenerator	jitAddUnresolvedAddressMaterializationToPatchOnClassRedefinition(void *)
J9	CodeGenerator	lowerCompressedRefs(TR::TreeTop *,TR::Node *,vcount_t,class TR_BitVector *)
J9	CodeGenerator	lowerDualOperator(TR::Node *,int32_t,TR::TreeTop *)
J9	CodeGenerator	lowerTree(TR::Node *,TR::TreeTop *)
J9	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
J9	CodeGenerator	lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
J9	CodeGenerator	lowerTreesPreTreeTopVisit(TR::TreeTop *,vcount_t)
J9	CodeGenerator	moveUpArrayLengthStores(TR::TreeTop *)
J9	CodeGenerator	mustGenerateSwitchToInterpreterPrePrologue()
J9	CodeGenerator	needClassAndMethodPointerRelocations()
J9	CodeGenerator	needRelocationsForStatics()
J9	CodeGenerator	objectHeaderInvariant()
J9	CodeGenerator	objectLengthOffset()
J9	CodeGenerator	operator=(const class J9::CodeGenerator &)
J9	CodeGenerator	operator=(class J9::CodeGenerator &&)
J9	CodeGenerator	pendingFreeVariableSizeSymRef(TR::SymbolReference *)
J9	CodeGenerator	populateOSRBuffer()
J9	CodeGenerator	preLowerTrees()
J9	CodeGenerator	printArrayCopyNVVMIR(TR::Node *,class NVVMIRBuffer &,TR::Compilation *)
J9	CodeGenerator	printNVVMIR(class NVVMIRBuffer &,TR::Node *,class TR_RegionStructure *,class TR_BitVector *,vcount_t,class TR_SharedMemoryAnnotations *,int32_t &,TR::Node *&)
J9	CodeGenerator	processRelocations()
J9	CodeGenerator	registerAssumptions()
J9	CodeGenerator	rematerializeCompressedRefs(TR::SymbolReference *&,TR::TreeTop *,TR::Node *,int32_t,TR::Node *,vcount_t,List<TR::Node> *)
J9	CodeGenerator	setHasFixedFrameC_CallingConvention()
J9	CodeGenerator	setHasSignCleans()
J9	CodeGenerator	setLiveMonitors(class TR_BitVector *)
J9	CodeGenerator	setStackLimitOffset(uint32_t)
J9	CodeGenerator	setSupportsInlineStringCaseConversion()
J9	CodeGenerator	setSupportsMaxPrecisionMilliTime()
J9	CodeGenerator	setUpForInstructionSelection()
J9	CodeGenerator	splitWarmAndColdBlocks()
J9	CodeGenerator	supportsMethodEntryPadding()
J9	CodeGenerator	supportsUnneededLabelRemoval()
J9	CodeGenerator	swapChildrenIfNeeded(TR::Node *,char *)
J9	CodeGenerator	wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const uint8_t *)
J9	CodeGenerator	wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const TR::Node *)
J9	CodeGenerator	wantToPatchClassPointer(TR::Compilation *,const class TR_OpaqueClassBlock *,const uint8_t *)
J9	CodeGenerator	wantToPatchClassPointer(TR::Compilation *,const class TR_OpaqueClassBlock *,const char *,const void *)
J9	CodeGenerator	yankCompressedRefs(TR::TreeTop *,TR::Node *,int32_t,TR::Node *,vcount_t,vcount_t)
J9	CodeGenerator	~CodeGenerator()
J9	Compilation	Compilation(class J9::Compilation &)
J9	Compilation	Compilation(int32_t,J9VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *)
J9	Compilation	HWProfileDone()
J9	Compilation	addAOTNOPSite()
J9	Compilation	addAsMonitorAuto(TR::SymbolReference *,_Bool)
J9	Compilation	addClassForOSRRedefinition(class TR_OpaqueClassBlock *)
J9	Compilation	addHWPBCMap(TR_HWPBytecodePCToIAMap)
J9	Compilation	addHWPCallInstruction(TR::Instruction *,_Bool,TR::Instruction *)
J9	Compilation	addHWPInstruction(TR::Instruction *,TR_HWPInstructionInfo::type,void *)
J9	Compilation	addHWPReturnInstruction(TR::Instruction *)
J9	Compilation	addHWPValueProfileInstruction(TR::Instruction *)
J9	Compilation	addMonitorAuto(TR::RegisterMappedSymbol *,int32_t)
J9	Compilation	addSideEffectNOPSite()
J9	Compilation	allocateCompYieldStatsMatrix()
J9	Compilation	canAllocateInline(TR::Node *,class TR_OpaqueClassBlock *&)
J9	Compilation	canAllocateInlineClass(class TR_OpaqueClassBlock *)
J9	Compilation	canAllocateInlineOnStack(TR::Node *,class TR_OpaqueClassBlock *&)
J9	Compilation	canTransformConverterMethod(TR::RecognizedMethod)
J9	Compilation	changeOptLevel(enum TR_Hotness)
J9	Compilation	compilationShouldBeInterrupted(enum TR_CallingContext)
J9	Compilation	compileRelocatableCode()
J9	Compilation	fej9()
J9	Compilation	fej9vm()
J9	Compilation	findNullChkInfo(TR::Node *)
J9	Compilation	freeKnownObjectTable()
J9	Compilation	getAOTGuardPatchSites()
J9	Compilation	getAotMethodDataStart()
J9	Compilation	getBranchProfileInfoManager()
J9	Compilation	getCHTable()
J9	Compilation	getClassClassPointer()
J9	Compilation	getClassesForOSRRedefinition()
J9	Compilation	getContextName(enum TR_CallingContext)
J9	Compilation	getCurMethodMetadata()
J9	Compilation	getDltBcIndex()
J9	Compilation	getDltSlotDescription()
J9	Compilation	getExternalVPInfos()
J9	Compilation	getGetImplInlineable()
J9	Compilation	getHWPBCMap()
J9	Compilation	getHWPInstructions()
J9	Compilation	getJITHelpersClassPointer()
J9	Compilation	getMaxYieldInterval()
J9	Compilation	getMethodBranchInfos()
J9	Compilation	getMonitorAutoSymRefsInCompiledMethod()
J9	Compilation	getMonitorAutos()
J9	Compilation	getNeedsClassLookahead()
J9	Compilation	getObjectClassPointer()
J9	Compilation	getOrCreateKnownObjectTable()
J9	Compilation	getProfileInfo()
J9	Compilation	getReferenceClassPointer()
J9	Compilation	getReservedDataCache()
J9	Compilation	getRunnableClassPointer()
J9	Compilation	getSideEffectGuardPatchSites()
J9	Compilation	getSkippedJProfilingBlock()
J9	Compilation	getStringClassPointer()
J9	Compilation	getSystemClassPointer()
J9	Compilation	getTotalNeededDataCacheSpace()
J9	Compilation	getUpdateCompYieldStats()
J9	Compilation	getValueProfileInfoManager()
J9	Compilation	hasBlockFrequencyInfo()
J9	Compilation	incrementTotalNeededDataCacheSpace(uint32_t)
J9	Compilation	isAlignStackMaps()
J9	Compilation	isConverterMethod(TR::RecognizedMethod)
J9	Compilation	isGeneratedReflectionMethod(class TR_ResolvedMethod *)
J9	Compilation	isJProfilingCompilation()
J9	Compilation	isRecompilationEnabled()
J9	Compilation	isShortRunningMethod(int32_t)
J9	Compilation	j9VMThread()
J9	Compilation	jitPersistentAlloc(size_t)
J9	Compilation	jitPersistentFree(void *)
J9	Compilation	maxInternalPointers()
J9	Compilation	notYetRunMeansCold()
J9	Compilation	operator delete(void *,TR::Region &)
J9	Compilation	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
J9	Compilation	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator delete(void *,size_t)
J9	Compilation	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
J9	Compilation	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator delete[](void *,TR::Region &)
J9	Compilation	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
J9	Compilation	operator new(size_t,TR::Region &)
J9	Compilation	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator new(size_t,TR::Internal::PersistentNewType)
J9	Compilation	operator new(size_t,class TR_PersistentMemory *)
J9	Compilation	operator new(size_t,TR_ArenaAllocator *)
J9	Compilation	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
J9	Compilation	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator new[](size_t,class TR_PersistentMemory *)
J9	Compilation	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Compilation	operator new[](size_t,TR::Region &)
J9	Compilation	operator new[](size_t,TR::Internal::PersistentNewType)
J9	Compilation	pendingPushLivenessDuringIlgen()
J9	Compilation	printCompYieldStats()
J9	Compilation	printCompYieldStatsMatrix()
J9	Compilation	printEntryName(int32_t,int32_t)
J9	Compilation	reportAnalysisPhase(uint8_t)
J9	Compilation	reportILGeneratorPhase()
J9	Compilation	reportOptimizationPhase(OMR::Optimizations)
J9	Compilation	reportOptimizationPhaseForSnap(OMR::Optimizations)
J9	Compilation	restoreCompilationPhase(CompilationPhase)
J9	Compilation	saveCompilationPhase()
J9	Compilation	setAotMethodDataStart(void *)
J9	Compilation	setBranchProfileInfoManager(class TR_BranchProfileInfoManager *)
J9	Compilation	setCurMethodMetadata(void *)
J9	Compilation	setDltBcIndex(int32_t)
J9	Compilation	setDltSlotDescription(int32_t *)
J9	Compilation	setGetImplInlineable(_Bool)
J9	Compilation	setHWProfileDone(_Bool)
J9	Compilation	setNeedsClassLookahead(_Bool)
J9	Compilation	setReservedDataCache(void *)
J9	Compilation	setSkippedJProfilingBlock(_Bool)
J9	Compilation	setValueProfileInfoManager(class TR_ValueProfileInfoManager *)
J9	Compilation	supportsQuadOptimization()
J9	Compilation	updateCompYieldStatistics(enum TR_CallingContext)
J9	Compilation	useAnchors()
J9	Compilation	useCompressedPointers()
J9	Compilation	verifyCompressedRefsAnchors(TR::Node *,TR::Node *,TR::TreeTop *,vcount_t)
J9	Compilation	verifyCompressedRefsAnchors(TR::Node *,TR::Node *,TR::TreeTop *,vcount_t,TR::list<TR_Pair<TR::Node, TR::TreeTop> *> &)
J9	Compilation	verifyCompressedRefsAnchors()
J9	Compilation	verifyCompressedRefsAnchors(_Bool)
J9	Compilation	~Compilation()
J9	CompilerEnv	CompilerEnv(class J9::CompilerEnv &&)
J9	CompilerEnv	CompilerEnv(const class J9::CompilerEnv &)
J9	CompilerEnv	CompilerEnv(J9JavaVM *,TR::RawAllocator,const TR::PersistentAllocatorKit &)
J9	CompilerEnv	initializeTargetEnvironment()
J9	CompilerEnv	isCodeTossed()
J9	CompilerEnv	operator=(const class J9::CompilerEnv &)
J9	CompilerEnv	operator=(class J9::CompilerEnv &&)
J9	CompilerEnv	~CompilerEnv()
J9	DataType	DataType()
J9	DataType	DataType(TR::DataTypes)
J9	DataType	DataType(class J9::DataType &&)
J9	DataType	DataType(const class J9::DataType &)
J9	DataType	byteLengthToPackedDecimalPrecisionCeiling(int32_t)
J9	DataType	byteLengthToPackedDecimalPrecisionFloor(int32_t)
J9	DataType	bytesToDigits(TR::DataType,int32_t)
J9	DataType	canGetMaxPrecisionFromType()
J9	DataType	convertSignEncoding(TR::DataType,TR::DataType,int32_t)
J9	DataType	digitsToBytes(TR::DataType,int32_t)
J9	DataType	embeddedSignCodeIsInRange(int32_t)
J9	DataType	encodedToPrintableDigit(int32_t)
J9	DataType	encodedToPrintableSign(uint32_t,TR::DataType)
J9	DataType	exceedsPaddingThreshold(int32_t,TR::DataType)
J9	DataType	getAlternateMinusCode()
J9	DataType	getAlternatePlusCode()
J9	DataType	getBCDMinusChar()
J9	DataType	getBCDPlusChar()
J9	DataType	getBCDPrecisionFromSize(TR::DataType,int32_t)
J9	DataType	getBCDPrecisionFromString(char *,TR::DataType)
J9	DataType	getBCDSignCharSize()
J9	DataType	getBCDSignCode(char *)
J9	DataType	getBCDSignFromRawSign(enum TR_RawBCDSignCode)
J9	DataType	getBCDStringFirstIndex(char *,TR::DataType)
J9	DataType	getBCDStringLastIndex(char *,TR::DataType)
J9	DataType	getBCDStrlen()
J9	DataType	getBCDUnsignedChar()
J9	DataType	getDFPTypeFromPrecision(int32_t)
J9	DataType	getDataTypeConversion(TR::DataType,TR::DataType)
J9	DataType	getDigitSize(TR::DataType)
J9	DataType	getEmbeddedSignSize()
J9	DataType	getFirstValidSignCode()
J9	DataType	getIgnoredSignCode()
J9	DataType	getInvalidDecimalPrecision()
J9	DataType	getInvalidSignCode()
J9	DataType	getLastValidSignCode()
J9	DataType	getLeftMostByte(TR::DataType,int32_t)
J9	DataType	getMaxDecimalAdjust()
J9	DataType	getMaxDecimalFraction()
J9	DataType	getMaxDecimalRound()
J9	DataType	getMaxExtendedDFPPrecision()
J9	DataType	getMaxLongDFPPrecision()
J9	DataType	getMaxPackedDecimalPrecision()
J9	DataType	getMaxPackedDecimalSize()
J9	DataType	getMaxPrecisionFromType()
J9	DataType	getMaxShortDFPPrecision()
J9	DataType	getMaxSrcIntDigits()
J9	DataType	getMinDecimalAdjust()
J9	DataType	getMinDecimalFraction()
J9	DataType	getName(TR::DataType)
J9	DataType	getName(enum TR_BCDSignCode)
J9	DataType	getName(enum TR_RawBCDSignCode)
J9	DataType	getNationalSeparateMinus()
J9	DataType	getNationalSeparatePlus()
J9	DataType	getNormalizedSignCode(TR::DataType,int32_t)
J9	DataType	getOneByteBCDFill(TR::DataType)
J9	DataType	getPackedSignSize()
J9	DataType	getPreferredMinusCode()
J9	DataType	getPreferredMinusSignCode(TR::DataType)
J9	DataType	getPreferredPlusCode()
J9	DataType	getPreferredPlusSignCode(TR::DataType)
J9	DataType	getPrefix(TR::DataType)
J9	DataType	getRawSignFromBCDSign(enum TR_BCDSignCode)
J9	DataType	getSignCodeOffset(TR::DataType,int32_t)
J9	DataType	getSignCodeSize(TR::DataType)
J9	DataType	getSize(TR::DataType)
J9	DataType	getSizeFromBCDPrecision(TR::DataType,int32_t)
J9	DataType	getSupportedRawSign(int32_t)
J9	DataType	getTwoByteBCDFill(TR::DataType)
J9	DataType	getUnicodeElementSize()
J9	DataType	getUnicodeMinusCode()
J9	DataType	getUnicodeMinusCodeHigh()
J9	DataType	getUnicodeMinusCodeLow()
J9	DataType	getUnicodePlusCode()
J9	DataType	getUnicodePlusCodeHigh()
J9	DataType	getUnicodePlusCodeLow()
J9	DataType	getUnicodeSignSize()
J9	DataType	getUnicodeZeroCode()
J9	DataType	getUnicodeZeroCodeHigh()
J9	DataType	getUnicodeZeroCodeLow()
J9	DataType	getUnsignedCode()
J9	DataType	getValue(enum TR_RawBCDSignCode)
J9	DataType	getZonedCode()
J9	DataType	getZonedElementSize()
J9	DataType	getZonedFloatComma()
J9	DataType	getZonedFloatDot()
J9	DataType	getZonedFloatExpE()
J9	DataType	getZonedFloatMinus()
J9	DataType	getZonedFloatPlus()
J9	DataType	getZonedFloatSpace()
J9	DataType	getZonedSeparateMinus()
J9	DataType	getZonedSeparatePlus()
J9	DataType	getZonedSignSize()
J9	DataType	getZonedValue()
J9	DataType	getZonedZeroCode()
J9	DataType	hasExposedConstantAddress()
J9	DataType	isAnyPacked()
J9	DataType	isAnyUnicode()
J9	DataType	isAnyZoned()
J9	DataType	isBCD()
J9	DataType	isBCDSignChar(char)
J9	DataType	isDFP()
J9	DataType	isEmbeddedSign()
J9	DataType	isFloatingPoint()
J9	DataType	isLeadingSeparateSign()
J9	DataType	isLeadingSign()
J9	DataType	isLeadingSignType()
J9	DataType	isLongDouble()
J9	DataType	isSeparateSign()
J9	DataType	isSeparateSignType()
J9	DataType	isSignless()
J9	DataType	isSupportedRawSign(int32_t)
J9	DataType	isTrailingSeparateSign()
J9	DataType	isTrailingSign()
J9	DataType	isUnicodeLeadingSign()
J9	DataType	isUnicodeSeparateSign()
J9	DataType	isUnicodeSignedType()
J9	DataType	isUnicodeTrailingSign()
J9	DataType	isValidBCDLiteral(char *,size_t,TR::DataType,_Bool)
J9	DataType	isValidEmbeddedSign(uint8_t)
J9	DataType	isValidPackedData(char *,int32_t,int32_t,_Bool)
J9	DataType	isValidUnicodeData(char *,int32_t,int32_t)
J9	DataType	isValidUnicodeDigit(uint8_t,uint8_t)
J9	DataType	isValidUnicodeSeparateSign(uint8_t,uint8_t)
J9	DataType	isValidZonedData(char *,int32_t,int32_t)
J9	DataType	isValidZonedDigit(uint8_t)
J9	DataType	isValidZonedSeparateSign(uint8_t)
J9	DataType	isZonedEmbeddedSign()
J9	DataType	isZonedLeadingSepSign()
J9	DataType	isZonedLeadingSign()
J9	DataType	isZonedSeparateSign()
J9	DataType	isZonedTrailingSepSign()
J9	DataType	isZonedTrailingSign()
J9	DataType	normalizedSignIsNegative(TR::DataType,enum TR_BCDSignCode)
J9	DataType	normalizedSignIsPositive(TR::DataType,enum TR_BCDSignCode)
J9	DataType	numBCDTypes()
J9	DataType	packedDecimalPrecisionToByteLength(int32_t)
J9	DataType	printableToEncodedSign(uint32_t,TR::DataType)
J9	DataType	rawSignIsNegative(TR::DataType,int32_t)
J9	DataType	rawSignIsPositive(TR::DataType,int32_t)
J9	DataType	separateSignSize()
J9	DataType	setSize(TR::DataType,int32_t)
J9	DataType	~DataType()
J9	DataType	operator=(class J9::DataType &&)
J9	DataType	operator=(const class J9::DataType &)
J9	DebugEnv	DebugEnv()
J9	DebugEnv	DebugEnv(const class J9::DebugEnv &)
J9	DebugEnv	DebugEnv(class J9::DebugEnv &&)
J9	DebugEnv	breakPoint()
J9	DebugEnv	extraAssertMessage(TR::Compilation *)
J9	DebugEnv	operator=(const class J9::DebugEnv &)
J9	DebugEnv	operator=(class J9::DebugEnv &&)
J9	DebugEnv	~DebugEnv()
J9	GCStackAtlas	GCStackAtlas(uint32_t,uint32_t,class TR_Memory *)
J9	GCStackAtlas	GCStackAtlas(class J9::GCStackAtlas &&)
J9	GCStackAtlas	GCStackAtlas(const class J9::GCStackAtlas &)
J9	GCStackAtlas	close(TR::CodeGenerator *)
J9	GCStackAtlas	jitPersistentAlloc(size_t)
J9	GCStackAtlas	jitPersistentFree(void *)
J9	GCStackAtlas	operator delete(void *,size_t)
J9	GCStackAtlas	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
J9	GCStackAtlas	operator delete(void *,TR::Region &)
J9	GCStackAtlas	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
J9	GCStackAtlas	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator delete[](void *,TR::Region &)
J9	GCStackAtlas	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator new(size_t,TR::Region &)
J9	GCStackAtlas	operator new(size_t,TR::Internal::PersistentNewType)
J9	GCStackAtlas	operator new(size_t,class TR_PersistentMemory *)
J9	GCStackAtlas	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
J9	GCStackAtlas	operator new(size_t,TR_ArenaAllocator *)
J9	GCStackAtlas	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
J9	GCStackAtlas	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator new[](size_t,TR::Internal::PersistentNewType)
J9	GCStackAtlas	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	GCStackAtlas	operator new[](size_t,class TR_PersistentMemory *)
J9	GCStackAtlas	operator new[](size_t,TR::Region &)
J9	GCStackAtlas	~GCStackAtlas()
J9	IL	IL(const class J9::IL &)
J9	IL	IL(class J9::IL &&)
J9	IL	opCodeForCompareEquals(TR::DataType)
J9	IL	opCodeForCompareNotEquals(TR::DataType)
J9	IL	opCodeForConst(TR::DataType)
J9	IL	opCodeForCorrespondingIndirectLoad(TR::ILOpCodes)
J9	IL	opCodeForCorrespondingIndirectStore(TR::ILOpCodes)
J9	IL	opCodeForDirectLoad(TR::DataType)
J9	IL	opCodeForDirectStore(TR::DataType)
J9	IL	opCodeForIndirectArrayLoad(TR::DataType)
J9	IL	opCodeForIndirectArrayStore(TR::DataType)
J9	IL	opCodeForIndirectLoad(TR::DataType)
J9	IL	opCodeForIndirectStore(TR::DataType)
J9	IL	opCodeForRegisterLoad(TR::DataType)
J9	IL	opCodeForRegisterStore(TR::DataType)
J9	IL	~IL()
J9	IL	IL()
J9	IO	fclose(TR::FILE *)
J9	IO	fflush(TR::FILE *)
J9	IO	fopen(char *,const char *,_Bool)
J9	IO	fprintf(TR::FILE *,const char *)
J9	IO	fseek(TR::FILE *,intptr_t,int32_t)
J9	IO	ftell(TR::FILE *)
J9	IO	vfprintf(TR::FILE *,const char *,va_list)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails()
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(J9Method *const)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(const TR::IlGeneratorMethodDetails &)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(const class J9::IlGeneratorMethodDetails &)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class TR_ResolvedMethod *)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class J9::IlGeneratorMethodDetails &&)
J9	IlGeneratorMethodDetails	create(TR::IlGeneratorMethodDetails &,class TR_ResolvedMethod *)
J9	IlGeneratorMethodDetails	getClass()
J9	IlGeneratorMethodDetails	getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *,_Bool,class TR_InlineBlocks *)
J9	IlGeneratorMethodDetails	getMethod()
J9	IlGeneratorMethodDetails	isArchetypeSpecimen()
J9	IlGeneratorMethodDetails	isDumpMethod()
J9	IlGeneratorMethodDetails	isMethodHandleThunk()
J9	IlGeneratorMethodDetails	isMethodInProgress()
J9	IlGeneratorMethodDetails	isNewInstanceThunk()
J9	IlGeneratorMethodDetails	isOrdinaryMethod()
J9	IlGeneratorMethodDetails	name()
J9	IlGeneratorMethodDetails	operator=(const class J9::IlGeneratorMethodDetails &)
J9	IlGeneratorMethodDetails	operator=(const TR::IlGeneratorMethodDetails &)
J9	IlGeneratorMethodDetails	operator=(class J9::IlGeneratorMethodDetails &&)
J9	IlGeneratorMethodDetails	print(class TR_FrontEnd *,TR::FILE *)
J9	IlGeneratorMethodDetails	printDetails(class TR_FrontEnd *,TR::FILE *)
J9	IlGeneratorMethodDetails	sameAs(TR::IlGeneratorMethodDetails &,class TR_FrontEnd *)
J9	IlGeneratorMethodDetails	sameMethod(TR::IlGeneratorMethodDetails &)
J9	IlGeneratorMethodDetails	supportsInvalidation()
J9	IlGeneratorMethodDetails	~IlGeneratorMethodDetails()
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(struct J9Method *const)
J9	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
J9	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
J9	Instruction	Instruction(const class J9::Instruction &)
J9	Instruction	Instruction(class J9::Instruction &&)
J9	Instruction	getGCMap()
J9	Instruction	getGCRegisterMask()
J9	Instruction	getLiveLocals()
J9	Instruction	getLiveMonitors()
J9	Instruction	getRegisterSaveDescription()
J9	Instruction	needsAOTRelocation()
J9	Instruction	needsGCMap()
J9	Instruction	operator=(class J9::Instruction &&)
J9	Instruction	operator=(const class J9::Instruction &)
J9	Instruction	setGCMap(class TR_GCStackMap *)
J9	Instruction	setLiveLocals(class TR_BitVector *)
J9	Instruction	setLiveMonitors(class TR_BitVector *)
J9	Instruction	setNeedsAOTRelocation(_Bool)
J9	Instruction	setNeedsGCMap(TCollectableReferenceMask)
J9	Instruction	setRegisterSaveDescription(int32_t)
J9	Instruction	~Instruction()
J9	KnownObjectTable	KnownObjectTable(TR::Compilation *)
J9	KnownObjectTable	KnownObjectTable(class J9::KnownObjectTable &&)
J9	KnownObjectTable	KnownObjectTable(const class J9::KnownObjectTable &)
J9	KnownObjectTable	dumpObjectTo(TR::FILE *,Index,const char *,const char *,TR::Compilation *,class TR_BitVector &,class TR_VMFieldsInfo **,int32_t)
J9	KnownObjectTable	dumpTo(TR::FILE *,TR::Compilation *)
J9	KnownObjectTable	getEndIndex()
J9	KnownObjectTable	getIndex(uintptrj_t)
J9	KnownObjectTable	getPointerLocation(Index)
J9	KnownObjectTable	isNull(Index)
J9	KnownObjectTable	jitPersistentAlloc(size_t)
J9	KnownObjectTable	jitPersistentFree(void *)
J9	KnownObjectTable	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
J9	KnownObjectTable	operator delete(void *,size_t)
J9	KnownObjectTable	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator delete(void *,TR::Region &)
J9	KnownObjectTable	operator delete[](void *,TR::Region &)
J9	KnownObjectTable	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
J9	KnownObjectTable	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator new(size_t,TR_ArenaAllocator *)
J9	KnownObjectTable	operator new(size_t,class TR_PersistentMemory *)
J9	KnownObjectTable	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator new(size_t,TR::Internal::PersistentNewType)
J9	KnownObjectTable	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
J9	KnownObjectTable	operator new(size_t,TR::Region &)
J9	KnownObjectTable	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator new[](size_t,class TR_PersistentMemory *)
J9	KnownObjectTable	operator new[](size_t,TR::Region &)
J9	KnownObjectTable	operator new[](size_t,TR::Internal::PersistentNewType)
J9	KnownObjectTable	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	KnownObjectTable	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
J9	KnownObjectTable	operator=(class J9::KnownObjectTable &&)
J9	KnownObjectTable	operator=(const class J9::KnownObjectTable &)
J9	KnownObjectTable	~KnownObjectTable()
J9	MethodSymbol	MethodSymbol(enum TR_LinkageConventions,class TR_Method *)
J9	MethodSymbol	MethodSymbol(class J9::MethodSymbol &&)
J9	MethodSymbol	MethodSymbol(const class J9::MethodSymbol &)
J9	MethodSymbol	getVMCallHelper()
J9	MethodSymbol	getVMCallHelper(TR::Compilation *)
J9	MethodSymbol	getVMCallHelperFor(TR::DataType,_Bool,_Bool,TR::Compilation *)
J9	MethodSymbol	isPureFunction()
J9	MethodSymbol	operator=(const class J9::MethodSymbol &)
J9	MethodSymbol	operator=(class J9::MethodSymbol &&)
J9	MethodSymbol	safeToSkipArrayStoreChecks()
J9	MethodSymbol	safeToSkipBoundChecks()
J9	MethodSymbol	safeToSkipCheckCasts()
J9	MethodSymbol	safeToSkipChecksOnArrayCopies()
J9	MethodSymbol	safeToSkipDivChecks()
J9	MethodSymbol	safeToSkipNullChecks()
J9	MethodSymbol	safeToSkipZeroInitializationOnNewarrays()
J9	MethodSymbol	~MethodSymbol()
J9	Node	Node(TR::Node *,uint16_t)
J9	Node	Node(TR::Node *,TR::ILOpCodes,uint16_t)
J9	Node	Node()
J9	Node	Node(class J9::Node &)
J9	Node	alwaysGeneratesAKnownCleanSign()
J9	Node	alwaysGeneratesAKnownPositiveCleanSign()
J9	Node	assumedSignCodeIs(enum TR_BCDSignCode)
J9	Node	canHaveSourcePrecision()
J9	Node	canRemoveArithmeticOperand()
J9	Node	canSkipPadByteClearing()
J9	Node	castedToBCD()
J9	Node	chkCleanSignDuringPackedLeftShift()
J9	Node	chkCleanSignInPDStoreEvaluator()
J9	Node	chkDontInlineUnsafePutOrderedCall()
J9	Node	chkIsInMemoryCopyProp()
J9	Node	chkOpsCastedToBCD()
J9	Node	chkOpsCleanSignInPDStoreEvaluator()
J9	Node	chkOpsIsInMemoryCopyProp()
J9	Node	chkOpsSkipCopyOnLoad()
J9	Node	chkOpsSkipCopyOnStore()
J9	Node	chkOpsUseStoreAsAnAccumulator()
J9	Node	chkSharedMemory()
J9	Node	chkSkipCopyOnLoad()
J9	Node	chkSkipCopyOnStore()
J9	Node	chkSkipPadByteClearing()
J9	Node	chkSpineCheckWithArrayElementChild()
J9	Node	chkUseStoreAsAnAccumulator()
J9	Node	cleanSignDuringPackedLeftShift()
J9	Node	copyValidProperties(TR::Node *,TR::Node *)
J9	Node	devirtualizeCall(TR::TreeTop *)
J9	Node	getAssumedSignCode()
J9	Node	getBCDNodeOverflow()
J9	Node	getBCDNodeRounding()
J9	Node	getCloneClassInNode()
J9	Node	getDFPPrecision()
J9	Node	getDecimalAdjust()
J9	Node	getDecimalAdjustOrFractionOrDivisor()
J9	Node	getDecimalFraction()
J9	Node	getDecimalPrecision()
J9	Node	getDecimalRound()
J9	Node	getDecimalRoundOrDividend()
J9	Node	getFloat()
J9	Node	getKnownOrAssumedSignCode()
J9	Node	getKnownSignCode()
J9	Node	getSetSign()
J9	Node	getSetSignValueNode()
J9	Node	getSize()
J9	Node	getSourcePrecision()
J9	Node	getSubTreeReferences(TR::SparseBitVector &,vcount_t)
J9	Node	getTypeSignature(int32_t &,enum TR_AllocationKind)
J9	Node	getUnionPropertyB_Type()
J9	Node	hasAnyDecimalSignState()
J9	Node	hasAnyKnownOrAssumedSignState()
J9	Node	hasAssumedCleanSign()
J9	Node	hasAssumedPreferredSign()
J9	Node	hasAssumedSignCode()
J9	Node	hasBCDFlags()
J9	Node	hasDecimalAdjust()
J9	Node	hasDecimalFraction()
J9	Node	hasDecimalInfo()
J9	Node	hasDecimalPrecision()
J9	Node	hasDecimalRound()
J9	Node	hasIntermediateTruncation()
J9	Node	hasKnownCleanSign()
J9	Node	hasKnownOrAssumedCleanSign()
J9	Node	hasKnownOrAssumedPreferredSign()
J9	Node	hasKnownOrAssumedSignCode()
J9	Node	hasKnownPreferredSign()
J9	Node	hasKnownSignCode()
J9	Node	hasSetSign()
J9	Node	hasSignStateOnLoad()
J9	Node	hasSourcePrecision()
J9	Node	hashOnBCDOrAggrLiteral(char *,size_t)
J9	Node	isArrayCopyCall()
J9	Node	isBCDStoreTemporarilyALoad()
J9	Node	isDAAVariableSlowCall()
J9	Node	isDFPModifyPrecision()
J9	Node	isDecimalSizeAndShapeEquivalent(TR::Node *)
J9	Node	isDontInlinePutOrderedCall()
J9	Node	isEvenPrecision()
J9	Node	isInMemoryCopyProp()
J9	Node	isOddPrecision()
J9	Node	isProcessedByCallCloneConstrain()
J9	Node	isSetSignValueOnNode()
J9	Node	isSignStateAnImprovementOver(TR::Node *)
J9	Node	isSignStateEquivalent(TR::Node *)
J9	Node	isSimpleTruncation()
J9	Node	isSimpleWidening()
J9	Node	isSpineCheckWithArrayElementChild()
J9	Node	isTruncating()
J9	Node	isTruncatingBCDShift()
J9	Node	isTruncatingOrWideningAggrOrBCD()
J9	Node	isUnsafeGetPutCASCallOnNonArray()
J9	Node	isUnsafePutOrderedCall()
J9	Node	isWideningBCDShift()
J9	Node	knownOrAssumedSignCodeIs(enum TR_BCDSignCode)
J9	Node	knownSignCodeIs(enum TR_BCDSignCode)
J9	Node	mustClean()
J9	Node	mustCleanSignInPDStoreEvaluator()
J9	Node	pdshrRoundIsConstantZero()
J9	Node	printCleanSignDuringPackedLeftShift()
J9	Node	printCleanSignInPDStoreEvaluator()
J9	Node	printIsDontInlineUnsafePutOrderedCall()
J9	Node	printIsInMemoryCopyProp()
J9	Node	printSharedMemory()
J9	Node	printSkipCopyOnLoad()
J9	Node	printSkipCopyOnStore()
J9	Node	printSkipPadByteClearing()
J9	Node	printSpineCheckWithArrayElementChild()
J9	Node	printUseStoreAsAnAccumulator()
J9	Node	processJNICall(TR::TreeTop *,TR::ResolvedMethodSymbol *)
J9	Node	referencesMayKillAliasInSubTree(TR::Node *,vcount_t)
J9	Node	referencesSymbolExactlyOnceInSubTree(TR::Node *,int32_t,TR::SymbolReference *,vcount_t)
J9	Node	referencesSymbolInSubTree(TR::SymbolReference *,vcount_t)
J9	Node	requiresRegisterPair(TR::Compilation *)
J9	Node	resetBCDNodeOverflow()
J9	Node	resetBCDNodeRounding()
J9	Node	resetDecimalSignFlags()
J9	Node	resetSignState()
J9	Node	setAssumedSignCode(enum TR_RawBCDSignCode)
J9	Node	setBCDNodeOverflow()
J9	Node	setBCDNodeRounding()
J9	Node	setBCDStoreIsTemporarilyALoad(_Bool)
J9	Node	setCastedToBCD(_Bool)
J9	Node	setCleanSignDuringPackedLeftShift(_Bool)
J9	Node	setCleanSignInPDStoreEvaluator(_Bool)
J9	Node	setDAAVariableSlowCall(_Bool)
J9	Node	setDFPPrecision(int32_t)
J9	Node	setDecimalAdjust(int32_t)
J9	Node	setDecimalFraction(int32_t)
J9	Node	setDecimalPrecision(int32_t)
J9	Node	setDecimalRound(int32_t)
J9	Node	setDontInlinePutOrderedCall()
J9	Node	setFloat(float)
J9	Node	setHasAssumedCleanSign(_Bool)
J9	Node	setHasAssumedPreferredSign(_Bool)
J9	Node	setHasKnownAndAssumedCleanSign(_Bool)
J9	Node	setHasKnownCleanSign(_Bool)
J9	Node	setHasKnownPreferredSign(_Bool)
J9	Node	setHasSignStateOnLoad(_Bool)
J9	Node	setIsInMemoryCopyProp(_Bool)
J9	Node	setKnownOrAssumedSignCode(enum TR_RawBCDSignCode,_Bool)
J9	Node	setKnownSignCode(enum TR_RawBCDSignCode)
J9	Node	setKnownSignCode(enum TR_BCDSignCode)
J9	Node	setKnownSignCodeFromRawSign(int32_t)
J9	Node	setNewBCDSignOnLiteral(uint32_t,TR::DataType,char *,int32_t)
J9	Node	setPDAddSubPrecision()
J9	Node	setPDMulPrecision()
J9	Node	setProcessedByCallCloneConstrain()
J9	Node	setSetSign(enum TR_RawBCDSignCode)
J9	Node	setSharedMemory(_Bool)
J9	Node	setSignStateIsAssumed()
J9	Node	setSignStateIsKnown()
J9	Node	setSkipCopyOnLoad(_Bool)
J9	Node	setSkipCopyOnStore(_Bool)
J9	Node	setSkipPadByteClearing(_Bool)
J9	Node	setSourcePrecision(int32_t)
J9	Node	setSpineCheckWithArrayElementChild(_Bool)
J9	Node	setUnsafeGetPutCASCallOnNonArray()
J9	Node	setUseStoreAsAnAccumulator(_Bool)
J9	Node	signStateIsAssumed()
J9	Node	signStateIsKnown()
J9	Node	skipCopyOnLoad()
J9	Node	skipCopyOnStore()
J9	Node	survivingDigits()
J9	Node	transferCleanSign(TR::Node *)
J9	Node	transferSignCode(TR::Node *)
J9	Node	transferSignState(TR::Node *,_Bool)
J9	Node	truncateOrWidenBCDLiteral(TR::DataType,char *,int32_t,char *,int32_t)
J9	Node	typeSupportedForSignCodeTracking(TR::DataType)
J9	Node	typeSupportedForTruncateOrWiden(TR::DataType)
J9	Node	useStoreAsAnAccumulator()
J9	Node	~Node()
J9	Node	operator=(const class J9::Node &)
J9	Node	getOpaquePseudoRegister()
J9	Node	getPseudoRegister()
J9	Node	getStorageReferenceHint()
J9	Node	getStorageReferenceSize()
J9	Node	getStorageReferenceSourceSize()
J9	Node	setStorageReferenceHint(class TR_StorageReference *)
J9	Optimization	Optimization(TR::OptimizationManager *)
J9	Optimization	Optimization(const class J9::Optimization &)
J9	Optimization	Optimization(class J9::Optimization &&)
J9	Optimization	operator=(const class J9::Optimization &)
J9	Optimization	operator=(class J9::Optimization &&)
J9	Optimization	~Optimization()
J9	OptimizationManager	OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *)
J9	OptimizationManager	OptimizationManager(const class J9::OptimizationManager &)
J9	OptimizationManager	OptimizationManager(class J9::OptimizationManager &&)
J9	OptimizationManager	operator=(class J9::OptimizationManager &&)
J9	OptimizationManager	operator=(const class J9::OptimizationManager &)
J9	OptimizationManager	~OptimizationManager()
J9	Options	Options()
J9	Options	Options(TR::Options &)
J9	Options	Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t)
J9	Options	Options(class J9::Options &&)
J9	Options	Options(const class J9::Options &)
J9	Options	feLatePostProcess(void *,TR::OptionSet *)
J9	Options	fePostProcessAOT(void *)
J9	Options	fePostProcessJIT(void *)
J9	Options	fePreProcess(void *)
J9	Options	gcOnResolveOption(char *,void *,TR::OptionTable *)
J9	Options	getCheckcastMaxProfiledClassTests()
J9	Options	getCountForLooplessBootstrapMethods()
J9	Options	getCountForLoopyBootstrapMethods()
J9	Options	getCountForMethodsCompiledDuringStartup()
J9	Options	getCpuCompTimeExpensiveThreshold()
J9	Options	getDataCacheMinQuanta()
J9	Options	getDataCacheQuantumSize()
J9	Options	getJniAccelerator()
J9	Options	getLowVirtualMemoryMBThreshold()
J9	Options	getMaxOnsiteCacheSlotForInstanceOf()
J9	Options	getMinSamplingPeriod()
J9	Options	getNumCodeCachesToCreateAtStartup()
J9	Options	getSafeReservePhysicalMemoryValue()
J9	Options	getSamplingFrequencyInDeepIdleMode()
J9	Options	getSamplingFrequencyInIdleMode()
J9	Options	getSamplingHeartbeatInterval()
J9	Options	getScratchSpaceFactorWhenJSR292Workload()
J9	Options	getScratchSpaceLimitKBWhenLowVirtualMemory()
J9	Options	getUpdateFreeMemoryMinPeriod()
J9	Options	inlinefileOption(char *,void *,TR::OptionTable *)
J9	Options	kcaOffsets(char *,void *,TR::OptionTable *)
J9	Options	limitOption(char *,void *,TR::OptionTable *)
J9	Options	limitfileOption(char *,void *,TR::OptionTable *)
J9	Options	loadLimitOption(char *,void *,TR::OptionTable *)
J9	Options	loadLimitfileOption(char *,void *,TR::OptionTable *)
J9	Options	openLogFiles(J9JITConfig *)
J9	Options	printPID()
J9	Options	resetJitConfigRuntimeFlag(char *,void *,TR::OptionTable *)
J9	Options	setJitConfigNumericValue(char *,void *,TR::OptionTable *)
J9	Options	setJitConfigRuntimeFlag(char *,void *,TR::OptionTable *)
J9	Options	setJniAccelerator(TR::SimpleRegex *)
J9	Options	setMaxOnsiteCacheSlotForInstanceOf(int32_t)
J9	Options	setSafeReservePhysicalMemoryValue(int32_t)
J9	Options	setUpdateFreeMemoryMinPeriod(int32_t)
J9	Options	showOptionsInEffect()
J9	Options	showPID()
J9	Options	tprofOption(char *,void *,TR::OptionTable *)
J9	Options	useCompressedPointers()
J9	Options	versionOption(char *,void *,TR::OptionTable *)
J9	Options	vmStateOption(char *,void *,TR::OptionTable *)
J9	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
J9	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
J9	Snippet	Snippet(class J9::Snippet &&)
J9	Snippet	Snippet(const class J9::Snippet &)
J9	Snippet	emitSnippet()
J9	Snippet	operator=(class J9::Snippet &&)
J9	Snippet	operator=(const class J9::Snippet &)
J9	Snippet	~Snippet()
J9	StaticSymbol	StaticSymbol(TR::DataType)
J9	StaticSymbol	StaticSymbol(TR::DataType,void *)
J9	StaticSymbol	StaticSymbol(TR::DataType,uint32_t)
J9	StaticSymbol	StaticSymbol(const class J9::StaticSymbol &)
J9	StaticSymbol	StaticSymbol(class J9::StaticSymbol &&)
J9	StaticSymbol	getCallSiteIndex()
J9	StaticSymbol	getMethodTypeIndex()
J9	StaticSymbol	getRecognizedField()
J9	StaticSymbol	makeCallSiteTableEntry(int32_t)
J9	StaticSymbol	makeMethodTypeTableEntry(int32_t)
J9	StaticSymbol	makeRecognized(TR::class Symbol::RecognizedField)
J9	StaticSymbol	operator=(class J9::StaticSymbol &&)
J9	StaticSymbol	operator=(const class J9::StaticSymbol &)
J9	StaticSymbol	~StaticSymbol()
J9	Symbol	Symbol()
J9	Symbol	Symbol(TR::DataType)
J9	Symbol	Symbol(TR::DataType,uint32_t)
J9	Symbol	Symbol(const class J9::Symbol &)
J9	Symbol	convertTypeToSize(TR::DataType)
J9	Symbol	getRecognizedField()
J9	Symbol	getRecognizedShadowSymbol()
J9	Symbol	jitPersistentAlloc(size_t)
J9	Symbol	jitPersistentFree(void *)
J9	Symbol	operator delete(void *,size_t)
J9	Symbol	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator delete(void *,TR::Region &)
J9	Symbol	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
J9	Symbol	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
J9	Symbol	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator delete[](void *,TR::Region &)
J9	Symbol	operator new(size_t,TR::Region &)
J9	Symbol	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator new(size_t,class TR_PersistentMemory *)
J9	Symbol	operator new(size_t,TR_ArenaAllocator *)
J9	Symbol	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
J9	Symbol	operator new(size_t,TR::Internal::PersistentNewType)
J9	Symbol	operator new[](size_t,class TR_PersistentMemory *)
J9	Symbol	operator new[](size_t,TR::Internal::PersistentNewType)
J9	Symbol	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
J9	Symbol	operator new[](size_t,TR::Region &)
J9	Symbol	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
J9	Symbol	operator=(const class J9::Symbol &)
J9	Symbol	searchRecognizedField(TR::Compilation *,class TR_ResolvedMethod *,int32_t,_Bool)
J9	Symbol	setDataType(TR::DataType)
J9	Symbol	~Symbol()
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t)
J9	SymbolReference	SymbolReference(class J9::SymbolReference &&)
J9	SymbolReference	SymbolReference(const class J9::SymbolReference &)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t,TR::class KnownObjectTable::Index)
J9	SymbolReference	classDepth(TR::Compilation *)
J9	SymbolReference	getCPIndexForVM()
J9	SymbolReference	getTypeSignature(int32_t &,enum TR_AllocationKind,_Bool *)
J9	SymbolReference	isClassAbstract(TR::Compilation *)
J9	SymbolReference	isClassArray(TR::Compilation *)
J9	SymbolReference	isClassFinal(TR::Compilation *)
J9	SymbolReference	isClassInterface(TR::Compilation *)
J9	SymbolReference	isNonArrayFinal(TR::Compilation *)
J9	SymbolReference	operator=(class J9::SymbolReference &&)
J9	SymbolReference	operator=(const class J9::SymbolReference &)
J9	SymbolReference	~SymbolReference()
J9	TreeEvaluator	calculateInstanceOfOrCheckCastSequences(TR::Node *,enum J9::TreeEvaluator::InstanceOfOrCheckCastSequences *,class TR_OpaqueClassBlock **,TR::CodeGenerator *,struct J9::TreeEvaluator::InstanceOfOrCheckCastProfiledClasses *,uint32_t *,uint32_t,float *,_Bool *)
J9	TreeEvaluator	checkcastShouldOutlineSuperClassTest(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	evaluateLockForReservation(TR::Node *,_Bool *,_Bool *,TR::CodeGenerator *)
J9	TreeEvaluator	getCastClassAddress(TR::Node *)
J9	TreeEvaluator	instanceOfNeedHelperCall(_Bool,_Bool)
J9	TreeEvaluator	instanceOfOrCheckCastIsFinalArray(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	instanceOfOrCheckCastIsJavaLangObjectArray(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	interpreterProfilingInstanceOfOrCheckCastInfo(TR::CodeGenerator *,TR::Node *)
J9	TreeEvaluator	interpreterProfilingInstanceOfOrCheckCastInfo(TR::CodeGenerator *,TR::Node *,class TR_OpaqueClassBlock **,float *,_Bool)
J9	TreeEvaluator	isDummyMonitorEnter(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	isDummyMonitorExit(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	isPrimitiveMonitor(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	loadLookaheadAfterHeaderAccess(TR::Node *,int32_t &,TR::CodeGenerator *)
J9	TreeEvaluator	preEvaluateEscapingNodesForSpineCheck(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	TreeEvaluator()
J9	TreeEvaluator	TreeEvaluator(class J9::TreeEvaluator &&)
J9	TreeEvaluator	TreeEvaluator(const class J9::TreeEvaluator &)
J9	TreeEvaluator	~TreeEvaluator()
J9	VMEnv	J9VMThreadFromOMRVMThread(OMR_VMThread *)
J9	VMEnv	OSRFrameHeaderSizeInBytes(TR::Compilation *)
J9	VMEnv	OSRFrameSizeInBytes(TR::Compilation *,class TR_OpaqueMethodBlock *)
J9	VMEnv	VMEnv()
J9	VMEnv	VMEnv(class J9::VMEnv &&)
J9	VMEnv	VMEnv(const class J9::VMEnv &)
J9	VMEnv	acquireVMAccessIfNeeded(OMR_VMThread *)
J9	VMEnv	acquireVMAccessIfNeeded(TR::Compilation *)
J9	VMEnv	acquireVMAccessIfNeeded(class TR_J9VMBase *)
J9	VMEnv	canMethodEnterEventBeHooked(TR::Compilation *)
J9	VMEnv	canMethodExitEventBeHooked(TR::Compilation *)
J9	VMEnv	cpuTimeSpentInCompilationThread(TR::Compilation *)
J9	VMEnv	ensureOSRBufferSize(TR::Compilation *,uintptrj_t,uintptrj_t,uintptrj_t)
J9	VMEnv	getHeapTailPaddingSizeInBytes()
J9	VMEnv	getHighResClock(TR::Compilation *)
J9	VMEnv	getHighResClock(OMR_VMThread *)
J9	VMEnv	getHighResClockResolution()
J9	VMEnv	getHighResClockResolution(OMR_VMThread *)
J9	VMEnv	getHighResClockResolution(class TR_FrontEnd *)
J9	VMEnv	getHighResClockResolution(TR::Compilation *)
J9	VMEnv	getOverflowSafeAllocSize(TR::Compilation *)
J9	VMEnv	getUSecClock(TR::Compilation *)
J9	VMEnv	getUSecClock(OMR_VMThread *)
J9	VMEnv	hasAccess(OMR_VMThread *)
J9	VMEnv	hasAccess(TR::Compilation *)
J9	VMEnv	hasAccess(J9VMThread *)
J9	VMEnv	hasResumableTrapHandler(TR::Compilation *)
J9	VMEnv	hasResumableTrapHandler(OMR_VMThread *)
J9	VMEnv	heapBaseAddress()
J9	VMEnv	isSelectiveMethodEnterExitEnabled(TR::Compilation *)
J9	VMEnv	maxHeapSizeInBytes()
J9	VMEnv	operator=(class J9::VMEnv &&)
J9	VMEnv	operator=(const class J9::VMEnv &)
J9	VMEnv	releaseAccess(OMR_VMThread *)
J9	VMEnv	releaseAccess(TR::Compilation *)
J9	VMEnv	releaseAccess(class TR_J9VMBase *)
J9	VMEnv	releaseVMAccessIfNeeded(OMR_VMThread *,_Bool)
J9	VMEnv	releaseVMAccessIfNeeded(TR::Compilation *,_Bool)
J9	VMEnv	releaseVMAccessIfNeeded(class TR_J9VMBase *,_Bool)
J9	VMEnv	thisThreadGetConcurrentScavengeActiveByteAddressOffset(TR::Compilation *)
J9	VMEnv	thisThreadGetEvacuateBaseAddressOffset(TR::Compilation *)
J9	VMEnv	thisThreadGetEvacuateTopAddressOffset(TR::Compilation *)
J9	VMEnv	thisThreadGetGSHandlerAddressOffset(TR::Compilation *)
J9	VMEnv	thisThreadGetGSIntermediateResultOffset(TR::Compilation *)
J9	VMEnv	thisThreadGetGSOperandAddressOffset(TR::Compilation *)
J9	VMEnv	thisThreadGetOSRReturnAddressOffset(TR::Compilation *)
J9	VMEnv	thisThreadGetPendingExceptionOffset()
J9	VMEnv	tryToAcquireAccess(OMR_VMThread *,_Bool *)
J9	VMEnv	tryToAcquireAccess(TR::Compilation *,_Bool *)
J9	VMEnv	~VMEnv()
J9	VMMethodEnv	VMMethodEnv()
J9	VMMethodEnv	VMMethodEnv(const class J9::VMMethodEnv &)
J9	VMMethodEnv	VMMethodEnv(class J9::VMMethodEnv &&)
J9	VMMethodEnv	bytecodeSize(class TR_OpaqueMethodBlock *)
J9	VMMethodEnv	bytecodeStart(class TR_OpaqueMethodBlock *)
J9	VMMethodEnv	hasBackwardBranches(class TR_OpaqueMethodBlock *)
J9	VMMethodEnv	isCompiledMethod(class TR_OpaqueMethodBlock *)
J9	VMMethodEnv	operator=(const class J9::VMMethodEnv &)
J9	VMMethodEnv	operator=(class J9::VMMethodEnv &&)
J9	VMMethodEnv	startPC(class TR_OpaqueMethodBlock *)
J9	VMMethodEnv	~VMMethodEnv()
J9::X86::AMD64	CodeGenerator	CodeGenerator()
J9::X86::AMD64	CodeGenerator	CodeGenerator(class J9::X86::AMD64::CodeGenerator &)
J9::X86::AMD64	CodeGenerator	CodeGenerator(class J9::X86::AMD64::CodeGenerator &&)
J9::X86::AMD64	CodeGenerator	createLinkage(enum TR_LinkageConventions)
J9::X86::AMD64	CodeGenerator	operator=(const class J9::X86::AMD64::CodeGenerator &)
J9::X86::AMD64	CodeGenerator	operator=(class J9::X86::AMD64::CodeGenerator &&)
J9::X86::AMD64	CodeGenerator	~CodeGenerator()
J9::X86::AMD64	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	CodeGenerator	CodeGenerator()
J9::X86	CodeGenerator	CodeGenerator(class J9::X86::CodeGenerator &)
J9::X86	CodeGenerator	CodeGenerator(class J9::X86::CodeGenerator &&)
J9::X86	CodeGenerator	allocateRecompilationInfo()
J9::X86	CodeGenerator	allowGuardMerging()
J9::X86	CodeGenerator	beginInstructionSelection()
J9::X86	CodeGenerator	enableAESInHardwareTransformations()
J9::X86	CodeGenerator	endInstructionSelection()
J9::X86	CodeGenerator	generateSwitchToInterpreterPrePrologue(TR::Instruction *,uint8_t,uint8_t)
J9::X86	CodeGenerator	getStackFramePaddingSizeInBytes()
J9::X86	CodeGenerator	nopsAlsoProcessedByRelocations()
J9::X86	CodeGenerator	operator=(class J9::X86::CodeGenerator &&)
J9::X86	CodeGenerator	operator=(const class J9::X86::CodeGenerator &)
J9::X86	CodeGenerator	reserveNTrampolines(int32_t)
J9::X86	CodeGenerator	setStackFramePaddingSizeInBytes(int32_t)
J9::X86	CodeGenerator	suppressInliningOfRecognizedMethod(TR::RecognizedMethod)
J9::X86	CodeGenerator	~CodeGenerator()
J9::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
J9::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
J9::X86	Snippet	Snippet(class J9::X86::Snippet &&)
J9::X86	Snippet	Snippet(const class J9::X86::Snippet &)
J9::X86	Snippet	getGuardedDevirtualSnippet()
J9::X86	Snippet	operator=(class J9::X86::Snippet &&)
J9::X86	Snippet	operator=(const class J9::X86::Snippet &)
J9::X86	Snippet	~Snippet()
J9::X86	TreeEvaluator	ArrayCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	ArrayCopyBNDCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	ArrayStoreCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	BNDCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	BNDCHKwithSpineCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	DIVCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	NULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	ScopeCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMarrayCheckEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMarrayStoreCHKEvaluator(TR::Node *,TR::Node *,TR::Node *,class TR_X86ScratchRegisterManager *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMarrayStoreCheckArrayCopyEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMcheckcastEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMifArrayCmpEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMifInstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMinlineCallEvaluator(TR::Node *,_Bool,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMinstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMmonentEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMmonexitEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMnewEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMwrtbarRealTimeWithoutStoreEvaluator(TR::Node *,TR::MemoryReference *,TR::Register *,TR::Node *,TR::Node *,TR::Register *,class TR_X86ScratchRegisterManager *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	VMwrtbarWithStoreEvaluator(TR::Node *,TR::MemoryReference *,class TR_X86ScratchRegisterManager *,TR::Node *,TR::Node *,_Bool,TR::CodeGenerator *,_Bool)
J9::X86	TreeEvaluator	VMwrtbarWithoutStoreEvaluator(TR::Node *,TR::Node *,TR::Node *,TR::Register *,class TR_X86ScratchRegisterManager *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	andORStringEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	arraylengthEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	asyncGCMapCheckPatching(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *)
J9::X86	TreeEvaluator	asynccheckEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	atccheckEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	barrierFenceEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	checkcastAndNULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	checkcastEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	compressStringEvaluator(TR::Node *,TR::CodeGenerator *,_Bool)
J9::X86	TreeEvaluator	compressStringNoCheckEvaluator(TR::Node *,TR::CodeGenerator *,_Bool)
J9::X86	TreeEvaluator	compressedStringToLowerCaseEvalutor(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	compressedStringToUpperCaseEvalutor(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	decompressedStringToLowerCaseEvalutor(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	decompressedStringToUpperCaseEvalutor(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	directCallEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	encodeUTF16Evaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *)
J9::X86	TreeEvaluator	exceptionRangeFenceEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	generateVFTMaskInstruction(TR::Node *,TR::Register *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	generateValueTracingCode(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	generateValueTracingCode(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	generateWrtbarForArrayCopy(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	inlineRecursiveMonitor(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::LabelSymbol *,TR::LabelSymbol *,TR::Register *,int,TR::LabelSymbol *,_Bool)
J9::X86	TreeEvaluator	instanceofEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	integerBitCount(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	integerHighestOneBit(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	integerLowestOneBit(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	integerNumberOfLeadingZeros(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	integerNumberOfTrailingZeros(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	longBitCount(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	longHighestOneBit(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	longLowestOneBit(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	longNumberOfLeadingZeros(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	longNumberOfTrailingZeros(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	monEntryExitHelper(_Bool,TR::Node *,_Bool,_Bool,enum TR_RuntimeHelper &,TR::CodeGenerator *)
J9::X86	TreeEvaluator	monentEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	monexitEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	monexitfenceEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	multianewArrayEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	newEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	readbarEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	resolveAndNULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	resolveCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	reverseLoadEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	stringCaseConversionHelper(TR::Node *,TR::CodeGenerator *,class J9::X86::TreeEvaluator::CaseConversionManager &)
J9::X86	TreeEvaluator	tabortEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	tfinishEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	transactionalMemoryJITMonitorEntry(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::LabelSymbol *,TR::LabelSymbol *,TR::Register *,int)
J9::X86	TreeEvaluator	tstartEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	writeBarrierEvaluator(TR::Node *,TR::CodeGenerator *)
J9::X86	TreeEvaluator	TreeEvaluator()
J9::X86	TreeEvaluator	TreeEvaluator(class J9::X86::TreeEvaluator &&)
J9::X86	TreeEvaluator	TreeEvaluator(const class J9::X86::TreeEvaluator &)
J9	VMAccessCriticalSection	VMAccessCriticalSection(TR::Compilation *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol)
J9	VMAccessCriticalSection	VMAccessCriticalSection(class TR_J9VMBase *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol,TR::Compilation *)
J9	VMAccessCriticalSection	VMAccessCriticalSection(const class J9::VMAccessCriticalSection &)
J9	VMAccessCriticalSection	operator=(const class J9::VMAccessCriticalSection &)
J9	VMAccessCriticalSection	~VMAccessCriticalSection()
OMR	VMAccessCriticalSection	VMAccessCriticalSection(const class OMR::VMAccessCriticalSection &)
OMR	VMAccessCriticalSection	VMAccessCriticalSection(enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol,TR::Compilation *)
OMR	VMAccessCriticalSection	VMAccessCriticalSection(enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol,OMR_VMThread *)
OMR	VMAccessCriticalSection	VMAccessCriticalSection(TR::Compilation *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol)
OMR	VMAccessCriticalSection	VMAccessCriticalSection(OMR_VMThread *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol)
OMR	VMAccessCriticalSection	acquiredVMAccess()
OMR	VMAccessCriticalSection	hasVMAccess()
OMR	VMAccessCriticalSection	operator=(const class OMR::VMAccessCriticalSection &)
OMR	VMAccessCriticalSection	~VMAccessCriticalSection()
TR	VMAccessCriticalSection	VMAccessCriticalSection(TR::Compilation *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol)
TR	VMAccessCriticalSection	VMAccessCriticalSection(class TR_J9VMBase *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol,TR::Compilation *)
TR	VMAccessCriticalSection	VMAccessCriticalSection(class TR::VMAccessCriticalSection &&)
TR	VMAccessCriticalSection	VMAccessCriticalSection(const class TR::VMAccessCriticalSection &)
TR	VMAccessCriticalSection	operator=(class TR::VMAccessCriticalSection &&)
TR	VMAccessCriticalSection	~VMAccessCriticalSection()
J9	TransformUtil	TransformUtil()
J9	TransformUtil	TransformUtil(const class J9::TransformUtil &)
J9	TransformUtil	TransformUtil(class J9::TransformUtil &&)
J9	TransformUtil	calculateElementAddress(TR::Compilation *,TR::Node *,TR::Node *,TR::DataType)
J9	TransformUtil	calculateIndexFromOffsetInContiguousArray(TR::Compilation *,TR::Node *,TR::DataType)
J9	TransformUtil	calculateOffsetFromIndexInContiguousArray(TR::Compilation *,TR::Node *,TR::DataType)
J9	TransformUtil	createDiamondForCall(TR::Optimization *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,_Bool,_Bool)
J9	TransformUtil	createTempsForCall(TR::Optimization *,TR::TreeTop *)
J9	TransformUtil	fieldShouldBeCompressed(TR::Node *,TR::Compilation *)
J9	TransformUtil	generateArrayElementShiftAmountTrees(TR::Compilation *,TR::Node *)
J9	TransformUtil	insertNewFirstBlockForCompilation(TR::Compilation *)
J9	TransformUtil	transformDirectLoad(TR::Compilation *,TR::Node *)
J9	TransformUtil	transformIndirectLoad(TR::Compilation *,TR::Node *)
J9	TransformUtil	transformIndirectLoadChain(TR::Compilation *,TR::Node *,TR::Node *,TR::class KnownObjectTable::Index,TR::Node **)
J9	TransformUtil	transformIndirectLoadChainAt(TR::Compilation *,TR::Node *,TR::Node *,uintptrj_t *,TR::Node **)
J9	TransformUtil	transformIndirectLoadChainImpl(TR::Compilation *,TR::Node *,TR::Node *,void *,TR::Node **)
J9	TransformUtil	transformStringIndexOfCall(TR::Compilation *,TR::Node *)
J9::X86	Linkage	Linkage(TR::CodeGenerator *)
J9::X86	Linkage	Linkage(class J9::X86::Linkage &&)
J9::X86	Linkage	Linkage(const class J9::X86::Linkage &)
J9::X86	Linkage	alignLocalObjectWithCollectedFields(uint32_t &)
J9::X86	Linkage	alignLocalObjectWithoutCollectedFields(uint32_t &)
J9::X86	Linkage	alignOffset(uint32_t &,int32_t)
J9::X86	Linkage	operator=(const class J9::X86::Linkage &)
J9::X86	Linkage	operator=(class J9::X86::Linkage &&)
J9::X86	Linkage	~Linkage()
J9	CodeCacheManager	CodeCacheManager(const class J9::CodeCacheManager &)
J9	CodeCacheManager	CodeCacheManager(class J9::CodeCacheManager &&)
J9	CodeCacheManager	CodeCacheManager(class TR_FrontEnd *,TR::RawAllocator)
J9	CodeCacheManager	addCodeCache(TR::CodeCache *)
J9	CodeCacheManager	addFaintCacheBlock(OMR::MethodExceptionData *,uint8_t)
J9	CodeCacheManager	allocateCodeCacheSegment(size_t,size_t &,void *)
J9	CodeCacheManager	chooseCacheStartAddress(size_t)
J9	CodeCacheManager	fe()
J9	CodeCacheManager	fej9()
J9	CodeCacheManager	freeFaintCacheBlock(OMR::FaintCacheBlock *,uint8_t *)
J9	CodeCacheManager	freeMemorySegment(TR::CodeCacheMemorySegment *)
J9	CodeCacheManager	getSomeJitLibraryAddress()
J9	CodeCacheManager	initialize(_Bool,uint32_t)
J9	CodeCacheManager	instance()
J9	CodeCacheManager	isInRange(uintptr_t,uintptr_t,uintptr_t)
J9	CodeCacheManager	javaVM()
J9	CodeCacheManager	jitConfig()
J9	CodeCacheManager	onClassRedefinition(class TR_OpaqueMethodBlock *,class TR_OpaqueMethodBlock *)
J9	CodeCacheManager	onClassUnloading(J9ClassLoader *)
J9	CodeCacheManager	onFSDDecompile()
J9	CodeCacheManager	operator new(size_t,TR::CodeCacheManager *)
J9	CodeCacheManager	purgeClassLoaderFromFaintBlocks(J9ClassLoader *)
J9	CodeCacheManager	reportCodeLoadEvents()
J9	CodeCacheManager	reserveCodeCache(_Bool,size_t,int32_t,int32_t *)
J9	CodeCacheManager	self()
J9	CodeCacheManager	setCodeCacheFull()
J9	CodeCacheManager	setupMemorySegmentFromRepository(uint8_t *,uint8_t *,size_t &)
J9	CodeCacheManager	~CodeCacheManager()
J9	AheadOfTimeCompile	AheadOfTimeCompile(uint32_t *,TR::Compilation *)
J9	AheadOfTimeCompile	AheadOfTimeCompile(const class J9::AheadOfTimeCompile &)
J9	AheadOfTimeCompile	AheadOfTimeCompile(class J9::AheadOfTimeCompile &&)
J9	AheadOfTimeCompile	dumpRelocationData()
J9	AheadOfTimeCompile	emitClassChainOffset(uint8_t *,class TR_OpaqueClassBlock *)
J9	AheadOfTimeCompile	operator=(class J9::AheadOfTimeCompile &&)
J9	AheadOfTimeCompile	operator=(const class J9::AheadOfTimeCompile &)
J9	AheadOfTimeCompile	~AheadOfTimeCompile()
J9::X86	AheadOfTimeCompile	AheadOfTimeCompile(class J9::X86::AheadOfTimeCompile &&)
J9::X86	AheadOfTimeCompile	AheadOfTimeCompile(const class J9::X86::AheadOfTimeCompile &)
J9::X86	AheadOfTimeCompile	AheadOfTimeCompile(TR::CodeGenerator *)
J9::X86	AheadOfTimeCompile	initialiseAOTRelocationHeader(TR::IteratedExternalRelocation *)
J9::X86	AheadOfTimeCompile	operator=(class J9::X86::AheadOfTimeCompile &&)
J9::X86	AheadOfTimeCompile	operator=(const class J9::X86::AheadOfTimeCompile &)
J9::X86	AheadOfTimeCompile	processRelocations()
J9::X86	AheadOfTimeCompile	~AheadOfTimeCompile()
J9	MonitorTable	MonitorTable()
J9	MonitorTable	MonitorTable(class J9::MonitorTable &&)
J9	MonitorTable	MonitorTable(const class J9::MonitorTable &)
J9	MonitorTable	create(char *)
J9	MonitorTable	free()
J9	MonitorTable	getClassTableMutex()
J9	MonitorTable	getClassUnloadMonitor()
J9	MonitorTable	getClassUnloadMonitorHoldCount(int32_t)
J9	MonitorTable	getIProfilerPersistenceMonitor()
J9	MonitorTable	init(J9PortLibrary *,J9JavaVM *)
J9	MonitorTable	insert(TR::Monitor *)
J9	MonitorTable	isThreadInSafeMonitorState(J9VMThread *)
J9	MonitorTable	monitorHeldByCurrentThread()
J9	MonitorTable	operator new(size_t,void *)
J9	MonitorTable	readAcquireClassUnloadMonitor(int32_t)
J9	MonitorTable	readReleaseClassUnloadMonitor(int32_t)
J9	MonitorTable	removeAndDestroy(TR::Monitor *)
J9	MonitorTable	~MonitorTable()
J9	CodeCache	CodeCache()
J9	CodeCache	CodeCache(class J9::CodeCache &&)
J9	CodeCache	CodeCache(const class J9::CodeCache &)
J9	CodeCache	addFreeBlock(void *)
J9	CodeCache	addFreeBlock(OMR::FaintCacheBlock *)
J9	CodeCache	addResolvedMethod(class TR_OpaqueMethodBlock *)
J9	CodeCache	addUnresolvedMethod(void *,int32_t)
J9	CodeCache	adjustTrampolineReservation(class TR_OpaqueMethodBlock *,void *,int32_t)
J9	CodeCache	allocate(TR::CodeCacheManager *,size_t,int32_t)
J9	CodeCache	dumpCodeCache()
J9	CodeCache	findUnresolvedMethod(void *,int32_t)
J9	CodeCache	generatePerfToolEntries(TR::FILE *)
J9	CodeCache	initialize(TR::CodeCacheManager *,TR::CodeCacheMemorySegment *,size_t,OMR::CodeCacheHashEntrySlab *)
J9	CodeCache	j9segment()
J9	CodeCache	onClassRedefinition(class TR_OpaqueMethodBlock *,class TR_OpaqueMethodBlock *)
J9	CodeCache	onClassUnloading(J9ClassLoader *)
J9	CodeCache	onFSDDecompile()
J9	CodeCache	reportCodeLoadEvents()
J9	CodeCache	reserveUnresolvedTrampoline(void *,int32_t)
J9	CodeCache	resizeCodeMemory(void *,size_t)
J9	CodeCache	resolveHashEntry(OMR::CodeCacheHashEntry *,class TR_OpaqueMethodBlock *)
J9	CodeCache	self()
J9	CodeCache	trj9segment()
J9	CodeCache	~CodeCache()
J9	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,uint8_t *)
J9	CodeCacheMemorySegment	CodeCacheMemorySegment()
J9	CodeCacheMemorySegment	CodeCacheMemorySegment(class J9::CodeCacheMemorySegment &&)
J9	CodeCacheMemorySegment	CodeCacheMemorySegment(const class J9::CodeCacheMemorySegment &)
J9	CodeCacheMemorySegment	CodeCacheMemorySegment(J9MemorySegment *)
J9	CodeCacheMemorySegment	free(TR::CodeCacheManager *)
J9	CodeCacheMemorySegment	j9segment()
J9	CodeCacheMemorySegment	operator new(size_t,TR::CodeCacheMemorySegment *)
J9	CodeCacheMemorySegment	setSegment(J9MemorySegment *)
J9	CodeCacheMemorySegment	~CodeCacheMemorySegment()
J9::X86::i386	CodeGenerator	CodeGenerator()
J9::X86::i386	CodeGenerator	CodeGenerator(class J9::X86::i386::CodeGenerator &&)
J9::X86::i386	CodeGenerator	CodeGenerator(class J9::X86::i386::CodeGenerator &)
J9::X86::i386	CodeGenerator	createLinkage(enum TR_LinkageConventions)
J9::X86::i386	CodeGenerator	lowerTreesPostChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
J9::X86::i386	CodeGenerator	lowerTreesPostTreeTopVisit(TR::TreeTop *,vcount_t)
J9::X86::i386	CodeGenerator	lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
J9::X86::i386	CodeGenerator	lowerTreesPreTreeTopVisit(TR::TreeTop *,vcount_t)
J9::X86::i386	CodeGenerator	operator=(class J9::X86::i386::CodeGenerator &&)
J9::X86::i386	CodeGenerator	operator=(const class J9::X86::i386::CodeGenerator &)
J9::X86::i386	CodeGenerator	~CodeGenerator()
J9::X86::i386	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	CodeGenerator	CodeGenerator()
J9::Power	CodeGenerator	CodeGenerator(class J9::Power::CodeGenerator &&)
J9::Power	CodeGenerator	CodeGenerator(class J9::Power::CodeGenerator &)
J9::Power	CodeGenerator	allocateRecompilationInfo()
J9::Power	CodeGenerator	createLinkage(enum TR_LinkageConventions)
J9::Power	CodeGenerator	enableAESInHardwareTransformations()
J9::Power	CodeGenerator	generateBinaryEncodingPrologue(struct TR_PPCBinaryEncodingData *)
J9::Power	CodeGenerator	inlineDirectCall(TR::Node *,TR::Register *&)
J9::Power	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
J9::Power	CodeGenerator	operator=(class J9::Power::CodeGenerator &&)
J9::Power	CodeGenerator	operator=(const class J9::Power::CodeGenerator &)
J9::Power	CodeGenerator	suppressInliningOfRecognizedMethod(TR::RecognizedMethod)
J9::Power	CodeGenerator	~CodeGenerator()
J9::Power	TreeEvaluator	ArrayCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	ArrayCopyBNDCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	ArrayStoreCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	BNDCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	BNDCHKwithSpineCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	DIVCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMarrayCheckEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMcheckcastEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMcheckcastEvaluator2(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMgenCoreInstanceofEvaluator(TR::Node *,TR::CodeGenerator *,_Bool,int32_t,int32_t,TR::Node *,_Bool,_Bool,_Bool,_Bool,_Bool,TR::LabelSymbol *,TR::LabelSymbol *,TR::LabelSymbol *,_Bool)
J9::Power	TreeEvaluator	VMifInstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMinstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMinstanceOfEvaluator2(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMmonentEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMmonexitEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	VMnewEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	anewArrayEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	arraylengthEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	asynccheckEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	buildArgsProcessFEDependencies(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
J9::Power	TreeEvaluator	checkcastAndNULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	checkcastEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	directCallEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	flushEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	genArrayCopyWithArrayStoreCHK(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	genWrtbarForArrayCopy(TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	generateVFTMaskInstruction(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::Register *,TR::Instruction *)
J9::Power	TreeEvaluator	generateVFTMaskInstruction(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::Instruction *)
J9::Power	TreeEvaluator	ifInstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	instanceofEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	iwrtbarEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	monentEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	monexitEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	monexitfenceEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	multianewArrayEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	newArrayEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	newObjectEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	resolveCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	restoreTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
J9::Power	TreeEvaluator	retrieveTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
J9::Power	TreeEvaluator	tabortEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	tfinishEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	tstartEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	TreeEvaluator	wrtbarEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Power	AheadOfTimeCompile	AheadOfTimeCompile(class J9::Power::AheadOfTimeCompile &&)
J9::Power	AheadOfTimeCompile	AheadOfTimeCompile(const class J9::Power::AheadOfTimeCompile &)
J9::Power	AheadOfTimeCompile	AheadOfTimeCompile(TR::CodeGenerator *)
J9::Power	AheadOfTimeCompile	initialiseAOTRelocationHeader(TR::IteratedExternalRelocation *)
J9::Power	AheadOfTimeCompile	operator=(class J9::Power::AheadOfTimeCompile &&)
J9::Power	AheadOfTimeCompile	operator=(const class J9::Power::AheadOfTimeCompile &)
J9::Power	AheadOfTimeCompile	processRelocations()
J9::Power	AheadOfTimeCompile	~AheadOfTimeCompile()
J9::Z	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
J9::Z	CodeGenPhase	CodeGenPhase(const class J9::Z::CodeGenPhase &)
J9::Z	CodeGenPhase	CodeGenPhase(class J9::Z::CodeGenPhase &&)
J9::Z	CodeGenPhase	getName()
J9::Z	CodeGenPhase	getName(enum OMR::CodeGenPhase::PhaseValue)
J9::Z	CodeGenPhase	getNumPhases()
J9::Z	CodeGenPhase	operator=(class J9::Z::CodeGenPhase &&)
J9::Z	CodeGenPhase	operator=(const class J9::Z::CodeGenPhase &)
J9::Z	CodeGenPhase	performInMemoryLoadStoreMarkingPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9::Z	CodeGenPhase	performReduceSynchronizedFieldLoadPhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9::Z	CodeGenPhase	performUncommonBCDCHKAddressNodePhase(TR::CodeGenerator *,TR::CodeGenPhase *)
J9::Z	CodeGenPhase	~CodeGenPhase()
J9::Z	CodeGenerator	CodeGenerator()
J9::Z	CodeGenerator	CodeGenerator(class J9::Z::CodeGenerator &&)
J9::Z	CodeGenerator	CodeGenerator(class J9::Z::CodeGenerator &)
J9::Z	CodeGenerator	CreateEyeCatcher(TR::Node *)
J9::Z	CodeGenerator	addAllocatedRegister(class TR_PseudoRegister *)
J9::Z	CodeGenerator	addStorageReferenceHints(TR::Node *)
J9::Z	CodeGenerator	allocateOpaquePseudoRegister(TR::DataType)
J9::Z	CodeGenerator	allocateOpaquePseudoRegister(class TR_OpaquePseudoRegister *)
J9::Z	CodeGenerator	allocatePseudoRegister(TR::DataType)
J9::Z	CodeGenerator	allocatePseudoRegister(class TR_PseudoRegister *)
J9::Z	CodeGenerator	allocateRecompilationInfo()
J9::Z	CodeGenerator	allowSplitWarmAndColdBlocks()
J9::Z	CodeGenerator	alwaysGeneratedSign(TR::Node *)
J9::Z	CodeGenerator	alwaysGeneratesAKnownCleanSign(TR::Node *)
J9::Z	CodeGenerator	alwaysGeneratesAKnownPositiveCleanSign(TR::Node *)
J9::Z	CodeGenerator	canCopyWithOneOrTwoInstrs(char *,size_t)
J9::Z	CodeGenerator	canGeneratePDBinaryIntrinsic(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Node *)
J9::Z	CodeGenerator	checkFieldAlignmentForAtomicLong()
J9::Z	CodeGenerator	clearByteRangeIfNeeded(TR::Node *,class TR_PseudoRegister *,TR::MemoryReference *,int32_t,int32_t,_Bool)
J9::Z	CodeGenerator	correctBadSign(TR::Node *,class TR_PseudoRegister *,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	createLinkage(enum TR_LinkageConventions)
J9::Z	CodeGenerator	doInlineAllocate(TR::Node *)
J9::Z	CodeGenerator	evaluateAggregateToGPR(size_t,TR::Node *,class TR_OpaquePseudoRegister *,TR::MemoryReference *)
J9::Z	CodeGenerator	evaluateBCDNode(TR::Node *)
J9::Z	CodeGenerator	evaluateOPRNode(TR::Node *)
J9::Z	CodeGenerator	examineNode(TR::Node *,TR::Node *,TR::Node *&,int32_t &,TR::list<TR::Node *> &)
J9::Z	CodeGenerator	freeUnusedTemporaryBasedHint(TR::Node *)
J9::Z	CodeGenerator	genSignCodeSetting(TR::Node *,class TR_PseudoRegister *,int32_t,TR::MemoryReference *,int32_t,class TR_PseudoRegister *,int32_t,_Bool)
J9::Z	CodeGenerator	genZeroLeftMostDigitsIfNeeded(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *,_Bool)
J9::Z	CodeGenerator	genZeroLeftMostPackedDigits(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *,int32_t)
J9::Z	CodeGenerator	genZeroLeftMostUnicodeBytes(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	genZeroLeftMostZonedBytes(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	generateVMCallHelperPrePrologue(TR::Instruction *)
J9::Z	CodeGenerator	generateVMCallHelperSnippet(TR::Instruction *,TR::LabelSymbol *)
J9::Z	CodeGenerator	getAddStorageReferenceHints()
J9::Z	CodeGenerator	getAddressLoadVar(TR::Node *,_Bool)
J9::Z	CodeGenerator	getAddressOneToAddressTwoOffset(_Bool *,TR::Node *,int64_t,TR::Node *,int64_t,int32_t *,TR::list<TR::Node *> *,_Bool)
J9::Z	CodeGenerator	getAsciiToPackedFixedResultSize()
J9::Z	CodeGenerator	getDecimalDoubleToPackedFixedSize()
J9::Z	CodeGenerator	getDecimalFloatToPackedFixedSize()
J9::Z	CodeGenerator	getDecimalLongDoubleToPackedFixedSize()
J9::Z	CodeGenerator	getIntegerToPackedFixedSize()
J9::Z	CodeGenerator	getLongToPackedFixedSize()
J9::Z	CodeGenerator	getMinimumNumberOfNodesBetweenMonitorsForTLE()
J9::Z	CodeGenerator	getPDAddSubEncodedPrecision(TR::Node *,class TR_PseudoRegister *)
J9::Z	CodeGenerator	getPDAddSubEncodedPrecision(TR::Node *)
J9::Z	CodeGenerator	getPDAddSubEncodedSize(TR::Node *)
J9::Z	CodeGenerator	getPDAddSubEncodedSize(TR::Node *,class TR_PseudoRegister *)
J9::Z	CodeGenerator	getPDDivEncodedPrecision(TR::Node *,class TR_PseudoRegister *,class TR_PseudoRegister *)
J9::Z	CodeGenerator	getPDDivEncodedPrecision(TR::Node *)
J9::Z	CodeGenerator	getPDDivEncodedPrecisionCommon(TR::Node *,int32_t,int32_t,_Bool)
J9::Z	CodeGenerator	getPDDivEncodedSize(TR::Node *,class TR_PseudoRegister *,class TR_PseudoRegister *)
J9::Z	CodeGenerator	getPDDivEncodedSize(TR::Node *)
J9::Z	CodeGenerator	getPDMulEncodedPrecision(TR::Node *,class TR_PseudoRegister *,class TR_PseudoRegister *)
J9::Z	CodeGenerator	getPDMulEncodedPrecision(TR::Node *)
J9::Z	CodeGenerator	getPDMulEncodedPrecision(TR::Node *,int32_t)
J9::Z	CodeGenerator	getPDMulEncodedSize(TR::Node *,class TR_PseudoRegister *,class TR_PseudoRegister *)
J9::Z	CodeGenerator	getPDMulEncodedSize(TR::Node *,int32_t)
J9::Z	CodeGenerator	getPDMulEncodedSize(TR::Node *)
J9::Z	CodeGenerator	getPackedToDecimalDoubleFixedSize()
J9::Z	CodeGenerator	getPackedToDecimalFloatFixedSize()
J9::Z	CodeGenerator	getPackedToDecimalLongDoubleFixedSize()
J9::Z	CodeGenerator	getPackedToIntegerFixedSize()
J9::Z	CodeGenerator	getPackedToLongFixedSize()
J9::Z	CodeGenerator	getPackedToUnicodeFixedSourceSize()
J9::Z	CodeGenerator	getUnicodeToPackedFixedResultSize()
J9::Z	CodeGenerator	incRefCountForOpaquePseudoRegister(TR::Node *,TR::CodeGenerator *,TR::Compilation *)
J9::Z	CodeGenerator	initializeNewTemporaryStorageReference(TR::Node *,class TR_OpaquePseudoRegister *,int32_t,TR::Node *,class TR_OpaquePseudoRegister *,int32_t,TR::MemoryReference *,_Bool,_Bool,_Bool)
J9::Z	CodeGenerator	initializeStorageReference(TR::Node *,class TR_OpaquePseudoRegister *,TR::MemoryReference *,int32_t,TR::Node *,class TR_OpaquePseudoRegister *,TR::MemoryReference *,int32_t,_Bool,_Bool,_Bool)
J9::Z	CodeGenerator	inlineDirectCall(TR::Node *,TR::Register *&)
J9::Z	CodeGenerator	inlineSmallLiteral(size_t,char *,size_t,_Bool)
J9::Z	CodeGenerator	isAcceptableDestructivePDModPrecision(TR::Node *,TR::Node *)
J9::Z	CodeGenerator	isAcceptableDestructivePDShiftRight(TR::Node *,TR::Node *)
J9::Z	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
J9::Z	CodeGenerator	lowerTreesPostChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
J9::Z	CodeGenerator	lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
J9::Z	CodeGenerator	markStoreAsAnAccumulator(TR::Node *)
J9::Z	CodeGenerator	materializeFullBCDValue(TR::Node *,class TR_PseudoRegister *&,int32_t,int32_t,_Bool,_Bool)
J9::Z	CodeGenerator	operator=(class J9::Z::CodeGenerator &&)
J9::Z	CodeGenerator	operator=(const class J9::Z::CodeGenerator &)
J9::Z	CodeGenerator	privatizeBCDRegisterIfNeeded(TR::Node *,TR::Node *,class TR_OpaquePseudoRegister *)
J9::Z	CodeGenerator	privatizePseudoRegister(TR::Node *,class TR_OpaquePseudoRegister *,class TR_StorageReference *,size_t)
J9::Z	CodeGenerator	privatizePseudoRegisterIfNeeded(TR::Node *,TR::Node *,class TR_OpaquePseudoRegister *)
J9::Z	CodeGenerator	privatizeStorageReference(TR::Node *,class TR_OpaquePseudoRegister *,TR::MemoryReference *)
J9::Z	CodeGenerator	processNodeList(TR::Node *&,int32_t &,TR::list<TR::Node *> &)
J9::Z	CodeGenerator	processUnusedStorageRef(class TR_StorageReference *)
J9::Z	CodeGenerator	propagateSignThroughBCDLeftShift(TR::DataType)
J9::Z	CodeGenerator	setAddStorageReferenceHints()
J9::Z	CodeGenerator	storageReferencesMatch(class TR_StorageReference *,class TR_StorageReference *)
J9::Z	CodeGenerator	supportsPackedShiftRight(int32_t,TR::Node *,int32_t)
J9::Z	CodeGenerator	suppressInliningOfRecognizedMethod(TR::RecognizedMethod)
J9::Z	CodeGenerator	useMoveImmediateCommon(TR::Node *,char *,size_t,TR::Node *,size_t,intptr_t,size_t,TR::MemoryReference *)
J9::Z	CodeGenerator	validateAddressOneToAddressOffset(int32_t,TR::Node *,int64_t,TR::Node *,int64_t,TR::list<TR::Node *> *,_Bool)
J9::Z	CodeGenerator	widenBCDValue(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	widenBCDValueIfNeeded(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	widenUnicodeSignLeadingSeparate(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	widenZonedSignLeadingEmbedded(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	widenZonedSignLeadingSeparate(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *)
J9::Z	CodeGenerator	~CodeGenerator()
J9::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
J9::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
J9::Z	Snippet	Snippet(const class J9::Z::Snippet &)
J9::Z	Snippet	Snippet(class J9::Z::Snippet &&)
J9::Z	Snippet	generateRuntimeInstrumentationOnOffInstruction(TR::CodeGenerator *,uint8_t *,TR::class InstOpCode::Mnemonic,_Bool)
J9::Z	Snippet	getRuntimeInstrumentationOnOffInstructionLength(TR::CodeGenerator *,_Bool)
J9::Z	Snippet	operator=(class J9::Z::Snippet &&)
J9::Z	Snippet	operator=(const class J9::Z::Snippet &)
J9::Z	Snippet	~Snippet()
J9::Z	TreeEvaluator	ArrayCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ArrayCopyBNDCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ArrayStoreCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	BCDCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	BCDCHKEvaluatorImpl(TR::Node *,TR::CodeGenerator *,uint32_t,uint32_t,_Bool,_Bool,_Bool)
J9::Z	TreeEvaluator	BNDCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	BNDCHKwithSpineCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	DIVCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMarrayCheckEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMcheckcastEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMcheckcastEvaluator2(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMgenCoreInstanceofEvaluator(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::LabelSymbol *,_Bool,_Bool,TR::RegisterDependencyConditions *,_Bool)
J9::Z	TreeEvaluator	VMgenCoreInstanceofEvaluator2(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::LabelSymbol *,_Bool,_Bool,TR::RegisterDependencyConditions *,_Bool)
J9::Z	TreeEvaluator	VMifInstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMifInstanceOfEvaluator2(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMinlineCallEvaluator(TR::Node *,_Bool,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMinstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMinstanceOfEvaluator2(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMmonentEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMmonexitEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	VMnewEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	anewArrayEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	arraylengthEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	asciiAndUnicodeToPackedHelper(TR::Node *,class TR_PseudoRegister *,TR::MemoryReference *,class TR_PseudoRegister *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	asynccheckEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	checkcastAndNULLCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	checkcastEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	clearAndSetSign(TR::Node *,class TR_PseudoRegister *,int32_t,int32_t,TR::MemoryReference *,class TR_PseudoRegister *,TR::MemoryReference *,_Bool,int32_t,_Bool,TR::CodeGenerator *)
J9::Z	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	correctPackedArithmeticPrecision(TR::Node *,int32_t,class TR_PseudoRegister *,int32_t,TR::CodeGenerator *)
J9::Z	TreeEvaluator	countDigitsEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	countDigitsHelper(TR::Node *,TR::CodeGenerator *,int32_t,TR::MemoryReference *,TR::Register *,TR::Register *,TR::LabelSymbol *,_Bool)
J9::Z	TreeEvaluator	dd2deEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dd2dfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dd2iEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dd2lEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dd2luEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddInsExpEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddModifyPrecisionEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddSetNegativeEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddaddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcleanEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddfloorEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddmulEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddnegEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddshlEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddshrEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddshrRoundedEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ddsubEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	de2ddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	de2dxHelperAndSetRegister(TR::Register *,TR::Register *,TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	de2iEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	deRegLoadEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	deRegStoreEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	deaddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	decleanEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	deconstEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	defloorEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	deloadEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	demulEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	destoreEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	desubEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	df2ddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	df2deEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	df2fEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	df2pdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	df2zdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dfaddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dfdivEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dffloorEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dfmulEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	dfsubEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	evaluateBCDSignModifyingOperand(TR::Node *,_Bool,_Bool,_Bool,TR::MemoryReference *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	evaluateBCDValueModifyingOperand(TR::Node *,_Bool,TR::MemoryReference *,TR::CodeGenerator *,_Bool,int32_t,_Bool)
J9::Z	TreeEvaluator	evaluateSignModifyingOperand(TR::Node *,_Bool,_Bool,_Bool,TR::MemoryReference *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	evaluateValueModifyingOperand(TR::Node *,_Bool,TR::MemoryReference *,TR::CodeGenerator *,_Bool,int32_t,_Bool)
J9::Z	TreeEvaluator	f2dfEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	genArrayCopyWithArrayStoreCHK(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	genLoadForObjectHeaders(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *)
J9::Z	TreeEvaluator	genLoadForObjectHeadersMasked(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *)
J9::Z	TreeEvaluator	genWrtbarForArrayCopy(TR::Node *,TR::Register *,TR::Register *,_Bool,TR::CodeGenerator *)
J9::Z	TreeEvaluator	generateBinaryToPackedConversion(TR::Node *,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *)
J9::Z	TreeEvaluator	generateHelperCallForVMNewEvaluators(TR::Node *,TR::CodeGenerator *,_Bool,TR::Register *)
J9::Z	TreeEvaluator	generatePackedToBinaryConversion(TR::Node *,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *)
J9::Z	TreeEvaluator	generateRuntimeInstrumentationOnOffSequence(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,_Bool)
J9::Z	TreeEvaluator	generateVFTMaskInstruction(TR::Node *,TR::Register *,TR::CodeGenerator *,TR::Instruction *)
J9::Z	TreeEvaluator	generateVectorBinaryToPackedConversion(TR::Node *,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *)
J9::Z	TreeEvaluator	generateVectorPackedToBinaryConversion(TR::Node *,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *)
J9::Z	TreeEvaluator	getMemoryReferenceForSSFormat(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	i2ddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	i2pdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpequEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpgeuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpgtuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpleuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpltuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ifddcmpneuEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	instanceofEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	interpreterProfilingInstanceOfOrCheckCastTopProb(TR::CodeGenerator *,TR::Node *)
J9::Z	TreeEvaluator	isZonedOperationAnEffectiveNop(TR::Node *,int32_t,_Bool,class TR_PseudoRegister *,_Bool,int32_t,TR::CodeGenerator *)
J9::Z	TreeEvaluator	iwrtbarEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	l2ddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	l2pdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	lu2ddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	monentEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	monexitEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	monexitfenceEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	multianewArrayEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	newArrayEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	newObjectEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	packedToUnicodeHelper(TR::Node *,class TR_PseudoRegister *,TR::MemoryReference *,class TR_PseudoRegister *,_Bool,TR::CodeGenerator *,class TR_StorageReference *)
J9::Z	TreeEvaluator	packedToZonedHelper(TR::Node *,class TR_PseudoRegister *,TR::MemoryReference *,class TR_PseudoRegister *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2ddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2iEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2lEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2lVariableEvaluator(TR::Node *,TR::CodeGenerator *,_Bool)
J9::Z	TreeEvaluator	pd2udEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2udEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2udVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2udslEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2udslEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2udslVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2zdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2zdSignFixup(TR::Node *,TR::MemoryReference *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2zdVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pd2zdslsEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdArithmeticVectorEvaluatorHelper(TR::Node *,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdModifyPrecisionEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdSetSignEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdSetSignHelper(TR::Node *,int32_t,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdaddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdaddsubEvaluatorHelper(TR::Node *,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdchkEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdclearEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdcmpVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdcmpeqEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdcmpgeEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdcmpgtEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdcmpleEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdcmpltEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdcmpneEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pddivremEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pddivremEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pddivremVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdloadEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdloadEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdloadVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdmulEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdmulEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdnegEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdshiftEvaluatorHelper(TR::Node *,TR::CodeGenerator *,_Bool)
J9::Z	TreeEvaluator	pdshlEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdshlVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdshrEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdshrEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdshrVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdstoreEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdstoreEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdstoreVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	pdsubEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	resolveCHKEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	restoreGPR7(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	simpleWideningOrTruncation(TR::Node *,class TR_PseudoRegister *,_Bool,int32_t,TR::CodeGenerator *)
J9::Z	TreeEvaluator	tabortEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	tfinishEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	tstartEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ud2pdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	ud2pdVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	udsl2pdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	vectorPerformSignOperationHelper(TR::Node *,TR::CodeGenerator *,_Bool,uint32_t,_Bool,enum J9::Z::TreeEvaluator::SignOperationType,_Bool,int32_t,_Bool)
J9::Z	TreeEvaluator	wrtbarEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zd2ddEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zd2pdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zd2pdVectorEvaluatorHelper(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zd2zdslsEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zdabsEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zdsle2zdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zdsls2pdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zdsls2zdEvaluator(TR::Node *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zonedSeparateSignToPackedOrZonedHelper(TR::Node *,class TR_PseudoRegister *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zonedToPackedHelper(TR::Node *,class TR_PseudoRegister *,TR::MemoryReference *,class TR_PseudoRegister *,TR::CodeGenerator *)
J9::Z	TreeEvaluator	zonedToZonedSeparateSignHelper(TR::Node *,class TR_PseudoRegister *,class TR_PseudoRegister *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *)
J9::Z	Linkage	Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions)
J9::Z	Linkage	Linkage(class J9::Z::Linkage &&)
J9::Z	Linkage	Linkage(const class J9::Z::Linkage &)
J9::Z	Linkage	loadUpArguments(TR::Instruction *)
J9::Z	Linkage	operator=(const class J9::Z::Linkage &)
J9::Z	Linkage	operator=(class J9::Z::Linkage &&)
J9::Z	Linkage	~Linkage()
J9::Z	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *)
J9::Z	MemoryReference	MemoryReference(int32_t,TR::CodeGenerator *,_Bool)
J9::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *)
J9::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *)
J9::Z	MemoryReference	MemoryReference(TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *)
J9::Z	MemoryReference	MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(class J9::Z::MemoryReference &&)
J9::Z	MemoryReference	MemoryReference(const class J9::Z::MemoryReference &)
J9::Z	MemoryReference	MemoryReference(class J9::Z::MemoryReference &,int32_t,TR::CodeGenerator *)
J9::Z	MemoryReference	addInstrSpecificRelocation(TR::CodeGenerator *,TR::Instruction *,int32_t,uint8_t *)
J9::Z	MemoryReference	createPatchableDataInLitpool(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::UnresolvedDataSnippet *)
J9::Z	MemoryReference	createUnresolvedDataSnippet(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *,_Bool)
J9::Z	MemoryReference	createUnresolvedDataSnippetForBaseNode(TR::CodeGenerator *,TR::Register *)
J9::Z	MemoryReference	createUnresolvedDataSnippetForiaload(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *,_Bool &)
J9::Z	MemoryReference	createUnresolvedSnippetWithNodeRegister(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *&)
J9::Z	MemoryReference	incRefCountForOpaquePseudoRegister(TR::Node *,TR::CodeGenerator *,TR::Compilation *)
J9::Z	MemoryReference	setMemRefAndGetUnresolvedData(TR::Snippet *&)
J9::Z	MemoryReference	symRefHasTemporaryNegativeOffset()
J9::Z	MemoryReference	tryForceFolding(TR::Node *&,TR::CodeGenerator *&,class TR_StorageReference *&,TR::SymbolReference *&,TR::Symbol *&,List<TR::Node> &)
J9::Z	MemoryReference	typeNeedsAlignment(TR::Node *)
J9::Z	MemoryReference	~MemoryReference()
J9::Z	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
J9::Z	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
J9::Z	Instruction	Instruction(class J9::Z::Instruction &&)
J9::Z	Instruction	Instruction(const class J9::Z::Instruction &)
J9::Z	Instruction	addEncodingRelocation(TR::CodeGenerator *,uint8_t *,char *,uintptr_t,TR::Node *)
J9::Z	Instruction	getEncodingRelocation()
J9::Z	Instruction	operator=(class J9::Z::Instruction &&)
J9::Z	Instruction	operator=(const class J9::Z::Instruction &)
J9::Z	Instruction	setEncodingRelocation(TR::S390EncodingRelocation *)
J9::Z	Instruction	~Instruction()
J9::Z	AheadOfTimeCompile	AheadOfTimeCompile(const class J9::Z::AheadOfTimeCompile &)
J9::Z	AheadOfTimeCompile	AheadOfTimeCompile(class J9::Z::AheadOfTimeCompile &&)
J9::Z	AheadOfTimeCompile	AheadOfTimeCompile(TR::CodeGenerator *)
J9::Z	AheadOfTimeCompile	getRelocationList()
J9::Z	AheadOfTimeCompile	initialiseAOTRelocationHeader(TR::IteratedExternalRelocation *)
J9::Z	AheadOfTimeCompile	operator=(class J9::Z::AheadOfTimeCompile &&)
J9::Z	AheadOfTimeCompile	operator=(const class J9::Z::AheadOfTimeCompile &)
J9::Z	AheadOfTimeCompile	processRelocations()
J9::Z	AheadOfTimeCompile	~AheadOfTimeCompile()
