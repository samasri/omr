OMR	Symbol	getKind()
OMR	Symbol	isReferenced()
OMR	RegisterMappedSymbol	self()
OMR	DataType	self()
OMR	Symbol	self()
OMR	Symbol	isStatic()
OMR	Options	self()
OMR	Register	block()
OMR	Register	getRealRegister()
OMR	Register	getRegister()
OMR	Register	self()
OMR	Register	setAssignedRegister(TR::Register *)
OMR	Register	unblock()
OMR	Symbol	getOffset()
OMR	MethodSymbol	self()
OMR	Symbol	getName()
OMR::X86	CodeGenerator	CodeGenerator()
OMR	CodeGenerator	getGlobalFPRsPreservedAcrossCalls()
OMR	CodeGenerator	getGlobalGPRsPreservedAcrossCalls()
OMR	CodeGenerator	getLinkageGlobalRegisterNumber(int8_t,TR::DataType)
OMR	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *)
OMR::X86	CodeGenerator	internalPointerSupportImplemented()
OMR::X86	CodeGenerator	longClobberEvaluate(TR::Node *)
OMR	CodeGenerator	opCodeIsNoOpOnThisPlatform(TR::ILOpCode &)
OMR::X86	CodeGenerator	~CodeGenerator()
OMR::X86	Machine	~Machine()
OMR::X86	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::X86	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::X86	RealRegister	~RealRegister()
OMR::X86	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	TreeEvaluator()
OMR::X86	TreeEvaluator	~TreeEvaluator()
OMR	CodeGenerator	CodeGenerator()
OMR	CodeGenerator	allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *)
OMR	CodeGenerator	apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	apply32BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t)
OMR	CodeGenerator	arrayInitMinimumNumberOfBytes()
OMR	CodeGenerator	arrayTranslateAndTestMinimumNumberOfIterations()
OMR	CodeGenerator	arrayTranslateMinimumNumberOfElements(_Bool,_Bool)
OMR	CodeGenerator	beginInstructionSelection()
OMR	CodeGenerator	buildRegisterMapForInstruction(class TR_GCStackMap *)
OMR	CodeGenerator	canFoldLargeOffsetInAddressing()
OMR	CodeGenerator	canNullChkBeImplicit(TR::Node *)
OMR	CodeGenerator	canTransformUnsafeCopyToArrayCopy()
OMR	CodeGenerator	codegenSupportsUnsignedIntegerDivide()
OMR	CodeGenerator	computeRegisterSaveDescription(class TR_BitVector *,_Bool)
OMR	CodeGenerator	createLinkage(enum TR_LinkageConventions)
OMR	CodeGenerator	doBinaryEncoding()
OMR	CodeGenerator	doRegisterAssignment(enum TR_RegisterKinds)
OMR	CodeGenerator	doRematerialization()
OMR	CodeGenerator	dumpDataSnippets(TR::FILE *)
OMR	CodeGenerator	emitDataSnippets()
OMR	CodeGenerator	endInstructionSelection()
OMR	CodeGenerator	estimateBinaryLength(TR::MemoryReference *)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &)
OMR	CodeGenerator	generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *)
OMR	CodeGenerator	getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions)
OMR	CodeGenerator	getMaximumNumbersOfAssignableFPRs()
OMR	CodeGenerator	getMaximumNumbersOfAssignableGPRs()
OMR	CodeGenerator	getMaximumNumbersOfAssignableVRs()
OMR	CodeGenerator	getSizeOfCombinedBuffer()
OMR	CodeGenerator	getSupportsBitOpCodes()
OMR	CodeGenerator	getSupportsBitPermute()
OMR	CodeGenerator	getSupportsEncodeUtf16BigWithSurrogateTest()
OMR	CodeGenerator	getSupportsEncodeUtf16LittleWithSurrogateTest()
OMR	CodeGenerator	getSupportsIbyteswap()
OMR	CodeGenerator	getSupportsNewObjectAlignment()
OMR	CodeGenerator	getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType)
OMR	CodeGenerator	getSupportsTenuredObjectAlignment()
OMR	CodeGenerator	hasComplexAddressingMode()
OMR	CodeGenerator	hasDataSnippets()
OMR	CodeGenerator	hasTMEvaluator()
OMR	CodeGenerator	internalPointerSupportImplemented()
OMR	CodeGenerator	isAddressScaleIndexSupported(int32_t)
OMR	CodeGenerator	isAlignmentInstruction(TR::Instruction *)
OMR	CodeGenerator	isBranchInstruction(TR::Instruction *)
OMR	CodeGenerator	isFenceInstruction(TR::Instruction *)
OMR	CodeGenerator	isLabelInstruction(TR::Instruction *)
OMR	CodeGenerator	isObjectOfSizeWorthAligning(uint32_t)
OMR	CodeGenerator	isPreservedRegister(int32_t)
OMR	CodeGenerator	isReturnInstruction(TR::Instruction *)
OMR	CodeGenerator	isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **)
OMR	CodeGenerator	materializesHeapBase()
OMR	CodeGenerator	needToAvoidCommoningInGRA()
OMR	CodeGenerator	nodeResultGPRCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *)
OMR	CodeGenerator	processIncomingParameterUsage(class TR_BitVector **,int32_t)
OMR	CodeGenerator	processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool)
OMR	CodeGenerator	removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &)
OMR	CodeGenerator	setEstimatedLocationsForDataSnippetLabels(int32_t)
OMR	CodeGenerator	simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *)
OMR	CodeGenerator	splitBlockEntry(TR::Instruction *)
OMR	CodeGenerator	splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool)
OMR	CodeGenerator	supportsAtomicAdd()
OMR	CodeGenerator	supportsComplexAddressing()
OMR	CodeGenerator	supportsDebugCounters(TR::DebugCounterInjectionPoint)
OMR	CodeGenerator	supportsDirectJNICallsForAOT()
OMR	CodeGenerator	supportsInliningOfIsInstance()
OMR	CodeGenerator	supportsMergingGuards()
OMR	CodeGenerator	supportsPassThroughCopyToNewVirtualRegister()
OMR	CodeGenerator	supportsSinglePrecisionSQRT()
OMR	CodeGenerator	updateSnippetMapWithRSD(TR::Instruction *,int32_t)
OMR	CodeGenerator	willBeEvaluatedAsCallByCodeGen(TR::Node *,TR::Compilation *)
OMR	CodeGenerator	~CodeGenerator()
OMR	DebugEnv	DebugEnv()
OMR	DebugEnv	~DebugEnv()
OMR	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR	Instruction	assignRegisters(enum TR_RegisterKinds)
OMR	Instruction	defsRegister(TR::Register *)
OMR	Instruction	dependencyRefsRegister(TR::Register *)
OMR	Instruction	estimateBinaryLength(int32_t)
OMR	Instruction	generateBinaryEncoding()
OMR	Instruction	getKind()
OMR	Instruction	getMaxPatchableInstructionLength()
OMR	Instruction	getOpCode()
OMR	Instruction	getOpCodeValue()
OMR	Instruction	isPatchBarrier()
OMR	Instruction	refsRegister(TR::Register *)
OMR	Instruction	usesRegister(TR::Register *)
OMR	Instruction	~Instruction()
OMR	Machine	~Machine()
OMR	RealRegister	getAvailableRegistersMask(enum TR_RegisterKinds)
OMR	RealRegister	regMaskToRealRegister(TR_RegisterMask,enum TR_RegisterKinds,TR::CodeGenerator *)
OMR	RealRegister	~RealRegister()
OMR	Register	Register(uint32_t)
OMR	Register	Register(enum TR_RegisterKinds)
OMR	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR	Register	~Register()
OMR	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR	Snippet	~Snippet()
OMR	TreeEvaluator	TreeEvaluator()
OMR	TreeEvaluator	~TreeEvaluator()
OMR	ArithEnv	ArithEnv()
J9	ArithEnv	ArithEnv()
OMR	ArithEnv	~ArithEnv()
J9	ArithEnv	~ArithEnv()
OMR	AutomaticSymbol	AutomaticSymbol(TR::DataType,uint32_t,const char *)
OMR	AutomaticSymbol	AutomaticSymbol(TR::DataType)
OMR	AutomaticSymbol	AutomaticSymbol(TR::DataType,uint32_t)
OMR	AutomaticSymbol	~AutomaticSymbol()
OMR	Block	Block(class TR_Memory *)
OMR	Block	Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *)
OMR	Block	~Block()
OMR	ClassEnv	ClassEnv()
J9	ClassEnv	ClassEnv()
OMR	ClassEnv	~ClassEnv()
J9	ClassEnv	~ClassEnv()
OMR	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
OMR::Z	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
J9	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
J9::Z	CodeGenPhase	CodeGenPhase(TR::CodeGenerator *)
OMR	CodeGenPhase	~CodeGenPhase()
OMR::Z	CodeGenPhase	~CodeGenPhase()
J9	CodeGenPhase	~CodeGenPhase()
J9::Z	CodeGenPhase	~CodeGenPhase()
TestCompiler	CodeGenerator	CodeGenerator()
TestCompiler::Z	CodeGenerator	CodeGenerator()
J9::X86::AMD64	CodeGenerator	CodeGenerator()
J9::X86::i386	CodeGenerator	CodeGenerator()
J9::Power	CodeGenerator	CodeGenerator()
J9::Z	CodeGenerator	CodeGenerator()
TestCompiler	CodeGenerator	~CodeGenerator()
TestCompiler::Z	CodeGenerator	~CodeGenerator()
J9::X86::AMD64	CodeGenerator	~CodeGenerator()
J9::X86::i386	CodeGenerator	~CodeGenerator()
J9::Power	CodeGenerator	~CodeGenerator()
J9::Z	CodeGenerator	~CodeGenerator()
OMR	Compilation	Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *)
OMR	Compilation	~Compilation()
J9	Compilation	~Compilation()
J9	Compilation	Compilation(int32_t,J9VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *)
OMR	CompilerEnv	CompilerEnv(TR::RawAllocator,const TR::PersistentAllocatorKit &)
OMR	DataType	DataType()
J9	DataType	DataType()
OMR	DataType	DataType(TR::DataTypes)
J9	DataType	DataType(TR::DataTypes)
OMR	DataType	~DataType()
J9	DataType	~DataType()
OMR::X86	DebugEnv	DebugEnv()
OMR::Power	DebugEnv	DebugEnv()
OMR::Z	DebugEnv	DebugEnv()
J9	DebugEnv	DebugEnv()
OMR::X86	DebugEnv	~DebugEnv()
OMR::Power	DebugEnv	~DebugEnv()
OMR::Z	DebugEnv	~DebugEnv()
J9	DebugEnv	~DebugEnv()
OMR	GCStackAtlas	GCStackAtlas(uint32_t,uint32_t,class TR_Memory *)
J9	GCStackAtlas	GCStackAtlas(uint32_t,uint32_t,class TR_Memory *)
OMR	IL	~IL()
J9	IL	~IL()
OMR	IL	IL()
J9	IL	IL()
OMR::X86	Instruction	~Instruction()
OMR::Power	Instruction	~Instruction()
OMR::Z	Instruction	~Instruction()
J9	Instruction	~Instruction()
J9::Z	Instruction	~Instruction()
OMR	KnownObjectTable	KnownObjectTable(TR::Compilation *)
J9	KnownObjectTable	KnownObjectTable(TR::Compilation *)
OMR	KnownObjectTable	~KnownObjectTable()
J9	KnownObjectTable	~KnownObjectTable()
OMR	LabelSymbol	LabelSymbol(TR::CodeGenerator *)
OMR	LabelSymbol	LabelSymbol()
OMR	LabelSymbol	LabelSymbol(TR::CodeGenerator *,TR::Block *)
OMR	LabelSymbol	~LabelSymbol()
OMR::X86::AMD64	Machine	Machine(TR::CodeGenerator *)
OMR::X86::I386	Machine	Machine(TR::CodeGenerator *)
OMR::Power	Machine	Machine(TR::CodeGenerator *)
OMR::Z	Machine	Machine(TR::CodeGenerator *)
OMR::X86::AMD64	Machine	~Machine()
OMR::X86::I386	Machine	~Machine()
OMR::Power	Machine	~Machine()
OMR::Z	Machine	~Machine()
OMR	MethodSymbol	MethodSymbol(enum TR_LinkageConventions,class TR_Method *)
J9	MethodSymbol	MethodSymbol(enum TR_LinkageConventions,class TR_Method *)
OMR	MethodSymbol	~MethodSymbol()
J9	MethodSymbol	~MethodSymbol()
OMR	Node	Node()
J9	Node	Node()
OMR	Node	Node(TR::Node *,TR::ILOpCodes,uint16_t)
J9	Node	Node(TR::Node *,TR::ILOpCodes,uint16_t)
OMR	Node	~Node()
J9	Node	~Node()
OMR	Options	Options(TR::Options &)
J9	Options	Options(TR::Options &)
OMR	Options	Options()
J9	Options	Options()
OMR	Options	Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t)
J9	Options	Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t)
OMR::X86::AMD64	RealRegister	~RealRegister()
OMR::X86::I386	RealRegister	~RealRegister()
OMR::Power	RealRegister	~RealRegister()
OMR::Z	RealRegister	~RealRegister()
OMR::Power	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::Z	RealRegister	RealRegister(TR::CodeGenerator *)
OMR::Power	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::Z	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,OMR::RealRegister::RegState,OMR::RealRegister::RegNum,OMR::RealRegister::RegMask,TR::CodeGenerator *)
OMR::Power	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::Z	RealRegister	RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *)
OMR::X86	Register	Register(uint32_t)
OMR::Power	Register	Register(uint32_t)
OMR::Z	Register	Register(uint32_t)
OMR::X86	Register	Register(enum TR_RegisterKinds)
OMR::Power	Register	Register(enum TR_RegisterKinds)
OMR::Z	Register	Register(enum TR_RegisterKinds)
OMR::X86	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR::Power	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR::Z	Register	Register(enum TR_RegisterKinds,uint16_t)
OMR::X86	Register	~Register()
OMR::Power	Register	~Register()
OMR::Z	Register	~Register()
OMR::X86	RegisterIterator	RegisterIterator(TR::Machine *,enum TR_RegisterKinds)
OMR::Power	RegisterIterator	RegisterIterator(TR::Machine *,enum TR_RegisterKinds)
OMR::Z	RegisterIterator	RegisterIterator(TR::Machine *,enum TR_RegisterKinds)
OMR::X86	RegisterIterator	~RegisterIterator()
OMR	RegisterMappedSymbol	RegisterMappedSymbol(TR::DataType,uint32_t)
OMR	RegisterMappedSymbol	RegisterMappedSymbol(int32_t)
OMR	RegisterMappedSymbol	RegisterMappedSymbol(TR::DataType)
OMR	RegisterMappedSymbol	~RegisterMappedSymbol()
OMR	ResolvedMethodSymbol	ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *)
OMR	ResolvedMethodSymbol	~ResolvedMethodSymbol()
OMR::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR::Power	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
J9	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
J9::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
J9::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *)
OMR::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR::Power	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
J9	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
J9::X86	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
J9::Z	Snippet	Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool)
OMR::X86	Snippet	~Snippet()
OMR::Power	Snippet	~Snippet()
OMR::Z	Snippet	~Snippet()
J9	Snippet	~Snippet()
J9::X86	Snippet	~Snippet()
J9::Z	Snippet	~Snippet()
OMR	StaticSymbol	StaticSymbol(TR::DataType,uint32_t)
J9	StaticSymbol	StaticSymbol(TR::DataType,uint32_t)
OMR	StaticSymbol	StaticSymbol(TR::DataType,void *)
J9	StaticSymbol	StaticSymbol(TR::DataType,void *)
OMR	StaticSymbol	StaticSymbol(TR::DataType)
J9	StaticSymbol	StaticSymbol(TR::DataType)
OMR	StaticSymbol	~StaticSymbol()
J9	StaticSymbol	~StaticSymbol()
OMR	Symbol	Symbol(TR::DataType,uint32_t)
J9	Symbol	Symbol(TR::DataType,uint32_t)
OMR	Symbol	Symbol(TR::DataType)
J9	Symbol	Symbol(TR::DataType)
OMR	Symbol	Symbol()
J9	Symbol	Symbol()
OMR	Symbol	~Symbol()
J9	Symbol	~Symbol()
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *)
OMR	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t)
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t)
OMR	SymbolReference	~SymbolReference()
J9	SymbolReference	~SymbolReference()
J9	SymbolReference	SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t,TR::class KnownObjectTable::Index)
OMR	TreeTop	TreeTop(TR::TreeTop *,TR::Node *,TR::Compilation *)
OMR	TreeTop	TreeTop(TR::Node *,TR::TreeTop *,TR::TreeTop *)
OMR	VMEnv	VMEnv()
J9	VMEnv	VMEnv()
OMR	VMEnv	~VMEnv()
J9	VMEnv	~VMEnv()
OMR	VMMethodEnv	VMMethodEnv()
J9	VMMethodEnv	VMMethodEnv()
OMR	VMMethodEnv	~VMMethodEnv()
J9	VMMethodEnv	~VMMethodEnv()
OMR::X86::AMD64	CodeGenerator	CodeGenerator()
OMR::X86::I386	CodeGenerator	CodeGenerator()
OMR::Power	CodeGenerator	CodeGenerator()
OMR::Z	CodeGenerator	CodeGenerator()
OMR::X86::AMD64	CodeGenerator	~CodeGenerator()
OMR::X86::I386	CodeGenerator	~CodeGenerator()
OMR::Power	CodeGenerator	~CodeGenerator()
OMR::Z	CodeGenerator	~CodeGenerator()
OMR	ParameterSymbol	ParameterSymbol(TR::DataType,int32_t)
OMR	ParameterSymbol	ParameterSymbol(TR::DataType,int32_t,size_t)
OMR	ParameterSymbol	~ParameterSymbol()
OMR	Optimization	Optimization(TR::OptimizationManager *)
J9	Optimization	Optimization(TR::OptimizationManager *)
OMR	Optimization	~Optimization()
J9	Optimization	~Optimization()
OMR	OptimizationManager	OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *)
J9	OptimizationManager	OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *)
OMR	OptimizationManager	~OptimizationManager()
J9	OptimizationManager	~OptimizationManager()
OMR	MonitorTable	MonitorTable()
J9	MonitorTable	MonitorTable()
OMR	IlGeneratorMethodDetails	self()
OMR	IlGenRequest	IlGenRequest(TR::IlGeneratorMethodDetails &)
OMR	IlGenRequest	~IlGenRequest()
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails()
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails()
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class TR_ResolvedMethod *)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(class TR_ResolvedMethod *)
TestCompiler	IlGeneratorMethodDetails	IlGeneratorMethodDetails(TR::ResolvedMethod *)
TestCompiler	IlGeneratorMethodDetails	~IlGeneratorMethodDetails()
J9	IlGeneratorMethodDetails	~IlGeneratorMethodDetails()
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(J9Method *const)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(const TR::IlGeneratorMethodDetails &)
J9	IlGeneratorMethodDetails	operator=(const TR::IlGeneratorMethodDetails &)
J9	IlGeneratorMethodDetails	IlGeneratorMethodDetails(struct J9Method *const)
OMR	IlGeneratorMethodDetails	IlGeneratorMethodDetails()
OMR	IlGeneratorMethodDetails	print(class TR_FrontEnd *,TR::FILE *)
OMR	IlGeneratorMethodDetails	~IlGeneratorMethodDetails()
OMR	TransformUtil	TransformUtil()
J9	TransformUtil	TransformUtil()
OMR	Linkage	createEpilogue(TR::Instruction *)
OMR	Linkage	createPrologue(TR::Instruction *)
OMR	Linkage	getRightToLeft()
OMR	Linkage	mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &)
OMR	Linkage	mapStack(TR::ResolvedMethodSymbol *)
OMR	Linkage	numArgumentRegisters(enum TR_RegisterKinds)
OMR	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *)
OMR	Linkage	~Linkage()
OMR::X86	Linkage	Linkage(TR::CodeGenerator *)
OMR::Power	Linkage	Linkage(TR::CodeGenerator *)
J9::X86	Linkage	Linkage(TR::CodeGenerator *)
OMR::X86	Linkage	~Linkage()
OMR::Power	Linkage	~Linkage()
OMR::Z	Linkage	~Linkage()
J9::X86	Linkage	~Linkage()
J9::Z	Linkage	~Linkage()
OMR::Z	Linkage	Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions)
J9::Z	Linkage	Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions)
OMR::Z	Register	FlattenRegisterPairs(TR_Queue<TR::Register> *)
OMR	Register	getHighOrder()
OMR	Register	getLowOrder()
OMR	Register	getRegisterPair()
OMR::Z	Register	usesRegister(TR::Register *)
OMR	RegisterPair	RegisterPair(enum TR_RegisterKinds)
OMR::Z	RegisterPair	RegisterPair(enum TR_RegisterKinds)
OMR	RegisterPair	RegisterPair()
OMR::Z	RegisterPair	RegisterPair()
OMR	RegisterPair	RegisterPair(TR::Register *,TR::Register *)
OMR::Z	RegisterPair	RegisterPair(TR::Register *,TR::Register *)
OMR	RegisterPair	~RegisterPair()
OMR::Z	RegisterPair	~RegisterPair()
OMR	AheadOfTimeCompile	AheadOfTimeCompile(uint32_t *,TR::Compilation *)
OMR::Power	AheadOfTimeCompile	AheadOfTimeCompile(uint32_t *,TR::Compilation *)
OMR	AheadOfTimeCompile	~AheadOfTimeCompile()
OMR::Power	AheadOfTimeCompile	~AheadOfTimeCompile()
J9::X86	AheadOfTimeCompile	~AheadOfTimeCompile()
J9::Power	AheadOfTimeCompile	~AheadOfTimeCompile()
J9::Z	AheadOfTimeCompile	~AheadOfTimeCompile()
J9::X86	AheadOfTimeCompile	AheadOfTimeCompile(TR::CodeGenerator *)
J9::Power	AheadOfTimeCompile	AheadOfTimeCompile(TR::CodeGenerator *)
J9::Z	AheadOfTimeCompile	AheadOfTimeCompile(TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::MemoryReference &,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86	MemoryReference	assignRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::X86	MemoryReference	blockRegisters()
OMR::X86	MemoryReference	decNodeReferenceCounts(TR::CodeGenerator *)
OMR::X86	MemoryReference	estimateBinaryLength(TR::CodeGenerator *)
OMR::X86	MemoryReference	generateBinaryEncoding(uint8_t *,TR::Instruction *,TR::CodeGenerator *)
OMR::X86	MemoryReference	getAddressRegister()
OMR::X86	MemoryReference	jitPersistentAlloc(size_t)
OMR::X86	MemoryReference	jitPersistentFree(void *)
OMR::X86	MemoryReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete(void *,size_t)
OMR::X86	MemoryReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator delete(void *,TR::Region &)
OMR::X86	MemoryReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator delete[](void *,TR::Region &)
OMR::X86	MemoryReference	operator new(size_t,TR::Region &)
OMR::X86	MemoryReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR::X86	MemoryReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator new(size_t,TR_ArenaAllocator *)
OMR::X86	MemoryReference	operator new(size_t,class TR_PersistentMemory *)
OMR::X86	MemoryReference	operator new[](size_t,TR::Region &)
OMR::X86	MemoryReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR::X86	MemoryReference	operator new[](size_t,class TR_PersistentMemory *)
OMR::X86	MemoryReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR::X86	MemoryReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR::X86	MemoryReference	unblockRegisters()
OMR::X86	MemoryReference	useRegisters(TR::Instruction *,TR::CodeGenerator *)
OMR::X86	MemoryReference	~MemoryReference()
OMR	MemoryReference	jitPersistentAlloc(size_t)
OMR	MemoryReference	jitPersistentFree(void *)
OMR	MemoryReference	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete(void *,size_t)
OMR	MemoryReference	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator delete(void *,TR::Region &)
OMR	MemoryReference	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator delete[](void *,TR::Region &)
OMR	MemoryReference	operator new(size_t,TR::Region &)
OMR	MemoryReference	operator new(size_t,TR::Internal::PersistentNewType)
OMR	MemoryReference	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator new(size_t,TR_ArenaAllocator *)
OMR	MemoryReference	operator new(size_t,class TR_PersistentMemory *)
OMR	MemoryReference	operator new[](size_t,TR::Region &)
OMR	MemoryReference	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	MemoryReference	operator new[](size_t,class TR_PersistentMemory *)
OMR	MemoryReference	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	MemoryReference	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	MemoryReference	~MemoryReference()
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	MemoryReference(intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::SymbolReference *,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *)
OMR::X86::AMD64	MemoryReference	~MemoryReference()
OMR::Power	MemoryReference	~MemoryReference()
OMR::X86	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool)
OMR::X86	MemoryReference	MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(intptrj_t,TR::CodeGenerator *)
OMR::X86	MemoryReference	MemoryReference(TR::SymbolReference *,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,uint32_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::Register *,int32_t,uint8_t,TR::CodeGenerator *)
OMR::Power	MemoryReference	MemoryReference(TR::Node *,uint32_t,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *)
J9::Z	MemoryReference	MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *)
OMR::Z	MemoryReference	MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(int32_t,TR::CodeGenerator *,_Bool)
J9::Z	MemoryReference	MemoryReference(int32_t,TR::CodeGenerator *,_Bool)
OMR::Z	MemoryReference	MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *)
J9::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *)
OMR::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *)
J9::Z	MemoryReference	MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *)
OMR::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *)
J9::Z	MemoryReference	MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *)
OMR::Z	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *)
J9::Z	MemoryReference	MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *)
OMR	ELFRelocationResolver	ELFRelocationResolver()
OMR	ELFRelocationResolver	resolveRelocationType(const TR::StaticRelocation &)
OMR	ELFRelocationResolver	~ELFRelocationResolver()
OMR	CodeCacheConfig	CodeCacheConfig()
OMR::Power	CodeCacheConfig	CodeCacheConfig()
OMR	CodeCacheConfig	~CodeCacheConfig()
OMR::Power	CodeCacheConfig	~CodeCacheConfig()
TestCompiler	CodeCacheManager	CodeCacheManager(TR::RawAllocator)
TestCompiler	CodeCacheManager	~CodeCacheManager()
J9	CodeCacheManager	CodeCacheManager(class TR_FrontEnd *,TR::RawAllocator)
OMR::X86::AMD64	ELFRelocationResolver	ELFRelocationResolver()
OMR::X86::AMD64	ELFRelocationResolver	~ELFRelocationResolver()
OMR	CodeCacheManager	CodeCacheManager(TR::RawAllocator)
OMR	CodeCacheManager	self()
OMR	CodeCacheManager	~CodeCacheManager()
OMR	CodeCache	CodeCache()
J9	CodeCache	CodeCache()
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,size_t)
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,uint8_t *)
J9	CodeCacheMemorySegment	CodeCacheMemorySegment(uint8_t *,uint8_t *)
OMR	CodeCacheMemorySegment	CodeCacheMemorySegment()
J9	CodeCacheMemorySegment	CodeCacheMemorySegment()
J9	CodeCacheMemorySegment	CodeCacheMemorySegment(J9MemorySegment *)
OMR	CodeGenerator	codegenMulDecomposition(int64_t)
OMR	CodeGenerator	getRegisterMapInfoBitsMask()
OMR	CodeGenerator	getVMThreadGlobalRegisterNumber()
OMR	CodeGenerator	pickRegister(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &,TR_GlobalRegisterNumber &,TR_LinkHead<class TR_RegisterCandidate> *)
OMR	CodeGenerator	apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	apply16BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t)
OMR	CodeGenerator	apply24BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	apply64BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *)
OMR	CodeGenerator	branchesAreExpensive()
OMR	CodeGenerator	calculateRegisterPressure()
OMR	CodeGenerator	canTransformUnsafeSetMemory()
OMR	CodeGenerator	doPeephole()
OMR	CodeGenerator	generateNop(TR::Node *,TR::Instruction *,enum TR_NOPKind)
OMR	CodeGenerator	getCurrentBlockIndex()
OMR	CodeGenerator	getInternalPtrMapBit()
OMR	CodeGenerator	getMaximumNumberOfFPRsAllowedAcrossEdge(TR::Node *)
OMR	CodeGenerator	getNextAvailableBlockIndex()
OMR	CodeGenerator	getPreferredLoopUnrollFactor()
OMR	CodeGenerator	getSupportsConstantOffsetInAddressing(int64_t)
OMR	CodeGenerator	getSupportsTLE()
OMR	CodeGenerator	ilOpCodeIsSupported(TR::ILOpCodes)
OMR	CodeGenerator	isGlobalRegisterAvailable(TR_GlobalRegisterNumber,TR::DataType)
OMR	CodeGenerator	isOutOfLineHotPath()
OMR	CodeGenerator	isRotateAndMask(TR::Node *)
OMR	CodeGenerator	isSnippetMatched(TR::Snippet *,int32_t,TR::SymbolReference *)
OMR	CodeGenerator	materializesLargeConstants()
OMR	CodeGenerator	mulDecompositionCostIsJustified(int,char [],char [],int64_t)
OMR	CodeGenerator	needsNormalizationBeforeShifts()
OMR	CodeGenerator	setCurrentBlockIndex(int32_t)
OMR	CodeGenerator	setNextAvailableBlockIndex(int32_t)
OMR	CodeGenerator	shouldValueBeInACommonedNode(int64_t)
OMR	CodeGenerator	supportsFusedMultiplyAdd()
OMR	CodeGenerator	supportsNegativeFusedMultiplyAdd()
OMR	Instruction	getBinaryLengthLowerBound()
OMR	Instruction	remove()
OMR	Instruction	setOpCodeValue(TR::class InstOpCode::Mnemonic)
OMR	TreeEvaluator	unImpOpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR	Linkage	Linkage()
OMR	Linkage	hasToBeOnStack(TR::ParameterSymbol *)
OMR	CodeGenPhase	getName()
OMR	CodeGenPhase	getName(enum OMR::CodeGenPhase::PhaseValue)
OMR	CodeGenPhase	getNumPhases()
OMR	CodeGenerator	IsInMemoryType(TR::DataType)
OMR	CodeGenerator	apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool)
OMR	CodeGenerator	apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool)
OMR	CodeGenerator	apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *)
OMR	CodeGenerator	arithmeticNeedsLiteralFromPool(TR::Node *)
OMR	CodeGenerator	arrayTranslateTableRequiresAlignment(_Bool,_Bool)
OMR	CodeGenerator	bitwiseOpNeedsLiteralFromPool(TR::Node *,TR::Node *)
OMR	CodeGenerator	bndsChkNeedsLiteralFromPool(TR::Node *)
OMR	CodeGenerator	canBeAffectedByStoreTagStalls()
OMR	CodeGenerator	canUseImmedInstruction(int64_t)
OMR	CodeGenerator	codegenSupportsLoadlessBNDCheck()
OMR	CodeGenerator	considerTypeForGRA(TR::DataType)
OMR	CodeGenerator	considerTypeForGRA(TR::Node *)
OMR	CodeGenerator	considerTypeForGRA(TR::SymbolReference *)
OMR	CodeGenerator	constLoadNeedsLiteralFromPool(TR::Node *)
OMR	CodeGenerator	doInstructionSelection()
OMR	CodeGenerator	dumpTargetAddressSnippets(TR::FILE *)
OMR	CodeGenerator	emitTargetAddressSnippets()
OMR	CodeGenerator	enableLiteralPoolRegisterForGRA()
OMR	CodeGenerator	endInternalControlFlow(TR::Instruction *)
OMR	CodeGenerator	excludeInvariantsFromGRAEnabled()
OMR	CodeGenerator	getGlobalGPRFromHPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	getGlobalHPRFromGPR(TR_GlobalRegisterNumber)
OMR	CodeGenerator	getGlobalRegisterNumber(uint32_t)
OMR	CodeGenerator	getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Block *)
OMR	CodeGenerator	getMaximumNumberOfVRFsAllowedAcrossEdge(TR::Node *)
OMR	CodeGenerator	getMinByteForLongCompareNarrower()
OMR	CodeGenerator	getMinShortForLongCompareNarrower()
OMR	CodeGenerator	hasTargetAddressSnippets()
OMR	CodeGenerator	isInternalControlFlowReg(TR::Register *)
OMR	CodeGenerator	isLiteralPoolOnDemandOn()
OMR	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
OMR	CodeGenerator	lowerTreesPropagateBlockToNode(TR::Node *)
OMR	CodeGenerator	lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t)
OMR	CodeGenerator	nodeMayCauseException(TR::Node *)
OMR	CodeGenerator	preLowerTrees()
OMR	CodeGenerator	prepareForGRA()
OMR	CodeGenerator	prepareRegistersForAssignment()
OMR	CodeGenerator	setEstimatedLocationsForTargetAddressSnippetLabels(int32_t)
OMR	CodeGenerator	setOnDemandLiteralPoolRun(_Bool)
OMR	CodeGenerator	setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &)
OMR	CodeGenerator	setVMThreadRequired(_Bool)
OMR	CodeGenerator	shouldYankCompressedRefs()
OMR	CodeGenerator	startInternalControlFlow(TR::Instruction *)
OMR	CodeGenerator	supports32bitAiadd()
OMR	CodeGenerator	supportsDirectIntegralLoadStoresFromLiteralPool()
OMR	CodeGenerator	supportsHighWordFacility()
OMR	CodeGenerator	supportsLengthMinusOneForMemoryOpts()
OMR	CodeGenerator	supportsLongRegAllocation()
OMR	CodeGenerator	supportsOnDemandLiteralPool()
OMR	CodeGenerator	supportsTrapsInTMRegion()
OMR	CodeGenerator	usesImplicit64BitGPRs(TR::Node *)
OMR	CodeGenerator	yankIndexScalingOp()
OMR	Machine	getRealRegister(TR_GlobalRegisterNumber)
OMR	RealRegister	setHasBeenAssignedInMethod(_Bool)
OMR	Register	containsCollectedReference()
OMR	Register	decFutureUseCount(ncount_t)
OMR	Register	resetIsLive()
OMR	Register	setContainsCollectedReference()
OMR	Register	setPlaceholderReg()
OMR	TreeEvaluator	badILOpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR	Linkage	getRegisterSaveSize()
OMR	Linkage	setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &)
OMR	Linkage	useCachedStaticAreaAddresses(TR::Compilation *)
OMR	RegisterPair	setHighOrder(TR::Register *,TR::CodeGenerator *)
OMR	RegisterPair	setLowOrder(TR::Register *,TR::CodeGenerator *)
OMR	ArithEnv	doubleAddDouble(double,double)
OMR	ArithEnv	doubleDivideDouble(double,double)
OMR	ArithEnv	doubleMultiplyDouble(double,double)
OMR	ArithEnv	doubleNegate(double)
OMR	ArithEnv	doubleRemainderDouble(double,double)
OMR	ArithEnv	doubleSubtractDouble(double,double)
OMR	ArithEnv	doubleToFloat(double)
OMR	ArithEnv	floatAddFloat(float,float)
OMR	ArithEnv	floatDivideFloat(float,float)
OMR	ArithEnv	floatMultiplyFloat(float,float)
OMR	ArithEnv	floatNegate(float)
OMR	ArithEnv	floatRemainderFloat(float,float)
OMR	ArithEnv	floatSubtractFloat(float,float)
OMR	ArithEnv	floatToDouble(float)
OMR	ArithEnv	longDivideLong(int64_t,int64_t)
OMR	ArithEnv	longMultiplyLong(int64_t,int64_t)
OMR	ArithEnv	longRemainderLong(int64_t,int64_t)
OMR	ClassEnv	classDepthOf(class TR_OpaqueClassBlock *)
OMR	ClassEnv	classFromJavaLangClass(TR::Compilation *,uintptrj_t)
OMR	ClassEnv	classNameChars(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &)
OMR	ClassEnv	classNameChars(TR::Compilation *,TR::SymbolReference *,int32_t &)
OMR	ClassEnv	classObjectsMayBeCollected()
OMR	ClassEnv	classSignature(TR::Compilation *,class TR_OpaqueClassBlock *,class TR_Memory *)
OMR	ClassEnv	classSignature_DEPRECATED(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &,class TR_Memory *)
OMR	ClassEnv	classesOnHeap()
OMR	ClassEnv	flagValueForArrayCheck(TR::Compilation *)
OMR	ClassEnv	flagValueForFinalizerCheck(TR::Compilation *)
OMR	ClassEnv	flagValueForPrimitiveTypeCheck(TR::Compilation *)
OMR	ClassEnv	getArrayElementWidthInBytes(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	getStringCharacter(TR::Compilation *,uintptrj_t,int32_t)
OMR	ClassEnv	getStringFieldByName(TR::Compilation *,TR::SymbolReference *,TR::SymbolReference *,void *&)
OMR	ClassEnv	hasFinalFieldsInClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	hasFinalizer(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isAbstractClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isAnonymousClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isClassArray(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isClassFinal(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isClassInitialized(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isInterfaceClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isPrimitiveArray(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isPrimitiveClass(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isReferenceArray(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isString(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	isString(TR::Compilation *,uintptrj_t)
OMR	ClassEnv	isStringClass(uintptrj_t)
OMR	ClassEnv	isStringClass(class TR_OpaqueClassBlock *)
OMR	ClassEnv	jitFieldsAreSame(TR::Compilation *,class TR_ResolvedMethod *,int32_t,class TR_ResolvedMethod *,int32_t,int32_t)
OMR	ClassEnv	jitStaticsAreSame(TR::Compilation *,class TR_ResolvedMethod *,int32_t,class TR_ResolvedMethod *,int32_t)
OMR	ClassEnv	objectClass(TR::Compilation *,uintptrj_t)
OMR	ClassEnv	persistentClassPointerFromClassPointer(TR::Compilation *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	sameClassLoaders(TR::Compilation *,class TR_OpaqueClassBlock *,class TR_OpaqueClassBlock *)
OMR	ClassEnv	vTableSlot(TR::Compilation *,class TR_OpaqueMethodBlock *,class TR_OpaqueClassBlock *)
OMR::Z	CodeGenPhase	getName()
OMR::Z	CodeGenPhase	getName(enum OMR::CodeGenPhase::PhaseValue)
OMR::Z	CodeGenPhase	getNumPhases()
OMR	CodeGenPhase	reportPhase(enum OMR::CodeGenPhase::PhaseValue)
OMR	CodeGenerator	addProjectSpecializedPairRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
OMR	CodeGenerator	addProjectSpecializedRelocation(TR::Instruction *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
OMR	CodeGenerator	addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *)
OMR	CodeGenerator	buildInterpreterEntryPoint()
OMR	CodeGenerator	createHWPRecords()
OMR	CodeGenerator	createLinkageForCompilation()
OMR	CodeGenerator	createStackAtlas()
OMR::Z	CodeGenerator	doInstructionSelection()
OMR	CodeGenerator	generateCatchBlockBBStartPrologue(TR::Node *,TR::Instruction *)
OMR	CodeGenerator	jitAdd32BitPicToPatchOnClassRedefinition(void *,void *,_Bool)
OMR	CodeGenerator	jitAdd32BitPicToPatchOnClassUnload(void *,void *)
OMR	CodeGenerator	jitAddPicToPatchOnClassRedefinition(void *,void *,_Bool)
OMR	CodeGenerator	jitAddPicToPatchOnClassUnload(void *,void *)
OMR	CodeGenerator	jitAddUnresolvedAddressMaterializationToPatchOnClassRedefinition(void *)
OMR	CodeGenerator	lowerTree(TR::Node *,TR::TreeTop *)
OMR::Z	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
OMR	CodeGenerator	lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
OMR	CodeGenerator	lowerTreesPreTreeTopVisit(TR::TreeTop *,vcount_t)
OMR	CodeGenerator	mustGenerateSwitchToInterpreterPrePrologue()
OMR	CodeGenerator	needClassAndMethodPointerRelocations()
OMR	CodeGenerator	needRelocationsForStatics()
OMR::Z	CodeGenerator	preLowerTrees()
OMR	CodeGenerator	processRelocations()
OMR	CodeGenerator	registerAssumptions()
OMR	CodeGenerator	setUpForInstructionSelection()
OMR	CodeGenerator	supportsMethodEntryPadding()
OMR	CodeGenerator	supportsUnneededLabelRemoval()
OMR	CodeGenerator	wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const uint8_t *)
OMR	CodeGenerator	wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const TR::Node *)
OMR	Compilation	compilationShouldBeInterrupted(enum TR_CallingContext)
OMR	Compilation	compileRelocatableCode()
OMR	Compilation	freeKnownObjectTable()
OMR	Compilation	getOrCreateKnownObjectTable()
OMR	Compilation	hasBlockFrequencyInfo()
OMR	Compilation	isJProfilingCompilation()
OMR	Compilation	isRecompilationEnabled()
OMR	Compilation	isShortRunningMethod(int32_t)
OMR	Compilation	jitPersistentAlloc(size_t)
OMR	Compilation	jitPersistentFree(void *)
OMR	Compilation	maxInternalPointers()
OMR	Compilation	notYetRunMeansCold()
OMR	Compilation	operator delete(void *,TR::Region &)
OMR	Compilation	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator delete(void *,size_t)
OMR	Compilation	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator delete[](void *,TR::Region &)
OMR	Compilation	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	operator new(size_t,TR::Region &)
OMR	Compilation	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Compilation	operator new(size_t,class TR_PersistentMemory *)
OMR	Compilation	operator new(size_t,TR_ArenaAllocator *)
OMR	Compilation	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Compilation	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new[](size_t,class TR_PersistentMemory *)
OMR	Compilation	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Compilation	operator new[](size_t,TR::Region &)
OMR	Compilation	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Compilation	pendingPushLivenessDuringIlgen()
OMR	Compilation	reportAnalysisPhase(uint8_t)
OMR	Compilation	reportILGeneratorPhase()
OMR	Compilation	reportOptimizationPhase(OMR::Optimizations)
OMR	Compilation	reportOptimizationPhaseForSnap(OMR::Optimizations)
OMR	Compilation	restoreCompilationPhase(CompilationPhase)
OMR	Compilation	saveCompilationPhase()
OMR	Compilation	useAnchors()
OMR	Compilation	useCompressedPointers()
OMR	CompilerEnv	initializeTargetEnvironment()
OMR	CompilerEnv	~CompilerEnv()
OMR	DataType	canGetMaxPrecisionFromType()
OMR	DataType	getDataTypeConversion(TR::DataType,TR::DataType)
OMR	DataType	getMaxPrecisionFromType()
OMR	DataType	getName(TR::DataType)
OMR	DataType	getPrefix(TR::DataType)
OMR	DataType	getSize(TR::DataType)
OMR	DataType	isFloatingPoint()
OMR	DataType	setSize(TR::DataType,int32_t)
OMR	DebugEnv	breakPoint()
OMR	DebugEnv	extraAssertMessage(TR::Compilation *)
OMR	GCStackAtlas	close(TR::CodeGenerator *)
OMR	GCStackAtlas	jitPersistentAlloc(size_t)
OMR	GCStackAtlas	jitPersistentFree(void *)
OMR	GCStackAtlas	operator delete(void *,size_t)
OMR	GCStackAtlas	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator delete(void *,TR::Region &)
OMR	GCStackAtlas	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator delete[](void *,TR::Region &)
OMR	GCStackAtlas	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new(size_t,TR::Region &)
OMR	GCStackAtlas	operator new(size_t,TR::Internal::PersistentNewType)
OMR	GCStackAtlas	operator new(size_t,class TR_PersistentMemory *)
OMR	GCStackAtlas	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator new(size_t,TR_ArenaAllocator *)
OMR	GCStackAtlas	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	GCStackAtlas	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	GCStackAtlas	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	GCStackAtlas	operator new[](size_t,class TR_PersistentMemory *)
OMR	GCStackAtlas	operator new[](size_t,TR::Region &)
OMR	GCStackAtlas	~GCStackAtlas()
OMR	IL	opCodeForCompareEquals(TR::DataType)
OMR	IL	opCodeForCompareNotEquals(TR::DataType)
OMR	IL	opCodeForConst(TR::DataType)
OMR	IL	opCodeForCorrespondingIndirectLoad(TR::ILOpCodes)
OMR	IL	opCodeForCorrespondingIndirectStore(TR::ILOpCodes)
OMR	IL	opCodeForDirectLoad(TR::DataType)
OMR	IL	opCodeForDirectStore(TR::DataType)
OMR	IL	opCodeForIndirectArrayLoad(TR::DataType)
OMR	IL	opCodeForIndirectArrayStore(TR::DataType)
OMR	IL	opCodeForIndirectLoad(TR::DataType)
OMR	IL	opCodeForIndirectStore(TR::DataType)
OMR	IL	opCodeForRegisterLoad(TR::DataType)
OMR	IL	opCodeForRegisterStore(TR::DataType)
OMR	IO	fclose(TR::FILE *)
OMR	IO	fflush(TR::FILE *)
OMR	IO	fopen(char *,const char *,_Bool)
OMR	IO	fprintf(TR::FILE *,const char *)
OMR	IO	fseek(TR::FILE *,intptr_t,int32_t)
OMR	IO	ftell(TR::FILE *)
OMR	IO	vfprintf(TR::FILE *,const char *,va_list)
OMR	IlGeneratorMethodDetails	create(TR::IlGeneratorMethodDetails &,class TR_ResolvedMethod *)
OMR	IlGeneratorMethodDetails	isMethodInProgress()
OMR	IlGeneratorMethodDetails	supportsInvalidation()
OMR::X86	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Power	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Z	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::X86	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Power	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR::Z	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
OMR	Instruction	getGCMap()
OMR	Instruction	getGCRegisterMask()
OMR	Instruction	getLiveLocals()
OMR	Instruction	getLiveMonitors()
OMR	Instruction	getRegisterSaveDescription()
OMR	Instruction	needsAOTRelocation()
OMR	Instruction	needsGCMap()
OMR	Instruction	setGCMap(class TR_GCStackMap *)
OMR	Instruction	setLiveLocals(class TR_BitVector *)
OMR	Instruction	setLiveMonitors(class TR_BitVector *)
OMR	Instruction	setNeedsAOTRelocation(_Bool)
OMR	Instruction	setNeedsGCMap(TCollectableReferenceMask)
OMR	Instruction	setRegisterSaveDescription(int32_t)
OMR	KnownObjectTable	dumpTo(TR::FILE *,TR::Compilation *)
OMR	KnownObjectTable	getEndIndex()
OMR	KnownObjectTable	getIndex(uintptrj_t)
OMR	KnownObjectTable	getPointerLocation(Index)
OMR	KnownObjectTable	isNull(Index)
OMR	MethodSymbol	isPureFunction()
OMR	MethodSymbol	safeToSkipArrayStoreChecks()
OMR	MethodSymbol	safeToSkipBoundChecks()
OMR	MethodSymbol	safeToSkipCheckCasts()
OMR	MethodSymbol	safeToSkipChecksOnArrayCopies()
OMR	MethodSymbol	safeToSkipDivChecks()
OMR	MethodSymbol	safeToSkipNullChecks()
OMR	MethodSymbol	safeToSkipZeroInitializationOnNewarrays()
OMR	Node	Node(TR::Node *,uint16_t)
OMR	Node	copyValidProperties(TR::Node *,TR::Node *)
OMR	Node	devirtualizeCall(TR::TreeTop *)
OMR	Node	getFloat()
OMR	Node	getSize()
OMR	Node	getTypeSignature(int32_t &,enum TR_AllocationKind)
OMR	Node	isArrayCopyCall()
OMR	Node	requiresRegisterPair(TR::Compilation *)
OMR	Node	setFloat(float)
OMR	Options	feLatePostProcess(void *,TR::OptionSet *)
OMR	Options	fePostProcessAOT(void *)
OMR	Options	fePostProcessJIT(void *)
OMR	Options	fePreProcess(void *)
OMR	Options	inlinefileOption(char *,void *,TR::OptionTable *)
OMR	Options	limitOption(char *,void *,TR::OptionTable *)
OMR	Options	limitfileOption(char *,void *,TR::OptionTable *)
OMR	Options	showOptionsInEffect()
OMR	Options	showPID()
OMR	Options	useCompressedPointers()
OMR	Options	versionOption(char *,void *,TR::OptionTable *)
OMR	Snippet	emitSnippet()
J9	Symbol	getRecognizedField()
OMR	Symbol	convertTypeToSize(TR::DataType)
OMR	Symbol	jitPersistentAlloc(size_t)
OMR	Symbol	jitPersistentFree(void *)
OMR	Symbol	operator delete(void *,size_t)
OMR	Symbol	operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete(void *,TR::Region &)
OMR	Symbol	operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete(void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator delete[](void *,TR::Region &)
OMR	Symbol	operator new(size_t,TR::Region &)
OMR	Symbol	operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator new(size_t,class TR_PersistentMemory *)
OMR	Symbol	operator new(size_t,TR_ArenaAllocator *)
OMR	Symbol	operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator new(size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator new(size_t,TR::Internal::PersistentNewType)
OMR	Symbol	operator new[](size_t,class TR_PersistentMemory *)
OMR	Symbol	operator new[](size_t,TR::Internal::PersistentNewType)
OMR	Symbol	operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)
OMR	Symbol	operator new[](size_t,TR::Region &)
OMR	Symbol	operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)
OMR	Symbol	setDataType(TR::DataType)
OMR	SymbolReference	getTypeSignature(int32_t &,enum TR_AllocationKind,_Bool *)
OMR::X86::AMD64	TreeEvaluator	TreeEvaluator()
OMR::X86::I386	TreeEvaluator	TreeEvaluator()
OMR::X86::AMD64	TreeEvaluator	~TreeEvaluator()
OMR::X86::I386	TreeEvaluator	~TreeEvaluator()
OMR	VMEnv	OSRFrameHeaderSizeInBytes(TR::Compilation *)
OMR	VMEnv	OSRFrameSizeInBytes(TR::Compilation *,class TR_OpaqueMethodBlock *)
OMR	VMEnv	acquireVMAccessIfNeeded(OMR_VMThread *)
OMR	VMEnv	acquireVMAccessIfNeeded(TR::Compilation *)
OMR	VMEnv	canMethodEnterEventBeHooked(TR::Compilation *)
OMR	VMEnv	canMethodExitEventBeHooked(TR::Compilation *)
OMR	VMEnv	cpuTimeSpentInCompilationThread(TR::Compilation *)
OMR	VMEnv	ensureOSRBufferSize(TR::Compilation *,uintptrj_t,uintptrj_t,uintptrj_t)
OMR	VMEnv	getHighResClock(TR::Compilation *)
OMR	VMEnv	getHighResClock(OMR_VMThread *)
OMR	VMEnv	getHighResClockResolution()
OMR	VMEnv	getOverflowSafeAllocSize(TR::Compilation *)
OMR	VMEnv	getUSecClock(TR::Compilation *)
OMR	VMEnv	getUSecClock(OMR_VMThread *)
OMR	VMEnv	hasAccess(OMR_VMThread *)
OMR	VMEnv	hasAccess(TR::Compilation *)
OMR	VMEnv	hasResumableTrapHandler(TR::Compilation *)
OMR	VMEnv	hasResumableTrapHandler(OMR_VMThread *)
OMR	VMEnv	heapBaseAddress()
OMR	VMEnv	maxHeapSizeInBytes()
OMR	VMEnv	releaseAccess(OMR_VMThread *)
OMR	VMEnv	releaseAccess(TR::Compilation *)
OMR	VMEnv	releaseVMAccessIfNeeded(OMR_VMThread *,_Bool)
OMR	VMEnv	releaseVMAccessIfNeeded(TR::Compilation *,_Bool)
OMR	VMEnv	thisThreadGetConcurrentScavengeActiveByteAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetEvacuateBaseAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetEvacuateTopAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetGSHandlerAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetGSIntermediateResultOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetGSOperandAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetOSRReturnAddressOffset(TR::Compilation *)
OMR	VMEnv	thisThreadGetPendingExceptionOffset()
OMR	VMEnv	tryToAcquireAccess(OMR_VMThread *,_Bool *)
OMR	VMEnv	tryToAcquireAccess(TR::Compilation *,_Bool *)
OMR	VMMethodEnv	hasBackwardBranches(class TR_OpaqueMethodBlock *)
OMR	VMMethodEnv	isCompiledMethod(class TR_OpaqueMethodBlock *)
OMR	VMMethodEnv	startPC(class TR_OpaqueMethodBlock *)
J9::X86	CodeGenerator	CodeGenerator()
OMR::X86	CodeGenerator	createLinkage(enum TR_LinkageConventions)
J9::X86	CodeGenerator	~CodeGenerator()
OMR::X86::AMD64	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
J9	CodeGenerator	CodeGenerator()
OMR	CodeGenerator	allocateRecompilationInfo()
OMR::X86	CodeGenerator	allowGuardMerging()
OMR::X86	CodeGenerator	beginInstructionSelection()
J9	CodeGenerator	enableAESInHardwareTransformations()
OMR::X86	CodeGenerator	endInstructionSelection()
OMR::X86	CodeGenerator	generateSwitchToInterpreterPrePrologue(TR::Instruction *,uint8_t,uint8_t)
OMR::X86	CodeGenerator	nopsAlsoProcessedByRelocations()
OMR::X86	CodeGenerator	reserveNTrampolines(int32_t)
OMR	CodeGenerator	suppressInliningOfRecognizedMethod(TR::RecognizedMethod)
J9	CodeGenerator	~CodeGenerator()
OMR::X86	TreeEvaluator	VMarrayStoreCheckArrayCopyEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMifArrayCmpEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMifInstanceOfEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	VMinlineCallEvaluator(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	directCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	reverseLoadEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	tabortEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	tfinishEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::X86	TreeEvaluator	tstartEvaluator(TR::Node *,TR::CodeGenerator *)
J9	TreeEvaluator	TreeEvaluator()
OMR	VMAccessCriticalSection	VMAccessCriticalSection(TR::Compilation *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol)
OMR	VMAccessCriticalSection	~VMAccessCriticalSection()
J9	VMAccessCriticalSection	VMAccessCriticalSection(TR::Compilation *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol)
J9	VMAccessCriticalSection	VMAccessCriticalSection(class TR_J9VMBase *,enum OMR::VMAccessCriticalSection::VMAccessAcquireProtocol,TR::Compilation *)
J9	VMAccessCriticalSection	~VMAccessCriticalSection()
OMR	TransformUtil	fieldShouldBeCompressed(TR::Node *,TR::Compilation *)
OMR	TransformUtil	transformDirectLoad(TR::Compilation *,TR::Node *)
OMR	TransformUtil	transformIndirectLoad(TR::Compilation *,TR::Node *)
OMR	TransformUtil	transformIndirectLoadChain(TR::Compilation *,TR::Node *,TR::Node *,TR::class KnownObjectTable::Index,TR::Node **)
OMR	TransformUtil	transformIndirectLoadChainAt(TR::Compilation *,TR::Node *,TR::Node *,uintptrj_t *,TR::Node **)
OMR::X86	Linkage	alignLocalObjectWithCollectedFields(uint32_t &)
OMR::X86	Linkage	alignLocalObjectWithoutCollectedFields(uint32_t &)
OMR	CodeCacheManager	addCodeCache(TR::CodeCache *)
OMR	CodeCacheManager	chooseCacheStartAddress(size_t)
OMR	CodeCacheManager	freeMemorySegment(TR::CodeCacheMemorySegment *)
OMR	CodeCacheManager	initialize(_Bool,uint32_t)
OMR	CodeCacheManager	reserveCodeCache(_Bool,size_t,int32_t,int32_t *)
OMR	CodeCacheManager	setCodeCacheFull()
OMR	CodeCacheManager	setupMemorySegmentFromRepository(uint8_t *,uint8_t *,size_t &)
OMR	AheadOfTimeCompile	dumpRelocationData()
OMR	AheadOfTimeCompile	initialiseAOTRelocationHeader(TR::IteratedExternalRelocation *)
OMR	AheadOfTimeCompile	processRelocations()
J9	AheadOfTimeCompile	~AheadOfTimeCompile()
OMR	MonitorTable	create(char *)
OMR	MonitorTable	free()
OMR	MonitorTable	removeAndDestroy(TR::Monitor *)
OMR	MonitorTable	~MonitorTable()
OMR	CodeCache	addFreeBlock(void *)
OMR	CodeCache	addResolvedMethod(class TR_OpaqueMethodBlock *)
OMR	CodeCache	allocate(TR::CodeCacheManager *,size_t,int32_t)
OMR	CodeCache	dumpCodeCache()
OMR	CodeCache	resizeCodeMemory(void *,size_t)
OMR	CodeCache	self()
OMR	CodeCache	~CodeCache()
OMR	CodeCacheMemorySegment	free(TR::CodeCacheManager *)
OMR	CodeCacheMemorySegment	operator new(size_t,TR::CodeCacheMemorySegment *)
OMR	CodeCacheMemorySegment	~CodeCacheMemorySegment()
OMR	CodeGenerator	lowerTreesPostChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
OMR	CodeGenerator	lowerTreesPostTreeTopVisit(TR::TreeTop *,vcount_t)
J9	CodeGenerator	lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t)
J9	CodeGenerator	lowerTreesPreTreeTopVisit(TR::TreeTop *,vcount_t)
OMR::X86::I386	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	CodeGenerator	createLinkage(enum TR_LinkageConventions)
OMR::Power	CodeGenerator	generateBinaryEncodingPrologue(struct TR_PPCBinaryEncodingData *)
OMR	CodeGenerator	inlineDirectCall(TR::Node *,TR::Register *&)
J9	CodeGenerator	lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *)
OMR::Power	TreeEvaluator	conditionalHelperEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	directCallEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	flushEvaluator(TR::Node *,TR::CodeGenerator *)
OMR::Power	TreeEvaluator	restoreTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
OMR::Power	TreeEvaluator	retrieveTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *)
J9	CodeGenPhase	getName()
J9	CodeGenPhase	getName(enum OMR::CodeGenPhase::PhaseValue)
J9	CodeGenPhase	getNumPhases()
OMR	CodeGenerator	allowSplitWarmAndColdBlocks()
J9	CodeGenerator	alwaysGeneratedSign(TR::Node *)
J9	CodeGenerator	alwaysGeneratesAKnownCleanSign(TR::Node *)
J9	CodeGenerator	alwaysGeneratesAKnownPositiveCleanSign(TR::Node *)
OMR::Z	CodeGenerator	createLinkage(enum TR_LinkageConventions)
J9	CodeGenerator	getMinimumNumberOfNodesBetweenMonitorsForTLE()
OMR	CodeGenerator	incRefCountForOpaquePseudoRegister(TR::Node *,TR::CodeGenerator *,TR::Compilation *)
OMR	CodeGenerator	propagateSignThroughBCDLeftShift(TR::DataType)
OMR::Z	Snippet	generateRuntimeInstrumentationOnOffInstruction(TR::CodeGenerator *,uint8_t *,TR::class InstOpCode::Mnemonic,_Bool)
OMR::Z	Snippet	getRuntimeInstrumentationOnOffInstructionLength(TR::CodeGenerator *,_Bool)
OMR::Z	TreeEvaluator	genLoadForObjectHeaders(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *)
OMR::Z	TreeEvaluator	genLoadForObjectHeadersMasked(TR::CodeGenerator *,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *)
OMR::Z	Linkage	loadUpArguments(TR::Instruction *)
OMR::Z	MemoryReference	addInstrSpecificRelocation(TR::CodeGenerator *,TR::Instruction *,int32_t,uint8_t *)
OMR::Z	MemoryReference	createPatchableDataInLitpool(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::UnresolvedDataSnippet *)
OMR::Z	MemoryReference	createUnresolvedDataSnippet(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *,_Bool)
OMR::Z	MemoryReference	createUnresolvedDataSnippetForBaseNode(TR::CodeGenerator *,TR::Register *)
OMR::Z	MemoryReference	createUnresolvedDataSnippetForiaload(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *,_Bool &)
OMR::Z	MemoryReference	createUnresolvedSnippetWithNodeRegister(TR::Node *,TR::CodeGenerator *,TR::SymbolReference *,TR::Register *&)
OMR::Z	MemoryReference	setMemRefAndGetUnresolvedData(TR::Snippet *&)
OMR::Z	MemoryReference	symRefHasTemporaryNegativeOffset()
OMR::Z	MemoryReference	typeNeedsAlignment(TR::Node *)
OMR::Z	MemoryReference	~MemoryReference()
J9	Instruction	Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *)
J9	Instruction	Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *)
