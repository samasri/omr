self()->hasDataSnippets(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   if (self()->hasDataSnippets())
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   if (self()->hasDataSnippets())
--------------------
self()->generateDebugCounterBump(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, srm);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, delta, NULL);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, cond);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
--------------------
self()->isTargetSnippetOrOutOfLine(:
--------------------
self()->canBeAffectedByStoreTagStalls(:
--------------------
self()->generateDebugCounterBump(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, srm);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, delta, NULL);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, cond);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
--------------------
self()->removeUnavailableRegisters(:
--------------------
self()->needsNormalizationBeforeShifts(:
--------------------
self()->nodeMayCauseException(:
--------------------
self()->codegenSupportsLoadlessBNDCheck(:
--------------------
self()->branchesAreExpensive(:
--------------------
self()->emitTargetAddressSnippets(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:      self()->emitTargetAddressSnippets();
--------------------
self()->allowGlobalRegisterAcrossBranch(:
--------------------
self()->supportsInliningOfIsInstance(:
--------------------
self()->supportsHighWordFacility(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   bool enableHighWordGRA = self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA);
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:         if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA))
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA) && TR::Compiler->target.is64Bit())
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA) && !self()->comp()->getOption(TR_DisableHPRUpgrade))
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      if (self()->supportsHighWordFacility() && self()->comp()->getOption(TR_DisableHighWordRA))
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:         if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA) && TR::Compiler->target.is64Bit())
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA))
--------------------
self()->isRotateAndMask(:
--------------------
self()->getSupportsTenuredObjectAlignment(:
--------------------
self()->arrayInitMinimumNumberOfBytes(:
--------------------
self()->isPreservedRegister(:
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:      int32_t regIndex = self()->isPreservedRegister(regIt.getNextElement());
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      int32_t regIndex = self()->isPreservedRegister(regIt.getNextElement());
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      int32_t regIndex = self()->isPreservedRegister(regIt.getNextElement());
--------------------
self()->canFoldLargeOffsetInAddressing(:
--------------------
self()->getInternalPtrMapBit(:
--------------------
self()->prepareForGRA(:
--------------------
self()->isAddressScaleIndexSupported(:
--------------------
self()->constLoadNeedsLiteralFromPool(:
--------------------
self()->opCodeIsNoOpOnThisPlatform(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->opCodeIsNoOpOnThisPlatform(opCode);
--------------------
self()->arithmeticNeedsLiteralFromPool(:
--------------------
self()->shouldValueBeInACommonedNode(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->shouldValueBeInACommonedNode(value);
--------------------
self()->getMaximumNumberOfFPRsAllowedAcrossEdge(:
--------------------
self()->arrayTranslateTableRequiresAlignment(:
--------------------
self()->isObjectOfSizeWorthAligning(:
--------------------
self()->supports32bitAiadd(:
--------------------
self()->getMaximumNumbersOfAssignableVRs(:
--------------------
self()->mulDecompositionCostIsJustified(:
--------------------
self()->getRegisterMapInfoBitsMask(:
/home/sam/1omr-virtualization/compiler/codegen/CodeGenGC.cpp:      map->maskRegistersWithInfoBits(instr->getGCRegisterMask(), self()->getRegisterMapInfoBitsMask());
--------------------
self()->supportsLengthMinusOneForMemoryOpts(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   if ((node->getReferenceCount() == 1) && self()->supportsLengthMinusOneForMemoryOpts() &&
--------------------
self()->supportsDebugCounters(:
--------------------
self()->excludeInvariantsFromGRAEnabled(:
--------------------
self()->apply32BitLabelTableRelocation(:
--------------------
self()->getSizeOfCombinedBuffer(:
--------------------
self()->splitBlockEntry(:
--------------------
self()->getMaximumNumberOfGPRsAllowedAcrossEdge(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->getMaximumNumberOfGPRsAllowedAcrossEdge(node);
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   int32_t num = self()->getMaximumNumberOfGPRsAllowedAcrossEdge(node);
--------------------
self()->isBranchInstruction(:
--------------------
self()->apply24BitLabelRelativeRelocation(:
--------------------
self()->getSupportsNewObjectAlignment(:
--------------------
self()->generateDebugCounterBump(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, srm);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, delta, NULL);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, cond);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
--------------------
self()->apply32BitLabelRelativeRelocation(:
--------------------
self()->computeRegisterSaveDescription(:
--------------------
self()->startInternalControlFlow(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:         self()->startInternalControlFlow(instructionCursor);
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:               self()->startInternalControlFlow(instructionCursor);
--------------------
self()->updateSnippetMapWithRSD(:
--------------------
self()->prepareRegistersForAssignment(:
--------------------
self()->getMinByteForLongCompareNarrower(:
--------------------
self()->setNextAvailableBlockIndex(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   self()->setNextAvailableBlockIndex(comp->getFlowGraph()->getNextNodeNumber() + 1);
--------------------
self()->estimateBinaryLength(:
/home/sam/1omr-virtualization/compiler/x/codegen/OMRMemoryReference.cpp:      int32_t currentEncodingAllocation = self()->estimateBinaryLength(cg);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRMemoryReference.cpp:      int32_t potentialEncodingGrowth = self()->estimateBinaryLength(cg) - currentPatchSize;
/home/sam/1omr-virtualization/compiler/x/codegen/OMRMemoryReference.cpp:         self()->estimateBinaryLength(cg);
--------------------
self()->IsInMemoryType(:
--------------------
self()->setOnDemandLiteralPoolRun(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   self()->setOnDemandLiteralPoolRun(true);
--------------------
self()->codegenMulDecomposition(:
--------------------
self()->getSupportsOpCodeForAutoSIMD(:
--------------------
self()->hasTargetAddressSnippets(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   if (self()->hasTargetAddressSnippets())
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   if (self()->hasTargetAddressSnippets())
--------------------
self()->getMaximumNumbersOfAssignableGPRs(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:      return (self()->getMaximumNumbersOfAssignableGPRs() <= threshold);
--------------------
self()->getPreferredLoopUnrollFactor(:
--------------------
self()->endInternalControlFlow(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:            self()->endInternalControlFlow(instructionCursor);        // Walking backwards so start is end
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:                  self()->endInternalControlFlow(instructionCursor);        // Walking backwards so start is end
--------------------
self()->apply16BitLabelRelativeRelocation(:
--------------------
self()->isInternalControlFlowReg(:
--------------------
self()->setVMThreadRequired(:
--------------------
self()->generateNop(:
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      preced = self()->generateNop(node , preced , TR_NOPEndGroup);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      preced = self()->generateNop(node , preced);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      preced = self()->generateNop(node , preced);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      preced = self()->generateNop(node , preced);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:   preced = self()->generateNop(node , preced , TR_ProbeNOP);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:                  nop = self()->generateNop(data.cursorInstruction->getNode(), data.cursorInstruction->getPrev(), TR_NOPEndGroup); // handles P6, P7
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:                  nop = self()->generateNop(data.cursorInstruction->getNode(), data.cursorInstruction->getPrev(), TR_NOPStandard);
--------------------
self()->arrayTranslateMinimumNumberOfElements(:
--------------------
self()->setUnavailableRegistersUsage(:
--------------------
self()->isLabelInstruction(:
--------------------
self()->getNextAvailableBlockIndex(:
--------------------
self()->dumpTargetAddressSnippets(:
--------------------
self()->considerTypeForGRA(:
--------------------
self()->isAlignmentInstruction(:
--------------------
self()->apply12BitLabelRelativeRelocation(:
--------------------
self()->getGlobalFPRsPreservedAcrossCalls(:
/home/sam/1omr-virtualization/compiler/codegen/CodeGenRA.cpp:         preservedRegisters = self()->getGlobalFPRsPreservedAcrossCalls();
--------------------
self()->isReturnInstruction(:
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:      if (self()->isReturnInstruction(estimateCursor))
--------------------
self()->canNullChkBeImplicit(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->canNullChkBeImplicit(node, false);
/home/sam/1omr-virtualization/compiler/arm/codegen/OMRCodeGenerator.cpp:   return self()->canNullChkBeImplicit(node, true);
--------------------
self()->isLiteralPoolOnDemandOn(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   if (self()->isLiteralPoolOnDemandOn() || (!self()->comp()->hasNativeCall() && self()->getFirstSnippet() == NULL))
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   maxGPRs = 11 + (self()->isLiteralPoolOnDemandOn() ? 1 : 0)               // => Litpool ptr is available
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   //int32_t maxNumberOfAssignableGPRS = (8 + (self()->isLiteralPoolOnDemandOn() ? 1 : 0));
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   if (self()->isLiteralPoolOnDemandOn())
--------------------
self()->supportsDirectIntegralLoadStoresFromLiteralPool(:
--------------------
self()->splitEdge(:
--------------------
self()->supportsDirectJNICallsForAOT(:
--------------------
self()->canTransformUnsafeCopyToArrayCopy(:
--------------------
self()->CodeGenerator(:
--------------------
self()->supportsSinglePrecisionSQRT(:
--------------------
self()->usesImplicit64BitGPRs(:
--------------------
self()->setEstimatedLocationsForDataSnippetLabels(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:      estimatedSnippetStart = self()->setEstimatedLocationsForDataSnippetLabels(estimatedSnippetStart);
--------------------
self()->setCurrentBlockIndex(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:         self()->setCurrentBlockIndex(block->getNumber());
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      self()->setCurrentBlockIndex(instructionCursor->getBlockIndex());
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      self()->setCurrentBlockIndex(instructionCursor->getBlockIndex());
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   self()->setCurrentBlockIndex(startNode->getBlock()->getNumber());
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      self()->setCurrentBlockIndex(instructionCursor->getBlockIndex());
--------------------
self()->supportsPassThroughCopyToNewVirtualRegister(:
--------------------
self()->arrayTranslateAndTestMinimumNumberOfIterations(:
--------------------
self()->bitwiseOpNeedsLiteralFromPool(:
--------------------
self()->ilOpCodeIsSupported(:
--------------------
self()->materializesLargeConstants(:
--------------------
self()->internalPointerSupportImplemented(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->internalPointerSupportImplemented();
--------------------
self()->getMaximumNumberOfGPRsAllowedAcrossEdge(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->getMaximumNumberOfGPRsAllowedAcrossEdge(node);
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   int32_t num = self()->getMaximumNumberOfGPRsAllowedAcrossEdge(node);
--------------------
self()->doRegisterAssignment(:
--------------------
self()->getGlobalHPRFromGPR(:
/home/sam/1omr-virtualization/compiler/codegen/CodeGenRA.cpp:                  TR_GlobalRegisterNumber highWordReg = self()->getGlobalHPRFromGPR(i);
--------------------
self()->getCurrentBlockIndex(:
--------------------
self()->isGlobalRegisterAvailable(:
--------------------
self()->supportsTrapsInTMRegion(:
--------------------
self()->supportsFusedMultiplyAdd(:
--------------------
self()->lowerTreesWalk(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:      self()->lowerTreesWalk(node, tt, visitCount);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:         self()->lowerTreesWalk(child, treeTop, visitCount);
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:         self()->lowerTreesWalk(child, treeTop, visitCount);
--------------------
self()->bndsChkNeedsLiteralFromPool(:
--------------------
self()->getMaximumNumberOfVRFsAllowedAcrossEdge(:
--------------------
self()->enableLiteralPoolRegisterForGRA(:
--------------------
self()->setEstimatedLocationsForTargetAddressSnippetLabels(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:      estimatedSnippetStart = self()->setEstimatedLocationsForTargetAddressSnippetLabels(estimatedSnippetStart);
--------------------
self()->doBinaryEncoding(:
--------------------
self()->doPeephole(:
--------------------
self()->getGlobalGPRFromHPR(:
--------------------
self()->supportsComplexAddressing(:
--------------------
self()->getGlobalRegisterNumber(:
/home/sam/1omr-virtualization/compiler/il/OMRNode.cpp:         newRoot->setGlobalRegisterNumber(self()->getGlobalRegisterNumber());
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp://      traceMsg(self()->comp(), "lastLinkageGPR = %d linkaeRegisterIndex = %d  getGlobalRegisterNumber(getS390Linkage()->getIntegerArgumentRegister(linkageRegisterIndex)-1) = %d\n",machine()->getLastLinkageGPR(),linkageRegisterIndex, self()->getGlobalRegisterNumber(getS390Linkage()->getIntegerArgumentRegister(linkageRegisterIndex)-1));
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      result = self()->getGlobalRegisterNumber(self()->getS390Linkage()->getIntegerArgumentRegister(linkageRegisterIndex)-1);
--------------------
self()->getSupportsEncodeUtf16BigWithSurrogateTest(:
--------------------
self()->getVMThreadGlobalRegisterNumber(:
--------------------
self()->buildRegisterMapForInstruction(:
/home/sam/1omr-virtualization/compiler/codegen/CodeGenGC.cpp:   self()->buildRegisterMapForInstruction(map);
--------------------
self()->supportsLongRegAllocation(:
--------------------
self()->considerTypeForGRA(:
--------------------
self()->considerTypeForGRA(:
--------------------
self()->getSupportsEncodeUtf16LittleWithSurrogateTest(:
--------------------
self()->getGlobalGPRsPreservedAcrossCalls(:
/home/sam/1omr-virtualization/compiler/codegen/CodeGenRA.cpp:         preservedRegisters = self()->getGlobalGPRsPreservedAcrossCalls();
--------------------
self()->apply64BitLoadLabelRelativeRelocation(:
--------------------
self()->isSnippetMatched(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:      if (self()->isSnippetMatched(*iterator, snippetKind, symRef))
--------------------
self()->apply32BitLoadLabelRelativeRelocation(:
--------------------
self()->supportsAtomicAdd(:
--------------------
self()->dumpDataSnippets(:
--------------------
self()->supportsOnDemandLiteralPool(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   TR_ASSERT(self()->supportsOnDemandLiteralPool() == false, "May not be here with Literal Pool On Demand enabled\n");
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   TR_ASSERT(self()->supportsOnDemandLiteralPool() == false, "May not be here with Literal Pool On Demand enabled\n");
--------------------
self()->codegenSupportsUnsignedIntegerDivide(:
/home/sam/1omr-virtualization/compiler/codegen/CodeGenPrep.cpp:   if (node->getOpCodeValue() == TR::ldiv && self()->codegenSupportsUnsignedIntegerDivide())
--------------------
self()->isOutOfLineHotPath(:
--------------------
