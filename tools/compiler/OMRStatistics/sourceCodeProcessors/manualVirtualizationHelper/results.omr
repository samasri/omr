self()->allowGlobalRegisterAcrossBranch(:
--------------------
self()->supportsInliningOfIsInstance(:
--------------------
self()->supportsHighWordFacility(:
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   bool enableHighWordGRA = self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA);
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:         if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA))
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA) && TR::Compiler->target.is64Bit())
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA) && !self()->comp()->getOption(TR_DisableHPRUpgrade))
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      if (self()->supportsHighWordFacility() && self()->comp()->getOption(TR_DisableHighWordRA))
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:         if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA) && TR::Compiler->target.is64Bit())
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:   if (self()->supportsHighWordFacility() && !self()->comp()->getOption(TR_DisableHighWordRA))
--------------------
self()->isRotateAndMask(:
--------------------
self()->getSupportsTenuredObjectAlignment(:
--------------------
self()->arrayInitMinimumNumberOfBytes(:
--------------------
self()->isPreservedRegister(:
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:      int32_t regIndex = self()->isPreservedRegister(regIt.getNextElement());
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      int32_t regIndex = self()->isPreservedRegister(regIt.getNextElement());
/home/sam/1omr-virtualization/compiler/z/codegen/OMRCodeGenerator.cpp:      int32_t regIndex = self()->isPreservedRegister(regIt.getNextElement());
--------------------
self()->canFoldLargeOffsetInAddressing(:
--------------------
self()->getInternalPtrMapBit(:
--------------------
self()->prepareForGRA(:
--------------------
self()->isAddressScaleIndexSupported(:
--------------------
self()->constLoadNeedsLiteralFromPool(:
--------------------
self()->opCodeIsNoOpOnThisPlatform(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->opCodeIsNoOpOnThisPlatform(opCode);
--------------------
self()->arithmeticNeedsLiteralFromPool(:
--------------------
self()->shouldValueBeInACommonedNode(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->shouldValueBeInACommonedNode(value);
--------------------
self()->getMaximumNumberOfFPRsAllowedAcrossEdge(:
--------------------
self()->arrayTranslateTableRequiresAlignment(:
--------------------
self()->isObjectOfSizeWorthAligning(:
--------------------
self()->supports32bitAiadd(:
--------------------
self()->getMaximumNumbersOfAssignableVRs(:
--------------------
