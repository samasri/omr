self()->generateDebugCounterBump(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, srm);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, delta, NULL);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, cond);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
--------------------
self()->isTargetSnippetOrOutOfLine(:
--------------------
self()->canBeAffectedByStoreTagStalls(:
--------------------
self()->generateDebugCounterBump(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, &cond);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, aggregatedCounters, 1, srm);
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, delta, NULL);
/home/sam/1omr-virtualization/compiler/x/codegen/OMRCodeGenerator.cpp:   return self()->generateDebugCounterBump(cursor, counter, deltaReg, NULL);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, cond);
/home/sam/1omr-virtualization/compiler/p/codegen/OMRCodeGenerator.cpp:      cursor = self()->generateDebugCounterBump(cursor, counter, deltaReg, srm);
--------------------
self()->removeUnavailableRegisters(:
--------------------
self()->needsNormalizationBeforeShifts(:
--------------------
self()->nodeMayCauseException(:
--------------------
self()->codegenSupportsLoadlessBNDCheck(:
--------------------
self()->branchesAreExpensive(:
--------------------
self()->emitTargetAddressSnippets(:
/home/sam/1omr-virtualization/compiler/codegen/OMRCodeGenerator.cpp:      self()->emitTargetAddressSnippets();
--------------------
