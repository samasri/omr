generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &)
isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **)
generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *)
removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &)
nodeMayCauseException(TR::Node *)
allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *)
isRotateAndMask(TR::Node *)
isPreservedRegister(int32_t)
isAddressScaleIndexSupported(int32_t)
constLoadNeedsLiteralFromPool(TR::Node *)
opCodeIsNoOpOnThisPlatform(TR::ILOpCode &)
arithmeticNeedsLiteralFromPool(TR::Node *)
arrayTranslateTableRequiresAlignment(_Bool,_Bool)
isObjectOfSizeWorthAligning(uint32_t)
mulDecompositionCostIsJustified(int,char [],char [],int64_t)
supportsDebugCounters(TR::DebugCounterInjectionPoint)
apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *)
splitBlockEntry(TR::Instruction *)
isBranchInstruction(TR::Instruction *)
apply24BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &)
apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *)
computeRegisterSaveDescription(class TR_BitVector *,_Bool)
startInternalControlFlow(TR::Instruction *)
updateSnippetMapWithRSD(TR::Instruction *,int32_t)
setNextAvailableBlockIndex(int32_t)
IsInMemoryType(TR::DataType)
setOnDemandLiteralPoolRun(_Bool)
codegenMulDecomposition(int64_t)
getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType)
endInternalControlFlow(TR::Instruction *)
apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool)
isInternalControlFlowReg(TR::Register *)
setVMThreadRequired(_Bool)
generateNop(TR::Node *,TR::Instruction *,enum TR_NOPKind)
arrayTranslateMinimumNumberOfElements(_Bool,_Bool)
setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &)
isLabelInstruction(TR::Instruction *)
dumpTargetAddressSnippets(TR::FILE *)
considerTypeForGRA(TR::SymbolReference *)
isAlignmentInstruction(TR::Instruction *)
apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool)
isReturnInstruction(TR::Instruction *)
isLiteralPoolOnDemandOn()
splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool)
usesImplicit64BitGPRs(TR::Node *)
setEstimatedLocationsForDataSnippetLabels(int32_t)
setCurrentBlockIndex(int32_t)
bitwiseOpNeedsLiteralFromPool(TR::Node *,TR::Node *)
doRegisterAssignment(enum TR_RegisterKinds)
getGlobalHPRFromGPR(TR_GlobalRegisterNumber)
isGlobalRegisterAvailable(TR_GlobalRegisterNumber,TR::DataType)
lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t)
bndsChkNeedsLiteralFromPool(TR::Node *)
enableLiteralPoolRegisterForGRA()
setEstimatedLocationsForTargetAddressSnippetLabels(int32_t)
getGlobalGPRFromHPR(TR_GlobalRegisterNumber)
getGlobalRegisterNumber(uint32_t)
getVMThreadGlobalRegisterNumber()
buildRegisterMapForInstruction(class TR_GCStackMap *)
considerTypeForGRA(TR::DataType)
considerTypeForGRA(TR::Node *)
apply64BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *)
isSnippetMatched(TR::Snippet *,int32_t,TR::SymbolReference *)
apply32BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t)
dumpDataSnippets(TR::FILE *)