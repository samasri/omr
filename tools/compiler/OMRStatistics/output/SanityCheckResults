['OMR', 'AutomaticSymbol', '~AutomaticSymbol()', 'TR', 'AutomaticSymbol']
['OMR', 'RegisterMappedSymbol', '~RegisterMappedSymbol()', 'TR', 'RegisterMappedSymbol']
['OMR', 'Symbol', '~Symbol()', 'TR', 'Symbol']
['OMR', 'Block', '~Block()', 'TR', 'Block']
['OMR', 'LabelSymbol', '~LabelSymbol()', 'TR', 'LabelSymbol']
['OMR', 'MethodSymbol', '~MethodSymbol()', 'TR', 'MethodSymbol']
['OMR', 'ResolvedMethodSymbol', '~ResolvedMethodSymbol()', 'TR', 'ResolvedMethodSymbol']
['OMR', 'StaticSymbol', '~StaticSymbol()', 'TR', 'StaticSymbol']
['OMR::X86::AMD64', 'Machine', '~Machine()', 'TR', 'Machine']
['OMR::X86::AMD64', 'RealRegister', '~RealRegister()', 'TR', 'RealRegister']
['OMR::X86', 'Register', '~Register()', 'TR', 'Register']
['OMR::X86', 'CPU', '~CPU()', 'TR', 'CPU']
['OMR::X86', 'DebugEnv', '~DebugEnv()', 'TR', 'DebugEnv']
['OMR::X86', 'Instruction', '~Instruction()', 'TR', 'Instruction']
['OMR::X86', 'Snippet', '~Snippet()', 'TR', 'Snippet']
['OMR', 'AliasBuilder', '~AliasBuilder()', 'TR', 'AliasBuilder']
['OMR', 'ArithEnv', '~ArithEnv()', 'TR', 'ArithEnv']
['TR', 'Link', 'jitPersistentAlloc(size_t)', 'TR', 'CFGEdge']
['TR', 'Link', 'jitPersistentFree(void *)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete(void *,TR::Region &)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete(void *,size_t)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete[](void *,TR::Region &)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new(size_t,TR::Region &)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new[](size_t,TR::Region &)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'CFGEdge']
['TR', 'Link', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'CFGEdge']
['OMR', 'ClassEnv', '~ClassEnv()', 'TR', 'ClassEnv']
['OMR', 'CodeGenPhase', '~CodeGenPhase()', 'TR', 'CodeGenPhase']
['TestCompiler', 'CodeGenerator', '~CodeGenerator()', 'TR', 'CodeGenerator']
['OMR', 'Compilation', '~Compilation()', 'TR', 'Compilation']
['OMR', 'DataType', '~DataType()', 'TR', 'DataType']
['TR', 'DebugCounterBase', 'accumulate()', 'TR', 'DebugCounter']
['TR', 'DebugCounterBase', 'getBumpCountAddress()', 'TR', 'DebugCounter']
['TR', 'DebugCounterBase', 'getBumpCountSymRef(TR::Compilation *)', 'TR', 'DebugCounter']
['TR', 'DebugCounterBase', 'accumulate()', 'TR', 'DebugCounterAggregation']
['TR', 'DebugCounterBase', 'getBumpCountAddress()', 'TR', 'DebugCounterAggregation']
['TR', 'DebugCounterBase', 'getBumpCountSymRef(TR::Compilation *)', 'TR', 'DebugCounterAggregation']
['OMR', 'Environment', '~Environment()', 'TR', 'Environment']
['OMR', 'GCRegisterMap', '~GCRegisterMap()', 'TR', 'GCRegisterMap']
['OMR', 'IL', '~IL()', 'TR', 'IL']
['OMR', 'ILOpCode', '~ILOpCode()', 'TR', 'ILOpCode']
['OMR', 'KnownObjectTable', '~KnownObjectTable()', 'TR', 'KnownObjectTable']
['OMR', 'Monitor', '~Monitor()', 'TR', 'Monitor']
['OMR', 'Node', '~Node()', 'TR', 'Node']
['TestCompiler', 'ObjectModel', '~ObjectModel()', 'TR', 'ObjectModel']
['OMR', 'PersistentInfo', '~PersistentInfo()', 'TR', 'PersistentInfo']
['OMR::X86', 'RegisterIterator', 'getCurrent()', 'TR', 'X86FPStackIterator']
['OMR::X86', 'RegisterIterator', 'getFirst()', 'TR', 'X86FPStackIterator']
['OMR::X86', 'RegisterIterator', 'getNext()', 'TR', 'X86FPStackIterator']
['TestCompiler', 'ResolvedMethod', '~ResolvedMethod()', 'TR', 'ResolvedMethod']
['OMR', 'SnippetGCMap', '~SnippetGCMap()', 'TR', 'SnippetGCMap']
['OMR', 'SymbolReference', '~SymbolReference()', 'TR', 'SymbolReference']
['OMR', 'VMEnv', '~VMEnv()', 'TR', 'VMEnv']
['OMR', 'VMMethodEnv', '~VMMethodEnv()', 'TR', 'VMMethodEnv']
['TR', 'BitVectorIterator', 'getFirstElement()', 'TR', 'BitContainerIterator']
['TR', 'BitVectorIterator', 'getNextElement()', 'TR', 'BitContainerIterator']
['TR', 'BitVectorIterator', 'hasMoreElements()', 'TR', 'BitContainerIterator']
['TR', 'HashTab', 'calculateHash(const void *)', 'TR', 'HashTabDouble']
['TR', 'HashTab', 'isEqual(const void *,const void *)', 'TR', 'HashTabDouble']
['TR', 'HashTab', 'calculateHash(const void *)', 'TR', 'HashTabFloat']
['TR', 'HashTab', 'isEqual(const void *,const void *)', 'TR', 'HashTabFloat']
['TR', 'HashTab', 'calculateHash(const void *)', 'TR', 'HashTabInt']
['TR', 'HashTab', 'calculateHash(const void *)', 'TR', 'HashTabLong']
['TR', 'HashTab', 'isEqual(const void *,const void *)', 'TR', 'HashTabLong']
['TR', 'HashTab', 'calculateHash(const void *)', 'TR', 'HashTabString']
['TR', 'HashTab', 'isEqual(const void *,const void *)', 'TR', 'HashTabString']
['TR', 'Dominators', 'jitPersistentAlloc(size_t)', 'TR', 'PostDominators']
['TR', 'Dominators', 'jitPersistentFree(void *)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete(void *,size_t)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete(void *,TR::Region &)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete[](void *,TR::Region &)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new(size_t,TR::Region &)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new[](size_t,TR::Region &)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PostDominators']
['TR', 'Dominators', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PostDominators']
['OMR', 'ParameterSymbol', '~ParameterSymbol()', 'TR', 'ParameterSymbol']
['OMR', 'Recompilation', '~Recompilation()', 'TR', 'Recompilation']
['OMR', 'Optimization', '~Optimization()', 'TR', 'Optimization']
['OMR', 'OptimizationManager', '~OptimizationManager()', 'TR', 'OptimizationManager']
['TR', 'TreeTopIteratorImpl', 'currentNode()', 'TR', 'NodeIterator']
['TR', 'NodeIterator', 'currentNode()', 'TR', 'NodeOccurrenceIterator']
['TR', 'TreeTopIteratorImpl', 'currentTree()', 'TR', 'NodeIterator']
['TR', 'TreeTopIteratorImpl', 'isAt(class TR::PreorderNodeIterator &)', 'TR', 'NodeIterator']
['TR', 'TreeTopIteratorImpl', 'isAt(TR::TreeTop *)', 'TR', 'NodeIterator']
['TR', 'TreeTopIteratorImpl', 'logCurrentLocation()', 'TR', 'NodeIterator']
['TR', 'NodeIterator', 'logCurrentLocation()', 'TR', 'NodeOccurrenceIterator']
['TR', 'TreeTopIteratorImpl', 'operator!=(TR::TreeTop *)', 'TR', 'NodeIterator']
['TR', 'TreeTopIteratorImpl', 'operator++()', 'TR', 'PostorderNodeOccurrenceIterator']
['TR', 'TreeTopIteratorImpl', 'operator==(TR::TreeTop *)', 'TR', 'NodeIterator']
['TR', 'TreeTopIteratorImpl', 'stepForward()', 'TR', 'PostorderNodeOccurrenceIterator']
['TR', 'TreeTopIteratorImpl', 'operator++()', 'TR', 'PostorderNodeIterator']
['TR', 'TreeTopIteratorImpl', 'stepForward()', 'TR', 'PostorderNodeIterator']
['TR', 'TreeTopIteratorImpl', 'operator++()', 'TR', 'PreorderNodeIterator']
['TR', 'TreeTopIteratorImpl', 'stepForward()', 'TR', 'PreorderNodeIterator']
['TR', 'TreeTopIteratorImpl', 'operator++()', 'TR', 'PreorderNodeOccurrenceIterator']
['TR', 'TreeTopIteratorImpl', 'stepForward()', 'TR', 'PreorderNodeOccurrenceIterator']
['TR', 'TreeTopIteratorImpl', 'stepBackward()', 'TR', 'TreeTopIterator']
['TR', 'TreeTopIteratorImpl', 'stepForward()', 'TR', 'TreeTopIterator']
['TR', 'Pattern', 'getName()', 'TR', 'AnythingPattern']
['TR', 'Pattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'AnythingPattern']
['TR', 'Pattern', 'getName()', 'TR', 'ChildPattern']
['TR', 'Pattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'ChildPattern']
['TR', 'Pattern', 'getName()', 'TR', 'ChildrenPattern']
['TR', 'ChildrenPattern', 'getName()', 'TR', 'CommutativePattern']
['TR', 'Pattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'ChildrenPattern']
['TR', 'ChildrenPattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'CommutativePattern']
['TR', 'Pattern', 'getName()', 'TR', 'ChoicePattern']
['TR', 'Pattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'ChoicePattern']
['TR', 'Pattern', 'getName()', 'TR', 'OpCodePattern']
['TR', 'OpCodePattern', 'getName()', 'TR', 'IConstPattern']
['TR', 'Pattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'OpCodePattern']
['TR', 'OpCodePattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'IConstPattern']
['TR', 'Pattern', 'tracePattern(TR::Node *)', 'TR', 'OpCodePattern']
['TR', 'OpCodePattern', 'getName()', 'TR', 'LConstPattern']
['TR', 'OpCodePattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'LConstPattern']
['TR', 'Pattern', 'getName()', 'TR', 'NoRegisterPattern']
['TR', 'Pattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'NoRegisterPattern']
['TR', 'Pattern', 'getName()', 'TR', 'UnifyPattern']
['TR', 'Pattern', 'thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *)', 'TR', 'UnifyPattern']
['TR', 'VPConstraint', 'asArrayInfo()', 'TR', 'VPArrayInfo']
['TR', 'VPConstraint', 'getArrayInfo()', 'TR', 'VPArrayInfo']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPArrayInfo']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPArrayInfo']
['TR', 'VPConstraint', 'name()', 'TR', 'VPArrayInfo']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPArrayInfo']
['TR', 'VPConstraint', 'asClass()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getArrayInfo()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getClass()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getClassPresence()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getClassSignature(int32_t &)', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getClassType()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getConstString()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getKnownObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getObjectLocation()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'getPreexistence()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isClassObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isConstString()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isFixedClass()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isHeapObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isJ9ClassObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isJavaLangClassObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isNonNullObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isNullObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isPreexistentObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'isStackObject()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPClass']
['TR', 'VPConstraint', 'mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPClass']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPClass']
['TR', 'VPConstraint', 'name()', 'TR', 'VPClass']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPClass']
['TR', 'VPConstraint', 'asClassPresence()', 'TR', 'VPClassPresence']
['TR', 'VPConstraint', 'asNonNullObject()', 'TR', 'VPNonNullObject']
['TR', 'VPConstraint', 'getClassPresence()', 'TR', 'VPClassPresence']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPNonNullObject']
['TR', 'VPConstraint', 'isNonNullObject()', 'TR', 'VPNonNullObject']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPNonNullObject']
['TR', 'VPConstraint', 'name()', 'TR', 'VPNonNullObject']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPNonNullObject']
['TR', 'VPConstraint', 'asClassType()', 'TR', 'VPClassType']
['TR', 'VPConstraint', 'asConstString()', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'asFixedClass()', 'TR', 'VPFixedClass']
['TR', 'VPConstraint', 'asResolvedClass()', 'TR', 'VPResolvedClass']
['TR', 'VPResolvedClass', 'create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *)', 'TR', 'VPFixedClass']
['TR', 'VPClassType', 'getArrayClass(OMR::ValuePropagation *)', 'TR', 'VPResolvedClass']
['TR', 'VPResolvedClass', 'getArrayClass(OMR::ValuePropagation *)', 'TR', 'VPFixedClass']
['TR', 'VPConstraint', 'getClass()', 'TR', 'VPResolvedClass']
['TR', 'VPConstraint', 'getClassSignature(int32_t &)', 'TR', 'VPClassType']
['TR', 'VPClassType', 'getClassSignature(int32_t &)', 'TR', 'VPResolvedClass']
['TR', 'VPConstraint', 'getClassType()', 'TR', 'VPClassType']
['TR', 'VPConstraint', 'getConstString()', 'TR', 'VPConstString']
['TR', 'VPFixedClass', 'hasMoreThanFixedClassInfo()', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPResolvedClass']
['TR', 'VPResolvedClass', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPFixedClass']
['TR', 'VPFixedClass', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPConstString']
['TR', 'VPClassType', 'isArray()', 'TR', 'VPFixedClass']
['TR', 'VPConstraint', 'isClassObject()', 'TR', 'VPClassType']
['TR', 'VPConstraint', 'isConstString()', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'isFixedClass()', 'TR', 'VPFixedClass']
['TR', 'VPConstraint', 'isJ9ClassObject()', 'TR', 'VPClassType']
['TR', 'VPConstraint', 'isJavaLangClassObject()', 'TR', 'VPClassType']
['TR', 'VPClassType', 'isJavaLangObject(OMR::ValuePropagation *)', 'TR', 'VPResolvedClass']
['TR', 'VPClassType', 'isPrimitiveArray(TR::Compilation *)', 'TR', 'VPResolvedClass']
['TR', 'VPClassType', 'isReferenceArray(TR::Compilation *)', 'TR', 'VPResolvedClass']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPResolvedClass']
['TR', 'VPResolvedClass', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPFixedClass']
['TR', 'VPFixedClass', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'name()', 'TR', 'VPResolvedClass']
['TR', 'VPResolvedClass', 'name()', 'TR', 'VPFixedClass']
['TR', 'VPFixedClass', 'name()', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPResolvedClass']
['TR', 'VPResolvedClass', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPFixedClass']
['TR', 'VPFixedClass', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPConstString']
['TR', 'VPConstraint', 'asEqual()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'asRelation()', 'TR', 'VPRelation']
['TR', 'VPRelation', 'getComplement(OMR::ValuePropagation *)', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'mustBeEqual()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'mustBeGreaterThan()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'mustBeGreaterThanOrEqual()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'mustBeLessThan()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'mustBeLessThanOrEqual()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'mustBeNotEqual()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'name()', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *,int32_t)', 'TR', 'VPEqual']
['TR', 'VPRelation', 'propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *)', 'TR', 'VPEqual']
['TR', 'VPRelation', 'propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *)', 'TR', 'VPEqual']
['TR', 'VPConstraint', 'asGreaterThanOrEqual()', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPRelation', 'getComplement(OMR::ValuePropagation *)', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'mustBeGreaterThan()', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'mustBeGreaterThanOrEqual()', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'mustBeNotEqual()', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'name()', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *,int32_t)', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPRelation', 'propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *)', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPRelation', 'propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *)', 'TR', 'VPGreaterThanOrEqual']
['TR', 'VPConstraint', 'add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'asIntConst()', 'TR', 'VPIntConst']
['TR', 'VPConstraint', 'asIntConstraint()', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'canOverflow()', 'TR', 'VPIntConstraint']
['TR', 'VPIntConstraint', 'getHigh()', 'TR', 'VPIntConst']
['TR', 'VPConstraint', 'getHighInt()', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'getLowInt()', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'getPrecision()', 'TR', 'VPIntConstraint']
['TR', 'VPIntConstraint', 'getPrecision()', 'TR', 'VPIntConst']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPIntConst']
['TR', 'VPConstraint', 'mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'name()', 'TR', 'VPIntConst']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPIntConst']
['TR', 'VPConstraint', 'setCanOverflow(enum TR_YesNoMaybe)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *)', 'TR', 'VPIntConstraint']
['TR', 'VPConstraint', 'asIntRange()', 'TR', 'VPIntRange']
['TR', 'VPIntConstraint', 'getHigh()', 'TR', 'VPIntRange']
['TR', 'VPIntConstraint', 'getPrecision()', 'TR', 'VPIntRange']
['TR', 'VPConstraint', 'name()', 'TR', 'VPIntRange']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPIntRange']
['TR', 'VPConstraint', 'asKnownObject()', 'TR', 'VPKnownObject']
['TR', 'VPConstraint', 'getKnownObject()', 'TR', 'VPKnownObject']
['TR', 'VPFixedClass', 'hasMoreThanFixedClassInfo()', 'TR', 'VPKnownObject']
['TR', 'VPFixedClass', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPKnownObject']
['TR', 'VPClassType', 'isJavaLangClassObject()', 'TR', 'VPKnownObject']
['TR', 'VPFixedClass', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPKnownObject']
['TR', 'VPConstraint', 'mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPKnownObject']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPKnownObject']
['TR', 'VPFixedClass', 'name()', 'TR', 'VPKnownObject']
['TR', 'VPFixedClass', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPKnownObject']
['TR', 'VPConstraint', 'asLessThanOrEqual()', 'TR', 'VPLessThanOrEqual']
['TR', 'VPRelation', 'getComplement(OMR::ValuePropagation *)', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'mustBeLessThan()', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'mustBeLessThanOrEqual()', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'mustBeNotEqual()', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'name()', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *,int32_t)', 'TR', 'VPLessThanOrEqual']
['TR', 'VPRelation', 'propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *)', 'TR', 'VPLessThanOrEqual']
['TR', 'VPRelation', 'propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *)', 'TR', 'VPLessThanOrEqual']
['TR', 'VPConstraint', 'add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'asLongConst()', 'TR', 'VPLongConst']
['TR', 'VPConstraint', 'asLongConstraint()', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'canOverflow()', 'TR', 'VPLongConstraint']
['TR', 'VPLongConstraint', 'getHigh()', 'TR', 'VPLongConst']
['TR', 'VPConstraint', 'getHighLong()', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'getLowLong()', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'getPrecision()', 'TR', 'VPLongConstraint']
['TR', 'VPLongConstraint', 'getPrecision()', 'TR', 'VPLongConst']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLongConst']
['TR', 'VPConstraint', 'mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'name()', 'TR', 'VPLongConst']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPLongConst']
['TR', 'VPConstraint', 'setCanOverflow(enum TR_YesNoMaybe)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *)', 'TR', 'VPLongConstraint']
['TR', 'VPConstraint', 'asLongRange()', 'TR', 'VPLongRange']
['TR', 'VPLongConstraint', 'getHigh()', 'TR', 'VPLongRange']
['TR', 'VPLongConstraint', 'getPrecision()', 'TR', 'VPLongRange']
['TR', 'VPConstraint', 'name()', 'TR', 'VPLongRange']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPLongRange']
['TR', 'VPConstraint', 'asMergedConstraints()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'asMergedIntConstraints()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'asMergedLongConstraints()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'asMergedShortConstraints()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getHighInt()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getHighLong()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getHighShort()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getLowInt()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getLowLong()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getLowShort()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getUnsignedHighInt()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getUnsignedHighLong()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getUnsignedHighShort()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getUnsignedLowInt()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getUnsignedLowLong()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'getUnsignedLowShort()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'name()', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPMergedConstraints']
['TR', 'VPConstraint', 'asNotEqual()', 'TR', 'VPNotEqual']
['TR', 'VPRelation', 'getComplement(OMR::ValuePropagation *)', 'TR', 'VPNotEqual']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPNotEqual']
['TR', 'VPConstraint', 'mustBeNotEqual()', 'TR', 'VPNotEqual']
['TR', 'VPConstraint', 'name()', 'TR', 'VPNotEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPNotEqual']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *,int32_t)', 'TR', 'VPNotEqual']
['TR', 'VPRelation', 'propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *)', 'TR', 'VPNotEqual']
['TR', 'VPRelation', 'propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *)', 'TR', 'VPNotEqual']
['TR', 'VPConstraint', 'asNullObject()', 'TR', 'VPNullObject']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPNullObject']
['TR', 'VPConstraint', 'isNullObject()', 'TR', 'VPNullObject']
['TR', 'VPConstraint', 'mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPNullObject']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPNullObject']
['TR', 'VPConstraint', 'name()', 'TR', 'VPNullObject']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPNullObject']
['TR', 'VPConstraint', 'asObjectLocation()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'getObjectLocation()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'isClassObject()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'isHeapObject()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'isJ9ClassObject()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'isJavaLangClassObject()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'isStackObject()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'name()', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPObjectLocation']
['TR', 'VPConstraint', 'asPreexistentObject()', 'TR', 'VPPreexistentObject']
['TR', 'VPConstraint', 'getPreexistence()', 'TR', 'VPPreexistentObject']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPPreexistentObject']
['TR', 'VPConstraint', 'isPreexistentObject()', 'TR', 'VPPreexistentObject']
['TR', 'VPConstraint', 'name()', 'TR', 'VPPreexistentObject']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPPreexistentObject']
['TR', 'VPConstraint', 'add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'asShortConst()', 'TR', 'VPShortConst']
['TR', 'VPConstraint', 'asShortConstraint()', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'canOverflow()', 'TR', 'VPShortConstraint']
['TR', 'VPShortConstraint', 'getHigh()', 'TR', 'VPShortConst']
['TR', 'VPConstraint', 'getHighShort()', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'getLowShort()', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'getPrecision()', 'TR', 'VPShortConstraint']
['TR', 'VPShortConstraint', 'getPrecision()', 'TR', 'VPShortConst']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPShortConst']
['TR', 'VPConstraint', 'mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'name()', 'TR', 'VPShortConst']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPShortConst']
['TR', 'VPConstraint', 'setCanOverflow(enum TR_YesNoMaybe)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *)', 'TR', 'VPShortConstraint']
['TR', 'VPConstraint', 'asShortRange()', 'TR', 'VPShortRange']
['TR', 'VPShortConstraint', 'getHigh()', 'TR', 'VPShortRange']
['TR', 'VPShortConstraint', 'getPrecision()', 'TR', 'VPShortRange']
['TR', 'VPConstraint', 'name()', 'TR', 'VPShortRange']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPShortRange']
['TR', 'VPConstraint', 'asVPSync()', 'TR', 'VPSync']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPSync']
['TR', 'VPConstraint', 'merge1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPSync']
['TR', 'VPConstraint', 'name()', 'TR', 'VPSync']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPSync']
['TR', 'VPConstraint', 'asUnreachablePath()', 'TR', 'VPUnreachablePath']
['TR', 'VPConstraint', 'name()', 'TR', 'VPUnreachablePath']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPUnreachablePath']
['TR', 'VPConstraint', 'asUnresolvedClass()', 'TR', 'VPUnresolvedClass']
['TR', 'VPClassType', 'getArrayClass(OMR::ValuePropagation *)', 'TR', 'VPUnresolvedClass']
['TR', 'VPClassType', 'getClassSignature(int32_t &)', 'TR', 'VPUnresolvedClass']
['TR', 'VPConstraint', 'intersect1(TR::VPConstraint *,OMR::ValuePropagation *)', 'TR', 'VPUnresolvedClass']
['TR', 'VPClassType', 'isPrimitiveArray(TR::Compilation *)', 'TR', 'VPUnresolvedClass']
['TR', 'VPClassType', 'isReferenceArray(TR::Compilation *)', 'TR', 'VPUnresolvedClass']
['TR', 'VPConstraint', 'name()', 'TR', 'VPUnresolvedClass']
['TR', 'VPConstraint', 'print(TR::Compilation *,TR::FILE *)', 'TR', 'VPUnresolvedClass']
['TR', 'Structure', 'addExternalEdge(class TR_Structure *,int32_t,_Bool)', 'TR', 'BlockStructure']
['TR', 'Structure', 'asBlock()', 'TR', 'BlockStructure']
['TR', 'Structure', 'changeContinueLoopsToNestedLoops(class TR_RegionStructure *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'checkStructure(class TR_BitVector *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'clearAnalysisInfo()', 'TR', 'BlockStructure']
['TR', 'Structure', 'cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'cloneStructureEdges(TR::Block **)', 'TR', 'BlockStructure']
['TR', 'Structure', 'collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool)', 'TR', 'BlockStructure']
['TR', 'Structure', 'getBlocks(List<TR::Block> *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'getBlocks(List<TR::Block> *,vcount_t)', 'TR', 'BlockStructure']
['TR', 'Structure', 'getEntryBlock()', 'TR', 'BlockStructure']
['TR', 'Structure', 'getKind()', 'TR', 'BlockStructure']
['TR', 'Structure', 'hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t)', 'TR', 'BlockStructure']
['TR', 'Structure', 'isExpressionTransparentIn(int32_t,class TR_LocalTransparency *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'markStructuresWithImproperRegions()', 'TR', 'BlockStructure']
['TR', 'Structure', 'removeEdge(class TR_Structure *,class TR_Structure *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'removeExternalEdgeTo(class TR_Structure *,int32_t)', 'TR', 'BlockStructure']
['TR', 'Structure', 'renumber(int32_t)', 'TR', 'BlockStructure']
['TR', 'Structure', 'renumberRecursively(int32_t,int32_t)', 'TR', 'BlockStructure']
['TR', 'Structure', 'replacePart(class TR_Structure *,class TR_Structure *)', 'TR', 'BlockStructure']
['TR', 'Structure', 'resetAnalysisInfo()', 'TR', 'BlockStructure']
['TR', 'Structure', 'resetAnalyzedStatus()', 'TR', 'BlockStructure']
['TR', 'Structure', 'resetVisitCounts(vcount_t)', 'TR', 'BlockStructure']
['TR', 'Structure', 'addEdge(TR::CFGEdge *,_Bool)', 'TR', 'RegionStructure']
['TR', 'Structure', 'addExternalEdge(class TR_Structure *,int32_t,_Bool)', 'TR', 'RegionStructure']
['TR', 'Structure', 'asRegion()', 'TR', 'RegionStructure']
['TR', 'Structure', 'changeContinueLoopsToNestedLoops(class TR_RegionStructure *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'checkStructure(class TR_BitVector *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'clearAnalysisInfo()', 'TR', 'RegionStructure']
['TR', 'Structure', 'cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'cloneStructureEdges(TR::Block **)', 'TR', 'RegionStructure']
['TR', 'Structure', 'collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool)', 'TR', 'RegionStructure']
['TR', 'Structure', 'getBlocks(List<TR::Block> *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'getBlocks(List<TR::Block> *,vcount_t)', 'TR', 'RegionStructure']
['TR', 'Structure', 'getEntryBlock()', 'TR', 'RegionStructure']
['TR', 'Structure', 'getKind()', 'TR', 'RegionStructure']
['TR', 'Structure', 'getMaxNestingDepth(int32_t *,int32_t *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t)', 'TR', 'RegionStructure']
['TR', 'Structure', 'isExpressionTransparentIn(int32_t,class TR_LocalTransparency *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'markStructuresWithImproperRegions()', 'TR', 'RegionStructure']
['TR', 'Structure', 'mergeInto(TR::Block *,TR::Block *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'removeEdge(class TR_Structure *,class TR_Structure *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'removeExternalEdgeTo(class TR_Structure *,int32_t)', 'TR', 'RegionStructure']
['TR', 'Structure', 'removeMergedBlock(TR::Block *,TR::Block *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'renumber(int32_t)', 'TR', 'RegionStructure']
['TR', 'Structure', 'renumberRecursively(int32_t,int32_t)', 'TR', 'RegionStructure']
['TR', 'Structure', 'replacePart(class TR_Structure *,class TR_Structure *)', 'TR', 'RegionStructure']
['TR', 'Structure', 'resetAnalysisInfo()', 'TR', 'RegionStructure']
['TR', 'Structure', 'resetAnalyzedStatus()', 'TR', 'RegionStructure']
['TR', 'Structure', 'resetVisitCounts(vcount_t)', 'TR', 'RegionStructure']
['TR', 'CFGNode', 'asStructureSubGraphNode()', 'TR', 'StructureSubGraphNode']
['OMR', 'IlGenRequest', 'getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *)', 'TR', 'CompileIlGenRequest']
['OMR', 'IlGenRequest', 'print(class TR_FrontEnd *,TR::FILE *,const char *)', 'TR', 'CompileIlGenRequest']
['OMR', 'IlGenRequest', '~IlGenRequest()', 'TR', 'IlGenRequest']
['TestCompiler', 'IlGeneratorMethodDetails', '~IlGeneratorMethodDetails()', 'TR', 'IlGeneratorMethodDetails']
['TR', 'IlGenRequest', 'allowIlGenOptimizations()', 'TR', 'InliningIlGenRequest']
['OMR', 'IlGenRequest', 'getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *)', 'TR', 'InliningIlGenRequest']
['TR', 'InliningIlGenRequest', 'getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *)', 'TR', 'PartialInliningIlGenRequest']
['OMR', 'IlGenRequest', 'print(class TR_FrontEnd *,TR::FILE *,const char *)', 'TR', 'InliningIlGenRequest']
['TR', 'InliningIlGenRequest', 'print(class TR_FrontEnd *,TR::FILE *,const char *)', 'TR', 'PartialInliningIlGenRequest']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'Inliner']
['OMR', 'Optimization', 'perform()', 'TR', 'Inliner']
['TR', 'Link', 'jitPersistentAlloc(size_t)', 'TR', 'DirectCallSite']
['TR', 'Link', 'jitPersistentFree(void *)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete(void *,TR::Region &)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete(void *,size_t)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete[](void *,TR::Region &)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new(size_t,TR::Region &)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new[](size_t,TR::Region &)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DirectCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DirectCallSite']
['TR', 'InlinerBase', 'inlineCallTargets(TR::ResolvedMethodSymbol *,class TR_CallStack *,class TR_InnerPreexistenceInfo *)', 'TR', 'DumbInliner']
['TR', 'InlinerBase', 'inlineRecognizedMethod(TR::RecognizedMethod)', 'TR', 'InlineCall']
['TR', 'Link', 'jitPersistentAlloc(size_t)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'jitPersistentAlloc(size_t)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'jitPersistentFree(void *)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'jitPersistentFree(void *)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete(void *,TR::Region &)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete(void *,TR::Region &)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete(void *,size_t)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete(void *,size_t)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete[](void *,TR::Region &)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete[](void *,TR::Region &)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new(size_t,TR::Region &)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new(size_t,TR::Region &)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new[](size_t,TR::Region &)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new[](size_t,TR::Region &)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'FunctionPointerCallSite']
['TR', 'Link', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'IndirectCallSite']
['TR', 'IndirectCallSite', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'FunctionPointerCallSite']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'TrivialInliner']
['OMR', 'Optimization', 'perform()', 'TR', 'TrivialInliner']
['OMR::X86', 'Linkage', '~Linkage()', 'TR', 'Linkage']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LoadExtensions']
['OMR', 'Optimization', 'perform()', 'TR', 'LoadExtensions']
['OMR', 'RegisterPair', '~RegisterPair()', 'TR', 'RegisterPair']
['TR', 'ValueNumberInfo', 'allocateValueNumber(TR::Node *)', 'TR', 'HashValueNumberInfo']
['TR', 'ValueNumberInfo', 'initializeNode(TR::Node *,int32_t &)', 'TR', 'HashValueNumberInfo']
['TR', 'CallStackIterator', 'printStackBacktrace(TR::Compilation *)', 'TR', 'LinuxCallStackIterator']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'AsyncCheckInsertion']
['OMR', 'Optimization', 'perform()', 'TR', 'AsyncCheckInsertion']
['OMR', 'Optimization', 'shouldPerform()', 'TR', 'AsyncCheckInsertion']
['TR', 'BackwardDFSetAnalysis', 'TR_BackwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'DataFlowAnalysis', 'analyzeBlockStructure(class TR_BlockStructure *,_Bool)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'analyzeBlockStructure(class TR_BlockStructure *,_Bool)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *)', 'TR', 'GlobalAnticipatability']
['TR', 'BackwardDFSetAnalysis', 'analyzeNodeIfSuccessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'DataFlowAnalysis', 'analyzeRegionStructure(class TR_RegionStructure *,_Bool)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'analyzeRegionStructure(class TR_RegionStructure *,_Bool)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'GlobalAnticipatability']
['TR', 'DataFlowAnalysis', 'asGlobalAnticipatability()', 'TR', 'GlobalAnticipatability']
['TR', 'BasicDFSetAnalysis', 'canGenAndKillForStructure(class TR_Structure *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'canGenAndKillForStructure(class TR_Structure *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'compose(Container *,Container *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'compose(Container *,Container *)', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'DataFlowAnalysis', 'getKind()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'getKind()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'getKind()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'getKind()', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BackwardIntersectionDFSetAnalysis', 'getKind()', 'TR', 'GlobalAnticipatability']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'GlobalAnticipatability']
['TR', 'BackwardDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeDFSetAnalysis()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeDFSetAnalysis()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &,_Bool)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeInfo(Container *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeInfo(Container *)', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeOutSetInfo()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeOutSetInfo()', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseCompose(Container *,Container *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'inverseCompose(Container *,Container *)', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseInitializeInfo(Container *)', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'inverseInitializeInfo(Container *)', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'GlobalAnticipatability']
['TR', 'BackwardDFSetAnalysis', 'traceBBVA()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', '~TR_BackwardDFSetAnalysis()', 'TR', 'BackwardDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *)', 'TR', 'Liveness']
['TR', 'BackwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'Liveness']
['TR', 'DataFlowAnalysis', 'asLiveness()', 'TR', 'Liveness']
['TR', 'BackwardDFSetAnalysis', 'compose(Container *,Container *)', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'getKind()', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardUnionDFSetAnalysis', 'getKind()', 'TR', 'Liveness']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'Liveness']
['TR', 'BackwardDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfo()', 'TR', 'Liveness']
['TR', 'BackwardDFSetAnalysis', 'initializeInfo(Container *)', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'initializeOutSetInfo()', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'inverseCompose(Container *,Container *)', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardDFSetAnalysis', 'inverseInitializeInfo(Container *)', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'Liveness']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSets()', 'TR', 'Liveness']
['TR', 'DataFlowAnalysis', 'analyzeBlockStructure(class TR_BlockStructure *,_Bool)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'DataFlowAnalysis', 'analyzeRegionStructure(class TR_RegionStructure *,_Bool)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'Delayedness']
['TR', 'DataFlowAnalysis', 'asDelayedness()', 'TR', 'Delayedness']
['TR', 'BasicDFSetAnalysis', 'canGenAndKillForStructure(class TR_Structure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'compose(Container *,Container *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'compose(Container *,Container *)', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'getKind()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'getKind()', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'IntersectionDFSetAnalysis', 'getKind()', 'TR', 'Delayedness']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'Delayedness']
['TR', 'BasicDFSetAnalysis', 'initialize()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeDFSetAnalysis()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeInSetInfo()', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeInfo(Container *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeInfo(Container *)', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseCompose(Container *,Container *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'inverseCompose(Container *,Container *)', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseInitializeInfo(Container *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'inverseInitializeInfo(Container *)', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'Delayedness']
['TR', 'ForwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'Earliestness']
['TR', 'DataFlowAnalysis', 'asEarliestness()', 'TR', 'Earliestness']
['TR', 'ForwardDFSetAnalysis', 'compose(Container *,Container *)', 'TR', 'UnionDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'getKind()', 'TR', 'UnionDFSetAnalysis']
['TR', 'UnionDFSetAnalysis', 'getKind()', 'TR', 'Earliestness']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'Earliestness']
['TR', 'ForwardDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'UnionDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeInSetInfo()', 'TR', 'UnionDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeInfo(Container *)', 'TR', 'UnionDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'inverseCompose(Container *,Container *)', 'TR', 'UnionDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'inverseInitializeInfo(Container *)', 'TR', 'UnionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'Earliestness']
['TR', 'ForwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'FlowSensitiveEscapeAnalysis']
['TR', 'DataFlowAnalysis', 'asFlowSensitiveEscapeAnalysis()', 'TR', 'FlowSensitiveEscapeAnalysis']
['TR', 'IntersectionDFSetAnalysis', 'getKind()', 'TR', 'FlowSensitiveEscapeAnalysis']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'FlowSensitiveEscapeAnalysis']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'FlowSensitiveEscapeAnalysis']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSets()', 'TR', 'FlowSensitiveEscapeAnalysis']
['TR', 'DataFlowAnalysis', 'asIsolatedness()', 'TR', 'Isolatedness']
['TR', 'BackwardIntersectionDFSetAnalysis', 'getKind()', 'TR', 'Isolatedness']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'Isolatedness']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'Isolatedness']
['TR', 'BackwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'Latestness']
['TR', 'DataFlowAnalysis', 'asLatestness()', 'TR', 'Latestness']
['TR', 'BackwardIntersectionDFSetAnalysis', 'getKind()', 'TR', 'Latestness']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'Latestness']
['TR', 'BackwardDFSetAnalysis', 'analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *)', 'TR', 'LiveOnAllPaths']
['TR', 'BackwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'LiveOnAllPaths']
['TR', 'DataFlowAnalysis', 'asLiveOnAllPaths()', 'TR', 'LiveOnAllPaths']
['TR', 'BackwardIntersectionDFSetAnalysis', 'getKind()', 'TR', 'LiveOnAllPaths']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'LiveOnAllPaths']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfo()', 'TR', 'LiveOnAllPaths']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'LiveOnAllPaths']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSets()', 'TR', 'LiveOnAllPaths']
['TR', 'ForwardDFSetAnalysis', 'analyzeBlockZeroStructure(class TR_BlockStructure *)', 'TR', 'ReachingBlocks']
['TR', 'UnionDFSetAnalysis', 'getKind()', 'TR', 'ReachingBlocks']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'ReachingBlocks']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfo()', 'TR', 'ReachingBlocks']
['TR', 'DataFlowAnalysis', 'perform()', 'TR', 'ReachingBlocks']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSets()', 'TR', 'ReachingBlocks']
['TR', 'ForwardDFSetAnalysis', 'analyzeBlockZeroStructure(class TR_BlockStructure *)', 'TR', 'ReachingDefinitions']
['TR', 'UnionDFSetAnalysis', 'getKind()', 'TR', 'ReachingDefinitions']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'ReachingDefinitions']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfo()', 'TR', 'ReachingDefinitions']
['TR', 'DataFlowAnalysis', 'perform()', 'TR', 'ReachingDefinitions']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSets()', 'TR', 'ReachingDefinitions']
['TR', 'BackwardDFSetAnalysis', 'analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *)', 'TR', 'RegisterAnticipatability']
['TR', 'BackwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'RegisterAnticipatability']
['TR', 'DataFlowAnalysis', 'asRegisterAnticipatability()', 'TR', 'RegisterAnticipatability']
['TR', 'BackwardIntersectionDFSetAnalysis', 'getKind()', 'TR', 'RegisterAnticipatability']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'RegisterAnticipatability']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'RegisterAnticipatability']
['TR', 'ForwardDFSetAnalysis', 'analyzeBlockZeroStructure(class TR_BlockStructure *)', 'TR', 'RegisterAvailability']
['TR', 'ForwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'RegisterAvailability']
['TR', 'DataFlowAnalysis', 'asRegisterAvailability()', 'TR', 'RegisterAvailability']
['TR', 'IntersectionDFSetAnalysis', 'getKind()', 'TR', 'RegisterAvailability']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'RegisterAvailability']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'RegisterAvailability']
['TR', 'BackwardIntersectionDFSetAnalysis', 'getKind()', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BackwardIntersectionDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BackwardIntersectionDFSetAnalysis', 'initializeOutSetInfo()', 'TR', 'BackwardIntersectionDFSetAnalysis']
['TR', 'BackwardUnionDFSetAnalysis', 'TR_BackwardUnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool)', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardUnionDFSetAnalysis', 'getKind()', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardUnionDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardUnionDFSetAnalysis', 'initializeOutSetInfo()', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BackwardUnionDFSetAnalysis', '~TR_BackwardUnionDFSetAnalysis()', 'TR', 'BackwardUnionDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'TR_BasicDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'canGenAndKillForStructure(class TR_Structure *)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'createAnalysisInfo()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'doAnalysis(class TR_Structure *,_Bool)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'getAnalysisInfo(class TR_Structure *)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'getKind()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initialize()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeBasicDFSetAnalysis()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeBlockInfo(_Bool)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeDFSetAnalysis()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfo()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForStructure(class TR_Structure *)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoForStructures()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfoPropertyForStructure(class TR_Structure *,_Bool)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'performAnalysis(class TR_Structure *,_Bool)', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSets()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSetsForStructures()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'traceBVA()', 'TR', 'BasicDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', '~TR_BasicDFSetAnalysis()', 'TR', 'BasicDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'TR_ForwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'analyzeBlockStructure(class TR_BlockStructure *,_Bool)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'analyzeBlockZeroStructure(class TR_BlockStructure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'analyzeNodeIfPredecessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'analyzeRegionStructure(class TR_RegionStructure *,_Bool)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'analyzeTreeTopsInBlockStructure(class TR_BlockStructure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'canGenAndKillForStructure(class TR_Structure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'compose(class TR_BitVector *,class TR_BitVector *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'compose(class TR_BitVector *,class TR_BitVector *)', 'TR', 'IntersectionBitVectorAnalysis']
['TR', 'BasicDFSetAnalysis', 'compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'getKind()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initialize()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeDFSetAnalysis()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'initializeInSetInfo()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeInfo(class TR_BitVector *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'initializeInfo(class TR_SingleBitContainer *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseCompose(class TR_BitVector *,class TR_BitVector *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseInitializeInfo(class TR_BitVector *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'BasicDFSetAnalysis', 'inverseInitializeInfo(class TR_SingleBitContainer *)', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', '~TR_ForwardDFSetAnalysis()', 'TR', 'ForwardDFSetAnalysis']
['TR', 'ForwardDFSetAnalysis', 'analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *)', 'TR', 'Earliestness']
['TR', 'ForwardDFSetAnalysis', 'analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *)', 'TR', 'RegisterAvailability']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'CatchBlockRemover']
['OMR', 'Optimization', 'perform()', 'TR', 'CatchBlockRemover']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'CFGSimplifier']
['OMR', 'Optimization', 'perform()', 'TR', 'CFGSimplifier']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'CompactLocals']
['OMR', 'Optimization', 'perform()', 'TR', 'CompactLocals']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'CopyPropagation']
['OMR', 'Optimization', 'perform()', 'TR', 'CopyPropagation']
['TR', 'IsolatedStoreElimination', 'create(TR::OptimizationManager *)', 'TR', 'DeadStoreElimination']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'IsolatedStoreElimination']
['TR', 'IsolatedStoreElimination', 'optDetailString()', 'TR', 'DeadStoreElimination']
['OMR', 'Optimization', 'perform()', 'TR', 'IsolatedStoreElimination']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'DeadTreesElimination']
['OMR', 'Optimization', 'perform()', 'TR', 'DeadTreesElimination']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'DeadTreesElimination']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'DeadTreesElimination']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'ExpressionsSimplification']
['OMR', 'Optimization', 'perform()', 'TR', 'ExpressionsSimplification']
['TR', 'LoopTransformer', 'detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t)', 'TR', 'FieldPrivatizer']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'FieldPrivatizer']
['OMR', 'Optimization', 'perform()', 'TR', 'LoopTransformer']
['TR', 'LoopTransformer', 'perform()', 'TR', 'FieldPrivatizer']
['TR', 'LoopTransformer', 'asLoopCanonicalizer()', 'TR', 'LoopCanonicalizer']
['TR', 'LoopCanonicalizer', 'create(TR::OptimizationManager *)', 'TR', 'RedundantInductionVarElimination']
['TR', 'LoopTransformer', 'examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **)', 'TR', 'LoopCanonicalizer']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LoopCanonicalizer']
['TR', 'LoopCanonicalizer', 'optDetailString()', 'TR', 'RedundantInductionVarElimination']
['TR', 'LoopTransformer', 'perform()', 'TR', 'LoopCanonicalizer']
['TR', 'LoopCanonicalizer', 'perform()', 'TR', 'RedundantInductionVarElimination']
['TR', 'LoopTransformer', 'detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t)', 'TR', 'LoopInverter']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LoopInverter']
['TR', 'LoopTransformer', 'perform()', 'TR', 'LoopInverter']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'InductionVariableAnalysis']
['OMR', 'Optimization', 'perform()', 'TR', 'InductionVariableAnalysis']
['TR', 'BasicInductionVariable', 'getExitValue()', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'getIterationCount()', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'jitPersistentAlloc(size_t)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'jitPersistentFree(void *)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,size_t)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,TR::Region &)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,TR::Region &)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,TR::Region &)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,TR::Region &)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'DerivedInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'DerivedInductionVariable']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'GeneralLoopUnroller']
['TR', 'LoopTransformer', 'perform()', 'TR', 'GeneralLoopUnroller']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'IVTypeTransformer']
['TR', 'LoopTransformer', 'perform()', 'TR', 'IVTypeTransformer']
['TR', 'LoopTransformer', 'checkIfIncrementInDifferentExtendedBlock(TR::Block *,int32_t)', 'TR', 'LoopStrider']
['TR', 'LoopTransformer', 'detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t)', 'TR', 'LoopStrider']
['TR', 'LoopTransformer', 'examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **)', 'TR', 'LoopStrider']
['TR', 'LoopTransformer', 'isStoreInRequiredForm(int32_t,class TR_Structure *)', 'TR', 'LoopStrider']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LoopStrider']
['TR', 'LoopTransformer', 'perform()', 'TR', 'LoopStrider']
['TR', 'LoopTransformer', 'updateLoadUsedInLoopIncrement(TR::Node *,int32_t)', 'TR', 'LoopStrider']
['TR', 'LoopTransformer', 'updateStoreInfo(int32_t,TR::TreeTop *)', 'TR', 'LoopStrider']
['TR', 'BasicInductionVariable', 'getExitValue()', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'getIterationCount()', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'jitPersistentAlloc(size_t)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'jitPersistentFree(void *)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,size_t)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete(void *,TR::Region &)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,TR::Region &)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,TR::Region &)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,TR::Region &)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'PrimaryInductionVariable']
['TR', 'BasicInductionVariable', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'PrimaryInductionVariable']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'GlobalRegisterAllocator']
['OMR', 'Optimization', 'perform()', 'TR', 'GlobalRegisterAllocator']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LiveRangeSplitter']
['OMR', 'Optimization', 'perform()', 'TR', 'LiveRangeSplitter']
['TR', 'IntersectionDFSetAnalysis', 'compose(class TR_BitVector *,class TR_BitVector *)', 'TR', 'IntersectionBitVectorAnalysis']
['TR', 'IntersectionDFSetAnalysis', 'getKind()', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'IntersectionDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'IntersectionDFSetAnalysis']
['TR', 'IntersectionDFSetAnalysis', 'initializeInSetInfo()', 'TR', 'IntersectionDFSetAnalysis']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LocalLiveRangeReduction']
['OMR', 'Optimization', 'perform()', 'TR', 'LocalLiveRangeReduction']
['OMR', 'Optimization', 'postPerformOnBlocks()', 'TR', 'LocalLiveRangeReduction']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'LocalLiveRangeReduction']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LocalReordering']
['OMR', 'Optimization', 'perform()', 'TR', 'LocalReordering']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'LocalReordering']
['OMR', 'Optimization', 'postPerformOnBlocks()', 'TR', 'LocalReordering']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'LocalReordering']
['TR', 'AddressTree', 'processBaseAndIndex(TR::Node *)', 'TR', 'LRAddressTree']
['TR', 'LoopTransformer', 'asLoopReducer()', 'TR', 'LoopReducer']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LoopReducer']
['TR', 'LoopTransformer', 'perform()', 'TR', 'LoopReducer']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LoopReplicator']
['TR', 'LoopTransformer', 'perform()', 'TR', 'LoopReplicator']
['TR', 'LoopTransformer', 'asLoopVersioner()', 'TR', 'LoopVersioner']
['TR', 'LoopVersioner', 'create(TR::OptimizationManager *)', 'TR', 'LoopSpecializer']
['TR', 'LoopTransformer', 'detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t)', 'TR', 'LoopVersioner']
['TR', 'LoopTransformer', 'isStoreInRequiredForm(int32_t,class TR_Structure *)', 'TR', 'LoopVersioner']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LoopVersioner']
['TR', 'LoopVersioner', 'optDetailString()', 'TR', 'LoopSpecializer']
['TR', 'LoopTransformer', 'perform()', 'TR', 'LoopVersioner']
['OMR', 'LocalCSE', '~LocalCSE()', 'TR', 'LocalCSE']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LocalDeadStoreElimination']
['OMR', 'Optimization', 'perform()', 'TR', 'LocalDeadStoreElimination']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'LocalDeadStoreElimination']
['OMR', 'Optimization', 'postPerformOnBlocks()', 'TR', 'LocalDeadStoreElimination']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'LocalDeadStoreElimination']
['OMR', 'Optimization', 'self()', 'TR', 'LocalDeadStoreElimination']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'ArraysetStoreElimination']
['OMR', 'Optimization', 'perform()', 'TR', 'ArraysetStoreElimination']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'ArraysetStoreElimination']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'CleanseTrees']
['OMR', 'Optimization', 'perform()', 'TR', 'CleanseTrees']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'CleanseTrees']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'CleanseTrees']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'BlockShuffling']
['OMR', 'Optimization', 'perform()', 'TR', 'BlockShuffling']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'BlockSplitter']
['OMR', 'Optimization', 'perform()', 'TR', 'BlockSplitter']
['TR', 'Array', 'operator[](uint32_t)', 'TR', 'Array']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'CheckcastAndProfiledGuardCoalescer']
['OMR', 'Optimization', 'perform()', 'TR', 'CheckcastAndProfiledGuardCoalescer']
['TR', 'ColdBlockMarker', 'create(TR::OptimizationManager *)', 'TR', 'ColdBlockOutlining']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'ColdBlockMarker']
['TR', 'ColdBlockMarker', 'optDetailString()', 'TR', 'ColdBlockOutlining']
['OMR', 'Optimization', 'perform()', 'TR', 'ColdBlockMarker']
['TR', 'ColdBlockMarker', 'perform()', 'TR', 'ColdBlockOutlining']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'CompactNullChecks']
['OMR', 'Optimization', 'perform()', 'TR', 'CompactNullChecks']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'CompactNullChecks']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'EliminateRedundantGotos']
['OMR', 'Optimization', 'perform()', 'TR', 'EliminateRedundantGotos']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'EliminateRedundantGotos']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'ExtendBasicBlocks']
['OMR', 'Optimization', 'perform()', 'TR', 'ExtendBasicBlocks']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'HoistBlocks']
['OMR', 'Optimization', 'perform()', 'TR', 'HoistBlocks']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'HoistBlocks']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'InvariantArgumentPreexistence']
['OMR', 'Optimization', 'perform()', 'TR', 'InvariantArgumentPreexistence']
['TR', 'Rematerialization', 'create(TR::OptimizationManager *)', 'TR', 'LongRegAllocation']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'Rematerialization']
['TR', 'Rematerialization', 'optDetailString()', 'TR', 'LongRegAllocation']
['OMR', 'Optimization', 'perform()', 'TR', 'Rematerialization']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'Rematerialization']
['OMR', 'Optimization', 'postPerformOnBlocks()', 'TR', 'LongRegAllocation']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'Rematerialization']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'OrderBlocks']
['OMR', 'Optimization', 'perform()', 'TR', 'OrderBlocks']
['OMR', 'Optimization', 'shouldPerform()', 'TR', 'OrderBlocks']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'PeepHoleBasicBlocks']
['OMR', 'Optimization', 'perform()', 'TR', 'PeepHoleBasicBlocks']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'ProfiledNodeVersioning']
['OMR', 'Optimization', 'perform()', 'TR', 'ProfiledNodeVersioning']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'SimplifyAnds']
['OMR', 'Optimization', 'perform()', 'TR', 'SimplifyAnds']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'SimplifyAnds']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'TrivialBlockExtension']
['OMR', 'Optimization', 'perform()', 'TR', 'TrivialBlockExtension']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'TrivialBlockExtension']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'TrivialDeadTreeRemoval']
['OMR', 'Optimization', 'perform()', 'TR', 'TrivialDeadTreeRemoval']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'TrivialDeadTreeRemoval']
['OMR', 'Simplifier', '~Simplifier()', 'TR', 'Simplifier']
['', 'List', 'jitPersistentAlloc(size_t)', 'TR', 'OrderedBlockList']
['', 'List', 'jitPersistentFree(void *)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete(void *,TR::Region &)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete(void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete(void *,size_t)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete[](void *,TR::Region &)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete[](void *,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new(size_t,TR::Region &)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new(size_t,TR::Internal::PersistentNewType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new(size_t,class TR_PersistentMemory *)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new(size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new(size_t,TR_ArenaAllocator *)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new[](size_t,TR::Region &)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new[](size_t,TR::Internal::PersistentNewType)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new[](size_t,class TR_PersistentMemory *)', 'TR', 'OrderedBlockList']
['', 'List', 'operator new[](size_t,class TR_Memory *,enum TR_AllocationKind)', 'TR', 'OrderedBlockList']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'ArraycopyTransformation']
['OMR', 'Optimization', 'perform()', 'TR', 'ArraycopyTransformation']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'GlobalValuePropagation']
['OMR', 'Optimization', 'perform()', 'TR', 'GlobalValuePropagation']
['OMR', 'ValuePropagation', '~ValuePropagation()', 'TR', 'ValuePropagation']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'LocalValuePropagation']
['OMR', 'Optimization', 'perform()', 'TR', 'LocalValuePropagation']
['OMR', 'Optimization', 'performOnBlock(TR::Block *)', 'TR', 'LocalValuePropagation']
['OMR', 'Optimization', 'postPerformOnBlocks()', 'TR', 'LocalValuePropagation']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'LocalValuePropagation']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'RegDepCopyRemoval']
['OMR', 'Optimization', 'perform()', 'TR', 'RegDepCopyRemoval']
['TR', 'DataFlowAnalysis', 'analyzeBlockStructure(class TR_BlockStructure *,_Bool)', 'TR', 'ExceptionCheckMotion']
['TR', 'DataFlowAnalysis', 'analyzeRegionStructure(class TR_RegionStructure *,_Bool)', 'TR', 'ExceptionCheckMotion']
['TR', 'DataFlowAnalysis', 'asExceptionCheckMotion()', 'TR', 'ExceptionCheckMotion']
['TR', 'DataFlowAnalysis', 'getKind()', 'TR', 'ExceptionCheckMotion']
['TR', 'DataFlowAnalysis', 'perform()', 'TR', 'ExceptionCheckMotion']
['TR', 'DataFlowAnalysis', 'trace()', 'TR', 'ExceptionCheckMotion']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'GeneralSinkStores']
['OMR', 'Optimization', 'perform()', 'TR', 'GeneralSinkStores']
['TR', 'SinkStores', 'sinkStorePlacement(class TR_MovableStore *,_Bool)', 'TR', 'GeneralSinkStores']
['TR', 'SinkStores', 'storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &)', 'TR', 'GeneralSinkStores']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'IndexExprManipulator']
['OMR', 'Optimization', 'perform()', 'TR', 'IndexExprManipulator']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'InnerPreexistence']
['OMR', 'Optimization', 'perform()', 'TR', 'InnerPreexistence']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'OSRDefAnalysis']
['OMR', 'Optimization', 'perform()', 'TR', 'OSRDefAnalysis']
['TR', 'UseDefInfo', 'performAnalysis(class TR_UseDefInfo::AuxiliaryData &)', 'TR', 'OSRDefInfo']
['TR', 'UseDefInfo', 'processReachingDefinition(void *,class TR_UseDefInfo::AuxiliaryData &)', 'TR', 'OSRDefInfo']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'OSRExceptionEdgeRemoval']
['OMR', 'Optimization', 'perform()', 'TR', 'OSRExceptionEdgeRemoval']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'OSRLiveRangeAnalysis']
['OMR', 'Optimization', 'perform()', 'TR', 'OSRLiveRangeAnalysis']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'PartialRedundancy']
['OMR', 'Optimization', 'perform()', 'TR', 'PartialRedundancy']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'PrefetchInsertion']
['TR', 'LoopTransformer', 'perform()', 'TR', 'PrefetchInsertion']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'RedundantAsyncCheckRemoval']
['OMR', 'Optimization', 'perform()', 'TR', 'RedundantAsyncCheckRemoval']
['OMR', 'Optimization', 'shouldPerform()', 'TR', 'RedundantAsyncCheckRemoval']
['TR', 'ForwardDFSetAnalysis', 'analyzeBlockStructure(class TR_BlockStructure *,_Bool)', 'TR', 'RedundantExpressionAdjustment']
['TR', 'DataFlowAnalysis', 'asRedundantExpressionAdjustment()', 'TR', 'RedundantExpressionAdjustment']
['TR', 'IntersectionDFSetAnalysis', 'getKind()', 'TR', 'RedundantExpressionAdjustment']
['TR', 'BasicDFSetAnalysis', 'getNumberOfBits()', 'TR', 'RedundantExpressionAdjustment']
['TR', 'BasicDFSetAnalysis', 'initializeGenAndKillSetInfo()', 'TR', 'RedundantExpressionAdjustment']
['TR', 'BasicDFSetAnalysis', 'postInitializationProcessing()', 'TR', 'RedundantExpressionAdjustment']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSets()', 'TR', 'RedundantExpressionAdjustment']
['TR', 'BasicDFSetAnalysis', 'supportsGenAndKillSetsForStructures()', 'TR', 'RedundantExpressionAdjustment']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'ShrinkWrap']
['OMR', 'Optimization', 'perform()', 'TR', 'ShrinkWrap']
['OMR', 'Optimization', 'prePerformOnBlocks()', 'TR', 'ShrinkWrap']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'StripMiner']
['TR', 'LoopTransformer', 'perform()', 'TR', 'StripMiner']
['OMR', 'Optimization', 'shouldPerform()', 'TR', 'StripMiner']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'TrivialSinkStores']
['OMR', 'Optimization', 'perform()', 'TR', 'TrivialSinkStores']
['TR', 'SinkStores', 'sinkStorePlacement(class TR_MovableStore *,_Bool)', 'TR', 'TrivialSinkStores']
['TR', 'SinkStores', 'storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &)', 'TR', 'TrivialSinkStores']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'VirtualGuardHeadMerger']
['OMR', 'Optimization', 'perform()', 'TR', 'VirtualGuardHeadMerger']
['OMR', 'Optimization', 'optDetailString()', 'TR', 'VirtualGuardTailSplitter']
['OMR', 'Optimization', 'perform()', 'TR', 'VirtualGuardTailSplitter']
['TR', 'ReachabilityAnalysis', 'isOrigin(TR::Block *)', 'TR', 'CanReachGivenBlocks']
['TR', 'ReachabilityAnalysis', 'propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *)', 'TR', 'BackwardReachability']
['TR', 'ReachabilityAnalysis', 'isOrigin(TR::Block *)', 'TR', 'CanBeReachedFromCatchBlock']
['TR', 'ReachabilityAnalysis', 'propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *)', 'TR', 'ForwardReachability']
['TR', 'ReachabilityAnalysis', 'isOrigin(TR::Block *)', 'TR', 'CanBeReachedWithoutExceptionEdges']
['TR', 'ReachabilityAnalysis', 'propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *)', 'TR', 'ForwardReachabilityWithoutExceptionEdges']
['TR', 'ReachabilityAnalysis', 'isOrigin(TR::Block *)', 'TR', 'CanReachNonColdBlocks']
['TR', 'UnionDFSetAnalysis', 'TR_UnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool)', 'TR', 'UnionDFSetAnalysis']
['TR', 'UnionDFSetAnalysis', 'getKind()', 'TR', 'UnionDFSetAnalysis']
['TR', 'UnionDFSetAnalysis', 'initializeCurrentGenKillSetInfo()', 'TR', 'UnionDFSetAnalysis']
['TR', 'UnionDFSetAnalysis', 'initializeInSetInfo()', 'TR', 'UnionDFSetAnalysis']
['TR', 'UnionDFSetAnalysis', '~TR_UnionDFSetAnalysis()', 'TR', 'UnionDFSetAnalysis']
['TR', 'Stats', 'report(FILE *)', 'TR', 'StatsHisto']
['TR', 'Stats', 'reset()', 'TR', 'StatsHisto']
['TR', 'Stats', 'update(double)', 'TR', 'StatsHisto']
['TR', 'Stats', 'mean()', 'TR', 'StatsInterval']
['TR', 'Stats', 'report(FILE *)', 'TR', 'StatsInterval']
['TR', 'Stats', 'stddev()', 'TR', 'StatsInterval']
['OMR', 'AheadOfTimeCompile', '~AheadOfTimeCompile()', 'TR', 'AheadOfTimeCompile']
['TR', 'Relocation', 'addAOTRelocation(TR::CodeGenerator *)', 'TR', 'ExternalRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'ExternalRelocation']
['TR', 'Relocation', 'getUpdateLocation()', 'TR', 'BeforeBinaryEncodingExternalRelocation']
['TR', 'Relocation', 'trace(TR::Compilation *)', 'TR', 'ExternalRelocation']
['TR', 'ExternalRelocation', 'apply(TR::CodeGenerator *)', 'TR', 'ExternalOrderedPair32BitRelocation']
['TR', 'ExternalRelocation', 'collectModifier()', 'TR', 'ExternalOrderedPair32BitRelocation']
['TR', 'ExternalRelocation', 'getNarrowSize()', 'TR', 'ExternalOrderedPair32BitRelocation']
['TR', 'ExternalRelocation', 'getWideSize()', 'TR', 'ExternalOrderedPair32BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'InstructionAbsoluteRelocation']
['TR', 'Relocation', 'isAOTRelocation()', 'TR', 'InstructionAbsoluteRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LabelAbsoluteRelocation']
['TR', 'Relocation', 'isAOTRelocation()', 'TR', 'LabelRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LabelRelative12BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LabelRelative16BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LabelRelative24BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LabelRelative32BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LabelRelative8BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LabelTable32BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LoadLabelRelative16BitRelocation']
['TR', 'Relocation', 'isAOTRelocation()', 'TR', 'LoadLabelRelative16BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LoadLabelRelative32BitRelocation']
['TR', 'Relocation', 'isAOTRelocation()', 'TR', 'LoadLabelRelative32BitRelocation']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'LoadLabelRelative64BitRelocation']
['OMR', 'UnresolvedDataSnippet', '~UnresolvedDataSnippet()', 'TR', 'UnresolvedDataSnippet']
['OMR::X86::AMD64', 'MemoryReference', '~MemoryReference()', 'TR', 'MemoryReference']
['OMR', 'Snippet', 'emitSnippetBody()', 'TR', 'IA32DataSnippet']
['OMR::X86', 'Snippet', 'getKind()', 'TR', 'IA32DataSnippet']
['TR', 'IA32DataSnippet', 'getKind()', 'TR', 'IA32ConstantDataSnippet']
['OMR', 'Snippet', 'getLength(int32_t)', 'TR', 'IA32DataSnippet']
['TR', 'AMD64Imm64Instruction', 'addMetaDataForCodeAddress(uint8_t *)', 'TR', 'AMD64Imm64SymInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'AMD64Imm64Instruction']
['TR', 'AMD64Imm64Instruction', 'description()', 'TR', 'AMD64Imm64SymInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'AMD64Imm64Instruction']
['TR', 'AMD64Imm64Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'AMD64Imm64SymInstruction']
['OMR::X86', 'Instruction', 'generateOperand(uint8_t *)', 'TR', 'AMD64Imm64Instruction']
['TR', 'AMD64Imm64Instruction', 'generateOperand(uint8_t *)', 'TR', 'AMD64Imm64SymInstruction']
['OMR', 'Instruction', 'getBinaryLengthLowerBound()', 'TR', 'AMD64Imm64Instruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'AMD64Imm64Instruction']
['TR', 'AMD64Imm64Instruction', 'getKind()', 'TR', 'AMD64Imm64SymInstruction']
['TR', 'AMD64RegImm64Instruction', 'addMetaDataForCodeAddress(uint8_t *)', 'TR', 'AMD64RegImm64SymInstruction']
['OMR::X86', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86RegInstruction']
['TR', 'X86RegInstruction', 'description()', 'TR', 'AMD64RegImm64Instruction']
['TR', 'AMD64RegImm64Instruction', 'description()', 'TR', 'AMD64RegImm64SymInstruction']
['OMR::X86', 'Instruction', 'enlarge(int32_t,int32_t,_Bool)', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86RegInstruction']
['TR', 'X86RegInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'AMD64RegImm64Instruction']
['OMR::X86', 'Instruction', 'generateOperand(uint8_t *)', 'TR', 'X86RegInstruction']
['TR', 'X86RegInstruction', 'generateOperand(uint8_t *)', 'TR', 'AMD64RegImm64Instruction']
['TR', 'AMD64RegImm64Instruction', 'generateOperand(uint8_t *)', 'TR', 'AMD64RegImm64SymInstruction']
['OMR', 'Instruction', 'getBinaryLengthLowerBound()', 'TR', 'X86RegInstruction']
['TR', 'X86RegInstruction', 'getBinaryLengthLowerBound()', 'TR', 'AMD64RegImm64Instruction']
['OMR::X86', 'Instruction', 'getIA32RegInstruction()', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86RegInstruction']
['TR', 'X86RegInstruction', 'getKind()', 'TR', 'AMD64RegImm64Instruction']
['TR', 'AMD64RegImm64Instruction', 'getKind()', 'TR', 'AMD64RegImm64SymInstruction']
['OMR::X86', 'Instruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'getTargetRegister()', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'rexBits()', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'X86RegInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86AlignmentInstruction']
['OMR::X86', 'Instruction', 'enlarge(int32_t,int32_t,_Bool)', 'TR', 'X86AlignmentInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86AlignmentInstruction']
['OMR::X86', 'Instruction', 'generateBinaryEncoding()', 'TR', 'X86AlignmentInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86AlignmentInstruction']
['OMR::X86', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86BoundaryAvoidanceInstruction']
['TR', 'X86BoundaryAvoidanceInstruction', 'betterPadLength(int32_t,const struct TR_AtomicRegion *,int32_t)', 'TR', 'X86PatchableCodeAlignmentInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86BoundaryAvoidanceInstruction']
['TR', 'X86BoundaryAvoidanceInstruction', 'description()', 'TR', 'X86PatchableCodeAlignmentInstruction']
['OMR::X86', 'Instruction', 'enlarge(int32_t,int32_t,_Bool)', 'TR', 'X86BoundaryAvoidanceInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86BoundaryAvoidanceInstruction']
['OMR::X86', 'Instruction', 'generateBinaryEncoding()', 'TR', 'X86BoundaryAvoidanceInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86BoundaryAvoidanceInstruction']
['TR', 'X86BoundaryAvoidanceInstruction', 'getKind()', 'TR', 'X86PatchableCodeAlignmentInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86CallMemInstruction']
['OMR::X86', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86MemInstruction']
['TR', 'X86MemInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86CallMemInstruction']
['OMR::X86', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86MemInstruction']
['TR', 'X86MemInstruction', 'description()', 'TR', 'X86CallMemInstruction']
['OMR::X86', 'Instruction', 'enlarge(int32_t,int32_t,_Bool)', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'generateOperand(uint8_t *)', 'TR', 'X86MemInstruction']
['OMR', 'Instruction', 'getBinaryLengthLowerBound()', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86MemInstruction']
['TR', 'X86MemInstruction', 'getKind()', 'TR', 'X86CallMemInstruction']
['OMR::X86', 'Instruction', 'getMemoryReference()', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86MemInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'needsLockPrefix()', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'rexBits()', 'TR', 'X86MemInstruction']
['OMR::X86', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'X86MemInstruction']
['TR', 'X86RegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPArithmeticRegRegInstruction']
['TR', 'X86RegInstruction', 'defsRegister(TR::Register *)', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegInstruction', 'description()', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegRegInstruction', 'description()', 'TR', 'X86FPRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'description()', 'TR', 'X86FPArithmeticRegRegInstruction']
['TR', 'X86RegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPArithmeticRegRegInstruction']
['TR', 'X86RegInstruction', 'getIA32RegRegInstruction()', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegInstruction', 'getKind()', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegRegInstruction', 'getKind()', 'TR', 'X86FPRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'getKind()', 'TR', 'X86FPArithmeticRegRegInstruction']
['OMR::X86', 'Instruction', 'getNumOperandReferencedFPRegisters()', 'TR', 'X86FPRegRegInstruction']
['TR', 'X86RegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegRegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86FPRegRegInstruction']
['OMR::X86', 'Instruction', 'getSourceRegister()', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegInstruction', 'refsRegister(TR::Register *)', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegInstruction', 'rexBits()', 'TR', 'X86RegRegInstruction']
['TR', 'X86RegInstruction', 'usesRegister(TR::Register *)', 'TR', 'X86RegRegInstruction']
['OMR::X86', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPCompareEvalInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86FPCompareEvalInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86FPCompareEvalInstruction']
['TR', 'X86FPRegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPCompareRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'description()', 'TR', 'X86FPCompareRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPCompareRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'getKind()', 'TR', 'X86FPCompareRegRegInstruction']
['TR', 'X86MemInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPMemRegInstruction']
['TR', 'X86MemInstruction', 'defsRegister(TR::Register *)', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemInstruction', 'description()', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemRegInstruction', 'description()', 'TR', 'X86FPMemRegInstruction']
['TR', 'X86MemInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPMemRegInstruction']
['TR', 'X86MemInstruction', 'getKind()', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemRegInstruction', 'getKind()', 'TR', 'X86FPMemRegInstruction']
['OMR::X86', 'Instruction', 'getNumOperandReferencedFPRegisters()', 'TR', 'X86FPMemRegInstruction']
['TR', 'X86MemInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemRegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86FPMemRegInstruction']
['OMR::X86', 'Instruction', 'getSourceRegister()', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemInstruction', 'refsRegister(TR::Register *)', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemInstruction', 'rexBits()', 'TR', 'X86MemRegInstruction']
['TR', 'X86MemInstruction', 'usesRegister(TR::Register *)', 'TR', 'X86MemRegInstruction']
['TR', 'X86RegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPRegInstruction']
['TR', 'X86RegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPRegInstruction']
['TR', 'X86RegInstruction', 'getKind()', 'TR', 'X86FPRegInstruction']
['OMR::X86', 'Instruction', 'getNumOperandReferencedFPRegisters()', 'TR', 'X86FPRegInstruction']
['TR', 'X86RegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86FPRegInstruction']
['TR', 'X86RegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegMemInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPRegMemInstruction']
['TR', 'X86RegInstruction', 'description()', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegMemInstruction', 'description()', 'TR', 'X86FPRegMemInstruction']
['TR', 'X86RegInstruction', 'enlarge(int32_t,int32_t,_Bool)', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegMemInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPRegMemInstruction']
['TR', 'X86RegInstruction', 'getBinaryLengthLowerBound()', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegMemInstruction', 'getBinaryLengthLowerBound()', 'TR', 'X86FPRegMemInstruction']
['TR', 'X86RegInstruction', 'getIA32RegMemInstruction()', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegInstruction', 'getKind()', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegMemInstruction', 'getKind()', 'TR', 'X86FPRegMemInstruction']
['OMR::X86', 'Instruction', 'getMemoryReference()', 'TR', 'X86RegMemInstruction']
['OMR::X86', 'Instruction', 'getNumOperandReferencedFPRegisters()', 'TR', 'X86FPRegMemInstruction']
['TR', 'X86RegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegMemInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86FPRegMemInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'X86RegMemInstruction']
['OMR::X86', 'Instruction', 'needsLockPrefix()', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegInstruction', 'refsRegister(TR::Register *)', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegInstruction', 'rexBits()', 'TR', 'X86RegMemInstruction']
['TR', 'X86RegInstruction', 'usesRegister(TR::Register *)', 'TR', 'X86RegMemInstruction']
['TR', 'X86FPRegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPST0ST1RegRegInstruction']
['TR', 'X86FPST0ST1RegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPRemainderRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'description()', 'TR', 'X86FPST0ST1RegRegInstruction']
['TR', 'X86FPST0ST1RegRegInstruction', 'description()', 'TR', 'X86FPRemainderRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPST0ST1RegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'getKind()', 'TR', 'X86FPST0ST1RegRegInstruction']
['TR', 'X86FPST0ST1RegRegInstruction', 'getKind()', 'TR', 'X86FPRemainderRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPST0STiRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'description()', 'TR', 'X86FPST0STiRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPST0STiRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'getKind()', 'TR', 'X86FPST0STiRegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86FPSTiST0RegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'description()', 'TR', 'X86FPSTiST0RegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86FPSTiST0RegRegInstruction']
['TR', 'X86FPRegRegInstruction', 'getKind()', 'TR', 'X86FPSTiST0RegRegInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86FenceInstruction']
['OMR::X86', 'Instruction', 'generateBinaryEncoding()', 'TR', 'X86FenceInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86FenceInstruction']
['TR', 'X86ImmInstruction', 'addMetaDataForCodeAddress(uint8_t *)', 'TR', 'X86ImmSnippetInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86ImmInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86ImmInstruction']
['TR', 'X86ImmInstruction', 'description()', 'TR', 'X86ImmSnippetInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86ImmInstruction']
['OMR::X86', 'Instruction', 'generateOperand(uint8_t *)', 'TR', 'X86ImmInstruction']
['TR', 'X86ImmInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86ImmSnippetInstruction']
['OMR', 'Instruction', 'getBinaryLengthLowerBound()', 'TR', 'X86ImmInstruction']
['OMR::X86', 'Instruction', 'getIA32ImmInstruction()', 'TR', 'X86ImmInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86ImmInstruction']
['TR', 'X86ImmInstruction', 'getKind()', 'TR', 'X86ImmSnippetInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'X86ImmSnippetInstruction']
['TR', 'X86ImmInstruction', 'addMetaDataForCodeAddress(uint8_t *)', 'TR', 'X86ImmSymInstruction']
['TR', 'X86ImmInstruction', 'description()', 'TR', 'X86ImmSymInstruction']
['TR', 'X86ImmInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86ImmSymInstruction']
['TR', 'X86ImmInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86ImmSymInstruction']
['TR', 'X86ImmInstruction', 'getKind()', 'TR', 'X86ImmSymInstruction']
['OMR::X86', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86LabelInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86LabelInstruction']
['OMR::X86', 'Instruction', 'enlarge(int32_t,int32_t,_Bool)', 'TR', 'X86LabelInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86LabelInstruction']
['OMR::X86', 'Instruction', 'generateBinaryEncoding()', 'TR', 'X86LabelInstruction']
['OMR', 'Instruction', 'getBinaryLengthLowerBound()', 'TR', 'X86LabelInstruction']
['OMR::X86', 'Instruction', 'getIA32LabelInstruction()', 'TR', 'X86LabelInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86LabelInstruction']
['OMR', 'Instruction', 'getLabelSymbol()', 'TR', 'X86LabelInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'X86LabelInstruction']
['OMR::X86', 'Instruction', 'isPatchBarrier()', 'TR', 'X86LabelInstruction']
['TR', 'X86MemImmInstruction', 'addMetaDataForCodeAddress(uint8_t *)', 'TR', 'X86MemImmSymInstruction']
['TR', 'X86MemInstruction', 'description()', 'TR', 'X86MemImmInstruction']
['TR', 'X86MemImmInstruction', 'description()', 'TR', 'X86MemImmSymInstruction']
['TR', 'X86MemInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86MemImmInstruction']
['TR', 'X86MemInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86MemImmInstruction']
['TR', 'X86MemImmInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86MemImmSymInstruction']
['TR', 'X86MemInstruction', 'getBinaryLengthLowerBound()', 'TR', 'X86MemImmInstruction']
['TR', 'X86MemInstruction', 'getKind()', 'TR', 'X86MemImmInstruction']
['TR', 'X86MemImmInstruction', 'getKind()', 'TR', 'X86MemImmSymInstruction']
['TR', 'X86MemRegInstruction', 'description()', 'TR', 'X86MemRegImmInstruction']
['TR', 'X86MemInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86MemRegImmInstruction']
['TR', 'X86MemRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86MemRegImmInstruction']
['TR', 'X86MemInstruction', 'getBinaryLengthLowerBound()', 'TR', 'X86MemRegImmInstruction']
['TR', 'X86MemRegInstruction', 'getKind()', 'TR', 'X86MemRegImmInstruction']
['TR', 'X86MemRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86MemRegRegInstruction']
['TR', 'X86MemRegInstruction', 'description()', 'TR', 'X86MemRegRegInstruction']
['TR', 'X86MemRegInstruction', 'getKind()', 'TR', 'X86MemRegRegInstruction']
['TR', 'X86MemRegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86MemRegRegInstruction']
['OMR::X86', 'Instruction', 'getSourceRightRegister()', 'TR', 'X86MemRegRegInstruction']
['TR', 'X86MemRegInstruction', 'refsRegister(TR::Register *)', 'TR', 'X86MemRegRegInstruction']
['TR', 'X86MemRegInstruction', 'usesRegister(TR::Register *)', 'TR', 'X86MemRegRegInstruction']
['TR', 'X86MemInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86MemTableInstruction']
['TR', 'X86MemInstruction', 'description()', 'TR', 'X86MemTableInstruction']
['TR', 'X86MemInstruction', 'getKind()', 'TR', 'X86MemTableInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86PaddingInstruction']
['TR', 'X86PaddingInstruction', 'description()', 'TR', 'X86PaddingSnippetInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86PaddingInstruction']
['OMR::X86', 'Instruction', 'generateBinaryEncoding()', 'TR', 'X86PaddingInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86PaddingInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'X86PaddingSnippetInstruction']
['TR', 'X86RegImmInstruction', 'addMetaDataForCodeAddress(uint8_t *)', 'TR', 'X86RegImmSymInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86RegImmInstruction']
['TR', 'X86RegInstruction', 'description()', 'TR', 'X86RegImmInstruction']
['TR', 'X86RegImmInstruction', 'description()', 'TR', 'X86RegImmSymInstruction']
['TR', 'X86RegInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86RegImmInstruction']
['TR', 'X86RegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86RegImmInstruction']
['TR', 'X86RegImmInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86RegImmSymInstruction']
['TR', 'X86RegInstruction', 'getBinaryLengthLowerBound()', 'TR', 'X86RegImmInstruction']
['TR', 'X86RegInstruction', 'getKind()', 'TR', 'X86RegImmInstruction']
['TR', 'X86RegImmInstruction', 'getKind()', 'TR', 'X86RegImmSymInstruction']
['TR', 'X86RegMemInstruction', 'description()', 'TR', 'X86RegMemImmInstruction']
['TR', 'X86RegMemInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86RegMemImmInstruction']
['TR', 'X86RegMemInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86RegMemImmInstruction']
['TR', 'X86RegMemInstruction', 'getBinaryLengthLowerBound()', 'TR', 'X86RegMemImmInstruction']
['TR', 'X86RegMemInstruction', 'getKind()', 'TR', 'X86RegMemImmInstruction']
['TR', 'X86RegRegInstruction', 'description()', 'TR', 'X86RegRegImmInstruction']
['TR', 'X86RegInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86RegRegImmInstruction']
['TR', 'X86RegRegInstruction', 'generateOperand(uint8_t *)', 'TR', 'X86RegRegImmInstruction']
['TR', 'X86RegInstruction', 'getBinaryLengthLowerBound()', 'TR', 'X86RegRegImmInstruction']
['TR', 'X86RegRegInstruction', 'getKind()', 'TR', 'X86RegRegImmInstruction']
['TR', 'X86RegRegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86RegRegImmInstruction']
['TR', 'X86RegRegInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86RegRegRegInstruction']
['TR', 'X86RegRegInstruction', 'defsRegister(TR::Register *)', 'TR', 'X86RegRegRegInstruction']
['TR', 'X86RegRegInstruction', 'description()', 'TR', 'X86RegRegRegInstruction']
['TR', 'X86RegRegInstruction', 'getKind()', 'TR', 'X86RegRegRegInstruction']
['TR', 'X86RegRegInstruction', 'getNumOperandReferencedGPRegisters()', 'TR', 'X86RegRegRegInstruction']
['OMR::X86', 'Instruction', 'getSourceRightRegister()', 'TR', 'X86RegRegRegInstruction']
['TR', 'X86RegRegInstruction', 'refsRegister(TR::Register *)', 'TR', 'X86RegRegRegInstruction']
['TR', 'X86RegRegInstruction', 'usesRegister(TR::Register *)', 'TR', 'X86RegRegRegInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86RestoreVMThreadInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86RestoreVMThreadInstruction']
['OMR::X86', 'Instruction', 'generateBinaryEncoding()', 'TR', 'X86RestoreVMThreadInstruction']
['OMR', 'Instruction', 'getBinaryLengthLowerBound()', 'TR', 'X86RestoreVMThreadInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86RestoreVMThreadInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86VFPCallCleanupInstruction']
['OMR::X86', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86VFPCallCleanupInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86VFPCallCleanupInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86VFPCallCleanupInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86VFPCallCleanupInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86VFPDedicateInstruction']
['TR', 'X86RegMemInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86VFPDedicateInstruction']
['TR', 'X86RegMemInstruction', 'description()', 'TR', 'X86VFPDedicateInstruction']
['TR', 'X86RegMemInstruction', 'getKind()', 'TR', 'X86VFPDedicateInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86VFPReleaseInstruction']
['OMR::X86', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'X86VFPReleaseInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86VFPReleaseInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86VFPReleaseInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86VFPReleaseInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86VFPRestoreInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86VFPRestoreInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86VFPRestoreInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86VFPRestoreInstruction']
['OMR::X86', 'Instruction', 'adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *)', 'TR', 'X86VFPSaveInstruction']
['OMR::X86', 'Instruction', 'description()', 'TR', 'X86VFPSaveInstruction']
['OMR::X86', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'X86VFPSaveInstruction']
['OMR::X86', 'Instruction', 'getKind()', 'TR', 'X86VFPSaveInstruction']
['OMR', 'Snippet', 'emitSnippetBody()', 'TR', 'X86DivideCheckSnippet']
['OMR::X86', 'Snippet', 'getKind()', 'TR', 'X86RestartSnippet']
['TR', 'X86RestartSnippet', 'getKind()', 'TR', 'X86DivideCheckSnippet']
['OMR', 'Snippet', 'getLength(int32_t)', 'TR', 'X86DivideCheckSnippet']
['TR', 'X86FPCompareAnalyser', 'fpCompareAnalyser(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes,_Bool)', 'TR', 'IA32XMMCompareAnalyser']
['OMR', 'Snippet', 'emitSnippetBody()', 'TR', 'X86FPConversionSnippet']
['TR', 'X86FPConversionSnippet', 'genFPConversion(uint8_t *)', 'TR', 'X86FPConvertToIntSnippet']
['TR', 'X86RestartSnippet', 'getKind()', 'TR', 'X86FPConversionSnippet']
['TR', 'X86FPConversionSnippet', 'getKind()', 'TR', 'X86FPConvertToIntSnippet']
['OMR', 'Snippet', 'getLength(int32_t)', 'TR', 'X86FPConvertToIntSnippet']
['TR', 'X86FPConversionSnippet', 'genFPConversion(uint8_t *)', 'TR', 'X86FPConvertToLongSnippet']
['TR', 'X86FPConversionSnippet', 'getKind()', 'TR', 'X86FPConvertToLongSnippet']
['OMR', 'Snippet', 'getLength(int32_t)', 'TR', 'X86FPConvertToLongSnippet']
['OMR', 'Snippet', 'emitSnippetBody()', 'TR', 'X86HelperCallSnippet']
['TR', 'X86HelperCallSnippet', 'genHelperCall(uint8_t *)', 'TR', 'X86CheckAsyncMessagesSnippet']
['TR', 'X86RestartSnippet', 'getKind()', 'TR', 'X86HelperCallSnippet']
['OMR', 'Snippet', 'getLength(int32_t)', 'TR', 'X86HelperCallSnippet']
['OMR::X86', 'Linkage', 'buildDirectDispatch(TR::Node *,_Bool)', 'TR', 'X86SystemLinkage']
['OMR::X86', 'Linkage', 'buildIndirectDispatch(TR::Node *)', 'TR', 'X86SystemLinkage']
['OMR::X86', 'Linkage', 'copyGlRegDepsToParameterSymbols(TR::Node *,TR::CodeGenerator *)', 'TR', 'X86SystemLinkage']
['OMR::X86', 'Linkage', 'copyLinkageInfoToParameterSymbols()', 'TR', 'X86SystemLinkage']
['OMR::X86', 'Linkage', 'createEpilogue(TR::Instruction *)', 'TR', 'X86SystemLinkage']
['OMR::X86', 'Linkage', 'createPrologue(TR::Instruction *)', 'TR', 'X86SystemLinkage']
['OMR::X86', 'Linkage', 'getProperties()', 'TR', 'X86SystemLinkage']
['OMR::X86', 'Linkage', 'mapIncomingParms(TR::ResolvedMethodSymbol *)', 'TR', 'X86SystemLinkage']
['TR', 'X86SystemLinkage', 'buildArgs(TR::Node *,TR::RegisterDependencyConditions *)', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'buildDirectDispatch(TR::Node *,_Bool)', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'buildIndirectDispatch(TR::Node *)', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'buildVolatileAndReturnDependencies(TR::Node *,TR::RegisterDependencyConditions *)', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'getAlignment(TR::DataType)', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'getSingleWordFrameAllocationRegister()', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'layoutParm(TR::Node *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &)', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'layoutParm(TR::ParameterSymbol *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &)', 'TR', 'AMD64SystemLinkage']
['TR', 'X86SystemLinkage', 'mapIncomingParms(TR::ResolvedMethodSymbol *,uint32_t &)', 'TR', 'AMD64ABILinkage']
['TR', 'X86SystemLinkage', 'setUpStackSizeForCallNode(TR::Node *)', 'TR', 'AMD64SystemLinkage']
['OMR::X86', 'RegisterIterator', '~RegisterIterator()', 'TR', 'RegisterIterator']
['OMR', 'CodeCacheConfig', '~CodeCacheConfig()', 'TR', 'CodeCacheConfig']
['TestCompiler', 'CodeCacheManager', '~CodeCacheManager()', 'TR', 'CodeCacheManager']
['TR', 'FrontEnd', 'allocateCodeMemory(TR::Compilation *,uint32_t,uint32_t,uint8_t **,_Bool)', 'TR', 'FEBase']
['TR', 'FrontEnd', 'allocateRelocationData(TR::Compilation *,uint32_t)', 'TR', 'FEBase']
['TR', 'FrontEnd', 'createDebug(TR::Compilation *)', 'TR', 'FECommon']
['TR', 'FrontEnd', 'getClassFromSignature(const char *,int32_t,class TR_ResolvedMethod *,_Bool)', 'TR', 'FECommon']
['TR', 'FrontEnd', 'getClassFromSignature(const char *,int32_t,class TR_OpaqueMethodBlock *,_Bool)', 'TR', 'FECommon']
['TR', 'FrontEnd', 'getDesignatedCodeCache(TR::Compilation *)', 'TR', 'FEBase']
['TR', 'FrontEnd', 'getOffsetOfIndexableSizeField()', 'TR', 'FECommon']
['TR', 'FrontEnd', 'getPersistentInfo()', 'TR', 'FEBase']
['TR', 'FrontEnd', 'indexedTrampolineLookup(int32_t,void *)', 'TR', 'FEBase']
['TR', 'FECommon', 'persistentMemory()', 'TR', 'FEBase']
['TR', 'FrontEnd', 'resizeCodeMemory(TR::Compilation *,uint8_t *,uint32_t)', 'TR', 'FEBase']
['TR', 'FrontEnd', 'sampleSignature(class TR_OpaqueMethodBlock *,char *,int32_t,class TR_Memory *)', 'TR', 'FECommon']
['TR', 'FrontEnd', 'unreserveCodeCache(TR::CodeCache *)', 'TR', 'FEBase']
['TestCompiler', 'FrontEnd', '~FrontEnd()', 'TR', 'FrontEnd']
['TestCompiler', 'IlInjector', '~IlInjector()', 'TR', 'IlInjector']
['TestCompiler', 'IlBuilder', '~IlBuilder()', 'TR', 'IlBuilder']
['OMR', 'IlType', '~IlType()', 'TR', 'IlType']
['OMR', 'TypeDictionary', '~TypeDictionary()', 'TR', 'TypeDictionary']
['TestCompiler', 'MethodBuilder', '~MethodBuilder()', 'TR', 'MethodBuilder']
['TR', 'IlVerifier', 'verify(TR::ResolvedMethodSymbol *)', 'TR', 'AllIlVerifier']
['TR', 'IlVerifier', 'verify(TR::ResolvedMethodSymbol *)', 'TR', 'NoCodegenVerifier']
['TR', 'CompilationStrategy', 'enableSwitchToProfiling()', 'TR', 'DefaultCompilationStrategy']
['TR', 'CompilationStrategy', 'processEvent(class TR_MethodEvent *,_Bool *)', 'TR', 'DefaultCompilationStrategy']
['TR', 'CompilationStrategy', 'shutdown()', 'TR', 'DefaultCompilationStrategy']
['TR', 'SegmentAllocator', 'allocationLimit()', 'TR', 'DebugSegmentProvider']
['TR', 'SegmentProvider', 'bytesAllocated()', 'TR', 'DebugSegmentProvider']
['TR', 'SegmentAllocator', 'regionBytesAllocated()', 'TR', 'DebugSegmentProvider']
['TR', 'SegmentProvider', 'release(TR::MemorySegment &)', 'TR', 'DebugSegmentProvider']
['TR', 'SegmentProvider', 'request(size_t)', 'TR', 'DebugSegmentProvider']
['TR', 'SegmentAllocator', 'setAllocationLimit(size_t)', 'TR', 'DebugSegmentProvider']
['TR', 'SegmentAllocator', 'systemBytesAllocated()', 'TR', 'DebugSegmentProvider']
['TestCompiler', 'IlInjector', 'initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *)', 'TR', 'BytecodeBuilder']
['OMR', 'BytecodeBuilder', '~BytecodeBuilder()', 'TR', 'BytecodeBuilder']
['OMR::X86::i386', 'RealRegister', '~RealRegister()', 'TR', 'RealRegister']
['OMR::X86::i386', 'Machine', '~Machine()', 'TR', 'Machine']
['OMR::X86', 'MemoryReference', '~MemoryReference()', 'TR', 'MemoryReference']
['TR', 'X86SystemLinkage', 'buildArgs(TR::Node *,TR::RegisterDependencyConditions *)', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'buildDirectDispatch(TR::Node *,_Bool)', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'buildIndirectDispatch(TR::Node *)', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'buildVolatileAndReturnDependencies(TR::Node *,TR::RegisterDependencyConditions *)', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'getAlignment(TR::DataType)', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'getSingleWordFrameAllocationRegister()', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'layoutParm(TR::Node *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &)', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'layoutParm(TR::ParameterSymbol *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &)', 'TR', 'IA32SystemLinkage']
['TR', 'X86SystemLinkage', 'setUpStackSizeForCallNode(TR::Node *)', 'TR', 'IA32SystemLinkage']
['OMR::Power', 'CPU', '~CPU()', 'TR', 'CPU']
['OMR::Power', 'DebugEnv', '~DebugEnv()', 'TR', 'DebugEnv']
['OMR::Power', 'InstOpCode', '~InstOpCode()', 'TR', 'InstOpCode']
['OMR::Power', 'Instruction', '~Instruction()', 'TR', 'Instruction']
['OMR::Power', 'Machine', '~Machine()', 'TR', 'Machine']
['OMR::Power', 'MemoryReference', '~MemoryReference()', 'TR', 'MemoryReference']
['OMR::Power', 'RealRegister', '~RealRegister()', 'TR', 'RealRegister']
['OMR::Power', 'Register', '~Register()', 'TR', 'Register']
['OMR::Power', 'Snippet', '~Snippet()', 'TR', 'Snippet']
['TR', 'OutOfLineCodeSection', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCOutOfLineCodeSection']
['OMR::Power', 'Linkage', '~Linkage()', 'TR', 'Linkage']
['OMR::Power', 'AheadOfTimeCompile', '~AheadOfTimeCompile()', 'TR', 'AheadOfTimeCompile']
['TR', 'Relocation', 'apply(TR::CodeGenerator *)', 'TR', 'PPCPairedLabelAbsoluteRelocation']
['TR', 'PPCRelocation', 'mapRelocation(TR::CodeGenerator *)', 'TR', 'PPCPairedRelocation']
['OMR::Power', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCAdminInstruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCAdminInstruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCAdminInstruction']
['OMR::Power', 'Instruction', 'isDebugFence()', 'TR', 'PPCAdminInstruction']
['OMR::Power', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCLabelInstruction']
['OMR::Power', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCLabelInstruction']
['TR', 'PPCLabelInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCAlignedLabelInstruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCLabelInstruction']
['TR', 'PPCLabelInstruction', 'generateBinaryEncoding()', 'TR', 'PPCAlignedLabelInstruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCLabelInstruction']
['TR', 'PPCLabelInstruction', 'getKind()', 'TR', 'PPCAlignedLabelInstruction']
['OMR', 'Instruction', 'getLabelSymbol()', 'TR', 'PPCLabelInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'PPCLabelInstruction']
['OMR', 'Instruction', 'isPatchBarrier()', 'TR', 'PPCLabelInstruction']
['TR', 'PPCLabelInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCConditionalBranchInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCConditionalBranchInstruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCConditionalBranchInstruction', 'defsRegister(TR::Register *)', 'TR', 'PPCDepConditionalBranchInstruction']
['TR', 'PPCLabelInstruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCLabelInstruction', 'generateBinaryEncoding()', 'TR', 'PPCConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'getDependencyConditions()', 'TR', 'PPCDepConditionalBranchInstruction']
['TR', 'PPCLabelInstruction', 'getKind()', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCConditionalBranchInstruction', 'getKind()', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'getPPCConditionalBranchInstruction()', 'TR', 'PPCConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCConditionalBranchInstruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'getTargetRegister(uint32_t)', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'isExceptBranchOp()', 'TR', 'PPCConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCConditionalBranchInstruction', 'refsRegister(TR::Register *)', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'setDependencyConditions(TR::RegisterDependencyConditions *)', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'setExceptBranchOp()', 'TR', 'PPCConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCConditionalBranchInstruction']
['TR', 'PPCConditionalBranchInstruction', 'usesRegister(TR::Register *)', 'TR', 'PPCDepConditionalBranchInstruction']
['OMR::Power', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'getDependencyConditions()', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCControlFlowInstruction']
['OMR', 'Instruction', 'getLabelSymbol()', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'getTargetRegister(uint32_t)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCControlFlowInstruction']
['OMR::Power', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCDepImmInstruction']
['OMR::Power', 'Instruction', 'getDependencyConditions()', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCDepInstruction']
['TR', 'PPCDepInstruction', 'getKind()', 'TR', 'PPCDepImmInstruction']
['OMR::Power', 'Instruction', 'getPPCDepImmInstruction()', 'TR', 'PPCDepImmInstruction']
['OMR::Power', 'Instruction', 'getSourceImmediate()', 'TR', 'PPCDepImmInstruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'getTargetRegister(uint32_t)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'setDependencyConditions(TR::RegisterDependencyConditions *)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCDepInstruction']
['OMR::Power', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCDepImmSymInstruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCDepImmSymInstruction']
['TR', 'PPCDepInstruction', 'getKind()', 'TR', 'PPCDepImmSymInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'PPCDepImmSymInstruction']
['TR', 'PPCLabelInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'getDependencyConditions()', 'TR', 'PPCDepLabelInstruction']
['TR', 'PPCLabelInstruction', 'getKind()', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'getTargetRegister(uint32_t)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'setDependencyConditions(TR::RegisterDependencyConditions *)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCDepLabelInstruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCImmInstruction']
['TR', 'PPCImmInstruction', 'generateBinaryEncoding()', 'TR', 'PPCImm2Instruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCImmInstruction']
['TR', 'PPCImmInstruction', 'getKind()', 'TR', 'PPCImm2Instruction']
['OMR::Power', 'Instruction', 'getPPCImmInstruction()', 'TR', 'PPCImmInstruction']
['OMR::Power', 'Instruction', 'getSourceImmediate()', 'TR', 'PPCImmInstruction']
['OMR::Power', 'Instruction', 'updateImmediateField(uint32_t)', 'TR', 'PPCImmInstruction']
['OMR::Power', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCMemInstruction']
['TR', 'PPCMemInstruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCMemInstruction']
['TR', 'PPCMemInstruction', 'generateBinaryEncoding()', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'getDependencyConditions()', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCMemInstruction']
['TR', 'PPCMemInstruction', 'getKind()', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'getMemoryBase()', 'TR', 'PPCMemInstruction']
['OMR::Power', 'Instruction', 'getMemoryDataRegister()', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'getMemoryIndex()', 'TR', 'PPCMemInstruction']
['OMR::Power', 'Instruction', 'getMemoryReference()', 'TR', 'PPCMemInstruction']
['OMR::Power', 'Instruction', 'getOffset()', 'TR', 'PPCMemInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCMemInstruction']
['TR', 'PPCMemInstruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'getTargetRegister(uint32_t)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCMemInstruction']
['TR', 'PPCMemInstruction', 'refsRegister(TR::Register *)', 'TR', 'PPCMemSrc1Instruction']
['TR', 'PPCMemInstruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCMemSrc1Instruction']
['TR', 'PPCMemInstruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCMemInstruction']
['TR', 'PPCMemInstruction', 'usesRegister(TR::Register *)', 'TR', 'PPCMemSrc1Instruction']
['OMR::Power', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCSrc1Instruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCSrc1Instruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCSrc1Instruction']
['TR', 'PPCImmInstruction', 'generateBinaryEncoding()', 'TR', 'PPCSrc1Instruction']
['TR', 'PPCImmInstruction', 'getKind()', 'TR', 'PPCSrc1Instruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCSrc1Instruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCSrc1Instruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCSrc1Instruction']
['OMR::Power', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCSrc2Instruction']
['OMR::Power', 'Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCTrg1Instruction']
['OMR::Power', 'Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCTrg1Instruction']
['OMR::Power', 'Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCTrg1Instruction']
['OMR::Power', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCTrg1ImmInstruction']
['OMR::Power', 'Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1Instruction']
['TR', 'PPCTrg1Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1ImmInstruction']
['OMR::Power', 'Instruction', 'getKind()', 'TR', 'PPCTrg1Instruction']
['TR', 'PPCTrg1Instruction', 'getKind()', 'TR', 'PPCTrg1ImmInstruction']
['OMR::Power', 'Instruction', 'getPrimaryTargetRegister()', 'TR', 'PPCTrg1Instruction']
['OMR::Power', 'Instruction', 'getSourceImmediate()', 'TR', 'PPCTrg1ImmInstruction']
['OMR::Power', 'Instruction', 'getTargetRegister(uint32_t)', 'TR', 'PPCTrg1Instruction']
['OMR::Power', 'Instruction', 'getTrg1Register()', 'TR', 'PPCTrg1Instruction']
['OMR::Power', 'Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCTrg1Instruction']
['TR', 'PPCTrg1Instruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1ImmInstruction']
['TR', 'PPCTrg1Instruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1ImmInstruction']
['OMR::Power', 'Instruction', 'updateImmediateField(uint32_t)', 'TR', 'PPCTrg1ImmInstruction']
['OMR::Power', 'Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCTrg1Instruction']
['TR', 'PPCTrg1Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'estimateBinaryLength(int32_t)', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'getDependencyConditions()', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'getKind()', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'getMemoryBase()', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'getMemoryDataRegister()', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'getMemoryIndex()', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'getMemoryReference()', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'getOffset()', 'TR', 'PPCTrg1MemInstruction']
['OMR', 'Instruction', 'getSnippetForGC()', 'TR', 'PPCTrg1MemInstruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'getTargetRegister(uint32_t)', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'getTargetRegister()', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCTrg1MemInstruction']
['TR', 'PPCTrg1Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Src1Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1Src1ImmInstruction']
['TR', 'PPCTrg1Src1ImmInstruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1Src1Imm2Instruction']
['TR', 'PPCTrg1Instruction', 'getKind()', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Src1Instruction', 'getKind()', 'TR', 'PPCTrg1Src1ImmInstruction']
['TR', 'PPCTrg1Src1ImmInstruction', 'getKind()', 'TR', 'PPCTrg1Src1Imm2Instruction']
['OMR::Power', 'Instruction', 'getSourceImmediate()', 'TR', 'PPCTrg1Src1ImmInstruction']
['OMR::Power', 'Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Instruction', 'insertTargetRegister(uint32_t *)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Src1Instruction', 'insertTargetRegister(uint32_t *)', 'TR', 'PPCTrg1Src1ImmInstruction']
['TR', 'PPCTrg1Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Instruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Src1Instruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src1ImmInstruction']
['TR', 'PPCTrg1Src1ImmInstruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src1Imm2Instruction']
['TR', 'PPCTrg1Instruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Src1Instruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src1ImmInstruction']
['TR', 'PPCTrg1Src1ImmInstruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src1Imm2Instruction']
['OMR::Power', 'Instruction', 'updateImmediateField(uint32_t)', 'TR', 'PPCTrg1Src1ImmInstruction']
['TR', 'PPCTrg1Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCTrg1Src1Instruction']
['TR', 'PPCTrg1Src1Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'defsRealRegister(TR::Register *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'defsRegister(TR::Register *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src2Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1Src2ImmInstruction']
['TR', 'PPCTrg1Src1Instruction', 'getKind()', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src2Instruction', 'getKind()', 'TR', 'PPCTrg1Src2ImmInstruction']
['TR', 'PPCTrg1Src1Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'insertSource1Register(uint32_t *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'insertTargetRegister(uint32_t *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src1Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCTrg1Src2Instruction']
['TR', 'PPCTrg1Src2Instruction', 'assignRegisters(enum TR_RegisterKinds)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'generateBinaryEncoding()', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'getKind()', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'getSourceRegister(uint32_t)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'insertSource1Register(uint32_t *)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'insertSource2Register(uint32_t *)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'insertTargetRegister(uint32_t *)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'refsRegister(TR::Register *)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *)', 'TR', 'PPCTrg1Src3Instruction']
['TR', 'PPCTrg1Src2Instruction', 'usesRegister(TR::Register *)', 'TR', 'PPCTrg1Src3Instruction']
['OMR', 'Snippet', 'emitSnippetBody()', 'TR', 'PPCHelperCallSnippet']
['TR', 'PPCHelperCallSnippet', 'emitSnippetBody()', 'TR', 'PPCArrayCopyCallSnippet']
['OMR::Power', 'Snippet', 'getKind()', 'TR', 'PPCHelperCallSnippet']
['TR', 'PPCHelperCallSnippet', 'getKind()', 'TR', 'PPCArrayCopyCallSnippet']
['OMR', 'Snippet', 'getLength(int32_t)', 'TR', 'PPCHelperCallSnippet']
['TR', 'PPCHelperCallSnippet', 'getLength(int32_t)', 'TR', 'PPCArrayCopyCallSnippet']
['OMR', 'TableOfConstants', 'getTOCSize()', 'TR', 'PPCTableOfConstants']
['OMR', 'TableOfConstants', 'setTOCSize(uint32_t)', 'TR', 'PPCTableOfConstants']
['OMR::Power', 'Linkage', 'buildArgs(TR::Node *,TR::RegisterDependencyConditions *)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'buildDirectDispatch(TR::Node *)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'buildIndirectDispatch(TR::Node *)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'buildVirtualDispatch(TR::Node *,TR::RegisterDependencyConditions *,uint32_t)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'calculateActualParameterOffset(uintptr_t,TR::ParameterSymbol &)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'calculateParameterRegisterOffset(uintptr_t,TR::ParameterSymbol &)', 'TR', 'PPCSystemLinkage']
['OMR', 'Linkage', 'createEpilogue(TR::Instruction *)', 'TR', 'PPCSystemLinkage']
['OMR', 'Linkage', 'createPrologue(TR::Instruction *)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'getProperties()', 'TR', 'PPCSystemLinkage']
['OMR', 'Linkage', 'getRightToLeft()', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'hasToBeOnStack(TR::ParameterSymbol *)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'initPPCRealRegisterLinkage()', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'mapStack(TR::ResolvedMethodSymbol *)', 'TR', 'PPCSystemLinkage']
['OMR::Power', 'Linkage', 'setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *)', 'TR', 'PPCSystemLinkage']
['OMR', 'Linkage', 'setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &)', 'TR', 'PPCSystemLinkage']
['OMR', 'ConstantDataSnippet', '~ConstantDataSnippet()', 'TR', 'ConstantDataSnippet']
['OMR::Power', 'CodeCacheConfig', '~CodeCacheConfig()', 'TR', 'CodeCacheConfig']
