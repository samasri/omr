BaseNamespace; BaseClassName; FunctionSignature; OverridingNamespace; OverridingClassName; isImplicit; isVirtual
CS2::ABitVector;Cursor;operator unsigned int();CS2::ABitVector;iterator;0;0
CS2;BSDTimer;Read();CS2;Timer;0;0
CS2;BSDTimer;Reset();CS2;Timer;0;0
CS2;BSDTimer;Start();CS2;Timer;0;0
CS2;BSDTimer;Stop();CS2;Timer;0;0
OMR;Block;Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *);TR;Block;0;0
OMR;Block;Block(class TR_Memory *);TR;Block;0;0
TR;CFGNode;asBlock();OMR;Block;0;1
TR;CFGNode;removeFromCFG(TR::Compilation *);OMR;Block;0;1
OMR;Block;~Block();TR;Block;0;0
OMR;LabelSymbol;LabelSymbol(TR::CodeGenerator *,TR::Block *);TR;LabelSymbol;0;0
OMR;LabelSymbol;LabelSymbol(TR::CodeGenerator *);TR;LabelSymbol;0;0
OMR;LabelSymbol;LabelSymbol();TR;LabelSymbol;0;0
OMR;Symbol;Symbol(TR::DataType);TR;Symbol;0;0
OMR;Symbol;Symbol();TR;Symbol;0;0
OMR;Symbol;Symbol(TR::DataType,uint32_t);TR;Symbol;0;0
OMR;Symbol;self();OMR;LabelSymbol;0;0
OMR;LabelSymbol;~LabelSymbol();TR;LabelSymbol;1;1
OMR;Symbol;~Symbol();TR;Symbol;0;1
OMR::Z;RealRegister;RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *);TR;RealRegister;0;0
OMR::Z;RealRegister;RealRegister(TR::CodeGenerator *);TR;RealRegister;0;0
OMR;Register;Register(enum TR_RegisterKinds,uint16_t);OMR::Z;Register;0;0
OMR::Z;Register;Register(enum TR_RegisterKinds,uint16_t);TR;Register;0;0
OMR;Register;Register(enum TR_RegisterKinds);OMR::Z;Register;0;0
OMR::Z;Register;Register(enum TR_RegisterKinds);TR;Register;0;0
OMR;Register;Register(uint32_t);OMR::Z;Register;0;0
OMR::Z;Register;Register(uint32_t);TR;Register;0;0
OMR;Register;block();OMR;RealRegister;0;1
OMR;Register;containsCollectedReference();OMR::Z;Register;0;0
OMR;Register;decFutureUseCount(ncount_t);OMR::Z;Register;0;0
OMR;Register;getRealRegister();OMR;RealRegister;0;1
OMR;Register;getRegister();OMR;RealRegister;0;0
OMR;Register;resetIsLive();OMR::Z;Register;0;0
OMR;Register;self();OMR;RealRegister;0;0
OMR;Register;setAssignedRegister(TR::Register *);OMR;RealRegister;0;0
OMR;Register;setContainsCollectedReference();OMR::Z;Register;0;0
OMR;RealRegister;setHasBeenAssignedInMethod(_Bool);OMR::Z;RealRegister;0;0
OMR;Register;setPlaceholderReg();OMR::Z;Register;0;0
OMR;Register;unblock();OMR;RealRegister;0;1
OMR;RealRegister;~RealRegister();OMR::Z;RealRegister;1;0
OMR::Z;RealRegister;~RealRegister();TR;RealRegister;1;0
OMR;Register;~Register();OMR::Z;Register;1;0
OMR::Z;Register;~Register();TR;Register;1;0
OMR;RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType,uint32_t);TR;RegisterMappedSymbol;0;0
OMR;RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType);TR;RegisterMappedSymbol;0;0
OMR;RegisterMappedSymbol;RegisterMappedSymbol(int32_t);TR;RegisterMappedSymbol;0;0
OMR;Symbol;getOffset();OMR;RegisterMappedSymbol;0;0
OMR;Symbol;self();OMR;RegisterMappedSymbol;0;0
OMR;RegisterMappedSymbol;~RegisterMappedSymbol();TR;RegisterMappedSymbol;1;1
OMR;MethodSymbol;MethodSymbol(enum TR_LinkageConventions,class TR_Method *);TR;MethodSymbol;0;0
OMR;ResolvedMethodSymbol;ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *);TR;ResolvedMethodSymbol;0;0
OMR;Symbol;isStatic();OMR;MethodSymbol;0;1
OMR;Symbol;self();OMR;MethodSymbol;0;0
OMR;MethodSymbol;self();OMR;ResolvedMethodSymbol;0;0
OMR;MethodSymbol;~MethodSymbol();TR;MethodSymbol;1;1
OMR;ResolvedMethodSymbol;~ResolvedMethodSymbol();TR;ResolvedMethodSymbol;1;1
OMR;CPU;CPU();OMR::Z;CPU;0;0
OMR::Z;CPU;CPU();TR;CPU;0;0
OMR;CPU;getSupportsHardwareSQRT();OMR::Z;CPU;0;0
OMR;CPU;~CPU();OMR::Z;CPU;1;0
OMR::Z;CPU;~CPU();TR;CPU;1;0
OMR;CodeGenPhase;CodeGenPhase(TR::CodeGenerator *);OMR::Z;CodeGenPhase;0;0
OMR::Z;CodeGenPhase;CodeGenPhase(TR::CodeGenerator *);TR;CodeGenPhase;0;0
OMR;CodeGenPhase;getName(enum OMR::CodeGenPhase::PhaseValue);OMR::Z;CodeGenPhase;0;0
OMR;CodeGenPhase;getName();OMR::Z;CodeGenPhase;0;0
OMR;CodeGenPhase;getNumPhases();OMR::Z;CodeGenPhase;0;0
OMR;CodeGenPhase;~CodeGenPhase();OMR::Z;CodeGenPhase;1;0
OMR::Z;CodeGenPhase;~CodeGenPhase();TR;CodeGenPhase;1;0
OMR;DebugEnv;DebugEnv();OMR::Z;DebugEnv;0;0
OMR::Z;DebugEnv;DebugEnv();TR;DebugEnv;0;0
OMR;DebugEnv;~DebugEnv();OMR::Z;DebugEnv;1;0
OMR::Z;DebugEnv;~DebugEnv();TR;DebugEnv;1;0
OMR;InstOpCode;InstOpCode();OMR::Z;InstOpCode;0;0
OMR::Z;InstOpCode;InstOpCode();TR;InstOpCode;0;0
OMR;InstOpCode;InstOpCode(enum OMR::InstOpCode::Mnemonic);OMR::Z;InstOpCode;0;0
OMR::Z;InstOpCode;InstOpCode(enum OMR::InstOpCode::Mnemonic);TR;InstOpCode;0;0
OMR;InstOpCode;~InstOpCode();OMR::Z;InstOpCode;1;0
OMR::Z;InstOpCode;~InstOpCode();TR;InstOpCode;1;0
OMR;Instruction;Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *);OMR::Z;Instruction;0;0
OMR;Instruction;Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *);OMR::Z;Instruction;0;0
OMR;Instruction;assignRegisters(enum TR_RegisterKinds);OMR::Z;Instruction;0;1
OMR;Instruction;defsRegister(TR::Register *);OMR::Z;Instruction;0;1
OMR;Instruction;dependencyRefsRegister(TR::Register *);OMR::Z;Instruction;0;1
OMR;Instruction;estimateBinaryLength(int32_t);OMR::Z;Instruction;0;1
OMR;Instruction;generateBinaryEncoding();OMR::Z;Instruction;0;1
OMR;Instruction;getKind();OMR::Z;Instruction;0;1
OMR;Instruction;refsRegister(TR::Register *);OMR::Z;Instruction;0;1
OMR;Instruction;usesRegister(TR::Register *);OMR::Z;Instruction;0;1
OMR;Instruction;~Instruction();OMR::Z;Instruction;1;0
OMR::Z;Instruction;~Instruction();TR;Instruction;1;0
OMR::Z;Machine;Machine(TR::CodeGenerator *);TR;Machine;0;0
OMR;Machine;getRealRegister(TR_GlobalRegisterNumber);OMR::Z;Machine;0;1
OMR;Machine;~Machine();OMR::Z;Machine;1;0
OMR::Z;Machine;~Machine();TR;Machine;1;0
OMR;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);OMR::Z;Snippet;0;0
OMR::Z;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);TR;Snippet;0;0
OMR;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);OMR::Z;Snippet;0;0
OMR::Z;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);TR;Snippet;0;0
OMR;Snippet;~Snippet();OMR::Z;Snippet;1;0
OMR::Z;Snippet;~Snippet();TR;Snippet;1;0
OMR;TreeEvaluator;badILOpEvaluator(TR::Node *,TR::CodeGenerator *);OMR::Z;TreeEvaluator;0;0
OMR;AliasBuilder;AliasBuilder(TR::SymbolReferenceTable *,size_t,TR::Compilation *);TR;AliasBuilder;0;0
OMR;AliasBuilder;~AliasBuilder();TR;AliasBuilder;1;0
OMR;ArithEnv;ArithEnv();TR;ArithEnv;1;0
OMR;ArithEnv;~ArithEnv();TR;ArithEnv;1;0
TR;Relocation;addAOTRelocation(TR::CodeGenerator *);TR;ExternalRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;ExternalRelocation;0;1
TR;Relocation;getUpdateLocation();TR;BeforeBinaryEncodingExternalRelocation;0;1
TR;Relocation;trace(TR::Compilation *);TR;ExternalRelocation;0;1
OMR;CFG;CFG(TR::Compilation *,TR::ResolvedMethodSymbol *);TR;CFG;0;0
TR;Link;jitPersistentAlloc(size_t);TR;CFGEdge;0;0
TR;Link;jitPersistentFree(void *);TR;CFGEdge;0;0
TR;Link;operator delete(void *,size_t);TR;CFGEdge;0;0
TR;Link;operator delete(void *,TR::Region &);TR;CFGEdge;0;0
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0;0
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator delete[](void *,TR::Region &);TR;CFGEdge;0;0
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0;0
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;CFGEdge;0;0
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;CFGEdge;0;0
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;CFGEdge;0;0
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0;0
TR;Link;operator new(size_t,TR::Region &);TR;CFGEdge;0;0
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;CFGEdge;0;0
TR;Link;operator new[](size_t,TR::Region &);TR;CFGEdge;0;0
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;CFGEdge;0;0
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0;0
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0;0
OMR;ClassEnv;ClassEnv();TR;ClassEnv;1;0
OMR;ClassEnv;~ClassEnv();TR;ClassEnv;1;0
OMR;CodeGenerator;CodeGenerator();OMR::Z;CodeGenerator;0;0
OMR::Z;CodeGenerator;CodeGenerator();TestCompiler;CodeGenerator;0;0
TestCompiler;CodeGenerator;CodeGenerator();TestCompiler::Z;CodeGenerator;0;0
TestCompiler::Z;CodeGenerator;CodeGenerator();TR;CodeGenerator;0;0
OMR;CodeGenerator;IsInMemoryType(TR::DataType);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;arithmeticNeedsLiteralFromPool(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;arrayInitMinimumNumberOfBytes();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;arrayTranslateAndTestMinimumNumberOfIterations();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;arrayTranslateMinimumNumberOfElements(_Bool,_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;arrayTranslateTableRequiresAlignment(_Bool,_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;beginInstructionSelection();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;bitwiseOpNeedsLiteralFromPool(TR::Node *,TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;bndsChkNeedsLiteralFromPool(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;buildRegisterMapForInstruction(class TR_GCStackMap *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;canBeAffectedByStoreTagStalls();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;canTransformUnsafeCopyToArrayCopy();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;canUseImmedInstruction(int64_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;codegenSupportsLoadlessBNDCheck();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;computeRegisterSaveDescription(class TR_BitVector *,_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;considerTypeForGRA(TR::DataType);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;considerTypeForGRA(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;considerTypeForGRA(TR::SymbolReference *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;constLoadNeedsLiteralFromPool(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;createLinkage(enum TR_LinkageConventions);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;doBinaryEncoding();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;doInstructionSelection();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;doPeephole();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;doRegisterAssignment(enum TR_RegisterKinds);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;doRematerialization();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;dumpDataSnippets(TR::FILE *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;dumpTargetAddressSnippets(TR::FILE *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;emitDataSnippets();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;emitTargetAddressSnippets();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;enableLiteralPoolRegisterForGRA();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;endInstructionSelection();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;endInternalControlFlow(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;excludeInvariantsFromGRAEnabled();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;generateNop(TR::Node *,TR::Instruction *,enum TR_NOPKind);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getCurrentBlockIndex();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getGlobalFPRsPreservedAcrossCalls();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getGlobalGPRFromHPR(TR_GlobalRegisterNumber);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getGlobalGPRsPreservedAcrossCalls();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getGlobalHPRFromGPR(TR_GlobalRegisterNumber);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getGlobalRegisterNumber(uint32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions);OMR::Z;CodeGenerator;0;1
OMR;CodeGenerator;getLinkageGlobalRegisterNumber(int8_t,TR::DataType);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMaximumNumberOfFPRsAllowedAcrossEdge(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Block *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMaximumNumberOfVRFsAllowedAcrossEdge(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMaximumNumbersOfAssignableFPRs();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMaximumNumbersOfAssignableGPRs();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMaximumNumbersOfAssignableVRs();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMinByteForLongCompareNarrower();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getMinShortForLongCompareNarrower();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getNextAvailableBlockIndex();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getSupportsBitOpCodes();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getSupportsConstantOffsetInAddressing(int64_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getSupportsEncodeUtf16BigWithSurrogateTest();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;hasDataSnippets();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;hasTargetAddressSnippets();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;ilOpCodeIsSupported(TR::ILOpCodes);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;internalPointerSupportImplemented();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isAddressScaleIndexSupported(int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isAlignmentInstruction(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isBranchInstruction(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isFenceInstruction(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isGlobalRegisterAvailable(TR_GlobalRegisterNumber,TR::DataType);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isInternalControlFlowReg(TR::Register *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isLabelInstruction(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isLiteralPoolOnDemandOn();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isOutOfLineHotPath();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isPreservedRegister(int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isReturnInstruction(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;lowerTreesPropagateBlockToNode(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;materializesLargeConstants();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;nodeMayCauseException(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;opCodeIsNoOpOnThisPlatform(TR::ILOpCode &);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;preLowerTrees();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;prepareForGRA();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;prepareRegistersForAssignment();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;processIncomingParameterUsage(class TR_BitVector **,int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;setCurrentBlockIndex(int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;setEstimatedLocationsForDataSnippetLabels(int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;setEstimatedLocationsForTargetAddressSnippetLabels(int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;setNextAvailableBlockIndex(int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;setOnDemandLiteralPoolRun(_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;setVMThreadRequired(_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;shouldValueBeInACommonedNode(int64_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;shouldYankCompressedRefs();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *);OMR::Z;CodeGenerator;0;1
OMR;CodeGenerator;splitBlockEntry(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;startInternalControlFlow(TR::Instruction *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supports32bitAiadd();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsDirectIntegralLoadStoresFromLiteralPool();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsDirectJNICallsForAOT();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsFusedMultiplyAdd();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsHighWordFacility();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsInliningOfIsInstance();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsLengthMinusOneForMemoryOpts();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsLongRegAllocation();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsMergingGuards();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsOnDemandLiteralPool();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsSinglePrecisionSQRT();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;supportsTrapsInTMRegion();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;updateSnippetMapWithRSD(TR::Instruction *,int32_t);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;usesImplicit64BitGPRs(TR::Node *);OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;yankIndexScalingOp();OMR::Z;CodeGenerator;0;0
OMR;CodeGenerator;~CodeGenerator();OMR::Z;CodeGenerator;1;0
OMR::Z;CodeGenerator;~CodeGenerator();TestCompiler;CodeGenerator;1;0
TestCompiler;CodeGenerator;~CodeGenerator();TestCompiler::Z;CodeGenerator;1;0
TestCompiler::Z;CodeGenerator;~CodeGenerator();TR;CodeGenerator;1;0
OMR;Compilation;Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *);TR;Compilation;0;0
OMR;Compilation;~Compilation();TR;Compilation;0;0
OMR;CompilerEnv;CompilerEnv(TR::RawAllocator,const TR::PersistentAllocatorKit &);TR;CompilerEnv;0;0
OMR;DataType;DataType(TR::DataTypes);TR;DataType;0;0
OMR;DataType;DataType();TR;DataType;0;0
OMR;DataType;self();OMR;DataType;0;0
OMR;DataType;~DataType();TR;DataType;1;0
TR;DebugCounterBase;accumulate();TR;DebugCounter;0;1
TR;DebugCounterBase;getBumpCountAddress();TR;DebugCounter;0;1
TR;DebugCounterBase;getBumpCountSymRef(TR::Compilation *);TR;DebugCounter;0;1
TR;DebugCounterBase;accumulate();TR;DebugCounterAggregation;0;1
TR;DebugCounterBase;getBumpCountAddress();TR;DebugCounterAggregation;0;1
TR;DebugCounterBase;getBumpCountSymRef(TR::Compilation *);TR;DebugCounterAggregation;0;1
OMR;Environment;Environment();TR;Environment;0;0
OMR;Environment;Environment(TR::MajorOperatingSystem,TR::Bitness);TR;Environment;0;0
OMR;Environment;~Environment();TR;Environment;1;0
TR;ExternalRelocation;apply(TR::CodeGenerator *);TR;ExternalOrderedPair32BitRelocation;0;1
TR;ExternalRelocation;collectModifier();TR;ExternalOrderedPair32BitRelocation;0;1
TR;ExternalRelocation;getNarrowSize();TR;ExternalOrderedPair32BitRelocation;0;1
TR;ExternalRelocation;getWideSize();TR;ExternalOrderedPair32BitRelocation;0;1
OMR;IL;~IL();TR;IL;1;0
OMR;ILOpCode;ILOpCode();TR;ILOpCode;0;0
OMR;ILOpCode;ILOpCode(TR::ILOpCodes);TR;ILOpCode;0;0
OMR;ILOpCode;~ILOpCode();TR;ILOpCode;1;0
TR;Relocation;apply(TR::CodeGenerator *);TR;InstructionAbsoluteRelocation;0;1
TR;Relocation;isAOTRelocation();TR;InstructionAbsoluteRelocation;0;1
OMR;KnownObjectTable;KnownObjectTable(TR::Compilation *);TR;KnownObjectTable;0;0
OMR;KnownObjectTable;~KnownObjectTable();TR;KnownObjectTable;1;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelAbsoluteRelocation;0;1
TR;Relocation;isAOTRelocation();TR;LabelRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative12BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative16BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative24BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative32BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative8BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelTable32BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative16BitRelocation;0;1
TR;Relocation;isAOTRelocation();TR;LoadLabelRelative16BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative32BitRelocation;0;1
TR;Relocation;isAOTRelocation();TR;LoadLabelRelative32BitRelocation;0;1
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative64BitRelocation;0;1
OMR;Monitor;Monitor();TR;Monitor;1;0
OMR;Monitor;~Monitor();TR;Monitor;0;0
OMR;Node;Node(TR::Node *,TR::ILOpCodes,uint16_t);TR;Node;0;0
OMR;Node;Node();TR;Node;0;0
OMR;Node;~Node();TR;Node;0;0
OMR;ObjectModel;ObjectModel();TestCompiler;ObjectModel;0;0
TestCompiler;ObjectModel;ObjectModel();TR;ObjectModel;0;0
OMR;ObjectModel;sizeofReferenceField();TestCompiler;ObjectModel;0;0
OMR;ObjectModel;~ObjectModel();TestCompiler;ObjectModel;1;0
TestCompiler;ObjectModel;~ObjectModel();TR;ObjectModel;1;0
OMR;Optimizer;Optimizer(TR::Compilation *,TR::ResolvedMethodSymbol *,_Bool,const struct OptimizationStrategy *,uint16_t);TR;Optimizer;0;0
OMR;Options;Options(TR::Options &);TR;Options;0;0
OMR;Options;Options();TR;Options;0;0
OMR;Options;Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t);TR;Options;0;0
OMR;Options;self();OMR;Options;0;0
OMR;PersistentInfo;PersistentInfo(class TR_PersistentMemory *);TR;PersistentInfo;0;0
OMR;PersistentInfo;~PersistentInfo();TR;PersistentInfo;1;0
TestCompiler;ResolvedMethod;ResolvedMethod(TR::MethodBuilder *);TR;ResolvedMethod;0;0
TestCompiler;ResolvedMethod;ResolvedMethod(class TR_OpaqueMethodBlock *);TR;ResolvedMethod;0;0
TR;ResolvedMethod;classNameChars();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;classNameLength();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;convertToMethod();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;getPersistentIdentifier();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;hasBackwardBranches();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isAbstract();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isCompilable(class TR_Memory *);TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isConstructor();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isFinal();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isInterpreted();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;isJITInternalNative();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isJNINative();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isNative();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isNewInstanceImplThunk();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isNonEmptyObjectConstructor();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isPrivate();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isProtected();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isPublic();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isSameMethod(class TR_ResolvedMethod *);TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isStatic();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isStrictFP();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isSubjectToPhaseChange(TR::Compilation *);TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;isSynchronized();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;localName(uint32_t,uint32_t,int32_t &,class TR_Memory *);TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;makeParameterList(TR::ResolvedMethodSymbol *);TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;maxBytecodeIndex();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;nameChars();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;nameLength();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;numberOfExceptionHandlers();TestCompiler;ResolvedMethodBase;0;1
TR;ResolvedMethod;numberOfParameterSlots();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;numberOfTemps();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;parmType(uint32_t);TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;resolvedMethodAddress();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;returnType();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;signature(class TR_Memory *,enum TR_AllocationKind);TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;signatureChars();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;signatureLength();TestCompiler;ResolvedMethodBase;0;1
TestCompiler;ResolvedMethodBase;signatureLength();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;startAddressForInterpreterOfJittedMethod();TestCompiler;ResolvedMethod;0;1
TR;ResolvedMethod;startAddressForJittedMethod();TestCompiler;ResolvedMethod;0;1
TestCompiler;ResolvedMethod;~ResolvedMethod();TR;ResolvedMethod;1;0
TR;Method;classNameChars();TestCompiler;Method;0;1
TestCompiler;Method;classNameChars();TestCompiler;ResolvedMethod;0;1
TR;Method;classNameLength();TestCompiler;Method;0;1
TR;Method;isConstructor();TestCompiler;Method;0;1
TR;Method;isFinalInObject();TestCompiler;Method;0;1
TR;Method;jitPersistentAlloc(size_t);TestCompiler;Method;0;0
TR;Method;jitPersistentFree(void *);TestCompiler;Method;0;0
TR;Method;nameChars();TestCompiler;Method;0;1
TestCompiler;Method;nameChars();TestCompiler;ResolvedMethod;0;1
TR;Method;nameLength();TestCompiler;Method;0;1
TR;Method;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0;0
TR;Method;operator delete(void *,TR::Region &);TestCompiler;Method;0;0
TR;Method;operator delete(void *,size_t);TestCompiler;Method;0;0
TR;Method;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0;0
TR;Method;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator delete[](void *,TR::Region &);TestCompiler;Method;0;0
TR;Method;operator new(size_t,TR::Region &);TestCompiler;Method;0;0
TR;Method;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0;0
TR;Method;operator new(size_t,class TR_PersistentMemory *);TestCompiler;Method;0;0
TR;Method;operator new(size_t,TR_ArenaAllocator *);TestCompiler;Method;0;0
TR;Method;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;Method;0;0
TR;Method;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0;0
TR;Method;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0;0
TR;Method;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;Method;0;0
TR;Method;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;Method;0;0
TR;Method;operator new[](size_t,TR::Region &);TestCompiler;Method;0;0
TR;Method;parmType(uint32_t);TestCompiler;ResolvedMethod;0;1
TR;Method;returnType();TestCompiler;ResolvedMethod;0;1
TR;Method;signature(class TR_Memory *,enum TR_AllocationKind);TestCompiler;ResolvedMethod;0;1
TR;Method;signatureChars();TestCompiler;Method;0;1
TestCompiler;Method;signatureChars();TestCompiler;ResolvedMethod;0;1
TR;Method;signatureLength();TestCompiler;Method;0;1
TestCompiler;Method;signatureLength();TestCompiler;ResolvedMethod;0;1
OMR;SnippetGCMap;SnippetGCMap();TR;SnippetGCMap;0;0
OMR;SnippetGCMap;~SnippetGCMap();TR;SnippetGCMap;1;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *);TR;SymbolReference;0;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index);TR;SymbolReference;0;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t);TR;SymbolReference;0;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t);TR;SymbolReference;0;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t);TR;SymbolReference;0;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *);TR;SymbolReference;0;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t);TR;SymbolReference;0;0
OMR;SymbolReference;~SymbolReference();TR;SymbolReference;1;0
OMR;SymbolReferenceTable;SymbolReferenceTable(size_t,TR::Compilation *);TR;SymbolReferenceTable;0;0
OMR;TreeTop;TreeTop(TR::TreeTop *,TR::Node *,TR::Compilation *);TR;TreeTop;0;0
OMR;TreeTop;TreeTop(TR::Node *,TR::TreeTop *,TR::TreeTop *);TR;TreeTop;0;0
OMR;VMEnv;VMEnv();TR;VMEnv;1;0
OMR;VMEnv;~VMEnv();TR;VMEnv;1;0
OMR;VMMethodEnv;VMMethodEnv();TR;VMMethodEnv;1;0
OMR;VMMethodEnv;~VMMethodEnv();TR;VMMethodEnv;1;0
TR;VPConstraint;asArrayInfo();TR;VPArrayInfo;0;1
TR;VPConstraint;getArrayInfo();TR;VPArrayInfo;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPArrayInfo;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPArrayInfo;0;1
TR;VPConstraint;name();TR;VPArrayInfo;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPArrayInfo;0;0
TR;VPConstraint;asClass();TR;VPClass;0;1
TR;VPConstraint;getArrayInfo();TR;VPClass;0;1
TR;VPConstraint;getClass();TR;VPClass;0;0
TR;VPConstraint;getClassPresence();TR;VPClass;0;1
TR;VPConstraint;getClassSignature(int32_t &);TR;VPClass;0;1
TR;VPConstraint;getClassType();TR;VPClass;0;1
TR;VPConstraint;getConstString();TR;VPClass;0;1
TR;VPConstraint;getKnownObject();TR;VPClass;0;1
TR;VPConstraint;getObjectLocation();TR;VPClass;0;1
TR;VPConstraint;getPreexistence();TR;VPClass;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0;1
TR;VPConstraint;isClassObject();TR;VPClass;0;0
TR;VPConstraint;isConstString();TR;VPClass;0;0
TR;VPConstraint;isFixedClass();TR;VPClass;0;1
TR;VPConstraint;isHeapObject();TR;VPClass;0;1
TR;VPConstraint;isJ9ClassObject();TR;VPClass;0;1
TR;VPConstraint;isJavaLangClassObject();TR;VPClass;0;1
TR;VPConstraint;isNonNullObject();TR;VPClass;0;1
TR;VPConstraint;isNullObject();TR;VPClass;0;1
TR;VPConstraint;isPreexistentObject();TR;VPClass;0;1
TR;VPConstraint;isStackObject();TR;VPClass;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0;1
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0;1
TR;VPConstraint;name();TR;VPClass;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPClass;0;0
TR;VPConstraint;asClassPresence();TR;VPClassPresence;0;1
TR;VPConstraint;asNonNullObject();TR;VPNonNullObject;0;1
TR;VPConstraint;getClassPresence();TR;VPClassPresence;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNonNullObject;0;1
TR;VPConstraint;isNonNullObject();TR;VPNonNullObject;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNonNullObject;0;1
TR;VPConstraint;name();TR;VPNonNullObject;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNonNullObject;0;0
TR;VPConstraint;asClassType();TR;VPClassType;0;1
TR;VPConstraint;asConstString();TR;VPConstString;0;1
TR;VPConstraint;asFixedClass();TR;VPFixedClass;0;1
TR;VPConstraint;asResolvedClass();TR;VPResolvedClass;0;1
TR;VPResolvedClass;create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);TR;VPFixedClass;0;0
TR;VPClassType;getArrayClass(OMR::ValuePropagation *);TR;VPResolvedClass;0;1
TR;VPResolvedClass;getArrayClass(OMR::ValuePropagation *);TR;VPFixedClass;0;1
TR;VPConstraint;getClass();TR;VPResolvedClass;0;0
TR;VPConstraint;getClassSignature(int32_t &);TR;VPClassType;0;1
TR;VPClassType;getClassSignature(int32_t &);TR;VPResolvedClass;0;1
TR;VPConstraint;getClassType();TR;VPClassType;0;1
TR;VPConstraint;getConstString();TR;VPConstString;0;1
TR;VPFixedClass;hasMoreThanFixedClassInfo();TR;VPConstString;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPResolvedClass;0;1
TR;VPResolvedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPFixedClass;0;1
TR;VPFixedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0;1
TR;VPClassType;isArray();TR;VPFixedClass;0;1
TR;VPConstraint;isClassObject();TR;VPClassType;0;0
TR;VPConstraint;isConstString();TR;VPConstString;0;0
TR;VPConstraint;isFixedClass();TR;VPFixedClass;0;1
TR;VPConstraint;isJ9ClassObject();TR;VPClassType;0;1
TR;VPConstraint;isJavaLangClassObject();TR;VPClassType;0;1
TR;VPClassType;isJavaLangObject(OMR::ValuePropagation *);TR;VPResolvedClass;0;1
TR;VPClassType;isPrimitiveArray(TR::Compilation *);TR;VPResolvedClass;0;1
TR;VPClassType;isReferenceArray(TR::Compilation *);TR;VPResolvedClass;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPResolvedClass;0;1
TR;VPResolvedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPFixedClass;0;1
TR;VPFixedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0;1
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0;1
TR;VPConstraint;name();TR;VPResolvedClass;0;0
TR;VPResolvedClass;name();TR;VPFixedClass;0;0
TR;VPFixedClass;name();TR;VPConstString;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPResolvedClass;0;0
TR;VPResolvedClass;print(TR::Compilation *,TR::FILE *);TR;VPFixedClass;0;0
TR;VPFixedClass;print(TR::Compilation *,TR::FILE *);TR;VPConstString;0;0
TR;VPConstraint;asEqual();TR;VPEqual;0;1
TR;VPConstraint;asRelation();TR;VPRelation;0;1
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPEqual;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPEqual;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPEqual;0;1
TR;VPConstraint;mustBeEqual();TR;VPEqual;0;1
TR;VPConstraint;mustBeGreaterThan();TR;VPEqual;0;1
TR;VPConstraint;mustBeGreaterThanOrEqual();TR;VPEqual;0;1
TR;VPConstraint;mustBeLessThan();TR;VPEqual;0;1
TR;VPConstraint;mustBeLessThanOrEqual();TR;VPEqual;0;1
TR;VPConstraint;mustBeNotEqual();TR;VPEqual;0;1
TR;VPConstraint;name();TR;VPEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPEqual;0;1
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPEqual;0;1
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPEqual;0;1
TR;VPConstraint;asGreaterThanOrEqual();TR;VPGreaterThanOrEqual;0;1
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0;1
TR;VPConstraint;mustBeGreaterThan();TR;VPGreaterThanOrEqual;0;1
TR;VPConstraint;mustBeGreaterThanOrEqual();TR;VPGreaterThanOrEqual;0;1
TR;VPConstraint;mustBeNotEqual();TR;VPGreaterThanOrEqual;0;1
TR;VPConstraint;name();TR;VPGreaterThanOrEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPGreaterThanOrEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPGreaterThanOrEqual;0;1
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0;1
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0;1
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPIntConstraint;0;1
TR;VPConstraint;asIntConst();TR;VPIntConst;0;1
TR;VPConstraint;asIntConstraint();TR;VPIntConstraint;0;1
TR;VPConstraint;canOverflow();TR;VPIntConstraint;0;1
TR;VPIntConstraint;getHigh();TR;VPIntConst;0;1
TR;VPConstraint;getHighInt();TR;VPIntConstraint;0;1
TR;VPConstraint;getLowInt();TR;VPIntConstraint;0;1
TR;VPConstraint;getPrecision();TR;VPIntConstraint;0;1
TR;VPIntConstraint;getPrecision();TR;VPIntConst;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0;1
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConst;0;1
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0;1
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0;1
TR;VPConstraint;name();TR;VPIntConst;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPIntConst;0;0
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPIntConstraint;0;1
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPIntConstraint;0;1
TR;VPConstraint;asIntRange();TR;VPIntRange;0;1
TR;VPIntConstraint;getHigh();TR;VPIntRange;0;1
TR;VPIntConstraint;getPrecision();TR;VPIntRange;0;1
TR;VPConstraint;name();TR;VPIntRange;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPIntRange;0;0
TR;VPConstraint;asKnownObject();TR;VPKnownObject;0;1
TR;VPConstraint;getKnownObject();TR;VPKnownObject;0;1
TR;VPFixedClass;hasMoreThanFixedClassInfo();TR;VPKnownObject;0;1
TR;VPFixedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0;1
TR;VPClassType;isJavaLangClassObject();TR;VPKnownObject;0;1
TR;VPFixedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0;1
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0;1
TR;VPFixedClass;name();TR;VPKnownObject;0;0
TR;VPFixedClass;print(TR::Compilation *,TR::FILE *);TR;VPKnownObject;0;0
TR;VPConstraint;asLessThanOrEqual();TR;VPLessThanOrEqual;0;1
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPLessThanOrEqual;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0;1
TR;VPConstraint;mustBeLessThan();TR;VPLessThanOrEqual;0;1
TR;VPConstraint;mustBeLessThanOrEqual();TR;VPLessThanOrEqual;0;1
TR;VPConstraint;mustBeNotEqual();TR;VPLessThanOrEqual;0;1
TR;VPConstraint;name();TR;VPLessThanOrEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLessThanOrEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPLessThanOrEqual;0;1
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0;1
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0;1
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPLongConstraint;0;1
TR;VPConstraint;asLongConst();TR;VPLongConst;0;1
TR;VPConstraint;asLongConstraint();TR;VPLongConstraint;0;1
TR;VPConstraint;canOverflow();TR;VPLongConstraint;0;1
TR;VPLongConstraint;getHigh();TR;VPLongConst;0;1
TR;VPConstraint;getHighLong();TR;VPLongConstraint;0;1
TR;VPConstraint;getLowLong();TR;VPLongConstraint;0;1
TR;VPConstraint;getPrecision();TR;VPLongConstraint;0;1
TR;VPLongConstraint;getPrecision();TR;VPLongConst;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0;1
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConst;0;1
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0;1
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0;1
TR;VPConstraint;name();TR;VPLongConst;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLongConst;0;0
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPLongConstraint;0;1
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPLongConstraint;0;1
TR;VPConstraint;asLongRange();TR;VPLongRange;0;1
TR;VPLongConstraint;getHigh();TR;VPLongRange;0;1
TR;VPLongConstraint;getPrecision();TR;VPLongRange;0;1
TR;VPConstraint;name();TR;VPLongRange;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLongRange;0;0
TR;VPConstraint;asMergedConstraints();TR;VPMergedConstraints;0;1
TR;VPConstraint;asMergedIntConstraints();TR;VPMergedConstraints;0;1
TR;VPConstraint;asMergedLongConstraints();TR;VPMergedConstraints;0;1
TR;VPConstraint;asMergedShortConstraints();TR;VPMergedConstraints;0;1
TR;VPConstraint;getHighInt();TR;VPMergedConstraints;0;1
TR;VPConstraint;getHighLong();TR;VPMergedConstraints;0;1
TR;VPConstraint;getHighShort();TR;VPMergedConstraints;0;1
TR;VPConstraint;getLowInt();TR;VPMergedConstraints;0;1
TR;VPConstraint;getLowLong();TR;VPMergedConstraints;0;1
TR;VPConstraint;getLowShort();TR;VPMergedConstraints;0;1
TR;VPConstraint;getUnsignedHighInt();TR;VPMergedConstraints;0;1
TR;VPConstraint;getUnsignedHighLong();TR;VPMergedConstraints;0;1
TR;VPConstraint;getUnsignedHighShort();TR;VPMergedConstraints;0;1
TR;VPConstraint;getUnsignedLowInt();TR;VPMergedConstraints;0;1
TR;VPConstraint;getUnsignedLowLong();TR;VPMergedConstraints;0;1
TR;VPConstraint;getUnsignedLowShort();TR;VPMergedConstraints;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0;1
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0;1
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0;1
TR;VPConstraint;name();TR;VPMergedConstraints;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPMergedConstraints;0;0
TR;VPConstraint;asNotEqual();TR;VPNotEqual;0;1
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPNotEqual;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNotEqual;0;1
TR;VPConstraint;mustBeNotEqual();TR;VPNotEqual;0;1
TR;VPConstraint;name();TR;VPNotEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNotEqual;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPNotEqual;0;1
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPNotEqual;0;1
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPNotEqual;0;1
TR;VPConstraint;asNullObject();TR;VPNullObject;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject;0;1
TR;VPConstraint;isNullObject();TR;VPNullObject;0;1
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject;0;1
TR;VPConstraint;name();TR;VPNullObject;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNullObject;0;0
TR;VPConstraint;asObjectLocation();TR;VPObjectLocation;0;1
TR;VPConstraint;getObjectLocation();TR;VPObjectLocation;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPObjectLocation;0;1
TR;VPConstraint;isClassObject();TR;VPObjectLocation;0;0
TR;VPConstraint;isHeapObject();TR;VPObjectLocation;0;1
TR;VPConstraint;isJ9ClassObject();TR;VPObjectLocation;0;1
TR;VPConstraint;isJavaLangClassObject();TR;VPObjectLocation;0;1
TR;VPConstraint;isStackObject();TR;VPObjectLocation;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPObjectLocation;0;1
TR;VPConstraint;name();TR;VPObjectLocation;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPObjectLocation;0;0
TR;VPConstraint;asPreexistentObject();TR;VPPreexistentObject;0;1
TR;VPConstraint;getPreexistence();TR;VPPreexistentObject;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPPreexistentObject;0;1
TR;VPConstraint;isPreexistentObject();TR;VPPreexistentObject;0;1
TR;VPConstraint;name();TR;VPPreexistentObject;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPPreexistentObject;0;0
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPShortConstraint;0;1
TR;VPConstraint;asShortConst();TR;VPShortConst;0;1
TR;VPConstraint;asShortConstraint();TR;VPShortConstraint;0;1
TR;VPConstraint;canOverflow();TR;VPShortConstraint;0;1
TR;VPShortConstraint;getHigh();TR;VPShortConst;0;1
TR;VPConstraint;getHighShort();TR;VPShortConstraint;0;1
TR;VPConstraint;getLowShort();TR;VPShortConstraint;0;1
TR;VPConstraint;getPrecision();TR;VPShortConstraint;0;1
TR;VPShortConstraint;getPrecision();TR;VPShortConst;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0;1
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConst;0;1
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0;1
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0;1
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0;1
TR;VPConstraint;name();TR;VPShortConst;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPShortConst;0;0
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPShortConstraint;0;1
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPShortConstraint;0;1
TR;VPConstraint;asShortRange();TR;VPShortRange;0;1
TR;VPShortConstraint;getHigh();TR;VPShortRange;0;1
TR;VPShortConstraint;getPrecision();TR;VPShortRange;0;1
TR;VPConstraint;name();TR;VPShortRange;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPShortRange;0;0
TR;VPConstraint;asVPSync();TR;VPSync;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPSync;0;1
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPSync;0;1
TR;VPConstraint;name();TR;VPSync;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPSync;0;0
TR;VPConstraint;asUnreachablePath();TR;VPUnreachablePath;0;1
TR;VPConstraint;name();TR;VPUnreachablePath;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPUnreachablePath;0;0
TR;VPConstraint;asUnresolvedClass();TR;VPUnresolvedClass;0;1
TR;VPClassType;getArrayClass(OMR::ValuePropagation *);TR;VPUnresolvedClass;0;1
TR;VPClassType;getClassSignature(int32_t &);TR;VPUnresolvedClass;0;1
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPUnresolvedClass;0;1
TR;VPClassType;isPrimitiveArray(TR::Compilation *);TR;VPUnresolvedClass;0;1
TR;VPClassType;isReferenceArray(TR::Compilation *);TR;VPUnresolvedClass;0;1
TR;VPConstraint;name();TR;VPUnresolvedClass;0;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPUnresolvedClass;0;0
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;BackwardDFSetAnalysis;0;1
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;GlobalAnticipatability;0;1
TR;DataFlowAnalysis;asGlobalAnticipatability();TR;GlobalAnticipatability;0;1
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BackwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;compose(Container *,Container *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;compose(Container *,Container *);TR;BackwardIntersectionDFSetAnalysis;0;1
TR;DataFlowAnalysis;getKind();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;getKind();TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;getKind();TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;GlobalAnticipatability;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;GlobalAnticipatability;0;1
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;BackwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BackwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BackwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeInfo(Container *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeInfo(Container *);TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;GlobalAnticipatability;0;1
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Liveness;0;1
TR;DataFlowAnalysis;asLiveness();TR;Liveness;0;1
TR;BackwardDFSetAnalysis;compose(Container *,Container *);TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;getKind();TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardUnionDFSetAnalysis;getKind();TR;Liveness;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Liveness;0;1
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardUnionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;Liveness;0;1
TR;BackwardDFSetAnalysis;initializeInfo(Container *);TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardUnionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Liveness;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;Liveness;0;1
TR;BitVectorIterator;getFirstElement();TR;BitContainerIterator;0;0
TR;BitVectorIterator;getNextElement();TR;BitContainerIterator;0;0
TR;BitVectorIterator;hasMoreElements();TR;BitContainerIterator;0;0
TR;Structure;addExternalEdge(class TR_Structure *,int32_t,_Bool);TR;BlockStructure;0;1
TR;Structure;asBlock();TR;BlockStructure;0;1
TR;Structure;changeContinueLoopsToNestedLoops(class TR_RegionStructure *);TR;BlockStructure;0;1
TR;Structure;checkStructure(class TR_BitVector *);TR;BlockStructure;0;1
TR;Structure;clearAnalysisInfo();TR;BlockStructure;0;1
TR;Structure;cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);TR;BlockStructure;0;1
TR;Structure;cloneStructureEdges(TR::Block **);TR;BlockStructure;0;1
TR;Structure;collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *);TR;BlockStructure;0;1
TR;Structure;collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR;BlockStructure;0;1
TR;Structure;doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool);TR;BlockStructure;0;1
TR;Structure;getBlocks(List<TR::Block> *,vcount_t);TR;BlockStructure;0;1
TR;Structure;getBlocks(List<TR::Block> *);TR;BlockStructure;0;1
TR;Structure;getEntryBlock();TR;BlockStructure;0;1
TR;Structure;getKind();TR;BlockStructure;0;1
TR;Structure;hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t);TR;BlockStructure;0;1
TR;Structure;isExpressionTransparentIn(int32_t,class TR_LocalTransparency *);TR;BlockStructure;0;1
TR;Structure;markStructuresWithImproperRegions();TR;BlockStructure;0;1
TR;Structure;removeEdge(class TR_Structure *,class TR_Structure *);TR;BlockStructure;0;1
TR;Structure;removeExternalEdgeTo(class TR_Structure *,int32_t);TR;BlockStructure;0;1
TR;Structure;renumber(int32_t);TR;BlockStructure;0;1
TR;Structure;renumberRecursively(int32_t,int32_t);TR;BlockStructure;0;1
TR;Structure;replacePart(class TR_Structure *,class TR_Structure *);TR;BlockStructure;0;1
TR;Structure;resetAnalysisInfo();TR;BlockStructure;0;1
TR;Structure;resetAnalyzedStatus();TR;BlockStructure;0;1
TR;Structure;resetVisitCounts(vcount_t);TR;BlockStructure;0;0
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ForwardDFSetAnalysis;0;1
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Delayedness;0;1
TR;DataFlowAnalysis;asDelayedness();TR;Delayedness;0;1
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;compose(Container *,Container *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;compose(Container *,Container *);TR;IntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;getKind();TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;getKind();TR;IntersectionDFSetAnalysis;0;1
TR;IntersectionDFSetAnalysis;getKind();TR;Delayedness;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Delayedness;0;1
TR;BasicDFSetAnalysis;initialize();TR;ForwardDFSetAnalysis;0;0
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;IntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;IntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeInfo(Container *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeInfo(Container *);TR;IntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseCompose(Container *,Container *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;IntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseInitializeInfo(Container *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;IntersectionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Delayedness;0;1
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Earliestness;0;1
TR;DataFlowAnalysis;asEarliestness();TR;Earliestness;0;1
TR;ForwardDFSetAnalysis;compose(Container *,Container *);TR;UnionDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;getKind();TR;UnionDFSetAnalysis;0;1
TR;UnionDFSetAnalysis;getKind();TR;Earliestness;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Earliestness;0;1
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;UnionDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;UnionDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeInfo(Container *);TR;UnionDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;UnionDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;UnionDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Earliestness;0;1
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;FlowSensitiveEscapeAnalysis;0;1
TR;DataFlowAnalysis;asFlowSensitiveEscapeAnalysis();TR;FlowSensitiveEscapeAnalysis;0;1
TR;IntersectionDFSetAnalysis;getKind();TR;FlowSensitiveEscapeAnalysis;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;FlowSensitiveEscapeAnalysis;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;FlowSensitiveEscapeAnalysis;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;FlowSensitiveEscapeAnalysis;0;1
TR;HashTab;calculateHash(const void *);TR;HashTabDouble;0;1
TR;HashTab;isEqual(const void *,const void *);TR;HashTabDouble;0;1
TR;HashTab;calculateHash(const void *);TR;HashTabFloat;0;1
TR;HashTab;isEqual(const void *,const void *);TR;HashTabFloat;0;1
TR;HashTab;calculateHash(const void *);TR;HashTabInt;0;1
TR;HashTab;calculateHash(const void *);TR;HashTabLong;0;1
TR;HashTab;isEqual(const void *,const void *);TR;HashTabLong;0;1
TR;HashTab;calculateHash(const void *);TR;HashTabString;0;1
TR;HashTab;isEqual(const void *,const void *);TR;HashTabString;0;1
TR;DataFlowAnalysis;asIsolatedness();TR;Isolatedness;0;1
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Isolatedness;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Isolatedness;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Isolatedness;0;1
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Latestness;0;1
TR;DataFlowAnalysis;asLatestness();TR;Latestness;0;1
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Latestness;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Latestness;0;1
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;LiveOnAllPaths;0;1
TR;DataFlowAnalysis;asLiveOnAllPaths();TR;LiveOnAllPaths;0;1
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;LiveOnAllPaths;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;LiveOnAllPaths;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;LiveOnAllPaths;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;LiveOnAllPaths;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;LiveOnAllPaths;0;1
TR;LiveVariableInformation;findUseOfLocal(TR::Node *,int32_t,class TR_BitVector **,class TR_BitVector **,class TR_BitVector *,_Bool,vcount_t);TR;OSRLiveVariableInformation;0;1
TR;LiveVariableInformation;jitPersistentAlloc(size_t);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;jitPersistentFree(void *);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete(void *,size_t);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete(void *,TR::Region &);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete[](void *,TR::Region &);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new(size_t,TR::Region &);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new(size_t,TR::Internal::PersistentNewType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new(size_t,class TR_PersistentMemory *);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new(size_t,TR_ArenaAllocator *);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new[](size_t,TR::Internal::PersistentNewType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new[](size_t,class TR_PersistentMemory *);TR;OSRLiveVariableInformation;0;0
TR;LiveVariableInformation;operator new[](size_t,TR::Region &);TR;OSRLiveVariableInformation;0;0
TR;Dominators;jitPersistentAlloc(size_t);TR;PostDominators;0;0
TR;Dominators;jitPersistentFree(void *);TR;PostDominators;0;0
TR;Dominators;operator delete(void *,size_t);TR;PostDominators;0;0
TR;Dominators;operator delete(void *,TR::Region &);TR;PostDominators;0;0
TR;Dominators;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0;0
TR;Dominators;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator delete[](void *,TR::Region &);TR;PostDominators;0;0
TR;Dominators;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0;0
TR;Dominators;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator new(size_t,TR::Internal::PersistentNewType);TR;PostDominators;0;0
TR;Dominators;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator new(size_t,class TR_PersistentMemory *);TR;PostDominators;0;0
TR;Dominators;operator new(size_t,TR_ArenaAllocator *);TR;PostDominators;0;0
TR;Dominators;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0;0
TR;Dominators;operator new(size_t,TR::Region &);TR;PostDominators;0;0
TR;Dominators;operator new[](size_t,TR::Internal::PersistentNewType);TR;PostDominators;0;0
TR;Dominators;operator new[](size_t,TR::Region &);TR;PostDominators;0;0
TR;Dominators;operator new[](size_t,class TR_PersistentMemory *);TR;PostDominators;0;0
TR;Dominators;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0;0
TR;Dominators;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0;0
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ReachingDefinitions;0;1
TR;UnionDFSetAnalysis;getKind();TR;ReachingDefinitions;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;ReachingDefinitions;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;ReachingDefinitions;0;1
TR;DataFlowAnalysis;perform();TR;ReachingDefinitions;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;ReachingDefinitions;0;1
TR;Structure;addEdge(TR::CFGEdge *,_Bool);TR;RegionStructure;0;1
TR;Structure;addExternalEdge(class TR_Structure *,int32_t,_Bool);TR;RegionStructure;0;1
TR;Structure;asRegion();TR;RegionStructure;0;1
TR;Structure;changeContinueLoopsToNestedLoops(class TR_RegionStructure *);TR;RegionStructure;0;1
TR;Structure;checkStructure(class TR_BitVector *);TR;RegionStructure;0;1
TR;Structure;clearAnalysisInfo();TR;RegionStructure;0;1
TR;Structure;cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);TR;RegionStructure;0;1
TR;Structure;cloneStructureEdges(TR::Block **);TR;RegionStructure;0;1
TR;Structure;collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *);TR;RegionStructure;0;1
TR;Structure;collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR;RegionStructure;0;1
TR;Structure;doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool);TR;RegionStructure;0;1
TR;Structure;getBlocks(List<TR::Block> *,vcount_t);TR;RegionStructure;0;1
TR;Structure;getBlocks(List<TR::Block> *);TR;RegionStructure;0;1
TR;Structure;getEntryBlock();TR;RegionStructure;0;1
TR;Structure;getKind();TR;RegionStructure;0;1
TR;Structure;getMaxNestingDepth(int32_t *,int32_t *);TR;RegionStructure;0;1
TR;Structure;hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t);TR;RegionStructure;0;1
TR;Structure;isExpressionTransparentIn(int32_t,class TR_LocalTransparency *);TR;RegionStructure;0;1
TR;Structure;markStructuresWithImproperRegions();TR;RegionStructure;0;1
TR;Structure;mergeInto(TR::Block *,TR::Block *);TR;RegionStructure;0;1
TR;Structure;removeEdge(class TR_Structure *,class TR_Structure *);TR;RegionStructure;0;1
TR;Structure;removeExternalEdgeTo(class TR_Structure *,int32_t);TR;RegionStructure;0;1
TR;Structure;removeMergedBlock(TR::Block *,TR::Block *);TR;RegionStructure;0;1
TR;Structure;renumber(int32_t);TR;RegionStructure;0;1
TR;Structure;renumberRecursively(int32_t,int32_t);TR;RegionStructure;0;1
TR;Structure;replacePart(class TR_Structure *,class TR_Structure *);TR;RegionStructure;0;1
TR;Structure;resetAnalysisInfo();TR;RegionStructure;0;1
TR;Structure;resetAnalyzedStatus();TR;RegionStructure;0;1
TR;Structure;resetVisitCounts(vcount_t);TR;RegionStructure;0;0
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;RegisterAnticipatability;0;1
TR;DataFlowAnalysis;asRegisterAnticipatability();TR;RegisterAnticipatability;0;1
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;RegisterAnticipatability;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RegisterAnticipatability;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RegisterAnticipatability;0;1
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;RegisterAvailability;0;1
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;RegisterAvailability;0;1
TR;DataFlowAnalysis;asRegisterAvailability();TR;RegisterAvailability;0;1
TR;IntersectionDFSetAnalysis;getKind();TR;RegisterAvailability;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RegisterAvailability;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RegisterAvailability;0;1
TR;OutOfLineCodeSection;assignRegisters(enum TR_RegisterKinds);TR;S390OutOfLineCodeSection;0;1
TR;CFGNode;asStructureSubGraphNode();TR;StructureSubGraphNode;0;1
OMR;ParameterSymbol;ParameterSymbol(TR::DataType,int32_t);TR;ParameterSymbol;0;0
OMR;ParameterSymbol;ParameterSymbol(TR::DataType,int32_t,size_t);TR;ParameterSymbol;0;0
OMR;RegisterMappedSymbol;self();OMR;ParameterSymbol;0;0
OMR;ParameterSymbol;~ParameterSymbol();TR;ParameterSymbol;1;1
TR;DataFlowAnalysis;getKind();TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;getKind();TR;BackwardDFSetAnalysis;0;0
TR;BackwardDFSetAnalysis;getKind();TR;BackwardIntersectionDFSetAnalysis;0;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;GlobalAnticipatability;0;0
TR;BackwardDFSetAnalysis;getKind();TR;BackwardUnionDFSetAnalysis;0;0
TR;BackwardUnionDFSetAnalysis;getKind();TR;Liveness;0;0
TR;Structure;getKind();TR;BlockStructure;0;0
TR;BasicDFSetAnalysis;getKind();TR;ForwardDFSetAnalysis;0;0
TR;ForwardDFSetAnalysis;getKind();TR;IntersectionDFSetAnalysis;0;0
TR;IntersectionDFSetAnalysis;getKind();TR;Delayedness;0;0
TR;ForwardDFSetAnalysis;getKind();TR;UnionDFSetAnalysis;0;0
TR;UnionDFSetAnalysis;getKind();TR;Earliestness;0;0
TR;IntersectionDFSetAnalysis;getKind();TR;FlowSensitiveEscapeAnalysis;0;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Isolatedness;0;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Latestness;0;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;LiveOnAllPaths;0;0
TR;UnionDFSetAnalysis;getKind();TR;ReachingDefinitions;0;0
TR;Structure;getKind();TR;RegionStructure;0;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;RegisterAnticipatability;0;0
TR;IntersectionDFSetAnalysis;getKind();TR;RegisterAvailability;0;0
OMR;Recompilation;Recompilation(TR::Compilation *);TR;Recompilation;0;0
OMR;Recompilation;~Recompilation();TR;Recompilation;1;0
OMR;Optimization;Optimization(TR::OptimizationManager *);TR;Optimization;0;0
OMR;Optimization;~Optimization();TR;Optimization;0;1
TR;TreeTopIteratorImpl;currentNode();TR;NodeIterator;0;0
TR;NodeIterator;currentNode();TR;NodeOccurrenceIterator;0;0
TR;TreeTopIteratorImpl;currentTree();TR;NodeIterator;0;0
TR;TreeTopIteratorImpl;isAt(class TR::PreorderNodeIterator &);TR;NodeIterator;0;0
TR;TreeTopIteratorImpl;isAt(TR::TreeTop *);TR;NodeIterator;0;0
TR;TreeTopIteratorImpl;logCurrentLocation();TR;NodeIterator;0;0
TR;NodeIterator;logCurrentLocation();TR;NodeOccurrenceIterator;0;0
TR;TreeTopIteratorImpl;operator!=(TR::TreeTop *);TR;NodeIterator;0;0
TR;TreeTopIteratorImpl;operator++();TR;PostorderNodeOccurrenceIterator;0;0
TR;TreeTopIteratorImpl;operator==(TR::TreeTop *);TR;NodeIterator;0;0
TR;TreeTopIteratorImpl;stepForward();TR;PostorderNodeOccurrenceIterator;0;0
OMR;OptimizationManager;OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *);TR;OptimizationManager;0;0
OMR;OptimizationManager;~OptimizationManager();TR;OptimizationManager;0;1
TR;TreeTopIteratorImpl;operator++();TR;PostorderNodeIterator;0;0
TR;TreeTopIteratorImpl;stepForward();TR;PostorderNodeIterator;0;0
TR;TreeTopIteratorImpl;operator++();TR;PreorderNodeIterator;0;0
TR;TreeTopIteratorImpl;stepForward();TR;PreorderNodeIterator;0;0
TR;TreeTopIteratorImpl;operator++();TR;PreorderNodeOccurrenceIterator;0;0
TR;TreeTopIteratorImpl;stepForward();TR;PreorderNodeOccurrenceIterator;0;0
TR;TreeTopIteratorImpl;stepBackward();TR;TreeTopIterator;0;0
TR;TreeTopIteratorImpl;stepForward();TR;TreeTopIterator;0;0
OMR;MonitorTable;MonitorTable();TR;MonitorTable;1;0
TR;Pattern;getName();TR;AnythingPattern;0;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;AnythingPattern;0;1
TR;Pattern;getName();TR;ChildPattern;0;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChildPattern;0;1
TR;Pattern;getName();TR;ChildrenPattern;0;0
TR;ChildrenPattern;getName();TR;CommutativePattern;0;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChildrenPattern;0;1
TR;ChildrenPattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;CommutativePattern;0;1
TR;Pattern;getName();TR;ChoicePattern;0;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChoicePattern;0;1
TR;Pattern;getName();TR;OpCodePattern;0;0
TR;OpCodePattern;getName();TR;IConstPattern;0;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;OpCodePattern;0;1
TR;OpCodePattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;IConstPattern;0;1
TR;Pattern;tracePattern(TR::Node *);TR;OpCodePattern;0;1
TR;OpCodePattern;getName();TR;LConstPattern;0;0
TR;OpCodePattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;LConstPattern;0;1
TR;Pattern;getName();TR;NoRegisterPattern;0;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;NoRegisterPattern;0;1
TR;Pattern;getName();TR;UnifyPattern;0;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;UnifyPattern;0;1
OMR;IlGenRequest;IlGenRequest(TR::IlGeneratorMethodDetails &);TR;IlGenRequest;0;0
OMR;IlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;CompileIlGenRequest;0;1
OMR;IlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;CompileIlGenRequest;0;1
OMR;IlGenRequest;~IlGenRequest();TR;IlGenRequest;1;0
OMR;IlGeneratorMethodDetails;IlGeneratorMethodDetails();TestCompiler;IlGeneratorMethodDetails;0;0
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails();TR;IlGeneratorMethodDetails;0;0
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails(TR::ResolvedMethod *);TR;IlGeneratorMethodDetails;0;0
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails(class TR_ResolvedMethod *);TR;IlGeneratorMethodDetails;0;0
OMR;IlGeneratorMethodDetails;print(class TR_FrontEnd *,TR::FILE *);TestCompiler;IlGeneratorMethodDetails;0;0
OMR;IlGeneratorMethodDetails;self();OMR;IlGeneratorMethodDetails;0;0
OMR;IlGeneratorMethodDetails;~IlGeneratorMethodDetails();TestCompiler;IlGeneratorMethodDetails;0;1
TestCompiler;IlGeneratorMethodDetails;~IlGeneratorMethodDetails();TR;IlGeneratorMethodDetails;0;1
TR;IlGenRequest;allowIlGenOptimizations();TR;InliningIlGenRequest;0;1
OMR;IlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;InliningIlGenRequest;0;1
TR;InliningIlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;PartialInliningIlGenRequest;0;1
OMR;IlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;InliningIlGenRequest;0;1
TR;InliningIlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;PartialInliningIlGenRequest;0;1
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t);TR;AutomaticSymbol;0;0
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType);TR;AutomaticSymbol;0;0
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t,const char *);TR;AutomaticSymbol;0;0
OMR;Symbol;getKind();OMR;AutomaticSymbol;0;0
OMR;Symbol;isReferenced();OMR;AutomaticSymbol;0;0
OMR;RegisterMappedSymbol;self();OMR;AutomaticSymbol;0;0
OMR;AutomaticSymbol;~AutomaticSymbol();TR;AutomaticSymbol;1;1
OMR;Symbol;isStatic();OMR;MethodSymbol;0;0
OMR;StaticSymbol;StaticSymbol(TR::DataType,uint32_t);TR;StaticSymbol;0;0
OMR;StaticSymbol;StaticSymbol(TR::DataType,void *);TR;StaticSymbol;0;0
OMR;StaticSymbol;StaticSymbol(TR::DataType);TR;StaticSymbol;0;0
OMR;Symbol;getName();OMR;StaticSymbol;0;0
OMR;Symbol;self();OMR;StaticSymbol;0;0
OMR;StaticSymbol;~StaticSymbol();TR;StaticSymbol;1;1
TR;ResolvedMethod;isFinal();TestCompiler;ResolvedMethodBase;0;0
TR;ResolvedMethod;isPrivate();TestCompiler;ResolvedMethodBase;0;0
TR;ResolvedMethod;isStatic();TestCompiler;ResolvedMethodBase;0;0
OMR;Optimization;optDetailString();TR;Inliner;0;1
OMR;Optimization;perform();TR;Inliner;0;1
OMR;TransformUtil;TransformUtil();TR;TransformUtil;0;0
TR;Link;jitPersistentAlloc(size_t);TR;DirectCallSite;0;0
TR;Link;jitPersistentFree(void *);TR;DirectCallSite;0;0
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator delete(void *,size_t);TR;DirectCallSite;0;0
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0;0
TR;Link;operator delete(void *,TR::Region &);TR;DirectCallSite;0;0
TR;Link;operator delete[](void *,TR::Region &);TR;DirectCallSite;0;0
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0;0
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;DirectCallSite;0;0
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;DirectCallSite;0;0
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;DirectCallSite;0;0
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0;0
TR;Link;operator new(size_t,TR::Region &);TR;DirectCallSite;0;0
TR;Link;operator new[](size_t,TR::Region &);TR;DirectCallSite;0;0
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;DirectCallSite;0;0
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;DirectCallSite;0;0
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0;0
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0;0
TR;InlinerBase;inlineCallTargets(TR::ResolvedMethodSymbol *,class TR_CallStack *,class TR_InnerPreexistenceInfo *);TR;DumbInliner;0;1
TR;InlinerBase;inlineRecognizedMethod(TR::RecognizedMethod);TR;InlineCall;0;1
TR;Link;jitPersistentAlloc(size_t);TR;IndirectCallSite;0;0
TR;IndirectCallSite;jitPersistentAlloc(size_t);TR;FunctionPointerCallSite;0;0
TR;Link;jitPersistentFree(void *);TR;IndirectCallSite;0;0
TR;IndirectCallSite;jitPersistentFree(void *);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete(void *,size_t);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete(void *,size_t);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete(void *,TR::Region &);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete(void *,TR::Region &);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete[](void *,TR::Region &);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete[](void *,TR::Region &);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0;0
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new(size_t,class TR_PersistentMemory *);TR;FunctionPointerCallSite;0;0
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new(size_t,TR_ArenaAllocator *);TR;FunctionPointerCallSite;0;0
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new(size_t,TR::Internal::PersistentNewType);TR;FunctionPointerCallSite;0;0
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0;0
TR;Link;operator new(size_t,TR::Region &);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new(size_t,TR::Region &);TR;FunctionPointerCallSite;0;0
TR;Link;operator new[](size_t,TR::Region &);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new[](size_t,TR::Region &);TR;FunctionPointerCallSite;0;0
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new[](size_t,class TR_PersistentMemory *);TR;FunctionPointerCallSite;0;0
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new[](size_t,TR::Internal::PersistentNewType);TR;FunctionPointerCallSite;0;0
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0;0
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0;0
TR;IndirectCallSite;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0;0
OMR;Optimization;optDetailString();TR;TrivialInliner;0;1
OMR;Optimization;perform();TR;TrivialInliner;0;1
OMR::Z;Linkage;Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions);TR;Linkage;0;0
OMR;Linkage;createEpilogue(TR::Instruction *);OMR::Z;Linkage;0;1
OMR;Linkage;createPrologue(TR::Instruction *);OMR::Z;Linkage;0;1
OMR;Linkage;getRegisterSaveSize();OMR::Z;Linkage;0;1
OMR;Linkage;getRightToLeft();OMR::Z;Linkage;0;1
OMR;Linkage;hasToBeOnStack(TR::ParameterSymbol *);OMR::Z;Linkage;0;1
OMR;Linkage;mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);OMR::Z;Linkage;0;1
OMR;Linkage;mapStack(TR::ResolvedMethodSymbol *);OMR::Z;Linkage;0;1
OMR;Linkage;numArgumentRegisters(enum TR_RegisterKinds);OMR::Z;Linkage;0;1
OMR;Linkage;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &);OMR::Z;Linkage;0;1
OMR;Linkage;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);OMR::Z;Linkage;0;1
OMR;Linkage;useCachedStaticAreaAddresses(TR::Compilation *);OMR::Z;Linkage;0;1
OMR;Linkage;~Linkage();OMR::Z;Linkage;1;0
OMR::Z;Linkage;~Linkage();TR;Linkage;1;0
OMR::Z;MemoryReference;MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(int32_t,TR::CodeGenerator *,_Bool);TR;MemoryReference;0;0
OMR::Z;MemoryReference;MemoryReference(TR::CodeGenerator *);TR;MemoryReference;0;0
OMR;MemoryReference;jitPersistentAlloc(size_t);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;jitPersistentFree(void *);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete(void *,TR::Region &);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete(void *,size_t);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete[](void *,TR::Region &);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new(size_t,TR_ArenaAllocator *);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new(size_t,class TR_PersistentMemory *);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new(size_t,TR::Internal::PersistentNewType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new(size_t,TR::Region &);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new[](size_t,TR::Region &);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new[](size_t,class TR_PersistentMemory *);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new[](size_t,TR::Internal::PersistentNewType);OMR::Z;MemoryReference;0;0
OMR;MemoryReference;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference;0;0
OMR;RegisterDependencyConditions;RegisterDependencyConditions();OMR::Z;RegisterDependencyConditions;0;0
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions();TR;RegisterDependencyConditions;0;0
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions(uint16_t,uint16_t,TR::CodeGenerator *);TR;RegisterDependencyConditions;0;0
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions(TR::CodeGenerator *,TR::Node *,uint32_t,TR::Instruction **);TR;RegisterDependencyConditions;0;0
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions(class TR_S390RegisterDependencyGroup *,class TR_S390RegisterDependencyGroup *,uint16_t,uint16_t,TR::CodeGenerator *);TR;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;jitPersistentAlloc(size_t);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;jitPersistentFree(void *);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete(void *,TR::Region &);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete(void *,size_t);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete[](void *,TR::Region &);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new(size_t,TR_ArenaAllocator *);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_PersistentMemory *);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new(size_t,TR::Internal::PersistentNewType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new(size_t,TR::Region &);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new[](size_t,TR::Region &);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new[](size_t,TR::Internal::PersistentNewType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_PersistentMemory *);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions;0;0
OMR;RegisterDependencyConditions;~RegisterDependencyConditions();OMR::Z;RegisterDependencyConditions;1;0
OMR;Snippet;emitSnippetBody();TR;S390ConstantDataSnippet;0;1
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390ConstantInstructionSnippet;0;1
TR;S390ConstantDataSnippet;getConstantSize();TR;S390ConstantInstructionSnippet;0;1
TR;S390ConstantDataSnippet;getDataAs8Bytes();TR;S390ConstantInstructionSnippet;0;1
OMR::Z;Snippet;getKind();TR;S390ConstantDataSnippet;0;0
TR;S390ConstantDataSnippet;getKind();TR;S390ConstantInstructionSnippet;0;0
OMR;Snippet;getLength(int32_t);TR;S390ConstantDataSnippet;0;1
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390ConstantInstructionSnippet;0;1
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390EyeCatcherDataSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390EyeCatcherDataSnippet;0;0
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390InterfaceCallDataSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390InterfaceCallDataSnippet;0;0
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390InterfaceCallDataSnippet;0;1
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390JNICallDataSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390JNICallDataSnippet;0;0
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390JNICallDataSnippet;0;1
OMR;Snippet;print(TR::FILE *,class TR_Debug *);TR;S390JNICallDataSnippet;0;1
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390LabelTableSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390LabelTableSnippet;0;0
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390LabelTableSnippet;0;1
OMR;Snippet;emitSnippetBody();TR;S390TargetAddressSnippet;0;1
TR;S390TargetAddressSnippet;emitSnippetBody();TR;S390LookupSwitchSnippet;0;1
OMR::Z;Snippet;getKind();TR;S390TargetAddressSnippet;0;0
TR;S390TargetAddressSnippet;getKind();TR;S390LookupSwitchSnippet;0;0
OMR;Snippet;getLength(int32_t);TR;S390TargetAddressSnippet;0;1
TR;S390TargetAddressSnippet;getLength(int32_t);TR;S390LookupSwitchSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390WritableDataSnippet;0;0
OMR;Symbol;getKind();OMR;AutomaticSymbol;0;1
OMR;Optimization;optDetailString();TR;LoadExtensions;0;1
OMR;Optimization;perform();TR;LoadExtensions;0;1
OMR::Z;Register;FlattenRegisterPairs(TR_Queue<TR::Register> *);OMR;RegisterPair;0;1
OMR;RegisterPair;RegisterPair(TR::Register *,TR::Register *);OMR::Z;RegisterPair;0;0
OMR::Z;RegisterPair;RegisterPair(TR::Register *,TR::Register *);TR;RegisterPair;0;0
OMR;RegisterPair;RegisterPair(enum TR_RegisterKinds);OMR::Z;RegisterPair;0;0
OMR::Z;RegisterPair;RegisterPair(enum TR_RegisterKinds);TR;RegisterPair;0;0
OMR;RegisterPair;RegisterPair();OMR::Z;RegisterPair;0;0
OMR::Z;RegisterPair;RegisterPair();TR;RegisterPair;0;0
OMR;Register;block();OMR;RegisterPair;0;1
OMR;Register;getHighOrder();OMR;RegisterPair;0;1
OMR;Register;getLowOrder();OMR;RegisterPair;0;1
OMR;Register;getRegister();OMR;RegisterPair;0;0
OMR;Register;getRegisterPair();OMR;RegisterPair;0;1
OMR;RegisterPair;setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::Z;RegisterPair;0;0
OMR;RegisterPair;setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::Z;RegisterPair;0;0
OMR;Register;unblock();OMR;RegisterPair;0;1
OMR::Z;Register;usesRegister(TR::Register *);OMR;RegisterPair;0;1
OMR;RegisterPair;~RegisterPair();OMR::Z;RegisterPair;1;0
OMR::Z;RegisterPair;~RegisterPair();TR;RegisterPair;1;0
OMR::Z;Snippet;getKind();TR;S390ConstantDataSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390ConstantInstructionSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390EyeCatcherDataSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390InterfaceCallDataSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390JNICallDataSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390LabelTableSnippet;0;1
OMR::Z;Snippet;getKind();TR;S390TargetAddressSnippet;0;1
TR;S390TargetAddressSnippet;getKind();TR;S390LookupSwitchSnippet;0;1
TR;S390ConstantDataSnippet;getKind();TR;S390WritableDataSnippet;0;1
TR;ValueNumberInfo;allocateValueNumber(TR::Node *);TR;HashValueNumberInfo;0;1
TR;ValueNumberInfo;initializeNode(TR::Node *,int32_t &);TR;HashValueNumberInfo;0;1
OMR;IL;IL();TR;IL;1;0
TR;SegmentAllocator;allocationLimit();OMR;SystemSegmentProvider;0;1
TR;SegmentProvider;bytesAllocated();OMR;SystemSegmentProvider;0;1
TR;SegmentAllocator;regionBytesAllocated();OMR;SystemSegmentProvider;0;1
TR;SegmentProvider;release(TR::MemorySegment &);OMR;SystemSegmentProvider;0;1
TR;SegmentProvider;request(size_t);OMR;SystemSegmentProvider;0;1
TR;SegmentAllocator;setAllocationLimit(size_t);OMR;SystemSegmentProvider;0;1
TR;SegmentAllocator;systemBytesAllocated();OMR;SystemSegmentProvider;0;1
TR;CallStackIterator;printStackBacktrace(TR::Compilation *);TR;LinuxCallStackIterator;0;1
__cxxabiv1;__pbase_type_info;__pointer_catch(const class __cxxabiv1::__pbase_type_info *,void **,unsigned int);__cxxabiv1;__pointer_to_member_type_info;0;1
__cxxabiv1;__pbase_type_info;__pointer_catch(const class __cxxabiv1::__pbase_type_info *,void **,unsigned int);__cxxabiv1;__pointer_type_info;0;1
__cxxabiv1;__class_type_info;__do_dyncast(ptrdiff_t,enum __cxxabiv1::__class_type_info::__sub_kind,const class __cxxabiv1::__class_type_info *,const void *,const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__dyncast_result &);__cxxabiv1;__si_class_type_info;0;1
__cxxabiv1;__class_type_info;__do_find_public_src(ptrdiff_t,const void *,const class __cxxabiv1::__class_type_info *,const void *);__cxxabiv1;__si_class_type_info;0;1
__cxxabiv1;__class_type_info;__do_upcast(const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__upcast_result &__restrict);__cxxabiv1;__si_class_type_info;0;1
__cxxabiv1;__class_type_info;__do_dyncast(ptrdiff_t,enum __cxxabiv1::__class_type_info::__sub_kind,const class __cxxabiv1::__class_type_info *,const void *,const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__dyncast_result &);__cxxabiv1;__vmi_class_type_info;0;1
__cxxabiv1;__class_type_info;__do_find_public_src(ptrdiff_t,const void *,const class __cxxabiv1::__class_type_info *,const void *);__cxxabiv1;__vmi_class_type_info;0;1
__cxxabiv1;__class_type_info;__do_upcast(const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__upcast_result &__restrict);__cxxabiv1;__vmi_class_type_info;0;1
OMR;Instruction;getKind();OMR::Z;Instruction;0;0
OMR;GCRegisterMap;GCRegisterMap();TR;GCRegisterMap;0;0
OMR;GCRegisterMap;~GCRegisterMap();TR;GCRegisterMap;1;0
OMR;GCStackAtlas;GCStackAtlas(uint32_t,uint32_t,class TR_Memory *);TR;GCStackAtlas;0;0
OMR::Z;RegisterIterator;RegisterIterator(TR::Machine *,enum TR_RegisterKinds);TR;RegisterIterator;0;0
OMR;Optimization;optDetailString();TR;AsyncCheckInsertion;0;1
OMR;Optimization;perform();TR;AsyncCheckInsertion;0;1
OMR;Optimization;shouldPerform();TR;AsyncCheckInsertion;0;1
TR;BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BackwardDFSetAnalysis;0;0
TR;BackwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;GlobalAnticipatability;0;1
TR;BackwardDFSetAnalysis;analyzeNodeIfSuccessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &);TR;BackwardDFSetAnalysis;0;0
TR;BackwardDFSetAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;getKind();TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeDFSetAnalysis();TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &,_Bool);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardDFSetAnalysis;0;1
TR;BackwardDFSetAnalysis;traceBBVA();TR;BackwardDFSetAnalysis;0;0
TR;BackwardDFSetAnalysis;~TR_BackwardDFSetAnalysis();TR;BackwardDFSetAnalysis;1;1
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;Liveness;0;1
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;LiveOnAllPaths;0;1
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;RegisterAnticipatability;0;1
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BackwardIntersectionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BackwardIntersectionDFSetAnalysis;initializeOutSetInfo();TR;BackwardIntersectionDFSetAnalysis;0;1
TR;BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BackwardUnionDFSetAnalysis;0;0
TR;BackwardUnionDFSetAnalysis;getKind();TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardUnionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardUnionDFSetAnalysis;initializeOutSetInfo();TR;BackwardUnionDFSetAnalysis;0;1
TR;BackwardUnionDFSetAnalysis;~TR_BackwardUnionDFSetAnalysis();TR;BackwardUnionDFSetAnalysis;1;1
TR;BasicDFSetAnalysis;TR_BasicDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;createAnalysisInfo();TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;doAnalysis(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;getAnalysisInfo(class TR_Structure *);TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;getKind();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initialize();TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;initializeBasicDFSetAnalysis();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeBlockInfo(_Bool);TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForStructure(class TR_Structure *);TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForStructures();TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoPropertyForStructure(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;performAnalysis(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSetsForStructures();TR;BasicDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;traceBVA();TR;BasicDFSetAnalysis;0;0
TR;BasicDFSetAnalysis;~TR_BasicDFSetAnalysis();TR;BasicDFSetAnalysis;1;1
TR;ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;ForwardDFSetAnalysis;0;0
TR;ForwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;analyzeNodeIfPredecessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &);TR;ForwardDFSetAnalysis;0;0
TR;ForwardDFSetAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;IntersectionBitVectorAnalysis;0;1
TR;BasicDFSetAnalysis;compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;getKind();TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initialize();TR;ForwardDFSetAnalysis;0;0
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeDFSetAnalysis();TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeInfo(class TR_BitVector *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;initializeInfo(class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseCompose(class TR_BitVector *,class TR_BitVector *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseInitializeInfo(class TR_BitVector *);TR;ForwardDFSetAnalysis;0;1
TR;BasicDFSetAnalysis;inverseInitializeInfo(class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0;1
TR;ForwardDFSetAnalysis;~TR_ForwardDFSetAnalysis();TR;ForwardDFSetAnalysis;1;1
TR;ForwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;Earliestness;0;1
TR;ForwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;RegisterAvailability;0;1
OMR;Optimization;optDetailString();TR;CatchBlockRemover;0;1
OMR;Optimization;perform();TR;CatchBlockRemover;0;1
OMR;Optimization;optDetailString();TR;CFGSimplifier;0;1
OMR;Optimization;perform();TR;CFGSimplifier;0;1
OMR;Optimization;optDetailString();TR;CompactLocals;0;1
OMR;Optimization;perform();TR;CompactLocals;0;1
OMR;Optimization;optDetailString();TR;CopyPropagation;0;1
OMR;Optimization;perform();TR;CopyPropagation;0;1
TR;IsolatedStoreElimination;create(TR::OptimizationManager *);TR;DeadStoreElimination;0;0
OMR;Optimization;optDetailString();TR;IsolatedStoreElimination;0;1
TR;IsolatedStoreElimination;optDetailString();TR;DeadStoreElimination;0;1
OMR;Optimization;perform();TR;IsolatedStoreElimination;0;1
OMR;Optimization;optDetailString();TR;DeadTreesElimination;0;1
OMR;Optimization;perform();TR;DeadTreesElimination;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;DeadTreesElimination;0;1
OMR;Optimization;prePerformOnBlocks();TR;DeadTreesElimination;0;1
OMR;Optimization;optDetailString();TR;ExpressionsSimplification;0;1
OMR;Optimization;perform();TR;ExpressionsSimplification;0;1
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;FieldPrivatizer;0;1
OMR;Optimization;optDetailString();TR;FieldPrivatizer;0;1
OMR;Optimization;perform();TR;LoopTransformer;0;1
TR;LoopTransformer;perform();TR;FieldPrivatizer;0;1
TR;LoopTransformer;asLoopCanonicalizer();TR;LoopCanonicalizer;0;1
TR;LoopCanonicalizer;create(TR::OptimizationManager *);TR;RedundantInductionVarElimination;0;0
TR;LoopTransformer;examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);TR;LoopCanonicalizer;0;1
OMR;Optimization;optDetailString();TR;LoopCanonicalizer;0;1
TR;LoopCanonicalizer;optDetailString();TR;RedundantInductionVarElimination;0;1
TR;LoopTransformer;perform();TR;LoopCanonicalizer;0;1
TR;LoopCanonicalizer;perform();TR;RedundantInductionVarElimination;0;1
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopInverter;0;1
OMR;Optimization;optDetailString();TR;LoopInverter;0;1
TR;LoopTransformer;perform();TR;LoopInverter;0;1
OMR;Optimization;optDetailString();TR;InductionVariableAnalysis;0;1
OMR;Optimization;perform();TR;InductionVariableAnalysis;0;1
TR;BasicInductionVariable;getExitValue();TR;DerivedInductionVariable;0;1
TR;BasicInductionVariable;getIterationCount();TR;DerivedInductionVariable;0;1
TR;BasicInductionVariable;jitPersistentAlloc(size_t);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;jitPersistentFree(void *);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,TR::Region &);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,size_t);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,TR::Region &);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,TR_ArenaAllocator *);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_PersistentMemory *);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,TR::Internal::PersistentNewType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,TR::Region &);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,TR::Region &);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_PersistentMemory *);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,TR::Internal::PersistentNewType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0;0
OMR;Optimization;optDetailString();TR;GeneralLoopUnroller;0;1
TR;LoopTransformer;perform();TR;GeneralLoopUnroller;0;1
OMR;Optimization;optDetailString();TR;IVTypeTransformer;0;1
TR;LoopTransformer;perform();TR;IVTypeTransformer;0;1
TR;LoopTransformer;checkIfIncrementInDifferentExtendedBlock(TR::Block *,int32_t);TR;LoopStrider;0;1
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopStrider;0;1
TR;LoopTransformer;examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);TR;LoopStrider;0;1
TR;LoopTransformer;isStoreInRequiredForm(int32_t,class TR_Structure *);TR;LoopStrider;0;1
OMR;Optimization;optDetailString();TR;LoopStrider;0;1
TR;LoopTransformer;perform();TR;LoopStrider;0;1
TR;LoopTransformer;updateLoadUsedInLoopIncrement(TR::Node *,int32_t);TR;LoopStrider;0;1
TR;LoopTransformer;updateStoreInfo(int32_t,TR::TreeTop *);TR;LoopStrider;0;1
TR;BasicInductionVariable;getExitValue();TR;PrimaryInductionVariable;0;1
TR;BasicInductionVariable;getIterationCount();TR;PrimaryInductionVariable;0;1
TR;BasicInductionVariable;jitPersistentAlloc(size_t);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;jitPersistentFree(void *);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,TR::Region &);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,size_t);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,TR::Region &);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,TR_ArenaAllocator *);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_PersistentMemory *);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,TR::Internal::PersistentNewType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new(size_t,TR::Region &);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,TR::Region &);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_PersistentMemory *);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,TR::Internal::PersistentNewType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0;0
TR;BasicInductionVariable;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0;0
OMR;Optimization;optDetailString();TR;GlobalRegisterAllocator;0;1
OMR;Optimization;perform();TR;GlobalRegisterAllocator;0;1
OMR;Optimization;optDetailString();TR;LiveRangeSplitter;0;1
OMR;Optimization;perform();TR;LiveRangeSplitter;0;1
;SuccessorIterator;getFirstSuccessor();;multipleJumpSuccessorIterator;0;1
;SuccessorIterator;getNextSuccessor();;multipleJumpSuccessorIterator;0;1
;SuccessorIterator;asSwitchSuccessor();;switchSuccessorIterator;0;1
;SuccessorIterator;getFirstSuccessor();;switchSuccessorIterator;0;1
;SuccessorIterator;getNextSuccessor();;switchSuccessorIterator;0;1
TR;IntersectionDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;IntersectionBitVectorAnalysis;0;1
TR;IntersectionDFSetAnalysis;getKind();TR;IntersectionDFSetAnalysis;0;1
TR;IntersectionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;IntersectionDFSetAnalysis;0;1
TR;IntersectionDFSetAnalysis;initializeInSetInfo();TR;IntersectionDFSetAnalysis;0;1
OMR;Optimization;optDetailString();TR;LocalLiveRangeReduction;0;1
OMR;Optimization;perform();TR;LocalLiveRangeReduction;0;1
OMR;Optimization;postPerformOnBlocks();TR;LocalLiveRangeReduction;0;1
OMR;Optimization;prePerformOnBlocks();TR;LocalLiveRangeReduction;0;1
OMR;Optimization;optDetailString();TR;LocalReordering;0;1
OMR;Optimization;perform();TR;LocalReordering;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalReordering;0;1
OMR;Optimization;postPerformOnBlocks();TR;LocalReordering;0;1
OMR;Optimization;prePerformOnBlocks();TR;LocalReordering;0;1
TR;AddressTree;processBaseAndIndex(TR::Node *);TR;LRAddressTree;0;1
TR;LoopTransformer;asLoopReducer();TR;LoopReducer;0;1
OMR;Optimization;optDetailString();TR;LoopReducer;0;1
TR;LoopTransformer;perform();TR;LoopReducer;0;1
OMR;Optimization;optDetailString();TR;LoopReplicator;0;1
TR;LoopTransformer;perform();TR;LoopReplicator;0;1
TR;LoopTransformer;asLoopVersioner();TR;LoopVersioner;0;1
TR;LoopVersioner;create(TR::OptimizationManager *);TR;LoopSpecializer;0;0
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopVersioner;0;1
TR;LoopTransformer;isStoreInRequiredForm(int32_t,class TR_Structure *);TR;LoopVersioner;0;1
OMR;Optimization;optDetailString();TR;LoopVersioner;0;1
TR;LoopVersioner;optDetailString();TR;LoopSpecializer;0;1
TR;LoopTransformer;perform();TR;LoopVersioner;0;1
OMR;LocalCSE;LocalCSE(TR::OptimizationManager *);TR;LocalCSE;0;0
OMR;Optimization;optDetailString();OMR;LocalCSE;0;1
OMR;Optimization;perform();OMR;LocalCSE;0;1
OMR;Optimization;performOnBlock(TR::Block *);OMR;LocalCSE;0;1
OMR;Optimization;postPerformOnBlocks();OMR;LocalCSE;0;1
OMR;Optimization;prePerformOnBlocks();OMR;LocalCSE;0;1
OMR;LocalCSE;~LocalCSE();TR;LocalCSE;1;1
OMR;Optimization;optDetailString();TR;LocalDeadStoreElimination;0;1
OMR;Optimization;perform();TR;LocalDeadStoreElimination;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalDeadStoreElimination;0;1
OMR;Optimization;postPerformOnBlocks();TR;LocalDeadStoreElimination;0;1
OMR;Optimization;prePerformOnBlocks();TR;LocalDeadStoreElimination;0;1
OMR;Optimization;self();TR;LocalDeadStoreElimination;0;0
OMR;Optimization;optDetailString();TR;ArraysetStoreElimination;0;1
OMR;Optimization;perform();TR;ArraysetStoreElimination;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;ArraysetStoreElimination;0;1
OMR;Optimization;optDetailString();TR;CleanseTrees;0;1
OMR;Optimization;perform();TR;CleanseTrees;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;CleanseTrees;0;1
OMR;Optimization;prePerformOnBlocks();TR;CleanseTrees;0;1
OMR;Optimization;optDetailString();TR;BlockShuffling;0;1
OMR;Optimization;perform();TR;BlockShuffling;0;1
OMR;Optimization;optDetailString();TR;BlockSplitter;0;1
OMR;Optimization;perform();TR;BlockSplitter;0;1
TR;Array;operator[](uint32_t);TR;Array;0;0
OMR;Optimization;optDetailString();TR;CheckcastAndProfiledGuardCoalescer;0;1
OMR;Optimization;perform();TR;CheckcastAndProfiledGuardCoalescer;0;1
TR;ColdBlockMarker;create(TR::OptimizationManager *);TR;ColdBlockOutlining;0;0
OMR;Optimization;optDetailString();TR;ColdBlockMarker;0;1
TR;ColdBlockMarker;optDetailString();TR;ColdBlockOutlining;0;1
OMR;Optimization;perform();TR;ColdBlockMarker;0;1
TR;ColdBlockMarker;perform();TR;ColdBlockOutlining;0;1
OMR;Optimization;optDetailString();TR;CompactNullChecks;0;1
OMR;Optimization;perform();TR;CompactNullChecks;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;CompactNullChecks;0;1
OMR;Optimization;optDetailString();TR;EliminateRedundantGotos;0;1
OMR;Optimization;perform();TR;EliminateRedundantGotos;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;EliminateRedundantGotos;0;1
OMR;Optimization;optDetailString();TR;ExtendBasicBlocks;0;1
OMR;Optimization;perform();TR;ExtendBasicBlocks;0;1
OMR;Optimization;optDetailString();TR;HoistBlocks;0;1
OMR;Optimization;perform();TR;HoistBlocks;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;HoistBlocks;0;1
OMR;Optimization;optDetailString();TR;InvariantArgumentPreexistence;0;1
OMR;Optimization;perform();TR;InvariantArgumentPreexistence;0;1
TR;Rematerialization;create(TR::OptimizationManager *);TR;LongRegAllocation;0;0
OMR;Optimization;optDetailString();TR;Rematerialization;0;1
TR;Rematerialization;optDetailString();TR;LongRegAllocation;0;1
OMR;Optimization;perform();TR;Rematerialization;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;Rematerialization;0;1
OMR;Optimization;postPerformOnBlocks();TR;LongRegAllocation;0;1
OMR;Optimization;prePerformOnBlocks();TR;Rematerialization;0;1
OMR;Optimization;optDetailString();TR;OrderBlocks;0;1
OMR;Optimization;perform();TR;OrderBlocks;0;1
OMR;Optimization;shouldPerform();TR;OrderBlocks;0;1
OMR;Optimization;optDetailString();TR;PeepHoleBasicBlocks;0;1
OMR;Optimization;perform();TR;PeepHoleBasicBlocks;0;1
OMR;Optimization;optDetailString();TR;ProfiledNodeVersioning;0;1
OMR;Optimization;perform();TR;ProfiledNodeVersioning;0;1
OMR;Optimization;optDetailString();TR;SimplifyAnds;0;1
OMR;Optimization;perform();TR;SimplifyAnds;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;SimplifyAnds;0;1
OMR;Optimization;optDetailString();TR;TrivialBlockExtension;0;1
OMR;Optimization;perform();TR;TrivialBlockExtension;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;TrivialBlockExtension;0;1
OMR;Optimization;optDetailString();TR;TrivialDeadTreeRemoval;0;1
OMR;Optimization;perform();TR;TrivialDeadTreeRemoval;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;TrivialDeadTreeRemoval;0;1
OMR;Simplifier;Simplifier(TR::OptimizationManager *);TR;Simplifier;0;0
OMR;Optimization;optDetailString();OMR;Simplifier;0;1
OMR;Optimization;perform();OMR;Simplifier;0;1
OMR;Optimization;performOnBlock(TR::Block *);OMR;Simplifier;0;1
OMR;Optimization;postPerformOnBlocks();OMR;Simplifier;0;1
OMR;Optimization;prePerformOnBlocks();OMR;Simplifier;0;1
OMR;Optimization;prepareToReplaceNode(TR::Node *);OMR;Simplifier;0;0
OMR;Simplifier;~Simplifier();TR;Simplifier;1;1
;ListBase;jitPersistentAlloc(size_t);;List;0;0
;List;jitPersistentAlloc(size_t);TR;OrderedBlockList;0;0
;ListBase;jitPersistentFree(void *);;List;0;0
;List;jitPersistentFree(void *);TR;OrderedBlockList;0;0
;ListBase;operator delete(void *,TR::Region &);;List;0;0
;List;operator delete(void *,TR::Region &);TR;OrderedBlockList;0;0
;ListBase;operator delete(void *,size_t);;List;0;0
;List;operator delete(void *,size_t);TR;OrderedBlockList;0;0
;ListBase;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);;List;0;0
;List;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0;0
;ListBase;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator delete[](void *,TR::Region &);;List;0;0
;List;operator delete[](void *,TR::Region &);TR;OrderedBlockList;0;0
;ListBase;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);;List;0;0
;List;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0;0
;ListBase;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator new(size_t,TR_ArenaAllocator *);;List;0;0
;List;operator new(size_t,TR_ArenaAllocator *);TR;OrderedBlockList;0;0
;ListBase;operator new(size_t,class TR_PersistentMemory *);;List;0;0
;List;operator new(size_t,class TR_PersistentMemory *);TR;OrderedBlockList;0;0
;ListBase;operator new(size_t,TR::Internal::PersistentNewType);;List;0;0
;List;operator new(size_t,TR::Internal::PersistentNewType);TR;OrderedBlockList;0;0
;ListBase;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator new(size_t,TR::Region &);;List;0;0
;List;operator new(size_t,TR::Region &);TR;OrderedBlockList;0;0
;ListBase;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);;List;0;0
;List;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0;0
;ListBase;operator new[](size_t,TR::Region &);;List;0;0
;List;operator new[](size_t,TR::Region &);TR;OrderedBlockList;0;0
;ListBase;operator new[](size_t,TR::Internal::PersistentNewType);;List;0;0
;List;operator new[](size_t,TR::Internal::PersistentNewType);TR;OrderedBlockList;0;0
;ListBase;operator new[](size_t,class TR_PersistentMemory *);;List;0;0
;List;operator new[](size_t,class TR_PersistentMemory *);TR;OrderedBlockList;0;0
;ListBase;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0;0
;List;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0;0
;ListBase;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);;List;0;0
;List;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0;0
OMR;RecognizedCallTransformer;RecognizedCallTransformer(TR::OptimizationManager *);TR;RecognizedCallTransformer;0;0
OMR;Optimization;optDetailString();OMR;RecognizedCallTransformer;0;1
OMR;Optimization;perform();OMR;RecognizedCallTransformer;0;1
OMR;RecognizedCallTransformer;~RecognizedCallTransformer();TR;RecognizedCallTransformer;1;1
TR;HedgeTreeHandler;allocate(int32_t);OMR::ValuePropagation;ValueConstraintHandler;0;1
TR;HedgeTreeHandler;comp();OMR::ValuePropagation;ValueConstraintHandler;0;0
OMR;Optimization;optDetailString();TR;ArraycopyTransformation;0;1
OMR;Optimization;perform();TR;ArraycopyTransformation;0;1
OMR;ValuePropagation;ValuePropagation(TR::OptimizationManager *);TR;ValuePropagation;0;0
OMR;Optimization;optDetailString();TR;GlobalValuePropagation;0;1
OMR;Optimization;perform();TR;GlobalValuePropagation;0;1
OMR;ValuePropagation;~ValuePropagation();TR;ValuePropagation;1;1
OMR;Optimization;optDetailString();TR;LocalValuePropagation;0;1
OMR;Optimization;perform();TR;LocalValuePropagation;0;1
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalValuePropagation;0;1
OMR;Optimization;postPerformOnBlocks();TR;LocalValuePropagation;0;1
OMR;Optimization;prePerformOnBlocks();TR;LocalValuePropagation;0;1
OMR;Optimization;optDetailString();TR;RegDepCopyRemoval;0;1
OMR;Optimization;perform();TR;RegDepCopyRemoval;0;1
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ExceptionCheckMotion;0;1
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ExceptionCheckMotion;0;1
TR;DataFlowAnalysis;asExceptionCheckMotion();TR;ExceptionCheckMotion;0;1
TR;DataFlowAnalysis;getKind();TR;ExceptionCheckMotion;0;1
TR;DataFlowAnalysis;perform();TR;ExceptionCheckMotion;0;1
TR;DataFlowAnalysis;trace();TR;ExceptionCheckMotion;0;0
OMR;Optimization;optDetailString();TR;GeneralSinkStores;0;1
OMR;Optimization;perform();TR;GeneralSinkStores;0;1
TR;SinkStores;sinkStorePlacement(class TR_MovableStore *,_Bool);TR;GeneralSinkStores;0;1
TR;SinkStores;storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);TR;GeneralSinkStores;0;1
OMR;Optimization;optDetailString();TR;IndexExprManipulator;0;1
OMR;Optimization;perform();TR;IndexExprManipulator;0;1
OMR;Optimization;optDetailString();TR;InnerPreexistence;0;1
OMR;Optimization;perform();TR;InnerPreexistence;0;1
OMR;Optimization;optDetailString();TR;OSRDefAnalysis;0;1
OMR;Optimization;perform();TR;OSRDefAnalysis;0;1
TR;UseDefInfo;performAnalysis(class TR_UseDefInfo::AuxiliaryData &);TR;OSRDefInfo;0;1
TR;UseDefInfo;processReachingDefinition(void *,class TR_UseDefInfo::AuxiliaryData &);TR;OSRDefInfo;0;1
OMR;Optimization;optDetailString();TR;OSRExceptionEdgeRemoval;0;1
OMR;Optimization;perform();TR;OSRExceptionEdgeRemoval;0;1
OMR;Optimization;optDetailString();TR;OSRLiveRangeAnalysis;0;1
OMR;Optimization;perform();TR;OSRLiveRangeAnalysis;0;1
OMR;Optimization;optDetailString();TR;PartialRedundancy;0;1
OMR;Optimization;perform();TR;PartialRedundancy;0;1
OMR;Optimization;optDetailString();TR;PrefetchInsertion;0;1
TR;LoopTransformer;perform();TR;PrefetchInsertion;0;1
OMR;Optimization;optDetailString();TR;RedundantAsyncCheckRemoval;0;1
OMR;Optimization;perform();TR;RedundantAsyncCheckRemoval;0;1
OMR;Optimization;shouldPerform();TR;RedundantAsyncCheckRemoval;0;1
TR;ForwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;RedundantExpressionAdjustment;0;1
TR;DataFlowAnalysis;asRedundantExpressionAdjustment();TR;RedundantExpressionAdjustment;0;1
TR;IntersectionDFSetAnalysis;getKind();TR;RedundantExpressionAdjustment;0;1
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RedundantExpressionAdjustment;0;1
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;RedundantExpressionAdjustment;0;1
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RedundantExpressionAdjustment;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;RedundantExpressionAdjustment;0;1
TR;BasicDFSetAnalysis;supportsGenAndKillSetsForStructures();TR;RedundantExpressionAdjustment;0;1
OMR;Optimization;optDetailString();TR;ShrinkWrap;0;1
OMR;Optimization;perform();TR;ShrinkWrap;0;1
OMR;Optimization;prePerformOnBlocks();TR;ShrinkWrap;0;1
OMR;Optimization;optDetailString();TR;StripMiner;0;1
TR;LoopTransformer;perform();TR;StripMiner;0;1
OMR;Optimization;shouldPerform();TR;StripMiner;0;1
OMR;Optimization;optDetailString();TR;TrivialSinkStores;0;1
OMR;Optimization;perform();TR;TrivialSinkStores;0;1
TR;SinkStores;sinkStorePlacement(class TR_MovableStore *,_Bool);TR;TrivialSinkStores;0;1
TR;SinkStores;storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);TR;TrivialSinkStores;0;1
OMR;Optimization;optDetailString();TR;VirtualGuardHeadMerger;0;1
OMR;Optimization;perform();TR;VirtualGuardHeadMerger;0;1
OMR;Optimization;optDetailString();TR;VirtualGuardTailSplitter;0;1
OMR;Optimization;perform();TR;VirtualGuardTailSplitter;0;1
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanReachGivenBlocks;0;1
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;BackwardReachability;0;1
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanBeReachedFromCatchBlock;0;1
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;ForwardReachability;0;1
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanBeReachedWithoutExceptionEdges;0;1
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;ForwardReachabilityWithoutExceptionEdges;0;1
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanReachNonColdBlocks;0;1
TR;UnionDFSetAnalysis;TR_UnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;UnionDFSetAnalysis;0;0
TR;UnionDFSetAnalysis;getKind();TR;UnionDFSetAnalysis;0;1
TR;UnionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;UnionDFSetAnalysis;0;1
TR;UnionDFSetAnalysis;initializeInSetInfo();TR;UnionDFSetAnalysis;0;1
TR;UnionDFSetAnalysis;~TR_UnionDFSetAnalysis();TR;UnionDFSetAnalysis;1;1
TR;VPConstraint;getClass();TR;VPClass;0;1
TR;VPConstraint;isClassObject();TR;VPClass;0;1
TR;VPConstraint;isConstString();TR;VPClass;0;1
TR;VPConstraint;getClass();TR;VPResolvedClass;0;1
TR;VPConstraint;isClassObject();TR;VPClassType;0;1
TR;VPConstraint;isConstString();TR;VPConstString;0;1
TR;VPConstraint;isClassObject();TR;VPObjectLocation;0;1
TR;Stats;report(FILE *);TR;StatsHisto;0;0
TR;Stats;reset();TR;StatsHisto;0;0
TR;Stats;update(double);TR;StatsHisto;0;0
TR;Stats;mean();TR;StatsInterval;0;0
TR;Stats;report(FILE *);TR;StatsInterval;0;0
TR;Stats;stddev();TR;StatsInterval;0;0
OMR;AheadOfTimeCompile;AheadOfTimeCompile(uint32_t *,TR::Compilation *);TR;AheadOfTimeCompile;0;0
OMR;AheadOfTimeCompile;~AheadOfTimeCompile();TR;AheadOfTimeCompile;1;0
OMR;UnresolvedDataSnippet;UnresolvedDataSnippet(TR::CodeGenerator *,TR::Node *,TR::SymbolReference *,_Bool,_Bool);TR;UnresolvedDataSnippet;0;0
OMR;Snippet;emitSnippetBody();OMR;UnresolvedDataSnippet;0;1
OMR;Snippet;getLength(int32_t);OMR;UnresolvedDataSnippet;0;1
OMR;Snippet;self();OMR;UnresolvedDataSnippet;0;0
OMR;UnresolvedDataSnippet;~UnresolvedDataSnippet();TR;UnresolvedDataSnippet;1;0
OMR;Instruction;defsRegister(TR::Register *);OMR::Z;Instruction;0;0
OMR::Z;Instruction;description();TR;S390AnnotationInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390AnnotationInstruction;0;1
OMR;Instruction;refsRegister(TR::Register *);OMR::Z;Instruction;0;0
OMR::Z;Instruction;assignRegistersAndDependencies(enum TR_RegisterKinds);TR;S390BranchInstruction;0;1
OMR::Z;Instruction;description();TR;S390LabeledInstruction;0;1
TR;S390LabeledInstruction;description();TR;S390BranchInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390LabeledInstruction;0;1
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390BranchInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390LabeledInstruction;0;1
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390BranchInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390LabeledInstruction;0;1
TR;S390LabeledInstruction;getKind();TR;S390BranchInstruction;0;1
OMR;Instruction;getLabelSymbol();TR;S390LabeledInstruction;0;0
OMR;Instruction;getSnippetForGC();TR;S390BranchInstruction;0;1
TR;S390LabeledInstruction;description();TR;S390BranchOnCountInstruction;0;1
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390BranchOnCountInstruction;0;1
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390BranchOnCountInstruction;0;1
TR;S390LabeledInstruction;getKind();TR;S390BranchOnCountInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390BranchOnCountInstruction;0;0
TR;S390LabeledInstruction;description();TR;S390BranchOnIndexInstruction;0;1
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390BranchOnIndexInstruction;0;1
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390BranchOnIndexInstruction;0;1
TR;S390LabeledInstruction;getKind();TR;S390BranchOnIndexInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390BranchOnIndexInstruction;0;0
OMR::Z;Instruction;description();TR;S390PseudoInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390PseudoInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390PseudoInstruction;0;1
TR;S390PseudoInstruction;generateBinaryEncoding();TR;S390DebugCounterBumpInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390PseudoInstruction;0;1
OMR::Z;Instruction;description();TR;S390EInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390EInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390EInstruction;0;1
OMR::Z;Instruction;description();TR;S390IEInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390IEInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390IEInstruction;0;1
OMR::Z;Instruction;description();TR;S390IInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390IInstruction;0;1
OMR::Z;Instruction;description();TR;S390Imm2Instruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390Imm2Instruction;0;1
OMR::Z;Instruction;getKind();TR;S390Imm2Instruction;0;1
OMR::Z;Instruction;description();TR;S390ImmInstruction;0;1
TR;S390ImmInstruction;description();TR;S390ImmSnippetInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390ImmInstruction;0;1
TR;S390ImmInstruction;generateBinaryEncoding();TR;S390ImmSnippetInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390ImmInstruction;0;1
TR;S390ImmInstruction;getKind();TR;S390ImmSnippetInstruction;0;1
OMR::Z;Instruction;getS390ImmInstruction();TR;S390ImmInstruction;0;1
TR;S390ImmInstruction;description();TR;S390ImmSymInstruction;0;1
TR;S390ImmInstruction;generateBinaryEncoding();TR;S390ImmSymInstruction;0;1
TR;S390ImmInstruction;getKind();TR;S390ImmSymInstruction;0;1
OMR::Z;Instruction;assignRegistersAndDependencies(enum TR_RegisterKinds);TR;S390LabelInstruction;0;1
TR;S390LabeledInstruction;description();TR;S390LabelInstruction;0;1
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390LabelInstruction;0;1
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390LabelInstruction;0;1
TR;S390LabeledInstruction;getKind();TR;S390LabelInstruction;0;1
OMR::Z;Instruction;description();TR;S390MIIInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390MIIInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390MIIInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390MIIInstruction;0;1
OMR;Instruction;getLabelSymbol();TR;S390MIIInstruction;0;0
OMR::Z;Instruction;description();TR;S390MemInstruction;0;1
TR;S390MemInstruction;description();TR;S390MemMemInstruction;0;1
TR;S390MemMemInstruction;description();TR;S390SS1Instruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390MemMemInstruction;0;1
TR;S390MemMemInstruction;estimateBinaryLength(int32_t);TR;S390SS1Instruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390MemInstruction;0;1
TR;S390MemInstruction;generateBinaryEncoding();TR;S390MemMemInstruction;0;1
TR;S390MemMemInstruction;generateBinaryEncoding();TR;S390SS1Instruction;0;1
OMR::Z;Instruction;getKind();TR;S390MemInstruction;0;1
TR;S390MemInstruction;getKind();TR;S390MemMemInstruction;0;1
TR;S390MemMemInstruction;getKind();TR;S390SS1Instruction;0;1
OMR::Z;Instruction;getMemoryReference();TR;S390MemInstruction;0;1
OMR::Z;Instruction;getMemoryReference2();TR;S390MemMemInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390MemInstruction;0;0
OMR::Z;Instruction;description();TR;S390NOPInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390NOPInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390NOPInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390NOPInstruction;0;1
OMR::Z;Instruction;description();TR;S390OpCodeOnlyInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390OpCodeOnlyInstruction;0;1
OMR::Z;Instruction;description();TR;S390RegInstruction;0;1
TR;S390RegInstruction;description();TR;S390RIEInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RIEInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390RegInstruction;0;1
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RIEInstruction;0;1
TR;S390RegInstruction;getBranchCondition();TR;S390RIEInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390RegInstruction;0;1
TR;S390RegInstruction;getKind();TR;S390RIEInstruction;0;1
OMR;Instruction;getLabelSymbol();TR;S390RIEInstruction;0;0
TR;S390RegInstruction;getMask();TR;S390RIEInstruction;0;0
OMR;Instruction;getSnippetForGC();TR;S390RIEInstruction;0;1
OMR::Z;Instruction;isRegInstruction();TR;S390RegInstruction;0;1
OMR::Z;Instruction;matchesTargetRegister(TR::Register *);TR;S390RegInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390RegInstruction;0;0
TR;S390RegInstruction;setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR;S390RIEInstruction;0;0
TR;S390RegInstruction;description();TR;S390RIInstruction;0;1
TR;S390RIInstruction;description();TR;S390RISInstruction;0;1
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RIInstruction;0;1
TR;S390RIInstruction;generateBinaryEncoding();TR;S390RISInstruction;0;1
TR;S390RegInstruction;getBranchCondition();TR;S390RISInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RIInstruction;0;1
TR;S390RIInstruction;getKind();TR;S390RISInstruction;0;1
TR;S390RegInstruction;getMask();TR;S390RISInstruction;0;0
TR;S390RegInstruction;setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR;S390RISInstruction;0;0
OMR::Z;Instruction;description();TR;S390RILInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RILInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390RILInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390RILInstruction;0;1
OMR::Z;Instruction;matchesTargetRegister(TR::Register *);TR;S390RILInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390RILInstruction;0;0
TR;S390RegInstruction;description();TR;S390RRInstruction;0;1
TR;S390RRInstruction;description();TR;S390RREInstruction;0;1
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RRInstruction;0;1
TR;S390RegInstruction;getKind();TR;S390RRInstruction;0;1
TR;S390RRInstruction;getKind();TR;S390RREInstruction;0;1
TR;S390RegInstruction;refsRegister(TR::Register *);TR;S390RRInstruction;0;0
TR;S390RRInstruction;description();TR;S390RRFInstruction;0;1
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RRFInstruction;0;1
TR;S390RRInstruction;getKind();TR;S390RRFInstruction;0;1
TR;S390RegInstruction;getMask();TR;S390RRFInstruction;0;0
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RRFInstruction;0;0
TR;S390RRInstruction;description();TR;S390RRRInstruction;0;1
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RRRInstruction;0;1
TR;S390RRInstruction;getKind();TR;S390RRRInstruction;0;1
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RRRInstruction;0;0
TR;S390RRInstruction;description();TR;S390RRSInstruction;0;1
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RRSInstruction;0;1
TR;S390RegInstruction;getBranchCondition();TR;S390RRSInstruction;0;0
TR;S390RRInstruction;getKind();TR;S390RRSInstruction;0;1
TR;S390RegInstruction;getMask();TR;S390RRSInstruction;0;0
TR;S390RegInstruction;setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR;S390RRSInstruction;0;0
TR;S390RegInstruction;description();TR;S390RSInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RSInstruction;0;1
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RSInstruction;0;1
TR;S390RegInstruction;getFirstRegister();TR;S390RSInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RSInstruction;0;1
TR;S390RegInstruction;getLastRegister();TR;S390RSInstruction;0;0
OMR::Z;Instruction;getMemoryReference();TR;S390RSInstruction;0;1
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390RSInstruction;0;1
OMR::Z;Instruction;swap_operands(int,int);TR;S390RSWithImplicitPairStoresInstruction;0;0
TR;S390MemInstruction;description();TR;S390RSLInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RSLInstruction;0;1
TR;S390MemInstruction;generateBinaryEncoding();TR;S390RSLInstruction;0;1
TR;S390MemInstruction;getKind();TR;S390RSLInstruction;0;1
TR;S390RegInstruction;description();TR;S390RSLbInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RSLbInstruction;0;1
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RSLbInstruction;0;1
TR;S390RegInstruction;getKind();TR;S390RSLbInstruction;0;1
TR;S390RegInstruction;getMask();TR;S390RSLbInstruction;0;0
OMR::Z;Instruction;getMemoryReference();TR;S390RSLbInstruction;0;1
TR;S390RSInstruction;description();TR;S390RSYInstruction;0;1
TR;S390RSInstruction;getKind();TR;S390RSYInstruction;0;1
TR;S390RegInstruction;description();TR;S390RXInstruction;0;1
TR;S390RXInstruction;description();TR;S390RXEInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RXInstruction;0;1
TR;S390RXInstruction;estimateBinaryLength(int32_t);TR;S390RXEInstruction;0;1
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RXInstruction;0;1
TR;S390RXInstruction;generateBinaryEncoding();TR;S390RXEInstruction;0;1
TR;S390RegInstruction;getKind();TR;S390RXInstruction;0;1
TR;S390RXInstruction;getKind();TR;S390RXEInstruction;0;1
OMR::Z;Instruction;getMemoryReference();TR;S390RXInstruction;0;1
TR;S390RegInstruction;refsRegister(TR::Register *);TR;S390RXInstruction;0;0
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390RXInstruction;0;1
TR;S390RRInstruction;description();TR;S390RXFInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RXFInstruction;0;1
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RXFInstruction;0;1
TR;S390RRInstruction;getKind();TR;S390RXFInstruction;0;1
OMR::Z;Instruction;getMemoryReference();TR;S390RXFInstruction;0;1
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RXFInstruction;0;0
TR;S390RXInstruction;description();TR;S390RXYInstruction;0;1
TR;S390RXInstruction;estimateBinaryLength(int32_t);TR;S390RXYInstruction;0;1
TR;S390RXInstruction;generateBinaryEncoding();TR;S390RXYInstruction;0;1
TR;S390RXInstruction;getKind();TR;S390RXYInstruction;0;1
TR;S390MemInstruction;description();TR;S390RXYbInstruction;0;1
TR;S390MemInstruction;getKind();TR;S390RXYbInstruction;0;1
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390RXYbInstruction;0;1
TR;S390MemInstruction;description();TR;S390SIInstruction;0;1
TR;S390SIInstruction;description();TR;S390SIYInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SIInstruction;0;1
TR;S390SIInstruction;estimateBinaryLength(int32_t);TR;S390SIYInstruction;0;1
TR;S390MemInstruction;generateBinaryEncoding();TR;S390SIInstruction;0;1
TR;S390SIInstruction;generateBinaryEncoding();TR;S390SIYInstruction;0;1
TR;S390MemInstruction;getKind();TR;S390SIInstruction;0;1
TR;S390SIInstruction;getKind();TR;S390SIYInstruction;0;1
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390SIInstruction;0;1
TR;S390MemInstruction;description();TR;S390SILInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SILInstruction;0;1
TR;S390MemInstruction;generateBinaryEncoding();TR;S390SILInstruction;0;1
TR;S390MemInstruction;getKind();TR;S390SILInstruction;0;1
TR;S390MemInstruction;description();TR;S390SInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SInstruction;0;1
TR;S390MemInstruction;generateBinaryEncoding();TR;S390SInstruction;0;1
TR;S390MemInstruction;getKind();TR;S390SInstruction;0;1
OMR::Z;Instruction;description();TR;S390SMIInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SMIInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390SMIInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390SMIInstruction;0;1
OMR;Instruction;getLabelSymbol();TR;S390SMIInstruction;0;0
OMR::Z;Instruction;getMemoryReference();TR;S390SMIInstruction;0;1
TR;S390SS1Instruction;description();TR;S390SS2Instruction;0;1
TR;S390SS1Instruction;generateBinaryEncoding();TR;S390SS2Instruction;0;1
TR;S390SS1Instruction;getKind();TR;S390SS2Instruction;0;1
TR;S390SS1Instruction;description();TR;S390SS4Instruction;0;1
TR;S390SS1Instruction;generateBinaryEncoding();TR;S390SS4Instruction;0;1
TR;S390SS1Instruction;getKind();TR;S390SS4Instruction;0;1
TR;S390MemMemInstruction;description();TR;S390SSEInstruction;0;1
TR;S390MemMemInstruction;getKind();TR;S390SSEInstruction;0;1
TR;S390RXInstruction;description();TR;S390SSFInstruction;0;1
TR;S390RXInstruction;estimateBinaryLength(int32_t);TR;S390SSFInstruction;0;1
TR;S390RXInstruction;generateBinaryEncoding();TR;S390SSFInstruction;0;1
TR;S390RXInstruction;getKind();TR;S390SSFInstruction;0;1
OMR::Z;Instruction;getMemoryReference2();TR;S390SSFInstruction;0;1
TR;S390RXInstruction;refsRegister(TR::Register *);TR;S390SSFInstruction;0;0
OMR::Z;Instruction;description();TR;S390TranslateInstruction;0;1
OMR::Z;Instruction;generateBinaryEncoding();TR;S390TranslateInstruction;0;1
OMR::Z;Instruction;getKind();TR;S390TranslateInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390TranslateInstruction;0;0
TR;S390RegInstruction;description();TR;S390VInstruction;0;1
TR;S390VInstruction;description();TR;S390VRIInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIaInstruction;0;1
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390VInstruction;0;1
TR;S390RegInstruction;generateBinaryEncoding();TR;S390VInstruction;0;1
TR;S390VInstruction;generateBinaryEncoding();TR;S390VRIInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIaInstruction;0;1
TR;S390VInstruction;getExtendedMnemonicName();TR;S390VRIInstruction;0;1
TR;S390RegInstruction;getKind();TR;S390VInstruction;0;1
TR;S390VInstruction;getKind();TR;S390VRIInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIaInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIbInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIbInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIbInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIcInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIcInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIcInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIdInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIdInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIdInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIeInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIeInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIeInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIfInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIfInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIfInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIgInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIgInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIgInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIhInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIhInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIhInstruction;0;1
TR;S390VRIInstruction;description();TR;S390VRIiInstruction;0;1
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIiInstruction;0;1
TR;S390VRIInstruction;getKind();TR;S390VRIiInstruction;0;1
TR;S390VInstruction;description();TR;S390VRRInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRaInstruction;0;1
TR;S390VInstruction;generateBinaryEncoding();TR;S390VRRInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRaInstruction;0;1
TR;S390VInstruction;getExtendedMnemonicName();TR;S390VRRInstruction;0;1
TR;S390VInstruction;getKind();TR;S390VRRInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRaInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRbInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRbInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRbInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRcInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRcInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRcInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRdInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRdInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRdInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRReInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRReInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRReInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRfInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRfInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRfInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRgInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRgInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRgInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRhInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRhInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRhInstruction;0;1
TR;S390VRRInstruction;description();TR;S390VRRiInstruction;0;1
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRiInstruction;0;1
TR;S390VRRInstruction;getKind();TR;S390VRRiInstruction;0;1
TR;S390RegInstruction;getFirstRegister();TR;S390VRSInstruction;0;0
TR;S390RegInstruction;getLastRegister();TR;S390VRSInstruction;0;0
TR;S390VInstruction;description();TR;S390VStorageInstruction;0;1
TR;S390VStorageInstruction;description();TR;S390VRSaInstruction;0;1
TR;S390VInstruction;estimateBinaryLength(int32_t);TR;S390VStorageInstruction;0;1
TR;S390VInstruction;generateBinaryEncoding();TR;S390VStorageInstruction;0;1
TR;S390VInstruction;getExtendedMnemonicName();TR;S390VStorageInstruction;0;1
TR;S390VInstruction;getKind();TR;S390VStorageInstruction;0;1
TR;S390VStorageInstruction;getKind();TR;S390VRSaInstruction;0;1
OMR::Z;Instruction;getMemoryReference();TR;S390VStorageInstruction;0;1
TR;S390VStorageInstruction;description();TR;S390VRSbInstruction;0;1
TR;S390VStorageInstruction;getKind();TR;S390VRSbInstruction;0;1
TR;S390VStorageInstruction;description();TR;S390VRScInstruction;0;1
TR;S390VStorageInstruction;getKind();TR;S390VRScInstruction;0;1
TR;S390VStorageInstruction;description();TR;S390VRSdInstruction;0;1
TR;S390VStorageInstruction;generateBinaryEncoding();TR;S390VRSdInstruction;0;1
TR;S390VStorageInstruction;getKind();TR;S390VRSdInstruction;0;1
TR;S390VStorageInstruction;generateBinaryEncoding();TR;S390VRVInstruction;0;1
TR;S390VStorageInstruction;getKind();TR;S390VRVInstruction;0;1
TR;S390VStorageInstruction;getKind();TR;S390VRXInstruction;0;1
TR;S390VStorageInstruction;description();TR;S390VSIInstruction;0;1
TR;S390VStorageInstruction;generateBinaryEncoding();TR;S390VSIInstruction;0;1
TR;S390VStorageInstruction;getKind();TR;S390VSIInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390BranchOnCountInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390BranchOnIndexInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390MemInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390RegInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390RILInstruction;0;1
TR;S390RegInstruction;refsRegister(TR::Register *);TR;S390RRInstruction;0;1
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RRFInstruction;0;1
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RRRInstruction;0;1
TR;S390RegInstruction;refsRegister(TR::Register *);TR;S390RXInstruction;0;1
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RXFInstruction;0;1
TR;S390RXInstruction;refsRegister(TR::Register *);TR;S390SSFInstruction;0;1
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390TranslateInstruction;0;1
OMR;Snippet;emitSnippetBody();TR;S390CallSnippet;0;1
OMR::Z;Snippet;getKind();TR;S390CallSnippet;0;1
OMR;Snippet;getLength(int32_t);TR;S390CallSnippet;0;1
OMR::Z;Snippet;isCallSnippet();TR;S390CallSnippet;0;1
OMR;Snippet;emitSnippetBody();TR;S390HelperCallSnippet;0;1
OMR::Z;Snippet;getKind();TR;S390HelperCallSnippet;0;1
OMR;Snippet;getLength(int32_t);TR;S390HelperCallSnippet;0;1
OMR;MemoryReference;~MemoryReference();OMR::Z;MemoryReference;1;0
;MemToMemMacroOp;generateDependencies();;BitOpMemConstLenMacroOp;0;1
;MemToMemMacroOp;generateLoop();;MemToMemConstLenMacroOp;0;1
;MemToMemMacroOp;generateRemainder();;MemToMemConstLenMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;BitOpMemVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;BitOpMemVarLenMacroOp;0;1
;MemToMemMacroOp;generateLoop();;MemToMemVarLenMacroOp;0;1
;MemToMemMacroOp;generateRemainder();;MemToMemVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelper();;BitOpMemVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelperSymRef();;BitOpMemVarLenMacroOp;0;1
;MemToMemMacroOp;getKind();;BitOpMemVarLenMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemClearConstLenMacroOp;0;1
;MemToMemConstLenMacroOp;generateInstruction(int32_t,int64_t,TR::Instruction *);;MemClearConstLenMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemClearVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemClearVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;generateRemainder();;MemClearVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelper();;MemClearVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelperSymRef();;MemClearVarLenMacroOp;0;1
;MemToMemMacroOp;getKind();;MemClearVarLenMacroOp;0;1
;MemToMemMacroOp;generate(TR::Register *,TR::Register *);;MemCmpConstLenMacroOp;0;1
;MemCmpConstLenMacroOp;generate(TR::Register *,TR::Register *);;MemCmpConstLenSignMacroOp;0;1
;MemCmpConstLenMacroOp;generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);;MemCmpConstLenSignMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemCmpConstLenMacroOp;0;1
;MemToMemConstLenMacroOp;generateInstruction(int32_t,int64_t,TR::Instruction *);;MemCmpConstLenMacroOp;0;1
;MemToMemMacroOp;generate(TR::Register *,TR::Register *);;MemCmpVarLenMacroOp;0;1
;MemCmpVarLenMacroOp;generate(TR::Register *,TR::Register *);;MemCmpVarLenSignMacroOp;0;1
;MemCmpVarLenMacroOp;generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);;MemCmpVarLenSignMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemCmpVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemCmpVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelper();;MemCmpVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelperSymRef();;MemCmpVarLenMacroOp;0;1
;MemToMemMacroOp;getKind();;MemCmpVarLenMacroOp;0;1
;MemCmpVarLenMacroOp;getKind();;MemCmpVarLenSignMacroOp;0;1
;MemToMemTypedMacroOp;createLoopDependencies(TR::Instruction *);;MemCpyAtomicMacroOp;0;1
;MemToMemTypedVarLenMacroOp;generateInstruction();;MemCpyAtomicMacroOp;0;1
;MemToMemTypedMacroOp;generateLoop();;MemToMemTypedVarLenMacroOp;0;1
;MemToMemTypedVarLenMacroOp;generateLoop();;MemCpyAtomicMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemCpyConstLenMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemCpyVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemCpyVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelper();;MemCpyVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelperSymRef();;MemCpyVarLenMacroOp;0;1
;MemToMemMacroOp;getKind();;MemCpyVarLenMacroOp;0;1
;MemToMemTypedMacroOp;createLoopDependencies(TR::Instruction *);;MemCpyVarLenTypedMacroOp;0;1
;MemToMemTypedVarLenMacroOp;generateInstruction();;MemCpyVarLenTypedMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemInitConstLenMacroOp;0;1
;MemToMemConstLenMacroOp;generateInstruction(int32_t,int64_t,TR::Instruction *);;MemInitConstLenMacroOp;0;1
;MemToMemConstLenMacroOp;generateLoop();;MemInitConstLenMacroOp;0;1
;MemToMemConstLenMacroOp;generateRemainder();;MemInitConstLenMacroOp;0;1
;MemToMemMacroOp;generateDependencies();;MemInitVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemInitVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;generateRemainder();;MemInitVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelper();;MemInitVarLenMacroOp;0;1
;MemToMemVarLenMacroOp;getHelperSymRef();;MemInitVarLenMacroOp;0;1
;MemToMemMacroOp;getKind();;MemInitVarLenMacroOp;0;1
;MemToMemTypedMacroOp;createLoopDependencies(TR::Instruction *);;MemInitVarLenTypedMacroOp;0;1
;MemToMemTypedVarLenMacroOp;generateInstruction();;MemInitVarLenTypedMacroOp;0;1
OMR::Z;Linkage;buildDirectDispatch(TR::Node *);TR;S390SystemLinkage;0;1
OMR::Z;Linkage;buildIndirectDispatch(TR::Node *);TR;S390SystemLinkage;0;1
TR;S390SystemLinkage;callNativeFunction(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zLinuxSystemLinkage;0;1
OMR::Z;Linkage;canDataTypeBePassedByReference(TR::DataType);TR;S390zLinuxSystemLinkage;0;1
TR;S390SystemLinkage;checkLeafRoutine(int32_t,TR::Instruction **);TR;S390zLinuxSystemLinkage;0;1
OMR::Z;Linkage;createEpilogue(TR::Instruction *);TR;S390SystemLinkage;0;1
OMR::Z;Linkage;createPrologue(TR::Instruction *);TR;S390SystemLinkage;0;1
TR;S390SystemLinkage;generateInstructionsForCall(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zLinuxSystemLinkage;0;1
OMR::Z;Linkage;getNormalStackPointerRealRegister();TR;S390SystemLinkage;0;1
OMR::Z;Linkage;getNormalStackPointerRegister();TR;S390SystemLinkage;0;1
TR;S390SystemLinkage;getRegisterSaveOffset(TR::class RealRegister::RegNum);TR;S390zLinuxSystemLinkage;0;1
OMR::Z;Linkage;hasToBeOnStack(TR::ParameterSymbol *);TR;S390SystemLinkage;0;1
TR;S390SystemLinkage;initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);TR;S390zLinuxSystemLinkage;0;1
OMR::Z;Linkage;initS390RealRegisterLinkage();TR;S390SystemLinkage;0;1
OMR::Z;Linkage;isSymbolPassedByReference(TR::Symbol *);TR;S390zLinuxSystemLinkage;0;1
OMR::Z;Linkage;mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);TR;S390SystemLinkage;0;1
OMR::Z;Linkage;mapStack(TR::ResolvedMethodSymbol *);TR;S390SystemLinkage;0;1
OMR;Linkage;self();TR;S390SystemLinkage;0;0
TR;S390SystemLinkage;callNativeFunction(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zOSSystemLinkage;0;1
TR;S390SystemLinkage;generateInstructionsForCall(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;getCAAPointerRegister();TR::Z;ZOSBaseSystemLinkage;0;1
OMR::Z;Linkage;getEnvironmentPointerRegister();TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;getFrameType();TR;S390zOSSystemLinkage;0;0
OMR::Z;Linkage;getIsLeafRoutine();TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;getOutgoingParameterBlockSize();TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;getParentDSAPointerRegister();TR::Z;ZOSBaseSystemLinkage;0;1
TR;S390SystemLinkage;getRegisterSaveOffset(TR::class RealRegister::RegNum);TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;isAggregateReturnedInIntRegisters(int32_t);TR::Z;ZOSBaseSystemLinkage;0;1
TR::Z;ZOSBaseSystemLinkage;isAggregateReturnedInIntRegisters(int32_t);TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;isAggregateReturnedInIntRegistersAndMemory(int32_t);TR::Z;ZOSBaseSystemLinkage;0;1
OMR::Z;Linkage;isCAASpecialArgumentRegister(int8_t);TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;isEnvironmentSpecialArgumentRegister(int8_t);TR;S390zOSSystemLinkage;0;1
OMR::Z;Linkage;isParentDSASpecialArgumentRegister(int8_t);TR;S390zOSSystemLinkage;0;1
OMR;Linkage;isSpecialNonVolatileArgumentRegister(int8_t);TR;S390zOSSystemLinkage;0;1
OMR;Snippet;emitSnippetBody();TR;S390RestoreGPR7Snippet;0;1
OMR::Z;Snippet;getKind();TR;S390RestoreGPR7Snippet;0;1
OMR;Snippet;getLength(int32_t);TR;S390RestoreGPR7Snippet;0;1
OMR::Z;Instruction;getKind();TR;S390AnnotationInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390LabeledInstruction;0;0
TR;S390LabeledInstruction;getKind();TR;S390BranchInstruction;0;0
TR;S390LabeledInstruction;getKind();TR;S390BranchOnCountInstruction;0;0
TR;S390LabeledInstruction;getKind();TR;S390BranchOnIndexInstruction;0;0
OMR::Z;Snippet;getKind();TR;S390CallSnippet;0;0
OMR::Z;Instruction;getKind();TR;S390PseudoInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390EInstruction;0;0
OMR::Z;Snippet;getKind();TR;S390HelperCallSnippet;0;0
OMR::Z;Instruction;getKind();TR;S390IEInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390IInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390Imm2Instruction;0;0
OMR::Z;Instruction;getKind();TR;S390ImmInstruction;0;0
TR;S390ImmInstruction;getKind();TR;S390ImmSnippetInstruction;0;0
TR;S390ImmInstruction;getKind();TR;S390ImmSymInstruction;0;0
TR;S390LabeledInstruction;getKind();TR;S390LabelInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390MIIInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390MemInstruction;0;0
TR;S390MemInstruction;getKind();TR;S390MemMemInstruction;0;0
TR;S390MemMemInstruction;getKind();TR;S390SS1Instruction;0;0
OMR::Z;Instruction;getKind();TR;S390NOPInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390OpCodeOnlyInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390RegInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RIEInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RIInstruction;0;0
TR;S390RIInstruction;getKind();TR;S390RISInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390RILInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RRInstruction;0;0
TR;S390RRInstruction;getKind();TR;S390RREInstruction;0;0
TR;S390RRInstruction;getKind();TR;S390RRFInstruction;0;0
TR;S390RRInstruction;getKind();TR;S390RRRInstruction;0;0
TR;S390RRInstruction;getKind();TR;S390RRSInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RSInstruction;0;0
TR;S390MemInstruction;getKind();TR;S390RSLInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RSLbInstruction;0;0
TR;S390RSInstruction;getKind();TR;S390RSYInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390RXInstruction;0;0
TR;S390RXInstruction;getKind();TR;S390RXEInstruction;0;0
TR;S390RRInstruction;getKind();TR;S390RXFInstruction;0;0
TR;S390RXInstruction;getKind();TR;S390RXYInstruction;0;0
TR;S390MemInstruction;getKind();TR;S390RXYbInstruction;0;0
TR;S390MemInstruction;getKind();TR;S390SIInstruction;0;0
TR;S390SIInstruction;getKind();TR;S390SIYInstruction;0;0
TR;S390MemInstruction;getKind();TR;S390SILInstruction;0;0
TR;S390MemInstruction;getKind();TR;S390SInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390SMIInstruction;0;0
TR;S390SS1Instruction;getKind();TR;S390SS2Instruction;0;0
TR;S390SS1Instruction;getKind();TR;S390SS4Instruction;0;0
TR;S390MemMemInstruction;getKind();TR;S390SSEInstruction;0;0
TR;S390RXInstruction;getKind();TR;S390SSFInstruction;0;0
OMR::Z;Instruction;getKind();TR;S390TranslateInstruction;0;0
TR;S390RegInstruction;getKind();TR;S390VInstruction;0;0
TR;S390VInstruction;getKind();TR;S390VRIInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIaInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIbInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIcInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIdInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIeInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIfInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIgInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIhInstruction;0;0
TR;S390VRIInstruction;getKind();TR;S390VRIiInstruction;0;0
TR;S390VInstruction;getKind();TR;S390VRRInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRaInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRbInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRcInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRdInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRReInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRfInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRgInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRhInstruction;0;0
TR;S390VRRInstruction;getKind();TR;S390VRRiInstruction;0;0
TR;S390VInstruction;getKind();TR;S390VStorageInstruction;0;0
TR;S390VStorageInstruction;getKind();TR;S390VRSaInstruction;0;0
TR;S390VStorageInstruction;getKind();TR;S390VRSbInstruction;0;0
TR;S390VStorageInstruction;getKind();TR;S390VRScInstruction;0;0
TR;S390VStorageInstruction;getKind();TR;S390VRSdInstruction;0;0
TR;S390VStorageInstruction;getKind();TR;S390VRVInstruction;0;0
TR;S390VStorageInstruction;getKind();TR;S390VRXInstruction;0;0
TR;S390VStorageInstruction;getKind();TR;S390VSIInstruction;0;0
OMR;Instruction;getLabelSymbol();TR;S390LabeledInstruction;0;1
OMR;Instruction;getLabelSymbol();TR;S390MIIInstruction;0;1
OMR;Instruction;getLabelSymbol();TR;S390RIEInstruction;0;1
OMR;Instruction;getLabelSymbol();TR;S390SMIInstruction;0;1
testing;Test;TestBody();;JITILBuilderTest_ControlFlowTest_Test;0;1
testing;Test;TestBody();;JITILBuilderTest_NestedControlFlowLoopTest_Test;0;1
testing;Test;TestBody();;JITTest_BuilderTest_Test;0;1
OMR;Environment;~Environment();TR;Environment;0;1
OMR;IlType;IlType(const char *);TR;IlType;0;0
OMR;IlType;IlType();TR;IlType;0;0
OMR;IlType;~IlType();TR;IlType;0;1
OMR;IlValue;IlValue(TR::Node *,TR::TreeTop *,TR::Block *,TR::MethodBuilder *);TR;IlValue;0;0
OMR;IlBuilder;AppendBuilder(TR::IlBuilder *);OMR;MethodBuilder;0;0
OMR;IlBuilder;IlBuilder(TR::IlBuilder *);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;IlBuilder(TR::IlBuilder *);TR;IlBuilder;0;0
OMR;IlBuilder;IlBuilder(TR::MethodBuilder *,TR::TypeDictionary *);TestCompiler;IlBuilder;0;0
OMR;IlInjector;IlInjector(TR::TypeDictionary *);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;IlInjector(TR::TypeDictionary *);TR;IlInjector;0;0
OMR;IlInjector;IlInjector(TR::IlInjector *);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;IlInjector(TR::IlInjector *);TR;IlInjector;0;0
TestCompiler;MethodBuilder;MethodBuilder(TR::TypeDictionary *);TR;MethodBuilder;0;0
OMR;IlInjector;asMethodBuilder();OMR;IlBuilder;0;1
OMR;IlBuilder;asMethodBuilder();OMR;MethodBuilder;0;1
OMR;IlInjector;block(int32_t);OMR;IlInjector;0;0
OMR;IlBuilder;buildIL();TestCompiler;AbsDiffIfThenElseMethod;0;1
OMR;IlBuilder;connectTrees();OMR;MethodBuilder;0;1
OMR;IlBuilder;countBlocks();OMR;MethodBuilder;0;1
TR;IlGenerator;currentByteCodeIndex();OMR;IlInjector;0;1
OMR;IlBuilder;defineSymbol(const char *,TR::SymbolReference *);OMR;MethodBuilder;0;0
TR;IlGenerator;genIL();OMR;IlInjector;0;1
TR;IlGenerator;getCurrentBlock();OMR;IlInjector;0;1
OMR;IlInjector;initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TestCompiler;IlInjector;0;1
OMR;IlInjector;injectIL();OMR;IlBuilder;0;1
OMR;IlBuilder;injectIL();OMR;MethodBuilder;0;1
OMR;IlInjector;isMethodBuilder();OMR;IlBuilder;0;1
OMR;IlBuilder;isMethodBuilder();OMR;MethodBuilder;0;1
OMR;IlInjector;jitPersistentAlloc(size_t);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;jitPersistentAlloc(size_t);OMR;IlBuilder;0;0
OMR;IlBuilder;jitPersistentAlloc(size_t);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;jitPersistentAlloc(size_t);OMR;MethodBuilder;0;0
OMR;MethodBuilder;jitPersistentAlloc(size_t);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;jitPersistentFree(void *);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;jitPersistentFree(void *);OMR;IlBuilder;0;0
OMR;IlBuilder;jitPersistentFree(void *);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;jitPersistentFree(void *);OMR;MethodBuilder;0;0
OMR;MethodBuilder;jitPersistentFree(void *);TestCompiler;MethodBuilder;0;0
OMR;IlBuilder;lookupSymbol(const char *);OMR;MethodBuilder;0;0
TR;IlGenerator;methodSymbol();OMR;IlInjector;0;1
OMR;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete(void *,size_t);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,size_t);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete(void *,size_t);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,size_t);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete(void *,size_t);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete(void *,TR::Region &);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete(void *,TR::Region &);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,TR::Region &);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete(void *,TR::Region &);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete[](void *,TR::Region &);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,TR::Region &);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete[](void *,TR::Region &);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new(size_t,TR::Region &);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new(size_t,TR::Region &);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,TR::Region &);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new(size_t,TR::Region &);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_PersistentMemory *);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new(size_t,class TR_PersistentMemory *);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,TR_ArenaAllocator *);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new(size_t,TR_ArenaAllocator *);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new[](size_t,TR::Region &);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Region &);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new[](size_t,TR::Region &);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;MethodBuilder;0;0
OMR;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);OMR;IlBuilder;0;0
OMR;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IlBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);OMR;MethodBuilder;0;0
OMR;MethodBuilder;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;MethodBuilder;0;0
OMR;IlBuilder;setupForBuildIL();OMR;MethodBuilder;0;1
OMR;IlInjector;typeDictionary();OMR;MethodBuilder;0;0
OMR;IlBuilder;~IlBuilder();TestCompiler;IlBuilder;0;1
TestCompiler;IlBuilder;~IlBuilder();TR;IlBuilder;0;1
OMR;IlInjector;~IlInjector();TestCompiler;IlInjector;0;1
TestCompiler;IlInjector;~IlInjector();TR;IlInjector;0;1
OMR;MethodBuilder;~MethodBuilder();TestCompiler;MethodBuilder;0;1
TestCompiler;MethodBuilder;~MethodBuilder();TR;MethodBuilder;0;1
OMR;TypeDictionary;TypeDictionary();TR;TypeDictionary;0;0
OMR;TypeDictionary;~TypeDictionary();TR;TypeDictionary;0;0
OMR;IlBuilder;buildIL();TestCompiler;BasicForLoopDownMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;BasicForLoopUpMethod;0;1
OMR;IlInjector;injectIL();TestCompiler;OpIlInjector;0;1
TestCompiler;OpIlInjector;injectIL();TestCompiler;BinaryOpIlInjector;0;1
TestCompiler;BinaryOpIlInjector;injectIL();TestCompiler;IndirectStoreIlInjector;0;1
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;jitPersistentFree(void *);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,size_t);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;OpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;BinaryOpIlInjector;0;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IndirectStoreIlInjector;0;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;BuilderTest;0;1
TestCompiler;TestDriver;invokeTests();TestCompiler;BuilderTest;0;1
TestCompiler;OpIlInjector;injectIL();TestCompiler;UnaryOpIlInjector;0;1
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;CallIlInjector;0;1
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;CallIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;UnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;CallIlInjector;0;0
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;ChildlessUnaryOpIlInjector;0;1
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;ChildlessUnaryOpIlInjector;0;0
TestCompiler;OpIlInjector;injectIL();TestCompiler;CmpBranchOpIlInjector;0;1
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;CmpBranchOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;CmpBranchOpIlInjector;0;0
OMR;IlBuilder;buildIL();TestCompiler;DoWhileFibonnaciMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;DoWhileIfThenElseMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithBreakAndContinueMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithBreakMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithContinueMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;ForLoopBreakAndContinueMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;ForLoopBreakMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;ForLoopContinueMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;ForLoopUPIfThenElseMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;IfThenElseLoopMethod;0;1
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;IndirectLoadIlInjector;0;1
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectLoadIlInjector;0;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IndirectLoadIlInjector;0;0
OMR;IlBuilder;buildIL();TestCompiler;IterativeFibonnaciMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;MaxIfThenMethod;0;1
TestCompiler;TestDriver;compileTestMethods();TestCompiler;OpCodesTest;0;1
TestCompiler;TestDriver;invokeTests();TestCompiler;OpCodesTest;0;1
OMR;IlBuilder;buildIL();TestCompiler;RecursiveFibonnaciMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;ShootoutNestedLoopMethod;0;1
TestCompiler;OpIlInjector;injectIL();TestCompiler;StoreOpIlInjector;0;1
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;StoreOpIlInjector;0;0
TestCompiler;OpIlInjector;injectIL();TestCompiler;TernaryOpIlInjector;0;1
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;TernaryOpIlInjector;0;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;TernaryOpIlInjector;0;0
OMR;IlBuilder;buildIL();TestCompiler;WhileDoFibonnaciMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;WhileDoIfThenElseMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithBreakAndContinueMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithBreakMethod;0;1
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithContinueMethod;0;1
testing;TestEventListener;OnEnvironmentsSetUpEnd(const class testing::UnitTest &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnEnvironmentsSetUpStart(const class testing::UnitTest &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnEnvironmentsTearDownEnd(const class testing::UnitTest &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnEnvironmentsTearDownStart(const class testing::UnitTest &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestCaseEnd(const class testing::TestCase &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestCaseStart(const class testing::TestCase &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestEnd(const class testing::TestInfo &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestIterationEnd(const class testing::UnitTest &,int);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestIterationStart(const class testing::UnitTest &,int);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestPartResult(const class testing::TestPartResult &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestProgramEnd(const class testing::UnitTest &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestProgramStart(const class testing::UnitTest &);testing;EmptyTestEventListener;0;1
testing;TestEventListener;OnTestStart(const class testing::TestInfo &);testing;EmptyTestEventListener;0;1
testing::internal;DeathTestFactory;Create(const char *,const class testing::internal::RE *,const char *,int,class testing::internal::DeathTest **);testing::internal;DefaultDeathTestFactory;0;0
testing;TestPartResultReporterInterface;ReportTestPartResult(const class testing::TestPartResult &);testing::internal;HasNewFatalFailureHelper;0;1
testing::internal;ParameterizedTestCaseInfoBase;GetTestCaseName();testing::internal;ParameterizedTestCaseInfo;0;1
testing::internal;ParameterizedTestCaseInfoBase;GetTestCaseTypeId();testing::internal;ParameterizedTestCaseInfo;0;1
testing::internal;ParameterizedTestCaseInfoBase;RegisterTests();testing::internal;ParameterizedTestCaseInfo;0;1
testing::internal;TestFactoryBase;CreateTest();testing::internal;ParameterizedTestFactory;0;1
testing::internal;TestFactoryBase;CreateTest();testing::internal;TestFactoryImpl;0;1
testing::internal::ThreadLocal;ValueHolderFactory;MakeNewHolder();testing::internal::ThreadLocal;DefaultValueHolderFactory;0;1
testing::internal::ThreadLocal;ValueHolderFactory;MakeNewHolder();testing::internal::ThreadLocal;InstanceValueHolderFactory;0;1
testing::internal;ThreadWithParamBase;Run();testing::internal;ThreadWithParam;0;1
OMR;IlInjector;injectIL();TestCompiler;BarIlInjector;0;1
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;BarIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;BarIlInjector;0;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;FooBarTest;0;1
TestCompiler;TestDriver;invokeTests();TestCompiler;FooBarTest;0;1
OMR;IlInjector;injectIL();TestCompiler;FooIlInjector;0;1
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;FooIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;FooIlInjector;0;0
TR;IlGenerator;getCurrentBlock();OMR;IlInjector;0;0
testing;Test;TestBody();TestCompiler;LimitFileTest_CheckVLogTest_Test;0;1
testing;Test;TestBody();TestCompiler;LimitFileTest_CreateVLogTest_Test;0;1
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileBoundTest_Test;0;1
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileRangeTest_Test;0;1
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileTest_Test;0;1
testing;Environment;SetUp();TestCompiler;OMRTestEnv;0;1
testing;Environment;TearDown();TestCompiler;OMRTestEnv;0;1
testing;Test;TestBody();TestCompiler;LogFileTest_CreateTFLogTest_Test;0;1
testing;Test;TestBody();TestCompiler;LogFileTest_EmptyTFLogTest_Test;0;1
testing;Test;TestBody();TestCompiler;LogFileTest_KeywordsLogTest_Test;0;1
testing;Test;TestBody();TestCompiler;OptionSetTest_UseOptionSets_Test;0;1
testing;Test;TestBody();TestCompiler;OptionSetTest_WithDefault_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_AddressTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_BitwiseTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_CompareTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_DISABLED_OpCodesTests_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_DISABLED_UnaryTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_IntegerArithmeticTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_MemoryOperationTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_TernaryTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_UnaryTest_Test;0;1
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_UnsupportedOpCodesTest_Test;0;1
TestCompiler;OpCodesTest;UnsupportedOpCodesTests();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;PPCOpCodesTest;0;1
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;PPCOpCodesTest;0;1
testing;Test;TestBody();;JITQuxTest_QuxTest2_Test;0;1
OMR;IlInjector;injectIL();TestCompiler;Qux2IlInjector;0;1
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;Qux2IlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;Qux2IlInjector;0;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;Qux2Test;0;1
TestCompiler;TestDriver;invokeTests();TestCompiler;Qux2Test;0;1
TestCompiler;TestDriver;compileTestMethods();TestCompiler;OptTestDriver;0;1
TestCompiler;TestDriver;invokeTests();TestCompiler;SimplifierFoldAndTest;0;1
testing;Test;TestBody();TestCompiler;SimplifierFoldAndTest_SimplifierFoldAndTest_Test;0;1
OMR;IlInjector;injectIL();TestCompiler;SimplifierFoldAndIlInjector;0;1
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;SimplifierFoldAndIlInjector;0;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0;0
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TestCompiler;SimplifierFoldAndIlVerifier;0;1
testing;Test;TestBody();;JITS390OpCodesTest_BitwiseTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_CompareTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390BitwiseTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390CompareTests_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390ConvertToAddressTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390DirectCallTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390IntegerArithmeticTests_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390MemoryOperationTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390TernaryTests_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390UnaryTests_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_DirectCallTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_FloatArithmeticTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_IntegerArithmeticTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_MemoryOperationTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_S390AddressTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_TernaryTest_Test;0;1
testing;Test;TestBody();;JITS390OpCodesTest_UnaryTest_Test;0;1
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;compileIntegerArithmeticTestMethods();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeIntegerArithmeticTests();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;S390OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;S390OpCodesTest;0;1
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TR;AllIlVerifier;0;1
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TR;NoCodegenVerifier;0;1
TestCompiler;OpCodesTest;UnsupportedOpCodesTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;compileIntegerArithmeticTestMethods();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeIntegerArithmeticTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeNoHelperUnaryTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;X86OpCodesTest;0;1
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;X86OpCodesTest;0;1
OMR;CodeCache;CodeCache();TR;CodeCache;0;0
OMR;CodeCacheConfig;CodeCacheConfig();TR;CodeCacheConfig;0;0
OMR;CodeCacheConfig;~CodeCacheConfig();TR;CodeCacheConfig;1;0
OMR;CodeCacheManager;CodeCacheManager(TR::RawAllocator);TestCompiler;CodeCacheManager;0;0
TestCompiler;CodeCacheManager;CodeCacheManager(TR::RawAllocator);TR;CodeCacheManager;0;0
OMR;CodeCacheManager;self();TestCompiler;CodeCacheManager;0;0
OMR;CodeCacheManager;~CodeCacheManager();TestCompiler;CodeCacheManager;1;0
TestCompiler;CodeCacheManager;~CodeCacheManager();TR;CodeCacheManager;1;0
TestCompiler;FrontEnd;FrontEnd();TR;FrontEnd;0;0
TR;FrontEnd;allocateCodeMemory(TR::Compilation *,uint32_t,uint32_t,uint8_t **,_Bool);TR;FEBase;0;1
TR;FrontEnd;allocateRelocationData(TR::Compilation *,uint32_t);TR;FEBase;0;1
TR;FrontEnd;createDebug(TR::Compilation *);TR;FECommon;0;1
TR;FrontEnd;createResolvedMethod(class TR_Memory *,class TR_OpaqueMethodBlock *,class TR_ResolvedMethod *,class TR_OpaqueClassBlock *);TestCompiler;FrontEnd;0;1
TR;FrontEnd;generateBinaryEncodingPrologue(struct TR_BinaryEncodingData *,TR::CodeGenerator *);TestCompiler;FrontEnd;0;1
TR;FrontEnd;getClassFromSignature(const char *,int32_t,class TR_OpaqueMethodBlock *,_Bool);TR;FECommon;0;1
TR;FrontEnd;getClassFromSignature(const char *,int32_t,class TR_ResolvedMethod *,_Bool);TR;FECommon;0;1
TR;FrontEnd;getDesignatedCodeCache(TR::Compilation *);TR;FEBase;0;1
TR;FrontEnd;getOffsetOfIndexableSizeField();TR;FECommon;0;1
TR;FrontEnd;getPersistentInfo();TR;FEBase;0;0
TR;FrontEnd;indexedTrampolineLookup(int32_t,void *);TR;FEBase;0;1
TR;FrontEnd;methodTrampolineLookup(TR::Compilation *,TR::SymbolReference *,void *);TestCompiler;FrontEnd;0;1
TR;FECommon;persistentMemory();TR;FEBase;0;1
TR;FrontEnd;reserveTrampolineIfNecessary(TR::Compilation *,TR::SymbolReference *,_Bool);TestCompiler;FrontEnd;0;1
TR;FrontEnd;resizeCodeMemory(TR::Compilation *,uint8_t *,uint32_t);TR;FEBase;0;1
TR;FrontEnd;sampleSignature(class TR_OpaqueMethodBlock *,char *,int32_t,class TR_Memory *);TR;FECommon;0;1
TestCompiler;FrontEnd;~FrontEnd();TR;FrontEnd;1;0
TR;CompilationStrategy;enableSwitchToProfiling();TR;DefaultCompilationStrategy;0;1
TR;CompilationStrategy;processEvent(class TR_MethodEvent *,_Bool *);TR;DefaultCompilationStrategy;0;1
TR;CompilationStrategy;shutdown();TR;DefaultCompilationStrategy;0;1
TR;SegmentProvider;bytesAllocated();OMR;SystemSegmentProvider;0;0
TR;SegmentAllocator;allocationLimit();TR;DebugSegmentProvider;0;1
TR;SegmentProvider;bytesAllocated();TR;DebugSegmentProvider;0;0
TR;SegmentAllocator;regionBytesAllocated();TR;DebugSegmentProvider;0;1
TR;SegmentProvider;release(TR::MemorySegment &);TR;DebugSegmentProvider;0;1
TR;SegmentProvider;request(size_t);TR;DebugSegmentProvider;0;1
TR;SegmentAllocator;setAllocationLimit(size_t);TR;DebugSegmentProvider;0;1
TR;SegmentAllocator;systemBytesAllocated();TR;DebugSegmentProvider;0;1
OMR;BytecodeBuilder;BytecodeBuilder(TR::MethodBuilder *,int32_t,char *);TR;BytecodeBuilder;0;0
OMR;IlBuilder;appendBlock(TR::Block *,_Bool);OMR;BytecodeBuilder;0;1
OMR;IlBuilder;connectTrees();OMR;BytecodeBuilder;0;1
OMR;IlBuilder;countBlocks();OMR;BytecodeBuilder;0;1
OMR;IlInjector;currentByteCodeIndex();OMR;BytecodeBuilder;0;1
TestCompiler;IlInjector;initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TR;BytecodeBuilder;0;1
OMR;IlBuilder;isBytecodeBuilder();OMR;BytecodeBuilder;0;1
OMR;IlBuilder;setHandlerInfo(uint32_t);OMR;BytecodeBuilder;0;1
OMR;BytecodeBuilder;~BytecodeBuilder();TR;BytecodeBuilder;1;1
TestCompiler;IlBuilder;jitPersistentAlloc(size_t);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;jitPersistentFree(void *);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,TR::Region &);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete(void *,size_t);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,TR::Region &);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,TR::Region &);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_PersistentMemory *);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,TR_ArenaAllocator *);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);OMR;BytecodeBuilder;0;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Region &);OMR;BytecodeBuilder;0;0
OMR;IlType;baseType();OMR;PointerType;0;1
OMR;IlType;getName();OMR;PointerType;0;0
OMR;IlType;getPrimitiveType();OMR;PointerType;0;1
OMR;IlType;getSize();OMR;PointerType;0;0
OMR;IlType;isPointer();OMR;PointerType;0;1
OMR;IlType;jitPersistentAlloc(size_t);OMR;PointerType;0;0
OMR;IlType;jitPersistentFree(void *);OMR;PointerType;0;0
OMR;IlType;operator delete(void *,size_t);OMR;PointerType;0;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;PointerType;0;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;PointerType;0;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;PointerType;0;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;PointerType;0;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;PointerType;0;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;PointerType;0;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;PointerType;0;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;PointerType;0;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;PointerType;0;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0;0
OMR;IlType;getPrimitiveType();OMR;PrimitiveType;0;1
OMR;IlType;getSignatureName();OMR;PrimitiveType;0;1
OMR;IlType;getSize();OMR;PrimitiveType;0;0
OMR;IlType;jitPersistentAlloc(size_t);OMR;PrimitiveType;0;0
OMR;IlType;jitPersistentFree(void *);OMR;PrimitiveType;0;0
OMR;IlType;operator delete(void *,size_t);OMR;PrimitiveType;0;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;PrimitiveType;0;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;PrimitiveType;0;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;PrimitiveType;0;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;PrimitiveType;0;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;PrimitiveType;0;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;PrimitiveType;0;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;PrimitiveType;0;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;PrimitiveType;0;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;PrimitiveType;0;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0;0
OMR;IlType;getPrimitiveType();OMR;StructType;0;1
OMR;IlType;getSize();OMR;StructType;0;0
OMR;IlType;isStruct();OMR;StructType;0;1
OMR;IlType;jitPersistentAlloc(size_t);OMR;StructType;0;0
OMR;IlType;jitPersistentFree(void *);OMR;StructType;0;0
OMR;IlType;operator delete(void *,size_t);OMR;StructType;0;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;StructType;0;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;StructType;0;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;StructType;0;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;StructType;0;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;StructType;0;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;StructType;0;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;StructType;0;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;StructType;0;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;StructType;0;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0;0
OMR;IlType;getPrimitiveType();OMR;UnionType;0;1
OMR;IlType;getSize();OMR;UnionType;0;0
OMR;IlType;isUnion();OMR;UnionType;0;1
OMR;IlType;jitPersistentAlloc(size_t);OMR;UnionType;0;0
OMR;IlType;jitPersistentFree(void *);OMR;UnionType;0;0
OMR;IlType;operator delete(void *,size_t);OMR;UnionType;0;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;UnionType;0;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;UnionType;0;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;UnionType;0;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;UnionType;0;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;UnionType;0;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;UnionType;0;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;UnionType;0;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;UnionType;0;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;UnionType;0;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0;0
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment();TR;CodeCacheMemorySegment;0;0
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,uint8_t *);TR;CodeCacheMemorySegment;0;0
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,size_t);TR;CodeCacheMemorySegment;0;0
OMR;ELFRelocationResolver;~ELFRelocationResolver();TR;ELFRelocationResolver;1;0
