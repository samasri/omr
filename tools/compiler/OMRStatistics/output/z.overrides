BaseNamespace; BaseClassName; FunctionSignature; OverridingNamespace; OverridingClassName
CS2::ABitVector;Cursor;operator unsigned int();CS2::ABitVector;iterator
CS2;BSDTimer;Read();CS2;Timer
CS2;BSDTimer;Reset();CS2;Timer
CS2;BSDTimer;Start();CS2;Timer
CS2;BSDTimer;Stop();CS2;Timer
OMR;Block;Block(class TR_Memory *);TR;Block
OMR;Block;Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *);TR;Block
TR;CFGNode;asBlock();OMR;Block
TR;CFGNode;removeFromCFG(TR::Compilation *);OMR;Block
OMR;Block;~Block();TR;Block
OMR;LabelSymbol;LabelSymbol();TR;LabelSymbol
OMR;LabelSymbol;LabelSymbol(TR::CodeGenerator *,TR::Block *);TR;LabelSymbol
OMR;LabelSymbol;LabelSymbol(TR::CodeGenerator *);TR;LabelSymbol
OMR;Symbol;Symbol();TR;Symbol
OMR;Symbol;Symbol(TR::DataType,uint32_t);TR;Symbol
OMR;Symbol;Symbol(TR::DataType);TR;Symbol
OMR;Symbol;self();OMR;LabelSymbol
OMR;LabelSymbol;~LabelSymbol();TR;LabelSymbol
OMR;Symbol;~Symbol();TR;Symbol
OMR::Z;RealRegister;RealRegister(TR::CodeGenerator *);TR;RealRegister
OMR::Z;RealRegister;RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *);TR;RealRegister
OMR;Register;Register(uint32_t);OMR::Z;Register
OMR::Z;Register;Register(uint32_t);TR;Register
OMR;Register;Register(enum TR_RegisterKinds,uint16_t);OMR::Z;Register
OMR::Z;Register;Register(enum TR_RegisterKinds,uint16_t);TR;Register
OMR;Register;Register(enum TR_RegisterKinds);OMR::Z;Register
OMR::Z;Register;Register(enum TR_RegisterKinds);TR;Register
OMR;Register;block();OMR;RealRegister
OMR;Register;containsCollectedReference();OMR::Z;Register
OMR;Register;decFutureUseCount(ncount_t);OMR::Z;Register
OMR;Register;getRealRegister();OMR;RealRegister
OMR;Register;getRegister();OMR;RealRegister
OMR;Register;resetIsLive();OMR::Z;Register
OMR;Register;self();OMR;RealRegister
OMR;Register;setAssignedRegister(TR::Register *);OMR;RealRegister
OMR;Register;setContainsCollectedReference();OMR::Z;Register
OMR;RealRegister;setHasBeenAssignedInMethod(_Bool);OMR::Z;RealRegister
OMR;Register;setPlaceholderReg();OMR::Z;Register
OMR;Register;unblock();OMR;RealRegister
OMR;RealRegister;~RealRegister();OMR::Z;RealRegister
OMR::Z;RealRegister;~RealRegister();TR;RealRegister
OMR;Register;~Register();OMR::Z;Register
OMR::Z;Register;~Register();TR;Register
OMR;RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType,uint32_t);TR;RegisterMappedSymbol
OMR;RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType);TR;RegisterMappedSymbol
OMR;RegisterMappedSymbol;RegisterMappedSymbol(int32_t);TR;RegisterMappedSymbol
OMR;Symbol;getOffset();OMR;RegisterMappedSymbol
OMR;Symbol;self();OMR;RegisterMappedSymbol
OMR;RegisterMappedSymbol;~RegisterMappedSymbol();TR;RegisterMappedSymbol
OMR;MethodSymbol;MethodSymbol(enum TR_LinkageConventions,class TR_Method *);TR;MethodSymbol
OMR;ResolvedMethodSymbol;ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *);TR;ResolvedMethodSymbol
OMR;Symbol;isStatic();OMR;MethodSymbol
OMR;Symbol;self();OMR;MethodSymbol
OMR;MethodSymbol;self();OMR;ResolvedMethodSymbol
OMR;MethodSymbol;~MethodSymbol();TR;MethodSymbol
OMR;ResolvedMethodSymbol;~ResolvedMethodSymbol();TR;ResolvedMethodSymbol
OMR;CPU;CPU();OMR::Z;CPU
OMR::Z;CPU;CPU();TR;CPU
OMR;CPU;getSupportsHardwareSQRT();OMR::Z;CPU
OMR;CPU;~CPU();OMR::Z;CPU
OMR::Z;CPU;~CPU();TR;CPU
OMR;CodeGenPhase;CodeGenPhase(TR::CodeGenerator *);OMR::Z;CodeGenPhase
OMR::Z;CodeGenPhase;CodeGenPhase(TR::CodeGenerator *);TR;CodeGenPhase
OMR;CodeGenPhase;getName(enum OMR::CodeGenPhase::PhaseValue);OMR::Z;CodeGenPhase
OMR;CodeGenPhase;getName();OMR::Z;CodeGenPhase
OMR;CodeGenPhase;getNumPhases();OMR::Z;CodeGenPhase
OMR;CodeGenPhase;~CodeGenPhase();OMR::Z;CodeGenPhase
OMR::Z;CodeGenPhase;~CodeGenPhase();TR;CodeGenPhase
OMR;DebugEnv;DebugEnv();OMR::Z;DebugEnv
OMR::Z;DebugEnv;DebugEnv();TR;DebugEnv
OMR;DebugEnv;~DebugEnv();OMR::Z;DebugEnv
OMR::Z;DebugEnv;~DebugEnv();TR;DebugEnv
OMR;InstOpCode;InstOpCode(enum OMR::InstOpCode::Mnemonic);OMR::Z;InstOpCode
OMR::Z;InstOpCode;InstOpCode(enum OMR::InstOpCode::Mnemonic);TR;InstOpCode
OMR;InstOpCode;InstOpCode();OMR::Z;InstOpCode
OMR::Z;InstOpCode;InstOpCode();TR;InstOpCode
OMR;InstOpCode;~InstOpCode();OMR::Z;InstOpCode
OMR::Z;InstOpCode;~InstOpCode();TR;InstOpCode
OMR;Instruction;Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *);OMR::Z;Instruction
OMR;Instruction;Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *);OMR::Z;Instruction
OMR;Instruction;assignRegisters(enum TR_RegisterKinds);OMR::Z;Instruction
OMR;Instruction;defsRegister(TR::Register *);OMR::Z;Instruction
OMR;Instruction;dependencyRefsRegister(TR::Register *);OMR::Z;Instruction
OMR;Instruction;estimateBinaryLength(int32_t);OMR::Z;Instruction
OMR;Instruction;generateBinaryEncoding();OMR::Z;Instruction
OMR;Instruction;getKind();OMR::Z;Instruction
OMR;Instruction;refsRegister(TR::Register *);OMR::Z;Instruction
OMR;Instruction;usesRegister(TR::Register *);OMR::Z;Instruction
OMR;Instruction;~Instruction();OMR::Z;Instruction
OMR::Z;Instruction;~Instruction();TR;Instruction
OMR::Z;Machine;Machine(TR::CodeGenerator *);TR;Machine
OMR;Machine;getRealRegister(TR_GlobalRegisterNumber);OMR::Z;Machine
OMR;Machine;~Machine();OMR::Z;Machine
OMR::Z;Machine;~Machine();TR;Machine
OMR;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);OMR::Z;Snippet
OMR::Z;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);TR;Snippet
OMR;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);OMR::Z;Snippet
OMR::Z;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);TR;Snippet
OMR;Snippet;~Snippet();OMR::Z;Snippet
OMR::Z;Snippet;~Snippet();TR;Snippet
OMR;TreeEvaluator;badILOpEvaluator(TR::Node *,TR::CodeGenerator *);OMR::Z;TreeEvaluator
OMR;AliasBuilder;AliasBuilder(TR::SymbolReferenceTable *,size_t,TR::Compilation *);TR;AliasBuilder
OMR;AliasBuilder;~AliasBuilder();TR;AliasBuilder
OMR;ArithEnv;ArithEnv();TR;ArithEnv
OMR;ArithEnv;~ArithEnv();TR;ArithEnv
TR;Relocation;addAOTRelocation(TR::CodeGenerator *);TR;ExternalRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;ExternalRelocation
TR;Relocation;getUpdateLocation();TR;BeforeBinaryEncodingExternalRelocation
TR;Relocation;trace(TR::Compilation *);TR;ExternalRelocation
OMR;CFG;CFG(TR::Compilation *,TR::ResolvedMethodSymbol *);TR;CFG
TR;Link;jitPersistentAlloc(size_t);TR;CFGEdge
TR;Link;jitPersistentFree(void *);TR;CFGEdge
TR;Link;operator delete(void *,TR::Region &);TR;CFGEdge
TR;Link;operator delete(void *,size_t);TR;CFGEdge
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator delete[](void *,TR::Region &);TR;CFGEdge
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;CFGEdge
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;CFGEdge
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge
TR;Link;operator new(size_t,TR::Region &);TR;CFGEdge
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;CFGEdge
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator new[](size_t,TR::Region &);TR;CFGEdge
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;CFGEdge
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;CFGEdge
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge
OMR;ClassEnv;ClassEnv();TR;ClassEnv
OMR;ClassEnv;~ClassEnv();TR;ClassEnv
OMR;CodeGenerator;CodeGenerator();OMR::Z;CodeGenerator
OMR::Z;CodeGenerator;CodeGenerator();TestCompiler;CodeGenerator
TestCompiler;CodeGenerator;CodeGenerator();TestCompiler::Z;CodeGenerator
TestCompiler::Z;CodeGenerator;CodeGenerator();TR;CodeGenerator
OMR;CodeGenerator;IsInMemoryType(TR::DataType);OMR::Z;CodeGenerator
OMR;CodeGenerator;allowDSEOfVolatiles();OMR::Z;CodeGenerator
OMR;CodeGenerator;allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::Z;CodeGenerator
OMR;CodeGenerator;apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::Z;CodeGenerator
OMR;CodeGenerator;apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *);OMR::Z;CodeGenerator
OMR;CodeGenerator;arithmeticNeedsLiteralFromPool(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;arrayInitMinimumNumberOfBytes();OMR::Z;CodeGenerator
OMR;CodeGenerator;arrayTranslateAndTestMinimumNumberOfIterations();OMR::Z;CodeGenerator
OMR;CodeGenerator;arrayTranslateMinimumNumberOfElements(_Bool,_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;arrayTranslateTableRequiresAlignment(_Bool,_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;beginInstructionSelection();OMR::Z;CodeGenerator
OMR;CodeGenerator;bitwiseOpNeedsLiteralFromPool(TR::Node *,TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;bndsChkNeedsLiteralFromPool(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;buildRegisterMapForInstruction(class TR_GCStackMap *);OMR::Z;CodeGenerator
OMR;CodeGenerator;canBeAffectedByStoreTagStalls();OMR::Z;CodeGenerator
OMR;CodeGenerator;canTransformUnsafeCopyToArrayCopy();OMR::Z;CodeGenerator
OMR;CodeGenerator;canUseImmedInstruction(int64_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;codegenSupportsLoadlessBNDCheck();OMR::Z;CodeGenerator
OMR;CodeGenerator;computeRegisterSaveDescription(class TR_BitVector *,_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;considerTypeForGRA(TR::DataType);OMR::Z;CodeGenerator
OMR;CodeGenerator;considerTypeForGRA(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;considerTypeForGRA(TR::SymbolReference *);OMR::Z;CodeGenerator
OMR;CodeGenerator;constLoadNeedsLiteralFromPool(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;createLinkage(enum TR_LinkageConventions);OMR::Z;CodeGenerator
OMR;CodeGenerator;disableCommoningOfVolatiles();OMR::Z;CodeGenerator
OMR;CodeGenerator;doBinaryEncoding();OMR::Z;CodeGenerator
OMR;CodeGenerator;doInstructionSelection();OMR::Z;CodeGenerator
OMR;CodeGenerator;doPeephole();OMR::Z;CodeGenerator
OMR;CodeGenerator;doRegisterAssignment(enum TR_RegisterKinds);OMR::Z;CodeGenerator
OMR;CodeGenerator;doRematerialization();OMR::Z;CodeGenerator
OMR;CodeGenerator;dumpDataSnippets(TR::FILE *);OMR::Z;CodeGenerator
OMR;CodeGenerator;dumpTargetAddressSnippets(TR::FILE *);OMR::Z;CodeGenerator
OMR;CodeGenerator;emitDataSnippets();OMR::Z;CodeGenerator
OMR;CodeGenerator;emitTargetAddressSnippets();OMR::Z;CodeGenerator
OMR;CodeGenerator;enableLiteralPoolRegisterForGRA();OMR::Z;CodeGenerator
OMR;CodeGenerator;endInstructionSelection();OMR::Z;CodeGenerator
OMR;CodeGenerator;endInternalControlFlow(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;excludeInvariantsFromGRAEnabled();OMR::Z;CodeGenerator
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *);OMR::Z;CodeGenerator
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &);OMR::Z;CodeGenerator
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &);OMR::Z;CodeGenerator
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *);OMR::Z;CodeGenerator
OMR;CodeGenerator;generateNop(TR::Node *,TR::Instruction *,enum TR_NOPKind);OMR::Z;CodeGenerator
OMR;CodeGenerator;getCurrentBlockIndex();OMR::Z;CodeGenerator
OMR;CodeGenerator;getGlobalFPRsPreservedAcrossCalls();OMR::Z;CodeGenerator
OMR;CodeGenerator;getGlobalGPRFromHPR(TR_GlobalRegisterNumber);OMR::Z;CodeGenerator
OMR;CodeGenerator;getGlobalGPRsPreservedAcrossCalls();OMR::Z;CodeGenerator
OMR;CodeGenerator;getGlobalHPRFromGPR(TR_GlobalRegisterNumber);OMR::Z;CodeGenerator
OMR;CodeGenerator;getGlobalRegisterNumber(uint32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions);OMR::Z;CodeGenerator
OMR;CodeGenerator;getLinkageGlobalRegisterNumber(int8_t,TR::DataType);OMR::Z;CodeGenerator
OMR;CodeGenerator;getMaximumNumberOfFPRsAllowedAcrossEdge(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Block *);OMR::Z;CodeGenerator
OMR;CodeGenerator;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;getMaximumNumberOfVRFsAllowedAcrossEdge(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;getMaximumNumbersOfAssignableFPRs();OMR::Z;CodeGenerator
OMR;CodeGenerator;getMaximumNumbersOfAssignableGPRs();OMR::Z;CodeGenerator
OMR;CodeGenerator;getMaximumNumbersOfAssignableVRs();OMR::Z;CodeGenerator
OMR;CodeGenerator;getMinByteForLongCompareNarrower();OMR::Z;CodeGenerator
OMR;CodeGenerator;getMinShortForLongCompareNarrower();OMR::Z;CodeGenerator
OMR;CodeGenerator;getMinimumNumberOfNodesBetweenMonitorsForTLE();OMR::Z;CodeGenerator
OMR;CodeGenerator;getNextAvailableBlockIndex();OMR::Z;CodeGenerator
OMR;CodeGenerator;getSupportsBitOpCodes();OMR::Z;CodeGenerator
OMR;CodeGenerator;getSupportsConstantOffsetInAddressing(int64_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;getSupportsEncodeUtf16BigWithSurrogateTest();OMR::Z;CodeGenerator
OMR;CodeGenerator;getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType);OMR::Z;CodeGenerator
OMR;CodeGenerator;hasDataSnippets();OMR::Z;CodeGenerator
OMR;CodeGenerator;hasTargetAddressSnippets();OMR::Z;CodeGenerator
OMR;CodeGenerator;ilOpCodeIsSupported(TR::ILOpCodes);OMR::Z;CodeGenerator
OMR;CodeGenerator;internalPointerSupportImplemented();OMR::Z;CodeGenerator
OMR;CodeGenerator;isAddressScaleIndexSupported(int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;isAlignmentInstruction(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;isBranchInstruction(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;isFenceInstruction(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;isGlobalRegisterAvailable(TR_GlobalRegisterNumber,TR::DataType);OMR::Z;CodeGenerator
OMR;CodeGenerator;isInternalControlFlowReg(TR::Register *);OMR::Z;CodeGenerator
OMR;CodeGenerator;isLabelInstruction(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;isLiteralPoolOnDemandOn();OMR::Z;CodeGenerator
OMR;CodeGenerator;isOutOfLineHotPath();OMR::Z;CodeGenerator
OMR;CodeGenerator;isPreservedRegister(int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;isReturnInstruction(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **);OMR::Z;CodeGenerator
OMR;CodeGenerator;lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *);OMR::Z;CodeGenerator
OMR;CodeGenerator;lowerTreesPropagateBlockToNode(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;materializesLargeConstants();OMR::Z;CodeGenerator
OMR;CodeGenerator;nodeMayCauseException(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;opCodeIsNoOpOnThisPlatform(TR::ILOpCode &);OMR::Z;CodeGenerator
OMR;CodeGenerator;preLowerTrees();OMR::Z;CodeGenerator
OMR;CodeGenerator;prepareForGRA();OMR::Z;CodeGenerator
OMR;CodeGenerator;prepareRegistersForAssignment();OMR::Z;CodeGenerator
OMR;CodeGenerator;processIncomingParameterUsage(class TR_BitVector **,int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &);OMR::Z;CodeGenerator
OMR;CodeGenerator;setCurrentBlockIndex(int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;setEstimatedLocationsForDataSnippetLabels(int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;setEstimatedLocationsForTargetAddressSnippetLabels(int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;setNextAvailableBlockIndex(int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;setOnDemandLiteralPoolRun(_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &);OMR::Z;CodeGenerator
OMR;CodeGenerator;setVMThreadRequired(_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;shouldValueBeInACommonedNode(int64_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;shouldYankCompressedRefs();OMR::Z;CodeGenerator
OMR;CodeGenerator;simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *);OMR::Z;CodeGenerator
OMR;CodeGenerator;splitBlockEntry(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool);OMR::Z;CodeGenerator
OMR;CodeGenerator;startInternalControlFlow(TR::Instruction *);OMR::Z;CodeGenerator
OMR;CodeGenerator;supports32bitAiadd();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsDirectIntegralLoadStoresFromLiteralPool();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsDirectJNICallsForAOT();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsFusedMultiplyAdd();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsHighWordFacility();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsInliningOfIsInstance();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsLengthMinusOneForMemoryOpts();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsLongRegAllocation();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsMergingGuards();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsOnDemandLiteralPool();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsSinglePrecisionSQRT();OMR::Z;CodeGenerator
OMR;CodeGenerator;supportsTrapsInTMRegion();OMR::Z;CodeGenerator
OMR;CodeGenerator;suppressInliningOfRecognizedMethod(TR::RecognizedMethod);OMR::Z;CodeGenerator
OMR;CodeGenerator;updateSnippetMapWithRSD(TR::Instruction *,int32_t);OMR::Z;CodeGenerator
OMR;CodeGenerator;usesImplicit64BitGPRs(TR::Node *);OMR::Z;CodeGenerator
OMR;CodeGenerator;yankIndexScalingOp();OMR::Z;CodeGenerator
OMR;CodeGenerator;~CodeGenerator();OMR::Z;CodeGenerator
OMR::Z;CodeGenerator;~CodeGenerator();TestCompiler;CodeGenerator
TestCompiler;CodeGenerator;~CodeGenerator();TestCompiler::Z;CodeGenerator
TestCompiler::Z;CodeGenerator;~CodeGenerator();TR;CodeGenerator
OMR;Compilation;Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *);TR;Compilation
OMR;Compilation;~Compilation();TR;Compilation
OMR;CompilerEnv;CompilerEnv(TR::RawAllocator,const TR::PersistentAllocatorKit &);TR;CompilerEnv
OMR;DataType;DataType(TR::DataTypes);TR;DataType
OMR;DataType;DataType();TR;DataType
OMR;DataType;~DataType();TR;DataType
TR;DebugCounterBase;accumulate();TR;DebugCounter
TR;DebugCounterBase;getBumpCountAddress();TR;DebugCounter
TR;DebugCounterBase;getBumpCountSymRef(TR::Compilation *);TR;DebugCounter
TR;DebugCounterBase;accumulate();TR;DebugCounterAggregation
TR;DebugCounterBase;getBumpCountAddress();TR;DebugCounterAggregation
TR;DebugCounterBase;getBumpCountSymRef(TR::Compilation *);TR;DebugCounterAggregation
OMR;Environment;Environment();TR;Environment
OMR;Environment;Environment(TR::MajorOperatingSystem,TR::Bitness);TR;Environment
OMR;Environment;~Environment();TR;Environment
TR;ExternalRelocation;apply(TR::CodeGenerator *);TR;ExternalOrderedPair32BitRelocation
TR;ExternalRelocation;collectModifier();TR;ExternalOrderedPair32BitRelocation
TR;ExternalRelocation;getNarrowSize();TR;ExternalOrderedPair32BitRelocation
TR;ExternalRelocation;getWideSize();TR;ExternalOrderedPair32BitRelocation
OMR;IL;~IL();TR;IL
OMR;ILOpCode;ILOpCode(TR::ILOpCodes);TR;ILOpCode
OMR;ILOpCode;ILOpCode();TR;ILOpCode
OMR;ILOpCode;~ILOpCode();TR;ILOpCode
TR;Relocation;apply(TR::CodeGenerator *);TR;InstructionAbsoluteRelocation
TR;Relocation;isAOTRelocation();TR;InstructionAbsoluteRelocation
OMR;KnownObjectTable;KnownObjectTable(TR::Compilation *);TR;KnownObjectTable
OMR;KnownObjectTable;~KnownObjectTable();TR;KnownObjectTable
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelAbsoluteRelocation
TR;Relocation;isAOTRelocation();TR;LabelRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative12BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative16BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative24BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative32BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative8BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelTable32BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative16BitRelocation
TR;Relocation;isAOTRelocation();TR;LoadLabelRelative16BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative32BitRelocation
TR;Relocation;isAOTRelocation();TR;LoadLabelRelative32BitRelocation
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative64BitRelocation
OMR;Monitor;Monitor();TR;Monitor
OMR;Monitor;~Monitor();TR;Monitor
OMR;Node;Node();TR;Node
OMR;Node;Node(TR::Node *,TR::ILOpCodes,uint16_t);TR;Node
OMR;Node;~Node();TR;Node
OMR;ObjectModel;ObjectModel();TestCompiler;ObjectModel
TestCompiler;ObjectModel;ObjectModel();TR;ObjectModel
OMR;ObjectModel;sizeofReferenceField();TestCompiler;ObjectModel
OMR;ObjectModel;~ObjectModel();TestCompiler;ObjectModel
TestCompiler;ObjectModel;~ObjectModel();TR;ObjectModel
OMR;Optimizer;Optimizer(TR::Compilation *,TR::ResolvedMethodSymbol *,_Bool,const struct OptimizationStrategy *,uint16_t);TestCompiler;Optimizer
TestCompiler;Optimizer;Optimizer(TR::Compilation *,TR::ResolvedMethodSymbol *,_Bool,const struct OptimizationStrategy *,uint16_t);TR;Optimizer
OMR;Optimizer;optimizationStrategy(TR::Compilation *);TestCompiler;Optimizer
OMR;Options;Options();TR;Options
OMR;Options;Options(TR::Options &);TR;Options
OMR;Options;Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t);TR;Options
OMR;Options;self();OMR;Options
OMR;PersistentInfo;PersistentInfo(class TR_PersistentMemory *);TR;PersistentInfo
OMR;PersistentInfo;~PersistentInfo();TR;PersistentInfo
TestCompiler;ResolvedMethod;ResolvedMethod(TR::MethodBuilder *);TR;ResolvedMethod
TestCompiler;ResolvedMethod;ResolvedMethod(class TR_OpaqueMethodBlock *);TR;ResolvedMethod
TR;ResolvedMethod;classNameChars();TestCompiler;ResolvedMethod
TR;ResolvedMethod;classNameLength();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;convertToMethod();TestCompiler;ResolvedMethod
TR;ResolvedMethod;getPersistentIdentifier();TestCompiler;ResolvedMethod
TR;ResolvedMethod;hasBackwardBranches();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isAbstract();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isCompilable(class TR_Memory *);TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isConstructor();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isFinal();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isInterpreted();TestCompiler;ResolvedMethod
TR;ResolvedMethod;isJITInternalNative();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isJNINative();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isNative();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isNewInstanceImplThunk();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isNonEmptyObjectConstructor();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isPrivate();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isProtected();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isPublic();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isSameMethod(class TR_ResolvedMethod *);TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isStatic();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isStrictFP();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isSubjectToPhaseChange(TR::Compilation *);TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;isSynchronized();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;localName(uint32_t,uint32_t,int32_t &,class TR_Memory *);TestCompiler;ResolvedMethod
TR;ResolvedMethod;makeParameterList(TR::ResolvedMethodSymbol *);TestCompiler;ResolvedMethod
TR;ResolvedMethod;maxBytecodeIndex();TestCompiler;ResolvedMethod
TR;ResolvedMethod;nameChars();TestCompiler;ResolvedMethod
TR;ResolvedMethod;nameLength();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;numberOfExceptionHandlers();TestCompiler;ResolvedMethodBase
TR;ResolvedMethod;numberOfParameterSlots();TestCompiler;ResolvedMethod
TR;ResolvedMethod;numberOfTemps();TestCompiler;ResolvedMethod
TR;ResolvedMethod;parmType(uint32_t);TestCompiler;ResolvedMethod
TR;ResolvedMethod;resolvedMethodAddress();TestCompiler;ResolvedMethod
TR;ResolvedMethod;returnType();TestCompiler;ResolvedMethod
TR;ResolvedMethod;signature(class TR_Memory *,enum TR_AllocationKind);TestCompiler;ResolvedMethod
TR;ResolvedMethod;signatureChars();TestCompiler;ResolvedMethod
TR;ResolvedMethod;signatureLength();TestCompiler;ResolvedMethodBase
TestCompiler;ResolvedMethodBase;signatureLength();TestCompiler;ResolvedMethod
TR;ResolvedMethod;startAddressForInterpreterOfJittedMethod();TestCompiler;ResolvedMethod
TR;ResolvedMethod;startAddressForJittedMethod();TestCompiler;ResolvedMethod
TestCompiler;ResolvedMethod;~ResolvedMethod();TR;ResolvedMethod
TR;Method;classNameChars();TestCompiler;Method
TestCompiler;Method;classNameChars();TestCompiler;ResolvedMethod
TR;Method;classNameLength();TestCompiler;Method
TR;Method;isConstructor();TestCompiler;Method
TR;Method;isFinalInObject();TestCompiler;Method
TR;Method;jitPersistentAlloc(size_t);TestCompiler;Method
TR;Method;jitPersistentFree(void *);TestCompiler;Method
TR;Method;nameChars();TestCompiler;Method
TestCompiler;Method;nameChars();TestCompiler;ResolvedMethod
TR;Method;nameLength();TestCompiler;Method
TR;Method;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method
TR;Method;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;operator delete(void *,size_t);TestCompiler;Method
TR;Method;operator delete(void *,TR::Region &);TestCompiler;Method
TR;Method;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method
TR;Method;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;operator delete[](void *,TR::Region &);TestCompiler;Method
TR;Method;operator new(size_t,TR::Region &);TestCompiler;Method
TR;Method;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;Method
TR;Method;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;operator new(size_t,class TR_PersistentMemory *);TestCompiler;Method
TR;Method;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method
TR;Method;operator new(size_t,TR_ArenaAllocator *);TestCompiler;Method
TR;Method;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method
TR;Method;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;Method
TR;Method;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;Method
TR;Method;operator new[](size_t,TR::Region &);TestCompiler;Method
TR;Method;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method
TR;Method;parmType(uint32_t);TestCompiler;ResolvedMethod
TR;Method;returnType();TestCompiler;ResolvedMethod
TR;Method;signature(class TR_Memory *,enum TR_AllocationKind);TestCompiler;ResolvedMethod
TR;Method;signatureChars();TestCompiler;Method
TestCompiler;Method;signatureChars();TestCompiler;ResolvedMethod
TR;Method;signatureLength();TestCompiler;Method
TestCompiler;Method;signatureLength();TestCompiler;ResolvedMethod
OMR;SnippetGCMap;SnippetGCMap();TR;SnippetGCMap
OMR;SnippetGCMap;~SnippetGCMap();TR;SnippetGCMap
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index);TR;SymbolReference
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t);TR;SymbolReference
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t);TR;SymbolReference
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t);TR;SymbolReference
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *);TR;SymbolReference
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t);TR;SymbolReference
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *);TR;SymbolReference
OMR;SymbolReference;~SymbolReference();TR;SymbolReference
OMR;SymbolReferenceTable;SymbolReferenceTable(size_t,TR::Compilation *);TR;SymbolReferenceTable
OMR;TreeTop;TreeTop(TR::Node *,TR::TreeTop *,TR::TreeTop *);TR;TreeTop
OMR;TreeTop;TreeTop(TR::TreeTop *,TR::Node *,TR::Compilation *);TR;TreeTop
OMR;VMEnv;VMEnv();TR;VMEnv
OMR;VMEnv;~VMEnv();TR;VMEnv
OMR;VMMethodEnv;VMMethodEnv();TR;VMMethodEnv
OMR;VMMethodEnv;~VMMethodEnv();TR;VMMethodEnv
TR;VPConstraint;asArrayInfo();TR;VPArrayInfo
TR;VPConstraint;getArrayInfo();TR;VPArrayInfo
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPArrayInfo
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPArrayInfo
TR;VPConstraint;name();TR;VPArrayInfo
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPArrayInfo
TR;VPConstraint;asClass();TR;VPClass
TR;VPConstraint;getArrayInfo();TR;VPClass
TR;VPConstraint;getClass();TR;VPClass
TR;VPConstraint;getClassPresence();TR;VPClass
TR;VPConstraint;getClassSignature(int32_t &);TR;VPClass
TR;VPConstraint;getClassType();TR;VPClass
TR;VPConstraint;getConstString();TR;VPClass
TR;VPConstraint;getKnownObject();TR;VPClass
TR;VPConstraint;getObjectLocation();TR;VPClass
TR;VPConstraint;getPreexistence();TR;VPClass
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass
TR;VPConstraint;isClassObject();TR;VPClass
TR;VPConstraint;isConstString();TR;VPClass
TR;VPConstraint;isFixedClass();TR;VPClass
TR;VPConstraint;isHeapObject();TR;VPClass
TR;VPConstraint;isJ9ClassObject();TR;VPClass
TR;VPConstraint;isJavaLangClassObject();TR;VPClass
TR;VPConstraint;isNonNullObject();TR;VPClass
TR;VPConstraint;isNullObject();TR;VPClass
TR;VPConstraint;isPreexistentObject();TR;VPClass
TR;VPConstraint;isStackObject();TR;VPClass
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass
TR;VPConstraint;name();TR;VPClass
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPClass
TR;VPConstraint;asClassPresence();TR;VPClassPresence
TR;VPConstraint;asNonNullObject();TR;VPNonNullObject
TR;VPConstraint;getClassPresence();TR;VPClassPresence
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNonNullObject
TR;VPConstraint;isNonNullObject();TR;VPNonNullObject
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNonNullObject
TR;VPConstraint;name();TR;VPNonNullObject
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNonNullObject
TR;VPConstraint;asClassType();TR;VPClassType
TR;VPConstraint;asConstString();TR;VPConstString
TR;VPConstraint;asFixedClass();TR;VPFixedClass
TR;VPConstraint;asResolvedClass();TR;VPResolvedClass
TR;VPResolvedClass;create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);TR;VPFixedClass
TR;VPClassType;getArrayClass(OMR::ValuePropagation *);TR;VPResolvedClass
TR;VPResolvedClass;getArrayClass(OMR::ValuePropagation *);TR;VPFixedClass
TR;VPConstraint;getClass();TR;VPResolvedClass
TR;VPConstraint;getClassSignature(int32_t &);TR;VPClassType
TR;VPClassType;getClassSignature(int32_t &);TR;VPResolvedClass
TR;VPConstraint;getClassType();TR;VPClassType
TR;VPConstraint;getConstString();TR;VPConstString
TR;VPFixedClass;hasMoreThanFixedClassInfo();TR;VPConstString
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPResolvedClass
TR;VPResolvedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPFixedClass
TR;VPFixedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString
TR;VPClassType;isArray();TR;VPFixedClass
TR;VPConstraint;isClassObject();TR;VPClassType
TR;VPConstraint;isConstString();TR;VPConstString
TR;VPConstraint;isFixedClass();TR;VPFixedClass
TR;VPConstraint;isJ9ClassObject();TR;VPClassType
TR;VPConstraint;isJavaLangClassObject();TR;VPClassType
TR;VPClassType;isJavaLangObject(OMR::ValuePropagation *);TR;VPResolvedClass
TR;VPClassType;isPrimitiveArray(TR::Compilation *);TR;VPResolvedClass
TR;VPClassType;isReferenceArray(TR::Compilation *);TR;VPResolvedClass
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPResolvedClass
TR;VPResolvedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPFixedClass
TR;VPFixedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString
TR;VPConstraint;name();TR;VPResolvedClass
TR;VPResolvedClass;name();TR;VPFixedClass
TR;VPFixedClass;name();TR;VPConstString
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPResolvedClass
TR;VPResolvedClass;print(TR::Compilation *,TR::FILE *);TR;VPFixedClass
TR;VPFixedClass;print(TR::Compilation *,TR::FILE *);TR;VPConstString
TR;VPConstraint;asEqual();TR;VPEqual
TR;VPConstraint;asRelation();TR;VPRelation
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPEqual
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPEqual
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPEqual
TR;VPConstraint;mustBeEqual();TR;VPEqual
TR;VPConstraint;mustBeGreaterThan();TR;VPEqual
TR;VPConstraint;mustBeGreaterThanOrEqual();TR;VPEqual
TR;VPConstraint;mustBeLessThan();TR;VPEqual
TR;VPConstraint;mustBeLessThanOrEqual();TR;VPEqual
TR;VPConstraint;mustBeNotEqual();TR;VPEqual
TR;VPConstraint;name();TR;VPEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPEqual
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPEqual
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPEqual
TR;VPConstraint;asGreaterThanOrEqual();TR;VPGreaterThanOrEqual
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPGreaterThanOrEqual
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual
TR;VPConstraint;mustBeGreaterThan();TR;VPGreaterThanOrEqual
TR;VPConstraint;mustBeGreaterThanOrEqual();TR;VPGreaterThanOrEqual
TR;VPConstraint;mustBeNotEqual();TR;VPGreaterThanOrEqual
TR;VPConstraint;name();TR;VPGreaterThanOrEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPGreaterThanOrEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPGreaterThanOrEqual
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPIntConstraint
TR;VPConstraint;asIntConst();TR;VPIntConst
TR;VPConstraint;asIntConstraint();TR;VPIntConstraint
TR;VPConstraint;canOverflow();TR;VPIntConstraint
TR;VPIntConstraint;getHigh();TR;VPIntConst
TR;VPConstraint;getHighInt();TR;VPIntConstraint
TR;VPConstraint;getLowInt();TR;VPIntConstraint
TR;VPConstraint;getPrecision();TR;VPIntConstraint
TR;VPIntConstraint;getPrecision();TR;VPIntConst
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConst
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint
TR;VPConstraint;name();TR;VPIntConst
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPIntConst
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPIntConstraint
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPIntConstraint
TR;VPConstraint;asIntRange();TR;VPIntRange
TR;VPIntConstraint;getHigh();TR;VPIntRange
TR;VPIntConstraint;getPrecision();TR;VPIntRange
TR;VPConstraint;name();TR;VPIntRange
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPIntRange
TR;VPConstraint;asKnownObject();TR;VPKnownObject
TR;VPConstraint;getKnownObject();TR;VPKnownObject
TR;VPFixedClass;hasMoreThanFixedClassInfo();TR;VPKnownObject
TR;VPFixedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject
TR;VPClassType;isJavaLangClassObject();TR;VPKnownObject
TR;VPFixedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject
TR;VPFixedClass;name();TR;VPKnownObject
TR;VPFixedClass;print(TR::Compilation *,TR::FILE *);TR;VPKnownObject
TR;VPConstraint;asLessThanOrEqual();TR;VPLessThanOrEqual
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPLessThanOrEqual
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLessThanOrEqual
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLessThanOrEqual
TR;VPConstraint;mustBeLessThan();TR;VPLessThanOrEqual
TR;VPConstraint;mustBeLessThanOrEqual();TR;VPLessThanOrEqual
TR;VPConstraint;mustBeNotEqual();TR;VPLessThanOrEqual
TR;VPConstraint;name();TR;VPLessThanOrEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLessThanOrEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPLessThanOrEqual
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPLessThanOrEqual
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPLessThanOrEqual
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPLongConstraint
TR;VPConstraint;asLongConst();TR;VPLongConst
TR;VPConstraint;asLongConstraint();TR;VPLongConstraint
TR;VPConstraint;canOverflow();TR;VPLongConstraint
TR;VPLongConstraint;getHigh();TR;VPLongConst
TR;VPConstraint;getHighLong();TR;VPLongConstraint
TR;VPConstraint;getLowLong();TR;VPLongConstraint
TR;VPConstraint;getPrecision();TR;VPLongConstraint
TR;VPLongConstraint;getPrecision();TR;VPLongConst
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConst
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint
TR;VPConstraint;name();TR;VPLongConst
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLongConst
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPLongConstraint
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPLongConstraint
TR;VPConstraint;asLongRange();TR;VPLongRange
TR;VPLongConstraint;getHigh();TR;VPLongRange
TR;VPLongConstraint;getPrecision();TR;VPLongRange
TR;VPConstraint;name();TR;VPLongRange
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLongRange
TR;VPConstraint;asMergedConstraints();TR;VPMergedConstraints
TR;VPConstraint;asMergedIntConstraints();TR;VPMergedConstraints
TR;VPConstraint;asMergedLongConstraints();TR;VPMergedConstraints
TR;VPConstraint;asMergedShortConstraints();TR;VPMergedConstraints
TR;VPConstraint;getHighInt();TR;VPMergedConstraints
TR;VPConstraint;getHighLong();TR;VPMergedConstraints
TR;VPConstraint;getHighShort();TR;VPMergedConstraints
TR;VPConstraint;getLowInt();TR;VPMergedConstraints
TR;VPConstraint;getLowLong();TR;VPMergedConstraints
TR;VPConstraint;getLowShort();TR;VPMergedConstraints
TR;VPConstraint;getUnsignedHighInt();TR;VPMergedConstraints
TR;VPConstraint;getUnsignedHighLong();TR;VPMergedConstraints
TR;VPConstraint;getUnsignedHighShort();TR;VPMergedConstraints
TR;VPConstraint;getUnsignedLowInt();TR;VPMergedConstraints
TR;VPConstraint;getUnsignedLowLong();TR;VPMergedConstraints
TR;VPConstraint;getUnsignedLowShort();TR;VPMergedConstraints
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints
TR;VPConstraint;name();TR;VPMergedConstraints
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPMergedConstraints
TR;VPConstraint;asNotEqual();TR;VPNotEqual
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPNotEqual
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNotEqual
TR;VPConstraint;mustBeNotEqual();TR;VPNotEqual
TR;VPConstraint;name();TR;VPNotEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNotEqual
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPNotEqual
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPNotEqual
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPNotEqual
TR;VPConstraint;asNullObject();TR;VPNullObject
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject
TR;VPConstraint;isNullObject();TR;VPNullObject
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject
TR;VPConstraint;name();TR;VPNullObject
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNullObject
TR;VPConstraint;asObjectLocation();TR;VPObjectLocation
TR;VPConstraint;getObjectLocation();TR;VPObjectLocation
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPObjectLocation
TR;VPConstraint;isClassObject();TR;VPObjectLocation
TR;VPConstraint;isHeapObject();TR;VPObjectLocation
TR;VPConstraint;isJ9ClassObject();TR;VPObjectLocation
TR;VPConstraint;isJavaLangClassObject();TR;VPObjectLocation
TR;VPConstraint;isStackObject();TR;VPObjectLocation
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPObjectLocation
TR;VPConstraint;name();TR;VPObjectLocation
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPObjectLocation
TR;VPConstraint;asPreexistentObject();TR;VPPreexistentObject
TR;VPConstraint;getPreexistence();TR;VPPreexistentObject
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPPreexistentObject
TR;VPConstraint;isPreexistentObject();TR;VPPreexistentObject
TR;VPConstraint;name();TR;VPPreexistentObject
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPPreexistentObject
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPShortConstraint
TR;VPConstraint;asShortConst();TR;VPShortConst
TR;VPConstraint;asShortConstraint();TR;VPShortConstraint
TR;VPConstraint;canOverflow();TR;VPShortConstraint
TR;VPShortConstraint;getHigh();TR;VPShortConst
TR;VPConstraint;getHighShort();TR;VPShortConstraint
TR;VPConstraint;getLowShort();TR;VPShortConstraint
TR;VPConstraint;getPrecision();TR;VPShortConstraint
TR;VPShortConstraint;getPrecision();TR;VPShortConst
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConst
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint
TR;VPConstraint;name();TR;VPShortConst
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPShortConst
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPShortConstraint
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPShortConstraint
TR;VPConstraint;asShortRange();TR;VPShortRange
TR;VPShortConstraint;getHigh();TR;VPShortRange
TR;VPShortConstraint;getPrecision();TR;VPShortRange
TR;VPConstraint;name();TR;VPShortRange
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPShortRange
TR;VPConstraint;asVPSync();TR;VPSync
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPSync
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPSync
TR;VPConstraint;name();TR;VPSync
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPSync
TR;VPConstraint;asUnreachablePath();TR;VPUnreachablePath
TR;VPConstraint;name();TR;VPUnreachablePath
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPUnreachablePath
TR;VPConstraint;asUnresolvedClass();TR;VPUnresolvedClass
TR;VPClassType;getArrayClass(OMR::ValuePropagation *);TR;VPUnresolvedClass
TR;VPClassType;getClassSignature(int32_t &);TR;VPUnresolvedClass
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPUnresolvedClass
TR;VPClassType;isPrimitiveArray(TR::Compilation *);TR;VPUnresolvedClass
TR;VPClassType;isReferenceArray(TR::Compilation *);TR;VPUnresolvedClass
TR;VPConstraint;name();TR;VPUnresolvedClass
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPUnresolvedClass
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;BackwardDFSetAnalysis
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;GlobalAnticipatability
TR;DataFlowAnalysis;asGlobalAnticipatability();TR;GlobalAnticipatability
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BackwardDFSetAnalysis
TR;BasicDFSetAnalysis;compose(Container *,Container *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;compose(Container *,Container *);TR;BackwardIntersectionDFSetAnalysis
TR;DataFlowAnalysis;getKind();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;getKind();TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;getKind();TR;BackwardIntersectionDFSetAnalysis
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;GlobalAnticipatability
TR;BasicDFSetAnalysis;getNumberOfBits();TR;GlobalAnticipatability
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardIntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;BackwardDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BackwardDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BackwardDFSetAnalysis
TR;BasicDFSetAnalysis;initializeInfo(Container *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeInfo(Container *);TR;BackwardIntersectionDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardIntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardIntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardIntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;GlobalAnticipatability
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Liveness
TR;DataFlowAnalysis;asLiveness();TR;Liveness
TR;BackwardDFSetAnalysis;compose(Container *,Container *);TR;BackwardUnionDFSetAnalysis
TR;BackwardDFSetAnalysis;getKind();TR;BackwardUnionDFSetAnalysis
TR;BackwardUnionDFSetAnalysis;getKind();TR;Liveness
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Liveness
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardUnionDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;Liveness
TR;BackwardDFSetAnalysis;initializeInfo(Container *);TR;BackwardUnionDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardUnionDFSetAnalysis
TR;BackwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardUnionDFSetAnalysis
TR;BackwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardUnionDFSetAnalysis
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Liveness
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;Liveness
TR;BitVectorIterator;getFirstElement();TR;BitContainerIterator
TR;BitVectorIterator;getNextElement();TR;BitContainerIterator
TR;BitVectorIterator;hasMoreElements();TR;BitContainerIterator
TR;Structure;addExternalEdge(class TR_Structure *,int32_t,_Bool);TR;BlockStructure
TR;Structure;asBlock();TR;BlockStructure
TR;Structure;changeContinueLoopsToNestedLoops(class TR_RegionStructure *);TR;BlockStructure
TR;Structure;checkStructure(class TR_BitVector *);TR;BlockStructure
TR;Structure;clearAnalysisInfo();TR;BlockStructure
TR;Structure;cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);TR;BlockStructure
TR;Structure;cloneStructureEdges(TR::Block **);TR;BlockStructure
TR;Structure;collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *);TR;BlockStructure
TR;Structure;collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR;BlockStructure
TR;Structure;doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool);TR;BlockStructure
TR;Structure;getBlocks(List<TR::Block> *);TR;BlockStructure
TR;Structure;getBlocks(List<TR::Block> *,vcount_t);TR;BlockStructure
TR;Structure;getEntryBlock();TR;BlockStructure
TR;Structure;getKind();TR;BlockStructure
TR;Structure;hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t);TR;BlockStructure
TR;Structure;isExpressionTransparentIn(int32_t,class TR_LocalTransparency *);TR;BlockStructure
TR;Structure;markStructuresWithImproperRegions();TR;BlockStructure
TR;Structure;removeEdge(class TR_Structure *,class TR_Structure *);TR;BlockStructure
TR;Structure;removeExternalEdgeTo(class TR_Structure *,int32_t);TR;BlockStructure
TR;Structure;renumber(int32_t);TR;BlockStructure
TR;Structure;renumberRecursively(int32_t,int32_t);TR;BlockStructure
TR;Structure;replacePart(class TR_Structure *,class TR_Structure *);TR;BlockStructure
TR;Structure;resetAnalysisInfo();TR;BlockStructure
TR;Structure;resetAnalyzedStatus();TR;BlockStructure
TR;Structure;resetVisitCounts(vcount_t);TR;BlockStructure
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ForwardDFSetAnalysis
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Delayedness
TR;DataFlowAnalysis;asDelayedness();TR;Delayedness
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;compose(Container *,Container *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;compose(Container *,Container *);TR;IntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;getKind();TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;getKind();TR;IntersectionDFSetAnalysis
TR;IntersectionDFSetAnalysis;getKind();TR;Delayedness
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Delayedness
TR;BasicDFSetAnalysis;initialize();TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;IntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;IntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;initializeInfo(Container *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeInfo(Container *);TR;IntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;inverseCompose(Container *,Container *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;IntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;inverseInitializeInfo(Container *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;IntersectionDFSetAnalysis
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Delayedness
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Earliestness
TR;DataFlowAnalysis;asEarliestness();TR;Earliestness
TR;ForwardDFSetAnalysis;compose(Container *,Container *);TR;UnionDFSetAnalysis
TR;ForwardDFSetAnalysis;getKind();TR;UnionDFSetAnalysis
TR;UnionDFSetAnalysis;getKind();TR;Earliestness
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Earliestness
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;UnionDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;UnionDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeInfo(Container *);TR;UnionDFSetAnalysis
TR;ForwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;UnionDFSetAnalysis
TR;ForwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;UnionDFSetAnalysis
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Earliestness
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;FlowSensitiveEscapeAnalysis
TR;DataFlowAnalysis;asFlowSensitiveEscapeAnalysis();TR;FlowSensitiveEscapeAnalysis
TR;IntersectionDFSetAnalysis;getKind();TR;FlowSensitiveEscapeAnalysis
TR;BasicDFSetAnalysis;getNumberOfBits();TR;FlowSensitiveEscapeAnalysis
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;FlowSensitiveEscapeAnalysis
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;FlowSensitiveEscapeAnalysis
TR;HashTab;calculateHash(const void *);TR;HashTabDouble
TR;HashTab;isEqual(const void *,const void *);TR;HashTabDouble
TR;HashTab;calculateHash(const void *);TR;HashTabFloat
TR;HashTab;isEqual(const void *,const void *);TR;HashTabFloat
TR;HashTab;calculateHash(const void *);TR;HashTabInt
TR;HashTab;calculateHash(const void *);TR;HashTabLong
TR;HashTab;isEqual(const void *,const void *);TR;HashTabLong
TR;HashTab;calculateHash(const void *);TR;HashTabString
TR;HashTab;isEqual(const void *,const void *);TR;HashTabString
TR;DataFlowAnalysis;asIsolatedness();TR;Isolatedness
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Isolatedness
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Isolatedness
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Isolatedness
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Latestness
TR;DataFlowAnalysis;asLatestness();TR;Latestness
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Latestness
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Latestness
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;LiveOnAllPaths
TR;DataFlowAnalysis;asLiveOnAllPaths();TR;LiveOnAllPaths
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;LiveOnAllPaths
TR;BasicDFSetAnalysis;getNumberOfBits();TR;LiveOnAllPaths
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;LiveOnAllPaths
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;LiveOnAllPaths
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;LiveOnAllPaths
TR;Dominators;jitPersistentAlloc(size_t);TR;PostDominators
TR;Dominators;jitPersistentFree(void *);TR;PostDominators
TR;Dominators;operator delete(void *,size_t);TR;PostDominators
TR;Dominators;operator delete(void *,TR::Region &);TR;PostDominators
TR;Dominators;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators
TR;Dominators;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator delete[](void *,TR::Region &);TR;PostDominators
TR;Dominators;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators
TR;Dominators;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator new(size_t,TR_ArenaAllocator *);TR;PostDominators
TR;Dominators;operator new(size_t,TR::Internal::PersistentNewType);TR;PostDominators
TR;Dominators;operator new(size_t,class TR_PersistentMemory *);TR;PostDominators
TR;Dominators;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators
TR;Dominators;operator new(size_t,TR::Region &);TR;PostDominators
TR;Dominators;operator new[](size_t,TR::Region &);TR;PostDominators
TR;Dominators;operator new[](size_t,TR::Internal::PersistentNewType);TR;PostDominators
TR;Dominators;operator new[](size_t,class TR_PersistentMemory *);TR;PostDominators
TR;Dominators;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators
TR;Dominators;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ReachingBlocks
TR;UnionDFSetAnalysis;getKind();TR;ReachingBlocks
TR;BasicDFSetAnalysis;getNumberOfBits();TR;ReachingBlocks
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;ReachingBlocks
TR;DataFlowAnalysis;perform();TR;ReachingBlocks
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;ReachingBlocks
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ReachingDefinitions
TR;UnionDFSetAnalysis;getKind();TR;ReachingDefinitions
TR;BasicDFSetAnalysis;getNumberOfBits();TR;ReachingDefinitions
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;ReachingDefinitions
TR;DataFlowAnalysis;perform();TR;ReachingDefinitions
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;ReachingDefinitions
TR;Structure;addEdge(TR::CFGEdge *,_Bool);TR;RegionStructure
TR;Structure;addExternalEdge(class TR_Structure *,int32_t,_Bool);TR;RegionStructure
TR;Structure;asRegion();TR;RegionStructure
TR;Structure;changeContinueLoopsToNestedLoops(class TR_RegionStructure *);TR;RegionStructure
TR;Structure;checkStructure(class TR_BitVector *);TR;RegionStructure
TR;Structure;clearAnalysisInfo();TR;RegionStructure
TR;Structure;cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);TR;RegionStructure
TR;Structure;cloneStructureEdges(TR::Block **);TR;RegionStructure
TR;Structure;collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *);TR;RegionStructure
TR;Structure;collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR;RegionStructure
TR;Structure;doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool);TR;RegionStructure
TR;Structure;getBlocks(List<TR::Block> *);TR;RegionStructure
TR;Structure;getBlocks(List<TR::Block> *,vcount_t);TR;RegionStructure
TR;Structure;getEntryBlock();TR;RegionStructure
TR;Structure;getKind();TR;RegionStructure
TR;Structure;getMaxNestingDepth(int32_t *,int32_t *);TR;RegionStructure
TR;Structure;hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t);TR;RegionStructure
TR;Structure;isExpressionTransparentIn(int32_t,class TR_LocalTransparency *);TR;RegionStructure
TR;Structure;markStructuresWithImproperRegions();TR;RegionStructure
TR;Structure;mergeInto(TR::Block *,TR::Block *);TR;RegionStructure
TR;Structure;removeEdge(class TR_Structure *,class TR_Structure *);TR;RegionStructure
TR;Structure;removeExternalEdgeTo(class TR_Structure *,int32_t);TR;RegionStructure
TR;Structure;removeMergedBlock(TR::Block *,TR::Block *);TR;RegionStructure
TR;Structure;renumber(int32_t);TR;RegionStructure
TR;Structure;renumberRecursively(int32_t,int32_t);TR;RegionStructure
TR;Structure;replacePart(class TR_Structure *,class TR_Structure *);TR;RegionStructure
TR;Structure;resetAnalysisInfo();TR;RegionStructure
TR;Structure;resetAnalyzedStatus();TR;RegionStructure
TR;Structure;resetVisitCounts(vcount_t);TR;RegionStructure
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;RegisterAnticipatability
TR;DataFlowAnalysis;asRegisterAnticipatability();TR;RegisterAnticipatability
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;RegisterAnticipatability
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RegisterAnticipatability
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RegisterAnticipatability
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;RegisterAvailability
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;RegisterAvailability
TR;DataFlowAnalysis;asRegisterAvailability();TR;RegisterAvailability
TR;IntersectionDFSetAnalysis;getKind();TR;RegisterAvailability
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RegisterAvailability
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RegisterAvailability
TR;OutOfLineCodeSection;assignRegisters(enum TR_RegisterKinds);TR;S390OutOfLineCodeSection
TR;CFGNode;asStructureSubGraphNode();TR;StructureSubGraphNode
OMR;ParameterSymbol;ParameterSymbol(TR::DataType,_Bool,int32_t);TR;ParameterSymbol
OMR;ParameterSymbol;ParameterSymbol(TR::DataType,_Bool,int32_t,size_t);TR;ParameterSymbol
OMR;RegisterMappedSymbol;self();OMR;ParameterSymbol
OMR;ParameterSymbol;~ParameterSymbol();TR;ParameterSymbol
OMR;Recompilation;Recompilation(TR::Compilation *);TR;Recompilation
OMR;Recompilation;~Recompilation();TR;Recompilation
OMR;Optimization;Optimization(TR::OptimizationManager *);TR;Optimization
OMR;Optimization;~Optimization();TR;Optimization
OMR;OptimizationManager;OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *);TR;OptimizationManager
OMR;OptimizationManager;~OptimizationManager();TR;OptimizationManager
TR;TreeTopIteratorImpl;currentNode();TR;NodeIterator
TR;NodeIterator;currentNode();TR;NodeOccurrenceIterator
TR;TreeTopIteratorImpl;currentTree();TR;NodeIterator
TR;TreeTopIteratorImpl;isAt(class TR::PreorderNodeIterator &);TR;NodeIterator
TR;TreeTopIteratorImpl;isAt(TR::TreeTop *);TR;NodeIterator
TR;TreeTopIteratorImpl;logCurrentLocation();TR;NodeIterator
TR;NodeIterator;logCurrentLocation();TR;NodeOccurrenceIterator
TR;TreeTopIteratorImpl;operator!=(TR::TreeTop *);TR;NodeIterator
TR;TreeTopIteratorImpl;operator++();TR;PostorderNodeOccurrenceIterator
TR;TreeTopIteratorImpl;operator==(TR::TreeTop *);TR;NodeIterator
TR;TreeTopIteratorImpl;stepForward();TR;PostorderNodeOccurrenceIterator
TR;TreeTopIteratorImpl;operator++();TR;PostorderNodeIterator
TR;TreeTopIteratorImpl;stepForward();TR;PostorderNodeIterator
TR;TreeTopIteratorImpl;operator++();TR;PreorderNodeIterator
TR;TreeTopIteratorImpl;stepForward();TR;PreorderNodeIterator
TR;TreeTopIteratorImpl;operator++();TR;PreorderNodeOccurrenceIterator
TR;TreeTopIteratorImpl;stepForward();TR;PreorderNodeOccurrenceIterator
TR;TreeTopIteratorImpl;stepBackward();TR;TreeTopIterator
TR;TreeTopIteratorImpl;stepForward();TR;TreeTopIterator
OMR;MonitorTable;MonitorTable();TR;MonitorTable
TR;Pattern;getName();TR;AnythingPattern
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;AnythingPattern
TR;Pattern;getName();TR;ChildPattern
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChildPattern
TR;Pattern;getName();TR;ChildrenPattern
TR;ChildrenPattern;getName();TR;CommutativePattern
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChildrenPattern
TR;ChildrenPattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;CommutativePattern
TR;Pattern;getName();TR;ChoicePattern
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChoicePattern
TR;Pattern;getName();TR;OpCodePattern
TR;OpCodePattern;getName();TR;IConstPattern
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;OpCodePattern
TR;OpCodePattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;IConstPattern
TR;Pattern;tracePattern(TR::Node *);TR;OpCodePattern
TR;OpCodePattern;getName();TR;LConstPattern
TR;OpCodePattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;LConstPattern
TR;Pattern;getName();TR;NoRegisterPattern
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;NoRegisterPattern
TR;Pattern;getName();TR;UnifyPattern
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;UnifyPattern
OMR;IlGenRequest;IlGenRequest(TR::IlGeneratorMethodDetails &);TR;IlGenRequest
OMR;IlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;CompileIlGenRequest
OMR;IlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;CompileIlGenRequest
OMR;IlGenRequest;~IlGenRequest();TR;IlGenRequest
OMR;IlGeneratorMethodDetails;IlGeneratorMethodDetails();TestCompiler;IlGeneratorMethodDetails
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails();TR;IlGeneratorMethodDetails
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails(class TR_ResolvedMethod *);TR;IlGeneratorMethodDetails
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails(TR::ResolvedMethod *);TR;IlGeneratorMethodDetails
OMR;IlGeneratorMethodDetails;print(class TR_FrontEnd *,TR::FILE *);TestCompiler;IlGeneratorMethodDetails
OMR;IlGeneratorMethodDetails;self();OMR;IlGeneratorMethodDetails
OMR;IlGeneratorMethodDetails;~IlGeneratorMethodDetails();TestCompiler;IlGeneratorMethodDetails
TestCompiler;IlGeneratorMethodDetails;~IlGeneratorMethodDetails();TR;IlGeneratorMethodDetails
TR;IlGenRequest;allowIlGenOptimizations();TR;InliningIlGenRequest
OMR;IlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;InliningIlGenRequest
TR;InliningIlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;PartialInliningIlGenRequest
OMR;IlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;InliningIlGenRequest
TR;InliningIlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;PartialInliningIlGenRequest
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType);TR;AutomaticSymbol
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t);TR;AutomaticSymbol
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t,const char *);TR;AutomaticSymbol
OMR;Symbol;getKind();OMR;AutomaticSymbol
OMR;Symbol;isReferenced();OMR;AutomaticSymbol
OMR;RegisterMappedSymbol;self();OMR;AutomaticSymbol
OMR;AutomaticSymbol;~AutomaticSymbol();TR;AutomaticSymbol
OMR;StaticSymbol;StaticSymbol(TR::DataType,void *);TR;StaticSymbol
OMR;StaticSymbol;StaticSymbol(TR::DataType);TR;StaticSymbol
OMR;StaticSymbol;StaticSymbol(TR::DataType,uint32_t);TR;StaticSymbol
OMR;Symbol;getName();OMR;StaticSymbol
OMR;Symbol;self();OMR;StaticSymbol
OMR;StaticSymbol;~StaticSymbol();TR;StaticSymbol
OMR;Optimization;optDetailString();TR;Inliner
OMR;Optimization;perform();TR;Inliner
TR::GlobalSet;Set;get(uint32_t);TR::GlobalSet;DenseSet
TR::GlobalSet;Set;print(TR::Compilation *);TR::GlobalSet;DenseSet
TR::GlobalSet;Set;set(uint32_t);TR::GlobalSet;DenseSet
TR::GlobalSet;Set;get(uint32_t);TR::GlobalSet;SparseSet
TR::GlobalSet;Set;print(TR::Compilation *);TR::GlobalSet;SparseSet
TR::GlobalSet;Set;set(uint32_t);TR::GlobalSet;SparseSet
OMR;TransformUtil;TransformUtil();TR;TransformUtil
TR;Link;jitPersistentAlloc(size_t);TR;DirectCallSite
TR;Link;jitPersistentFree(void *);TR;DirectCallSite
TR;Link;operator delete(void *,TR::Region &);TR;DirectCallSite
TR;Link;operator delete(void *,size_t);TR;DirectCallSite
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator delete[](void *,TR::Region &);TR;DirectCallSite
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;DirectCallSite
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;DirectCallSite
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite
TR;Link;operator new(size_t,TR::Region &);TR;DirectCallSite
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;DirectCallSite
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator new[](size_t,TR::Region &);TR;DirectCallSite
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;DirectCallSite
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;DirectCallSite
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite
TR;InlinerBase;inlineCallTargets(TR::ResolvedMethodSymbol *,class TR_CallStack *,class TR_InnerPreexistenceInfo *);TR;DumbInliner
TR;InlinerBase;inlineRecognizedMethod(TR::RecognizedMethod);TR;InlineCall
TR;Link;jitPersistentAlloc(size_t);TR;IndirectCallSite
TR;IndirectCallSite;jitPersistentAlloc(size_t);TR;FunctionPointerCallSite
TR;Link;jitPersistentFree(void *);TR;IndirectCallSite
TR;IndirectCallSite;jitPersistentFree(void *);TR;FunctionPointerCallSite
TR;Link;operator delete(void *,TR::Region &);TR;IndirectCallSite
TR;IndirectCallSite;operator delete(void *,TR::Region &);TR;FunctionPointerCallSite
TR;Link;operator delete(void *,size_t);TR;IndirectCallSite
TR;IndirectCallSite;operator delete(void *,size_t);TR;FunctionPointerCallSite
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite
TR;IndirectCallSite;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator delete[](void *,TR::Region &);TR;IndirectCallSite
TR;IndirectCallSite;operator delete[](void *,TR::Region &);TR;FunctionPointerCallSite
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite
TR;IndirectCallSite;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;IndirectCallSite
TR;IndirectCallSite;operator new(size_t,TR_ArenaAllocator *);TR;FunctionPointerCallSite
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;IndirectCallSite
TR;IndirectCallSite;operator new(size_t,class TR_PersistentMemory *);TR;FunctionPointerCallSite
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite
TR;IndirectCallSite;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite
TR;Link;operator new(size_t,TR::Region &);TR;IndirectCallSite
TR;IndirectCallSite;operator new(size_t,TR::Region &);TR;FunctionPointerCallSite
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;IndirectCallSite
TR;IndirectCallSite;operator new(size_t,TR::Internal::PersistentNewType);TR;FunctionPointerCallSite
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator new[](size_t,TR::Region &);TR;IndirectCallSite
TR;IndirectCallSite;operator new[](size_t,TR::Region &);TR;FunctionPointerCallSite
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;IndirectCallSite
TR;IndirectCallSite;operator new[](size_t,class TR_PersistentMemory *);TR;FunctionPointerCallSite
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;IndirectCallSite
TR;IndirectCallSite;operator new[](size_t,TR::Internal::PersistentNewType);TR;FunctionPointerCallSite
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite
TR;IndirectCallSite;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite
TR;IndirectCallSite;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite
OMR;Optimization;optDetailString();TR;TrivialInliner
OMR;Optimization;perform();TR;TrivialInliner
OMR::Z;Linkage;Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions);TR;Linkage
OMR;Linkage;createEpilogue(TR::Instruction *);OMR::Z;Linkage
OMR;Linkage;createPrologue(TR::Instruction *);OMR::Z;Linkage
OMR;Linkage;getFormalParameterGlobalRegister(TR::ParameterSymbol *);OMR::Z;Linkage
OMR;Linkage;getRegisterSaveSize();OMR::Z;Linkage
OMR;Linkage;getRightToLeft();OMR::Z;Linkage
OMR;Linkage;hasToBeOnStack(TR::ParameterSymbol *);OMR::Z;Linkage
OMR;Linkage;mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);OMR::Z;Linkage
OMR;Linkage;mapStack(TR::ResolvedMethodSymbol *);OMR::Z;Linkage
OMR;Linkage;numArgumentRegisters(enum TR_RegisterKinds);OMR::Z;Linkage
OMR;Linkage;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);OMR::Z;Linkage
OMR;Linkage;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &);OMR::Z;Linkage
OMR;Linkage;useCachedStaticAreaAddresses(TR::Compilation *);OMR::Z;Linkage
OMR;Linkage;~Linkage();OMR::Z;Linkage
OMR::Z;Linkage;~Linkage();TR;Linkage
OMR::Z;MemoryReference;MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(int32_t,TR::CodeGenerator *,_Bool);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::CodeGenerator *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *);TR;MemoryReference
OMR::Z;MemoryReference;MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *);TR;MemoryReference
OMR;MemoryReference;jitPersistentAlloc(size_t);OMR::Z;MemoryReference
OMR;MemoryReference;jitPersistentFree(void *);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete(void *,size_t);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete(void *,TR::Region &);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete[](void *,TR::Region &);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference
OMR;MemoryReference;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator new(size_t,class TR_PersistentMemory *);OMR::Z;MemoryReference
OMR;MemoryReference;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference
OMR;MemoryReference;operator new(size_t,TR_ArenaAllocator *);OMR::Z;MemoryReference
OMR;MemoryReference;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator new(size_t,TR::Internal::PersistentNewType);OMR::Z;MemoryReference
OMR;MemoryReference;operator new(size_t,TR::Region &);OMR::Z;MemoryReference
OMR;MemoryReference;operator new[](size_t,TR::Region &);OMR::Z;MemoryReference
OMR;MemoryReference;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator new[](size_t,class TR_PersistentMemory *);OMR::Z;MemoryReference
OMR;MemoryReference;operator new[](size_t,TR::Internal::PersistentNewType);OMR::Z;MemoryReference
OMR;MemoryReference;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;MemoryReference
OMR;MemoryReference;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;MemoryReference
OMR;MemoryReference;~MemoryReference();OMR::Z;MemoryReference
OMR::Z;MemoryReference;~MemoryReference();TR;MemoryReference
OMR;RegisterDependencyConditions;RegisterDependencyConditions();OMR::Z;RegisterDependencyConditions
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions();TR;RegisterDependencyConditions
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions(class TR_S390RegisterDependencyGroup *,class TR_S390RegisterDependencyGroup *,uint16_t,uint16_t,TR::CodeGenerator *);TR;RegisterDependencyConditions
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions(uint16_t,uint16_t,TR::CodeGenerator *);TR;RegisterDependencyConditions
OMR::Z;RegisterDependencyConditions;RegisterDependencyConditions(TR::CodeGenerator *,TR::Node *,uint32_t,TR::Instruction **);TR;RegisterDependencyConditions
OMR;RegisterDependencyConditions;jitPersistentAlloc(size_t);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;jitPersistentFree(void *);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete(void *,TR::Region &);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete(void *,size_t);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete[](void *,TR::Region &);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new(size_t,TR_ArenaAllocator *);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new(size_t,TR::Internal::PersistentNewType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new(size_t,class TR_PersistentMemory *);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new(size_t,TR::Region &);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new[](size_t,TR::Region &);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_PersistentMemory *);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new[](size_t,TR::Internal::PersistentNewType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::Z;RegisterDependencyConditions
OMR;RegisterDependencyConditions;~RegisterDependencyConditions();OMR::Z;RegisterDependencyConditions
OMR;Snippet;emitSnippetBody();TR;S390ConstantDataSnippet
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390ConstantInstructionSnippet
TR;S390ConstantDataSnippet;getConstantSize();TR;S390ConstantInstructionSnippet
TR;S390ConstantDataSnippet;getDataAs8Bytes();TR;S390ConstantInstructionSnippet
OMR::Z;Snippet;getKind();TR;S390ConstantDataSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390ConstantInstructionSnippet
OMR;Snippet;getLength(int32_t);TR;S390ConstantDataSnippet
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390ConstantInstructionSnippet
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390DeclTrampSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390DeclTrampSnippet
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390EyeCatcherDataSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390EyeCatcherDataSnippet
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390InterfaceCallDataSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390InterfaceCallDataSnippet
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390InterfaceCallDataSnippet
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390JNICallDataSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390JNICallDataSnippet
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390JNICallDataSnippet
OMR;Snippet;print(TR::FILE *,class TR_Debug *);TR;S390JNICallDataSnippet
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390LabelTableSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390LabelTableSnippet
TR;S390ConstantDataSnippet;getLength(int32_t);TR;S390LabelTableSnippet
OMR;Snippet;emitSnippetBody();TR;S390TargetAddressSnippet
TR;S390TargetAddressSnippet;emitSnippetBody();TR;S390LookupSwitchSnippet
OMR::Z;Snippet;getKind();TR;S390TargetAddressSnippet
TR;S390TargetAddressSnippet;getKind();TR;S390LookupSwitchSnippet
OMR;Snippet;getLength(int32_t);TR;S390TargetAddressSnippet
TR;S390TargetAddressSnippet;getLength(int32_t);TR;S390LookupSwitchSnippet
TR;S390ConstantDataSnippet;emitSnippetBody();TR;S390SortJumpTrampSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390SortJumpTrampSnippet
TR;S390ConstantDataSnippet;getKind();TR;S390WritableDataSnippet
OMR;Optimization;optDetailString();TR;LoadExtensions
OMR;Optimization;perform();TR;LoadExtensions
OMR::Z;Register;FlattenRegisterPairs(TR_Queue<TR::Register> *);OMR;RegisterPair
OMR;RegisterPair;RegisterPair(TR::Register *,TR::Register *);OMR::Z;RegisterPair
OMR::Z;RegisterPair;RegisterPair(TR::Register *,TR::Register *);TR;RegisterPair
OMR;RegisterPair;RegisterPair(enum TR_RegisterKinds);OMR::Z;RegisterPair
OMR::Z;RegisterPair;RegisterPair(enum TR_RegisterKinds);TR;RegisterPair
OMR;RegisterPair;RegisterPair();OMR::Z;RegisterPair
OMR::Z;RegisterPair;RegisterPair();TR;RegisterPair
OMR;Register;block();OMR;RegisterPair
OMR;Register;getHighOrder();OMR;RegisterPair
OMR;Register;getLowOrder();OMR;RegisterPair
OMR;Register;getRegister();OMR;RegisterPair
OMR;Register;getRegisterPair();OMR;RegisterPair
OMR;RegisterPair;setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::Z;RegisterPair
OMR;RegisterPair;setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::Z;RegisterPair
OMR;Register;unblock();OMR;RegisterPair
OMR::Z;Register;usesRegister(TR::Register *);OMR;RegisterPair
OMR;RegisterPair;~RegisterPair();OMR::Z;RegisterPair
OMR::Z;RegisterPair;~RegisterPair();TR;RegisterPair
TR;ValueNumberInfo;allocateValueNumber(TR::Node *);TR;HashValueNumberInfo
TR;ValueNumberInfo;initializeNode(TR::Node *,int32_t &);TR;HashValueNumberInfo
OMR;IL;IL();TR;IL
TR;SegmentAllocator;allocationLimit();OMR;SystemSegmentProvider
TR;SegmentProvider;bytesAllocated();OMR;SystemSegmentProvider
TR;SegmentAllocator;regionBytesAllocated();OMR;SystemSegmentProvider
TR;SegmentProvider;release(TR::MemorySegment &);OMR;SystemSegmentProvider
TR;SegmentProvider;request(size_t);OMR;SystemSegmentProvider
TR;SegmentAllocator;setAllocationLimit(size_t);OMR;SystemSegmentProvider
TR;SegmentAllocator;systemBytesAllocated();OMR;SystemSegmentProvider
TR;CallStackIterator;printStackBacktrace(TR::Compilation *);TR;LinuxCallStackIterator
__cxxabiv1;__pbase_type_info;__pointer_catch(const class __cxxabiv1::__pbase_type_info *,void **,unsigned int);__cxxabiv1;__pointer_to_member_type_info
__cxxabiv1;__pbase_type_info;__pointer_catch(const class __cxxabiv1::__pbase_type_info *,void **,unsigned int);__cxxabiv1;__pointer_type_info
__cxxabiv1;__class_type_info;__do_dyncast(ptrdiff_t,enum __cxxabiv1::__class_type_info::__sub_kind,const class __cxxabiv1::__class_type_info *,const void *,const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__dyncast_result &);__cxxabiv1;__si_class_type_info
__cxxabiv1;__class_type_info;__do_find_public_src(ptrdiff_t,const void *,const class __cxxabiv1::__class_type_info *,const void *);__cxxabiv1;__si_class_type_info
__cxxabiv1;__class_type_info;__do_upcast(const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__upcast_result &__restrict);__cxxabiv1;__si_class_type_info
__cxxabiv1;__class_type_info;__do_dyncast(ptrdiff_t,enum __cxxabiv1::__class_type_info::__sub_kind,const class __cxxabiv1::__class_type_info *,const void *,const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__dyncast_result &);__cxxabiv1;__vmi_class_type_info
__cxxabiv1;__class_type_info;__do_find_public_src(ptrdiff_t,const void *,const class __cxxabiv1::__class_type_info *,const void *);__cxxabiv1;__vmi_class_type_info
__cxxabiv1;__class_type_info;__do_upcast(const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__upcast_result &__restrict);__cxxabiv1;__vmi_class_type_info
OMR;GCRegisterMap;GCRegisterMap();TR;GCRegisterMap
OMR;GCRegisterMap;~GCRegisterMap();TR;GCRegisterMap
OMR;GCStackAtlas;GCStackAtlas(uint32_t,uint32_t,class TR_Memory *);TR;GCStackAtlas
OMR::Z;RegisterIterator;RegisterIterator(TR::Machine *,enum TR_RegisterKinds);TR;RegisterIterator
OMR;Optimization;optDetailString();TR;AsyncCheckInsertion
OMR;Optimization;perform();TR;AsyncCheckInsertion
OMR;Optimization;shouldPerform();TR;AsyncCheckInsertion
TR;BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;GlobalAnticipatability
TR;BackwardDFSetAnalysis;analyzeNodeIfSuccessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;getKind();TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeDFSetAnalysis();TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &,_Bool);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;traceBBVA();TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;~TR_BackwardDFSetAnalysis();TR;BackwardDFSetAnalysis
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;Liveness
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;LiveOnAllPaths
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;RegisterAnticipatability
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;BackwardIntersectionDFSetAnalysis
TR;BackwardIntersectionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardIntersectionDFSetAnalysis
TR;BackwardIntersectionDFSetAnalysis;initializeOutSetInfo();TR;BackwardIntersectionDFSetAnalysis
TR;BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BackwardUnionDFSetAnalysis
TR;BackwardUnionDFSetAnalysis;getKind();TR;BackwardUnionDFSetAnalysis
TR;BackwardUnionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardUnionDFSetAnalysis
TR;BackwardUnionDFSetAnalysis;initializeOutSetInfo();TR;BackwardUnionDFSetAnalysis
TR;BackwardUnionDFSetAnalysis;~TR_BackwardUnionDFSetAnalysis();TR;BackwardUnionDFSetAnalysis
TR;BasicDFSetAnalysis;TR_BasicDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;createAnalysisInfo();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;doAnalysis(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;getAnalysisInfo(class TR_Structure *);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;getKind();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;getNumberOfBits();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initialize();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeBasicDFSetAnalysis();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeBlockInfo(_Bool);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForStructure(class TR_Structure *);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForStructures();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoPropertyForStructure(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;performAnalysis(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;supportsGenAndKillSetsForStructures();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;traceBVA();TR;BasicDFSetAnalysis
TR;BasicDFSetAnalysis;~TR_BasicDFSetAnalysis();TR;BasicDFSetAnalysis
TR;ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;analyzeNodeIfPredecessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;IntersectionBitVectorAnalysis
TR;BasicDFSetAnalysis;compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;getKind();TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initialize();TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeDFSetAnalysis();TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;initializeInfo(class TR_BitVector *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;initializeInfo(class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;inverseCompose(class TR_BitVector *,class TR_BitVector *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;inverseInitializeInfo(class TR_BitVector *);TR;ForwardDFSetAnalysis
TR;BasicDFSetAnalysis;inverseInitializeInfo(class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;~TR_ForwardDFSetAnalysis();TR;ForwardDFSetAnalysis
TR;ForwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;Earliestness
TR;ForwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;RegisterAvailability
OMR;Optimization;optDetailString();TR;CatchBlockRemover
OMR;Optimization;perform();TR;CatchBlockRemover
OMR;Optimization;optDetailString();TR;CFGSimplifier
OMR;Optimization;perform();TR;CFGSimplifier
OMR;Optimization;optDetailString();TR;CompactLocals
OMR;Optimization;perform();TR;CompactLocals
OMR;Optimization;optDetailString();TR;CopyPropagation
OMR;Optimization;perform();TR;CopyPropagation
TR;IsolatedStoreElimination;create(TR::OptimizationManager *);TR;DeadStoreElimination
OMR;Optimization;optDetailString();TR;IsolatedStoreElimination
TR;IsolatedStoreElimination;optDetailString();TR;DeadStoreElimination
OMR;Optimization;perform();TR;IsolatedStoreElimination
OMR;Optimization;optDetailString();TR;DeadTreesElimination
OMR;Optimization;perform();TR;DeadTreesElimination
OMR;Optimization;performOnBlock(TR::Block *);TR;DeadTreesElimination
OMR;Optimization;prePerformOnBlocks();TR;DeadTreesElimination
OMR;Optimization;optDetailString();TR;ExpressionsSimplification
OMR;Optimization;perform();TR;ExpressionsSimplification
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;FieldPrivatizer
OMR;Optimization;optDetailString();TR;FieldPrivatizer
OMR;Optimization;perform();TR;LoopTransformer
TR;LoopTransformer;perform();TR;FieldPrivatizer
TR;LoopTransformer;asLoopCanonicalizer();TR;LoopCanonicalizer
TR;LoopCanonicalizer;create(TR::OptimizationManager *);TR;RedundantInductionVarElimination
TR;LoopTransformer;examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);TR;LoopCanonicalizer
OMR;Optimization;optDetailString();TR;LoopCanonicalizer
TR;LoopCanonicalizer;optDetailString();TR;RedundantInductionVarElimination
TR;LoopTransformer;perform();TR;LoopCanonicalizer
TR;LoopCanonicalizer;perform();TR;RedundantInductionVarElimination
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopInverter
OMR;Optimization;optDetailString();TR;LoopInverter
TR;LoopTransformer;perform();TR;LoopInverter
OMR;Optimization;optDetailString();TR;InductionVariableAnalysis
OMR;Optimization;perform();TR;InductionVariableAnalysis
TR;BasicInductionVariable;getExitValue();TR;DerivedInductionVariable
TR;BasicInductionVariable;getIterationCount();TR;DerivedInductionVariable
TR;BasicInductionVariable;jitPersistentAlloc(size_t);TR;DerivedInductionVariable
TR;BasicInductionVariable;jitPersistentFree(void *);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete(void *,size_t);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete(void *,TR::Region &);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete[](void *,TR::Region &);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new(size_t,TR_ArenaAllocator *);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new(size_t,TR::Internal::PersistentNewType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_PersistentMemory *);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new(size_t,TR::Region &);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new[](size_t,TR::Region &);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new[](size_t,TR::Internal::PersistentNewType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_PersistentMemory *);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable
OMR;Optimization;optDetailString();TR;GeneralLoopUnroller
TR;LoopTransformer;perform();TR;GeneralLoopUnroller
OMR;Optimization;optDetailString();TR;IVTypeTransformer
TR;LoopTransformer;perform();TR;IVTypeTransformer
TR;LoopTransformer;checkIfIncrementInDifferentExtendedBlock(TR::Block *,int32_t);TR;LoopStrider
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopStrider
TR;LoopTransformer;examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);TR;LoopStrider
TR;LoopTransformer;isStoreInRequiredForm(int32_t,class TR_Structure *);TR;LoopStrider
OMR;Optimization;optDetailString();TR;LoopStrider
TR;LoopTransformer;perform();TR;LoopStrider
TR;LoopTransformer;updateLoadUsedInLoopIncrement(TR::Node *,int32_t);TR;LoopStrider
TR;LoopTransformer;updateStoreInfo(int32_t,TR::TreeTop *);TR;LoopStrider
TR;BasicInductionVariable;getExitValue();TR;PrimaryInductionVariable
TR;BasicInductionVariable;getIterationCount();TR;PrimaryInductionVariable
TR;BasicInductionVariable;jitPersistentAlloc(size_t);TR;PrimaryInductionVariable
TR;BasicInductionVariable;jitPersistentFree(void *);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete(void *,size_t);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete(void *,TR::Region &);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete[](void *,TR::Region &);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new(size_t,TR_ArenaAllocator *);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new(size_t,TR::Internal::PersistentNewType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_PersistentMemory *);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new(size_t,TR::Region &);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new[](size_t,TR::Region &);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new[](size_t,TR::Internal::PersistentNewType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_PersistentMemory *);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable
TR;BasicInductionVariable;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable
OMR;Optimization;optDetailString();TR;GlobalRegisterAllocator
OMR;Optimization;perform();TR;GlobalRegisterAllocator
OMR;Optimization;optDetailString();TR;LiveRangeSplitter
OMR;Optimization;perform();TR;LiveRangeSplitter
;SuccessorIterator;getFirstSuccessor();;multipleJumpSuccessorIterator
;SuccessorIterator;getNextSuccessor();;multipleJumpSuccessorIterator
;SuccessorIterator;asSwitchSuccessor();;switchSuccessorIterator
;SuccessorIterator;getFirstSuccessor();;switchSuccessorIterator
;SuccessorIterator;getNextSuccessor();;switchSuccessorIterator
TR;IntersectionDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;IntersectionBitVectorAnalysis
TR;IntersectionDFSetAnalysis;getKind();TR;IntersectionDFSetAnalysis
TR;IntersectionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;IntersectionDFSetAnalysis
TR;IntersectionDFSetAnalysis;initializeInSetInfo();TR;IntersectionDFSetAnalysis
OMR;Optimization;optDetailString();TR;LocalLiveRangeReduction
OMR;Optimization;perform();TR;LocalLiveRangeReduction
OMR;Optimization;postPerformOnBlocks();TR;LocalLiveRangeReduction
OMR;Optimization;prePerformOnBlocks();TR;LocalLiveRangeReduction
OMR;Optimization;optDetailString();TR;LocalReordering
OMR;Optimization;perform();TR;LocalReordering
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalReordering
OMR;Optimization;postPerformOnBlocks();TR;LocalReordering
OMR;Optimization;prePerformOnBlocks();TR;LocalReordering
TR;AddressTree;processBaseAndIndex(TR::Node *);TR;LRAddressTree
TR;LoopTransformer;asLoopReducer();TR;LoopReducer
OMR;Optimization;optDetailString();TR;LoopReducer
TR;LoopTransformer;perform();TR;LoopReducer
OMR;Optimization;optDetailString();TR;LoopReplicator
TR;LoopTransformer;perform();TR;LoopReplicator
TR;LoopTransformer;asLoopVersioner();TR;LoopVersioner
TR;LoopVersioner;create(TR::OptimizationManager *);TR;LoopSpecializer
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopVersioner
TR;LoopTransformer;isStoreInRequiredForm(int32_t,class TR_Structure *);TR;LoopVersioner
OMR;Optimization;optDetailString();TR;LoopVersioner
TR;LoopVersioner;optDetailString();TR;LoopSpecializer
TR;LoopTransformer;perform();TR;LoopVersioner
OMR;LocalCSE;LocalCSE(TR::OptimizationManager *);TR;LocalCSE
OMR;Optimization;optDetailString();OMR;LocalCSE
OMR;Optimization;perform();OMR;LocalCSE
OMR;Optimization;performOnBlock(TR::Block *);OMR;LocalCSE
OMR;Optimization;postPerformOnBlocks();OMR;LocalCSE
OMR;Optimization;prePerformOnBlocks();OMR;LocalCSE
OMR;LocalCSE;~LocalCSE();TR;LocalCSE
OMR;Optimization;optDetailString();TR;LocalDeadStoreElimination
OMR;Optimization;perform();TR;LocalDeadStoreElimination
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalDeadStoreElimination
OMR;Optimization;postPerformOnBlocks();TR;LocalDeadStoreElimination
OMR;Optimization;prePerformOnBlocks();TR;LocalDeadStoreElimination
OMR;Optimization;self();TR;LocalDeadStoreElimination
OMR;Optimization;optDetailString();TR;ArraysetStoreElimination
OMR;Optimization;perform();TR;ArraysetStoreElimination
OMR;Optimization;performOnBlock(TR::Block *);TR;ArraysetStoreElimination
OMR;Optimization;optDetailString();TR;CleanseTrees
OMR;Optimization;perform();TR;CleanseTrees
OMR;Optimization;performOnBlock(TR::Block *);TR;CleanseTrees
OMR;Optimization;prePerformOnBlocks();TR;CleanseTrees
OMR;Optimization;optDetailString();TR;BlockShuffling
OMR;Optimization;perform();TR;BlockShuffling
OMR;Optimization;optDetailString();TR;BlockSplitter
OMR;Optimization;perform();TR;BlockSplitter
TR;Array;operator[](uint32_t);TR;Array
OMR;Optimization;optDetailString();TR;CheckcastAndProfiledGuardCoalescer
OMR;Optimization;perform();TR;CheckcastAndProfiledGuardCoalescer
TR;ColdBlockMarker;create(TR::OptimizationManager *);TR;ColdBlockOutlining
OMR;Optimization;optDetailString();TR;ColdBlockMarker
TR;ColdBlockMarker;optDetailString();TR;ColdBlockOutlining
OMR;Optimization;perform();TR;ColdBlockMarker
TR;ColdBlockMarker;perform();TR;ColdBlockOutlining
OMR;Optimization;optDetailString();TR;CompactNullChecks
OMR;Optimization;perform();TR;CompactNullChecks
OMR;Optimization;performOnBlock(TR::Block *);TR;CompactNullChecks
OMR;Optimization;optDetailString();TR;EliminateRedundantGotos
OMR;Optimization;perform();TR;EliminateRedundantGotos
OMR;Optimization;performOnBlock(TR::Block *);TR;EliminateRedundantGotos
OMR;Optimization;optDetailString();TR;ExtendBasicBlocks
OMR;Optimization;perform();TR;ExtendBasicBlocks
OMR;Optimization;optDetailString();TR;HoistBlocks
OMR;Optimization;perform();TR;HoistBlocks
OMR;Optimization;performOnBlock(TR::Block *);TR;HoistBlocks
OMR;Optimization;optDetailString();TR;InvariantArgumentPreexistence
OMR;Optimization;perform();TR;InvariantArgumentPreexistence
TR;Rematerialization;create(TR::OptimizationManager *);TR;LongRegAllocation
OMR;Optimization;optDetailString();TR;Rematerialization
TR;Rematerialization;optDetailString();TR;LongRegAllocation
OMR;Optimization;perform();TR;Rematerialization
OMR;Optimization;performOnBlock(TR::Block *);TR;Rematerialization
OMR;Optimization;postPerformOnBlocks();TR;LongRegAllocation
OMR;Optimization;prePerformOnBlocks();TR;Rematerialization
OMR;Optimization;optDetailString();TR;OrderBlocks
OMR;Optimization;perform();TR;OrderBlocks
OMR;Optimization;shouldPerform();TR;OrderBlocks
OMR;Optimization;optDetailString();TR;PeepHoleBasicBlocks
OMR;Optimization;perform();TR;PeepHoleBasicBlocks
OMR;Optimization;optDetailString();TR;ProfiledNodeVersioning
OMR;Optimization;perform();TR;ProfiledNodeVersioning
OMR;Optimization;optDetailString();TR;SimplifyAnds
OMR;Optimization;perform();TR;SimplifyAnds
OMR;Optimization;performOnBlock(TR::Block *);TR;SimplifyAnds
OMR;Optimization;optDetailString();TR;TrivialBlockExtension
OMR;Optimization;perform();TR;TrivialBlockExtension
OMR;Optimization;performOnBlock(TR::Block *);TR;TrivialBlockExtension
OMR;Optimization;optDetailString();TR;TrivialDeadTreeRemoval
OMR;Optimization;perform();TR;TrivialDeadTreeRemoval
OMR;Optimization;performOnBlock(TR::Block *);TR;TrivialDeadTreeRemoval
OMR;Simplifier;Simplifier(TR::OptimizationManager *);TR;Simplifier
OMR;Optimization;optDetailString();OMR;Simplifier
OMR;Optimization;perform();OMR;Simplifier
OMR;Optimization;performOnBlock(TR::Block *);OMR;Simplifier
OMR;Optimization;postPerformOnBlocks();OMR;Simplifier
OMR;Optimization;prePerformOnBlocks();OMR;Simplifier
OMR;Optimization;prepareToReplaceNode(TR::Node *);OMR;Simplifier
OMR;Simplifier;~Simplifier();TR;Simplifier
;ListBase;jitPersistentAlloc(size_t);;List
;List;jitPersistentAlloc(size_t);TR;OrderedBlockList
;ListBase;jitPersistentFree(void *);;List
;List;jitPersistentFree(void *);TR;OrderedBlockList
;ListBase;operator delete(void *,TR::Region &);;List
;List;operator delete(void *,TR::Region &);TR;OrderedBlockList
;ListBase;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);;List
;List;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList
;ListBase;operator delete(void *,size_t);;List
;List;operator delete(void *,size_t);TR;OrderedBlockList
;ListBase;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List
;List;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List
;List;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator delete[](void *,TR::Region &);;List
;List;operator delete[](void *,TR::Region &);TR;OrderedBlockList
;ListBase;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);;List
;List;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList
;ListBase;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List
;List;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List
;List;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator new(size_t,TR::Region &);;List
;List;operator new(size_t,TR::Region &);TR;OrderedBlockList
;ListBase;operator new(size_t,TR::Internal::PersistentNewType);;List
;List;operator new(size_t,TR::Internal::PersistentNewType);TR;OrderedBlockList
;ListBase;operator new(size_t,class TR_PersistentMemory *);;List
;List;operator new(size_t,class TR_PersistentMemory *);TR;OrderedBlockList
;ListBase;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);;List
;List;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList
;ListBase;operator new(size_t,TR_ArenaAllocator *);;List
;List;operator new(size_t,TR_ArenaAllocator *);TR;OrderedBlockList
;ListBase;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List
;List;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List
;List;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator new[](size_t,TR::Region &);;List
;List;operator new[](size_t,TR::Region &);TR;OrderedBlockList
;ListBase;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List
;List;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List
;List;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList
;ListBase;operator new[](size_t,TR::Internal::PersistentNewType);;List
;List;operator new[](size_t,TR::Internal::PersistentNewType);TR;OrderedBlockList
;ListBase;operator new[](size_t,class TR_PersistentMemory *);;List
;List;operator new[](size_t,class TR_PersistentMemory *);TR;OrderedBlockList
;ListBase;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);;List
;List;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList
TR;HedgeTreeHandler;allocate(int32_t);OMR::ValuePropagation;ValueConstraintHandler
TR;HedgeTreeHandler;comp();OMR::ValuePropagation;ValueConstraintHandler
OMR;Optimization;optDetailString();TR;ArraycopyTransformation
OMR;Optimization;perform();TR;ArraycopyTransformation
OMR;ValuePropagation;ValuePropagation(TR::OptimizationManager *);TR;ValuePropagation
OMR;Optimization;optDetailString();TR;GlobalValuePropagation
OMR;Optimization;perform();TR;GlobalValuePropagation
OMR;ValuePropagation;~ValuePropagation();TR;ValuePropagation
OMR;Optimization;optDetailString();TR;LocalValuePropagation
OMR;Optimization;perform();TR;LocalValuePropagation
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalValuePropagation
OMR;Optimization;postPerformOnBlocks();TR;LocalValuePropagation
OMR;Optimization;prePerformOnBlocks();TR;LocalValuePropagation
OMR;Optimizer;~Optimizer();TestCompiler;Optimizer
OMR;Optimization;optDetailString();TR;RegDepCopyRemoval
OMR;Optimization;perform();TR;RegDepCopyRemoval
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ExceptionCheckMotion
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ExceptionCheckMotion
TR;DataFlowAnalysis;asExceptionCheckMotion();TR;ExceptionCheckMotion
TR;DataFlowAnalysis;getKind();TR;ExceptionCheckMotion
TR;DataFlowAnalysis;perform();TR;ExceptionCheckMotion
TR;DataFlowAnalysis;trace();TR;ExceptionCheckMotion
OMR;Optimization;optDetailString();TR;GeneralSinkStores
OMR;Optimization;perform();TR;GeneralSinkStores
TR;SinkStores;sinkStorePlacement(class TR_MovableStore *,_Bool);TR;GeneralSinkStores
TR;SinkStores;storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);TR;GeneralSinkStores
OMR;Optimization;optDetailString();TR;IndexExprManipulator
OMR;Optimization;perform();TR;IndexExprManipulator
OMR;Optimization;optDetailString();TR;InnerPreexistence
OMR;Optimization;perform();TR;InnerPreexistence
OMR;Optimization;optDetailString();TR;OSRDefAnalysis
OMR;Optimization;perform();TR;OSRDefAnalysis
TR;UseDefInfo;performAnalysis(class TR_UseDefInfo::AuxiliaryData &);TR;OSRDefInfo
TR;UseDefInfo;processReachingDefinition(void *,class TR_UseDefInfo::AuxiliaryData &);TR;OSRDefInfo
OMR;Optimization;optDetailString();TR;OSRExceptionEdgeRemoval
OMR;Optimization;perform();TR;OSRExceptionEdgeRemoval
OMR;Optimization;optDetailString();TR;OSRLiveRangeAnalysis
OMR;Optimization;perform();TR;OSRLiveRangeAnalysis
OMR;Optimization;optDetailString();TR;PartialRedundancy
OMR;Optimization;perform();TR;PartialRedundancy
OMR;Optimization;optDetailString();TR;PrefetchInsertion
TR;LoopTransformer;perform();TR;PrefetchInsertion
OMR;Optimization;optDetailString();TR;RedundantAsyncCheckRemoval
OMR;Optimization;perform();TR;RedundantAsyncCheckRemoval
OMR;Optimization;shouldPerform();TR;RedundantAsyncCheckRemoval
TR;ForwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;RedundantExpressionAdjustment
TR;DataFlowAnalysis;asRedundantExpressionAdjustment();TR;RedundantExpressionAdjustment
TR;IntersectionDFSetAnalysis;getKind();TR;RedundantExpressionAdjustment
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RedundantExpressionAdjustment
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;RedundantExpressionAdjustment
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RedundantExpressionAdjustment
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;RedundantExpressionAdjustment
TR;BasicDFSetAnalysis;supportsGenAndKillSetsForStructures();TR;RedundantExpressionAdjustment
OMR;Optimization;optDetailString();TR;ShrinkWrap
OMR;Optimization;perform();TR;ShrinkWrap
OMR;Optimization;prePerformOnBlocks();TR;ShrinkWrap
OMR;Optimization;optDetailString();TR;StripMiner
TR;LoopTransformer;perform();TR;StripMiner
OMR;Optimization;shouldPerform();TR;StripMiner
OMR;Optimization;optDetailString();TR;TrivialSinkStores
OMR;Optimization;perform();TR;TrivialSinkStores
TR;SinkStores;sinkStorePlacement(class TR_MovableStore *,_Bool);TR;TrivialSinkStores
TR;SinkStores;storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);TR;TrivialSinkStores
OMR;Optimization;optDetailString();TR;VirtualGuardHeadMerger
OMR;Optimization;perform();TR;VirtualGuardHeadMerger
OMR;Optimization;optDetailString();TR;VirtualGuardTailSplitter
OMR;Optimization;perform();TR;VirtualGuardTailSplitter
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanReachGivenBlocks
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;BackwardReachability
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanBeReachedFromCatchBlock
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;ForwardReachability
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanBeReachedWithoutExceptionEdges
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;ForwardReachabilityWithoutExceptionEdges
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanReachNonColdBlocks
TR;UnionDFSetAnalysis;TR_UnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;UnionDFSetAnalysis
TR;UnionDFSetAnalysis;getKind();TR;UnionDFSetAnalysis
TR;UnionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;UnionDFSetAnalysis
TR;UnionDFSetAnalysis;initializeInSetInfo();TR;UnionDFSetAnalysis
TR;UnionDFSetAnalysis;~TR_UnionDFSetAnalysis();TR;UnionDFSetAnalysis
TR;Stats;report(FILE *);TR;StatsHisto
TR;Stats;reset();TR;StatsHisto
TR;Stats;update(double);TR;StatsHisto
TR;Stats;mean();TR;StatsInterval
TR;Stats;report(FILE *);TR;StatsInterval
TR;Stats;stddev();TR;StatsInterval
OMR;AheadOfTimeCompile;AheadOfTimeCompile(uint32_t *,TR::Compilation *);TR;AheadOfTimeCompile
OMR;AheadOfTimeCompile;~AheadOfTimeCompile();TR;AheadOfTimeCompile
OMR;UnresolvedDataSnippet;UnresolvedDataSnippet(TR::CodeGenerator *,TR::Node *,TR::SymbolReference *,_Bool,_Bool);TR;UnresolvedDataSnippet
OMR;Snippet;emitSnippetBody();OMR;UnresolvedDataSnippet
OMR;Snippet;getLength(int32_t);OMR;UnresolvedDataSnippet
OMR;Snippet;self();OMR;UnresolvedDataSnippet
OMR;UnresolvedDataSnippet;~UnresolvedDataSnippet();TR;UnresolvedDataSnippet
OMR::Z;Instruction;description();TR;S390AnnotationInstruction
OMR::Z;Instruction;getKind();TR;S390AnnotationInstruction
OMR::Z;Instruction;assignRegistersAndDependencies(enum TR_RegisterKinds);TR;S390BranchInstruction
OMR::Z;Instruction;description();TR;S390LabeledInstruction
TR;S390LabeledInstruction;description();TR;S390BranchInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390LabeledInstruction
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390BranchInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390LabeledInstruction
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390BranchInstruction
OMR::Z;Instruction;getKind();TR;S390LabeledInstruction
TR;S390LabeledInstruction;getKind();TR;S390BranchInstruction
OMR;Instruction;getLabelSymbol();TR;S390LabeledInstruction
OMR;Instruction;getSnippetForGC();TR;S390BranchInstruction
TR;S390LabeledInstruction;description();TR;S390BranchOnCountInstruction
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390BranchOnCountInstruction
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390BranchOnCountInstruction
TR;S390LabeledInstruction;getKind();TR;S390BranchOnCountInstruction
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390BranchOnCountInstruction
TR;S390LabeledInstruction;description();TR;S390BranchOnIndexInstruction
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390BranchOnIndexInstruction
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390BranchOnIndexInstruction
TR;S390LabeledInstruction;getKind();TR;S390BranchOnIndexInstruction
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390BranchOnIndexInstruction
OMR::Z;Instruction;description();TR;S390PseudoInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390PseudoInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390PseudoInstruction
TR;S390PseudoInstruction;generateBinaryEncoding();TR;S390DebugCounterBumpInstruction
OMR::Z;Instruction;getKind();TR;S390PseudoInstruction
OMR::Z;Instruction;description();TR;S390EInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390EInstruction
OMR::Z;Instruction;getKind();TR;S390EInstruction
OMR::Z;Instruction;description();TR;S390IEInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390IEInstruction
OMR::Z;Instruction;getKind();TR;S390IEInstruction
OMR::Z;Instruction;description();TR;S390IInstruction
OMR::Z;Instruction;getKind();TR;S390IInstruction
OMR::Z;Instruction;description();TR;S390Imm2Instruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390Imm2Instruction
OMR::Z;Instruction;getKind();TR;S390Imm2Instruction
OMR::Z;Instruction;description();TR;S390ImmInstruction
TR;S390ImmInstruction;description();TR;S390ImmSnippetInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390ImmInstruction
TR;S390ImmInstruction;generateBinaryEncoding();TR;S390ImmSnippetInstruction
OMR::Z;Instruction;getKind();TR;S390ImmInstruction
TR;S390ImmInstruction;getKind();TR;S390ImmSnippetInstruction
OMR::Z;Instruction;getS390ImmInstruction();TR;S390ImmInstruction
TR;S390ImmInstruction;description();TR;S390ImmSymInstruction
TR;S390ImmInstruction;generateBinaryEncoding();TR;S390ImmSymInstruction
TR;S390ImmInstruction;getKind();TR;S390ImmSymInstruction
OMR::Z;Instruction;assignRegistersAndDependencies(enum TR_RegisterKinds);TR;S390LabelInstruction
TR;S390LabeledInstruction;description();TR;S390LabelInstruction
TR;S390LabeledInstruction;estimateBinaryLength(int32_t);TR;S390LabelInstruction
TR;S390LabeledInstruction;generateBinaryEncoding();TR;S390LabelInstruction
TR;S390LabeledInstruction;getKind();TR;S390LabelInstruction
OMR::Z;Instruction;description();TR;S390MIIInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390MIIInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390MIIInstruction
OMR::Z;Instruction;getKind();TR;S390MIIInstruction
OMR;Instruction;getLabelSymbol();TR;S390MIIInstruction
OMR::Z;Instruction;description();TR;S390MemInstruction
TR;S390MemInstruction;description();TR;S390MemMemInstruction
TR;S390MemMemInstruction;description();TR;S390SS1Instruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390MemMemInstruction
TR;S390MemMemInstruction;estimateBinaryLength(int32_t);TR;S390SS1Instruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390MemInstruction
TR;S390MemInstruction;generateBinaryEncoding();TR;S390MemMemInstruction
TR;S390MemMemInstruction;generateBinaryEncoding();TR;S390SS1Instruction
OMR::Z;Instruction;getKind();TR;S390MemInstruction
TR;S390MemInstruction;getKind();TR;S390MemMemInstruction
TR;S390MemMemInstruction;getKind();TR;S390SS1Instruction
OMR::Z;Instruction;getMemoryReference();TR;S390MemInstruction
OMR::Z;Instruction;getMemoryReference2();TR;S390MemMemInstruction
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390MemInstruction
OMR::Z;Instruction;description();TR;S390NOPInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390NOPInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390NOPInstruction
OMR::Z;Instruction;getKind();TR;S390NOPInstruction
OMR::Z;Instruction;description();TR;S390OpCodeOnlyInstruction
OMR::Z;Instruction;getKind();TR;S390OpCodeOnlyInstruction
OMR::Z;Instruction;description();TR;S390RegInstruction
TR;S390RegInstruction;description();TR;S390RIEInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RIEInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390RegInstruction
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RIEInstruction
TR;S390RegInstruction;getBranchCondition();TR;S390RIEInstruction
OMR::Z;Instruction;getKind();TR;S390RegInstruction
TR;S390RegInstruction;getKind();TR;S390RIEInstruction
OMR;Instruction;getLabelSymbol();TR;S390RIEInstruction
TR;S390RegInstruction;getMask();TR;S390RIEInstruction
OMR;Instruction;getSnippetForGC();TR;S390RIEInstruction
OMR::Z;Instruction;isRegInstruction();TR;S390RegInstruction
OMR::Z;Instruction;matchesTargetRegister(TR::Register *);TR;S390RegInstruction
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390RegInstruction
TR;S390RegInstruction;setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR;S390RIEInstruction
TR;S390RegInstruction;description();TR;S390RIInstruction
TR;S390RIInstruction;description();TR;S390RISInstruction
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RIInstruction
TR;S390RIInstruction;generateBinaryEncoding();TR;S390RISInstruction
TR;S390RegInstruction;getBranchCondition();TR;S390RISInstruction
TR;S390RegInstruction;getKind();TR;S390RIInstruction
TR;S390RIInstruction;getKind();TR;S390RISInstruction
TR;S390RegInstruction;getMask();TR;S390RISInstruction
TR;S390RegInstruction;setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR;S390RISInstruction
OMR::Z;Instruction;description();TR;S390RILInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RILInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390RILInstruction
OMR::Z;Instruction;getKind();TR;S390RILInstruction
OMR::Z;Instruction;matchesTargetRegister(TR::Register *);TR;S390RILInstruction
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390RILInstruction
TR;S390RegInstruction;description();TR;S390RRInstruction
TR;S390RRInstruction;description();TR;S390RREInstruction
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RRInstruction
TR;S390RegInstruction;getKind();TR;S390RRInstruction
TR;S390RRInstruction;getKind();TR;S390RREInstruction
TR;S390RegInstruction;refsRegister(TR::Register *);TR;S390RRInstruction
TR;S390RRInstruction;description();TR;S390RRFInstruction
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RRFInstruction
TR;S390RRInstruction;getKind();TR;S390RRFInstruction
TR;S390RegInstruction;getMask();TR;S390RRFInstruction
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RRFInstruction
TR;S390RRInstruction;description();TR;S390RRRInstruction
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RRRInstruction
TR;S390RRInstruction;getKind();TR;S390RRRInstruction
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RRRInstruction
TR;S390RRInstruction;description();TR;S390RRSInstruction
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RRSInstruction
TR;S390RegInstruction;getBranchCondition();TR;S390RRSInstruction
TR;S390RRInstruction;getKind();TR;S390RRSInstruction
TR;S390RegInstruction;getMask();TR;S390RRSInstruction
TR;S390RegInstruction;setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR;S390RRSInstruction
TR;S390RegInstruction;description();TR;S390RSInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RSInstruction
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RSInstruction
TR;S390RegInstruction;getFirstRegister();TR;S390RSInstruction
TR;S390RegInstruction;getKind();TR;S390RSInstruction
TR;S390RegInstruction;getLastRegister();TR;S390RSInstruction
OMR::Z;Instruction;getMemoryReference();TR;S390RSInstruction
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390RSInstruction
OMR::Z;Instruction;swap_operands(int,int);TR;S390RSWithImplicitPairStoresInstruction
TR;S390MemInstruction;description();TR;S390RSLInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RSLInstruction
TR;S390MemInstruction;generateBinaryEncoding();TR;S390RSLInstruction
TR;S390MemInstruction;getKind();TR;S390RSLInstruction
TR;S390RegInstruction;description();TR;S390RSLbInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RSLbInstruction
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RSLbInstruction
TR;S390RegInstruction;getKind();TR;S390RSLbInstruction
TR;S390RegInstruction;getMask();TR;S390RSLbInstruction
OMR::Z;Instruction;getMemoryReference();TR;S390RSLbInstruction
TR;S390RSInstruction;description();TR;S390RSYInstruction
TR;S390RSInstruction;getKind();TR;S390RSYInstruction
TR;S390RegInstruction;description();TR;S390RXInstruction
TR;S390RXInstruction;description();TR;S390RXEInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RXInstruction
TR;S390RXInstruction;estimateBinaryLength(int32_t);TR;S390RXEInstruction
TR;S390RegInstruction;generateBinaryEncoding();TR;S390RXInstruction
TR;S390RXInstruction;generateBinaryEncoding();TR;S390RXEInstruction
TR;S390RegInstruction;getKind();TR;S390RXInstruction
TR;S390RXInstruction;getKind();TR;S390RXEInstruction
OMR::Z;Instruction;getMemoryReference();TR;S390RXInstruction
TR;S390RegInstruction;refsRegister(TR::Register *);TR;S390RXInstruction
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390RXInstruction
TR;S390RRInstruction;description();TR;S390RXFInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390RXFInstruction
TR;S390RRInstruction;generateBinaryEncoding();TR;S390RXFInstruction
TR;S390RRInstruction;getKind();TR;S390RXFInstruction
OMR::Z;Instruction;getMemoryReference();TR;S390RXFInstruction
TR;S390RRInstruction;refsRegister(TR::Register *);TR;S390RXFInstruction
TR;S390RXInstruction;description();TR;S390RXYInstruction
TR;S390RXInstruction;estimateBinaryLength(int32_t);TR;S390RXYInstruction
TR;S390RXInstruction;generateBinaryEncoding();TR;S390RXYInstruction
TR;S390RXInstruction;getKind();TR;S390RXYInstruction
TR;S390MemInstruction;description();TR;S390RXYbInstruction
TR;S390MemInstruction;getKind();TR;S390RXYbInstruction
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390RXYbInstruction
TR;S390MemInstruction;description();TR;S390SIInstruction
TR;S390SIInstruction;description();TR;S390SIYInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SIInstruction
TR;S390SIInstruction;estimateBinaryLength(int32_t);TR;S390SIYInstruction
TR;S390MemInstruction;generateBinaryEncoding();TR;S390SIInstruction
TR;S390SIInstruction;generateBinaryEncoding();TR;S390SIYInstruction
TR;S390MemInstruction;getKind();TR;S390SIInstruction
TR;S390SIInstruction;getKind();TR;S390SIYInstruction
OMR::Z;Instruction;setKind(enum OMR::Instruction::Kind);TR;S390SIInstruction
TR;S390MemInstruction;description();TR;S390SILInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SILInstruction
TR;S390MemInstruction;generateBinaryEncoding();TR;S390SILInstruction
TR;S390MemInstruction;getKind();TR;S390SILInstruction
TR;S390MemInstruction;description();TR;S390SInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SInstruction
TR;S390MemInstruction;generateBinaryEncoding();TR;S390SInstruction
TR;S390MemInstruction;getKind();TR;S390SInstruction
OMR::Z;Instruction;description();TR;S390SMIInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390SMIInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390SMIInstruction
OMR::Z;Instruction;getKind();TR;S390SMIInstruction
OMR;Instruction;getLabelSymbol();TR;S390SMIInstruction
OMR::Z;Instruction;getMemoryReference();TR;S390SMIInstruction
TR;S390SS1Instruction;description();TR;S390SS2Instruction
TR;S390SS1Instruction;generateBinaryEncoding();TR;S390SS2Instruction
TR;S390SS1Instruction;getKind();TR;S390SS2Instruction
TR;S390SS1Instruction;description();TR;S390SS4Instruction
TR;S390SS1Instruction;generateBinaryEncoding();TR;S390SS4Instruction
TR;S390SS1Instruction;getKind();TR;S390SS4Instruction
TR;S390MemMemInstruction;description();TR;S390SSEInstruction
TR;S390MemMemInstruction;getKind();TR;S390SSEInstruction
TR;S390RXInstruction;description();TR;S390SSFInstruction
TR;S390RXInstruction;estimateBinaryLength(int32_t);TR;S390SSFInstruction
TR;S390RXInstruction;generateBinaryEncoding();TR;S390SSFInstruction
TR;S390RXInstruction;getKind();TR;S390SSFInstruction
OMR::Z;Instruction;getMemoryReference2();TR;S390SSFInstruction
TR;S390RXInstruction;refsRegister(TR::Register *);TR;S390SSFInstruction
OMR::Z;Instruction;description();TR;S390TranslateInstruction
OMR::Z;Instruction;generateBinaryEncoding();TR;S390TranslateInstruction
OMR::Z;Instruction;getKind();TR;S390TranslateInstruction
OMR::Z;Instruction;refsRegister(TR::Register *);TR;S390TranslateInstruction
TR;S390RegInstruction;description();TR;S390VInstruction
TR;S390VInstruction;description();TR;S390VRIInstruction
TR;S390VRIInstruction;description();TR;S390VRIaInstruction
OMR::Z;Instruction;estimateBinaryLength(int32_t);TR;S390VInstruction
TR;S390RegInstruction;generateBinaryEncoding();TR;S390VInstruction
TR;S390VInstruction;generateBinaryEncoding();TR;S390VRIInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIaInstruction
TR;S390VInstruction;getExtendedMnemonicName();TR;S390VRIInstruction
TR;S390RegInstruction;getKind();TR;S390VInstruction
TR;S390VInstruction;getKind();TR;S390VRIInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIaInstruction
TR;S390VRIInstruction;description();TR;S390VRIbInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIbInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIbInstruction
TR;S390VRIInstruction;description();TR;S390VRIcInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIcInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIcInstruction
TR;S390VRIInstruction;description();TR;S390VRIdInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIdInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIdInstruction
TR;S390VRIInstruction;description();TR;S390VRIeInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIeInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIeInstruction
TR;S390VRIInstruction;description();TR;S390VRIfInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIfInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIfInstruction
TR;S390VRIInstruction;description();TR;S390VRIgInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIgInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIgInstruction
TR;S390VRIInstruction;description();TR;S390VRIhInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIhInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIhInstruction
TR;S390VRIInstruction;description();TR;S390VRIiInstruction
TR;S390VRIInstruction;generateBinaryEncoding();TR;S390VRIiInstruction
TR;S390VRIInstruction;getKind();TR;S390VRIiInstruction
TR;S390VInstruction;description();TR;S390VRRInstruction
TR;S390VRRInstruction;description();TR;S390VRRaInstruction
TR;S390VInstruction;generateBinaryEncoding();TR;S390VRRInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRaInstruction
TR;S390VInstruction;getExtendedMnemonicName();TR;S390VRRInstruction
TR;S390VInstruction;getKind();TR;S390VRRInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRaInstruction
TR;S390VRRInstruction;description();TR;S390VRRbInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRbInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRbInstruction
TR;S390VRRInstruction;description();TR;S390VRRcInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRcInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRcInstruction
TR;S390VRRInstruction;description();TR;S390VRRdInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRdInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRdInstruction
TR;S390VRRInstruction;description();TR;S390VRReInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRReInstruction
TR;S390VRRInstruction;getKind();TR;S390VRReInstruction
TR;S390VRRInstruction;description();TR;S390VRRfInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRfInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRfInstruction
TR;S390VRRInstruction;description();TR;S390VRRgInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRgInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRgInstruction
TR;S390VRRInstruction;description();TR;S390VRRhInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRhInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRhInstruction
TR;S390VRRInstruction;description();TR;S390VRRiInstruction
TR;S390VRRInstruction;generateBinaryEncoding();TR;S390VRRiInstruction
TR;S390VRRInstruction;getKind();TR;S390VRRiInstruction
TR;S390RegInstruction;getFirstRegister();TR;S390VRSInstruction
TR;S390RegInstruction;getLastRegister();TR;S390VRSInstruction
TR;S390VInstruction;description();TR;S390VStorageInstruction
TR;S390VStorageInstruction;description();TR;S390VRSaInstruction
TR;S390VInstruction;estimateBinaryLength(int32_t);TR;S390VStorageInstruction
TR;S390VInstruction;generateBinaryEncoding();TR;S390VStorageInstruction
TR;S390VInstruction;getExtendedMnemonicName();TR;S390VStorageInstruction
TR;S390VInstruction;getKind();TR;S390VStorageInstruction
TR;S390VStorageInstruction;getKind();TR;S390VRSaInstruction
OMR::Z;Instruction;getMemoryReference();TR;S390VStorageInstruction
TR;S390VStorageInstruction;description();TR;S390VRSbInstruction
TR;S390VStorageInstruction;getKind();TR;S390VRSbInstruction
TR;S390VStorageInstruction;description();TR;S390VRScInstruction
TR;S390VStorageInstruction;getKind();TR;S390VRScInstruction
TR;S390VStorageInstruction;description();TR;S390VRSdInstruction
TR;S390VStorageInstruction;generateBinaryEncoding();TR;S390VRSdInstruction
TR;S390VStorageInstruction;getKind();TR;S390VRSdInstruction
TR;S390VStorageInstruction;generateBinaryEncoding();TR;S390VRVInstruction
TR;S390VStorageInstruction;getKind();TR;S390VRVInstruction
TR;S390VStorageInstruction;getKind();TR;S390VRXInstruction
TR;S390VStorageInstruction;description();TR;S390VSIInstruction
TR;S390VStorageInstruction;generateBinaryEncoding();TR;S390VSIInstruction
TR;S390VStorageInstruction;getKind();TR;S390VSIInstruction
OMR;Snippet;emitSnippetBody();TR;S390CallSnippet
OMR::Z;Snippet;getKind();TR;S390CallSnippet
OMR;Snippet;getLength(int32_t);TR;S390CallSnippet
OMR::Z;Snippet;isCallSnippet();TR;S390CallSnippet
OMR;Snippet;emitSnippetBody();TR;S390HelperCallSnippet
OMR::Z;Snippet;getKind();TR;S390HelperCallSnippet
OMR;Snippet;getLength(int32_t);TR;S390HelperCallSnippet
;MemToMemMacroOp;generateDependencies();;BitOpMemConstLenMacroOp
;MemToMemMacroOp;generateLoop();;MemToMemConstLenMacroOp
;MemToMemMacroOp;generateRemainder();;MemToMemConstLenMacroOp
;MemToMemMacroOp;generateDependencies();;BitOpMemVarLenMacroOp
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;BitOpMemVarLenMacroOp
;MemToMemMacroOp;generateLoop();;MemToMemVarLenMacroOp
;MemToMemMacroOp;generateRemainder();;MemToMemVarLenMacroOp
;MemToMemVarLenMacroOp;getHelper();;BitOpMemVarLenMacroOp
;MemToMemVarLenMacroOp;getHelperSymRef();;BitOpMemVarLenMacroOp
;MemToMemMacroOp;getKind();;BitOpMemVarLenMacroOp
;MemToMemMacroOp;generateDependencies();;MemClearConstLenMacroOp
;MemToMemConstLenMacroOp;generateInstruction(int32_t,int64_t,TR::Instruction *);;MemClearConstLenMacroOp
;MemToMemMacroOp;generateDependencies();;MemClearVarLenMacroOp
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemClearVarLenMacroOp
;MemToMemVarLenMacroOp;generateRemainder();;MemClearVarLenMacroOp
;MemToMemVarLenMacroOp;getHelper();;MemClearVarLenMacroOp
;MemToMemVarLenMacroOp;getHelperSymRef();;MemClearVarLenMacroOp
;MemToMemMacroOp;getKind();;MemClearVarLenMacroOp
;MemToMemMacroOp;generate(TR::Register *,TR::Register *);;MemCmpConstLenMacroOp
;MemCmpConstLenMacroOp;generate(TR::Register *,TR::Register *);;MemCmpConstLenSignMacroOp
;MemCmpConstLenMacroOp;generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);;MemCmpConstLenSignMacroOp
;MemToMemMacroOp;generateDependencies();;MemCmpConstLenMacroOp
;MemToMemConstLenMacroOp;generateInstruction(int32_t,int64_t,TR::Instruction *);;MemCmpConstLenMacroOp
;MemToMemMacroOp;generate(TR::Register *,TR::Register *);;MemCmpVarLenMacroOp
;MemCmpVarLenMacroOp;generate(TR::Register *,TR::Register *);;MemCmpVarLenSignMacroOp
;MemCmpVarLenMacroOp;generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);;MemCmpVarLenSignMacroOp
;MemToMemMacroOp;generateDependencies();;MemCmpVarLenMacroOp
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemCmpVarLenMacroOp
;MemToMemVarLenMacroOp;getHelper();;MemCmpVarLenMacroOp
;MemToMemVarLenMacroOp;getHelperSymRef();;MemCmpVarLenMacroOp
;MemToMemMacroOp;getKind();;MemCmpVarLenMacroOp
;MemCmpVarLenMacroOp;getKind();;MemCmpVarLenSignMacroOp
;MemToMemTypedMacroOp;createLoopDependencies(TR::Instruction *);;MemCpyAtomicMacroOp
;MemToMemTypedVarLenMacroOp;generateInstruction();;MemCpyAtomicMacroOp
;MemToMemTypedMacroOp;generateLoop();;MemToMemTypedVarLenMacroOp
;MemToMemTypedVarLenMacroOp;generateLoop();;MemCpyAtomicMacroOp
;MemToMemMacroOp;generateDependencies();;MemCpyConstLenMacroOp
;MemToMemMacroOp;generateDependencies();;MemCpyVarLenMacroOp
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemCpyVarLenMacroOp
;MemToMemVarLenMacroOp;getHelper();;MemCpyVarLenMacroOp
;MemToMemVarLenMacroOp;getHelperSymRef();;MemCpyVarLenMacroOp
;MemToMemMacroOp;getKind();;MemCpyVarLenMacroOp
;MemToMemTypedMacroOp;createLoopDependencies(TR::Instruction *);;MemCpyVarLenTypedMacroOp
;MemToMemTypedVarLenMacroOp;generateInstruction();;MemCpyVarLenTypedMacroOp
;MemToMemMacroOp;generateDependencies();;MemInitConstLenMacroOp
;MemToMemConstLenMacroOp;generateInstruction(int32_t,int64_t,TR::Instruction *);;MemInitConstLenMacroOp
;MemToMemConstLenMacroOp;generateLoop();;MemInitConstLenMacroOp
;MemToMemConstLenMacroOp;generateRemainder();;MemInitConstLenMacroOp
;MemToMemMacroOp;generateDependencies();;MemInitVarLenMacroOp
;MemToMemVarLenMacroOp;generateInstruction(int32_t,int64_t);;MemInitVarLenMacroOp
;MemToMemVarLenMacroOp;generateRemainder();;MemInitVarLenMacroOp
;MemToMemVarLenMacroOp;getHelper();;MemInitVarLenMacroOp
;MemToMemVarLenMacroOp;getHelperSymRef();;MemInitVarLenMacroOp
;MemToMemMacroOp;getKind();;MemInitVarLenMacroOp
;MemToMemTypedMacroOp;createLoopDependencies(TR::Instruction *);;MemInitVarLenTypedMacroOp
;MemToMemTypedVarLenMacroOp;generateInstruction();;MemInitVarLenTypedMacroOp
OMR::Z;Linkage;buildDirectDispatch(TR::Node *);TR;S390SystemLinkage
OMR::Z;Linkage;buildIndirectDispatch(TR::Node *);TR;S390SystemLinkage
TR;S390SystemLinkage;callNativeFunction(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zLinuxSystemLinkage
OMR::Z;Linkage;canDataTypeBePassedByReference(TR::DataType);TR;S390zLinuxSystemLinkage
TR;S390SystemLinkage;checkLeafRoutine(int32_t,TR::Instruction **);TR;S390zLinuxSystemLinkage
OMR::Z;Linkage;createEpilogue(TR::Instruction *);TR;S390SystemLinkage
OMR::Z;Linkage;createPrologue(TR::Instruction *);TR;S390SystemLinkage
TR;S390SystemLinkage;generateInstructionsForCall(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zLinuxSystemLinkage
OMR::Z;Linkage;getNormalStackPointerRealRegister();TR;S390SystemLinkage
OMR::Z;Linkage;getNormalStackPointerRegister();TR;S390SystemLinkage
TR;S390SystemLinkage;getRegisterSaveOffset(TR::class RealRegister::RegNum);TR;S390zLinuxSystemLinkage
OMR::Z;Linkage;hasToBeOnStack(TR::ParameterSymbol *);TR;S390SystemLinkage
TR;S390SystemLinkage;initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);TR;S390zLinuxSystemLinkage
OMR::Z;Linkage;initS390RealRegisterLinkage();TR;S390SystemLinkage
OMR::Z;Linkage;isSymbolPassedByReference(TR::Symbol *);TR;S390zLinuxSystemLinkage
OMR::Z;Linkage;mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);TR;S390SystemLinkage
OMR::Z;Linkage;mapStack(TR::ResolvedMethodSymbol *);TR;S390SystemLinkage
OMR;Linkage;self();TR;S390SystemLinkage
TR;S390SystemLinkage;callNativeFunction(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zOSSystemLinkage
TR;S390SystemLinkage;generateInstructionsForCall(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR;S390zOSSystemLinkage
OMR::Z;Linkage;getCAAPointerRegister();TR::Z;ZOSBaseSystemLinkage
OMR::Z;Linkage;getEnvironmentPointerRegister();TR;S390zOSSystemLinkage
OMR::Z;Linkage;getFrameType();TR;S390zOSSystemLinkage
OMR::Z;Linkage;getIsLeafRoutine();TR;S390zOSSystemLinkage
OMR::Z;Linkage;getOutgoingParameterBlockSize();TR;S390zOSSystemLinkage
OMR::Z;Linkage;getParentDSAPointerRegister();TR::Z;ZOSBaseSystemLinkage
TR;S390SystemLinkage;getRegisterSaveOffset(TR::class RealRegister::RegNum);TR;S390zOSSystemLinkage
OMR::Z;Linkage;isAggregateReturnedInIntRegisters(int32_t);TR::Z;ZOSBaseSystemLinkage
TR::Z;ZOSBaseSystemLinkage;isAggregateReturnedInIntRegisters(int32_t);TR;S390zOSSystemLinkage
OMR::Z;Linkage;isAggregateReturnedInIntRegistersAndMemory(int32_t);TR::Z;ZOSBaseSystemLinkage
OMR::Z;Linkage;isCAASpecialArgumentRegister(int8_t);TR;S390zOSSystemLinkage
OMR::Z;Linkage;isEnvironmentSpecialArgumentRegister(int8_t);TR;S390zOSSystemLinkage
OMR::Z;Linkage;isParentDSASpecialArgumentRegister(int8_t);TR;S390zOSSystemLinkage
OMR;Linkage;isSpecialNonVolatileArgumentRegister(int8_t);TR;S390zOSSystemLinkage
OMR;Snippet;emitSnippetBody();TR;S390RestoreGPR7Snippet
OMR::Z;Snippet;getKind();TR;S390RestoreGPR7Snippet
OMR;Snippet;getLength(int32_t);TR;S390RestoreGPR7Snippet
OMR;CodeCache;CodeCache();TR;CodeCache
OMR;CodeCacheConfig;CodeCacheConfig();TR;CodeCacheConfig
OMR;CodeCacheConfig;~CodeCacheConfig();TR;CodeCacheConfig
OMR;CodeCacheManager;CodeCacheManager(class TR_FrontEnd *);TestCompiler;CodeCacheManager
TestCompiler;CodeCacheManager;CodeCacheManager(class TR_FrontEnd *);TR;CodeCacheManager
OMR;CodeCacheManager;freeMemory(void *);TestCompiler;CodeCacheManager
OMR;CodeCacheManager;getMemory(size_t);TestCompiler;CodeCacheManager
OMR;CodeCacheManager;initialize(_Bool,uint32_t);TestCompiler;CodeCacheManager
OMR;CodeCacheManager;self();TestCompiler;CodeCacheManager
OMR;CodeCacheManager;~CodeCacheManager();TestCompiler;CodeCacheManager
TestCompiler;CodeCacheManager;~CodeCacheManager();TR;CodeCacheManager
TestCompiler;FrontEnd;FrontEnd();TR;FrontEnd
TR;FrontEnd;allocateCodeMemory(TR::Compilation *,uint32_t,uint32_t,uint8_t **,_Bool);TR;FEBase
TR;FrontEnd;allocateRelocationData(TR::Compilation *,uint32_t);TR;FEBase
TR;FrontEnd;createDebug(TR::Compilation *);TR;FECommon
TR;FrontEnd;createResolvedMethod(class TR_Memory *,class TR_OpaqueMethodBlock *,class TR_ResolvedMethod *,class TR_OpaqueClassBlock *);TestCompiler;FrontEnd
TR;FrontEnd;generateBinaryEncodingPrologue(struct TR_BinaryEncodingData *,TR::CodeGenerator *);TestCompiler;FrontEnd
TR;FrontEnd;getClassFromSignature(const char *,int32_t,class TR_ResolvedMethod *,_Bool);TR;FECommon
TR;FrontEnd;getClassFromSignature(const char *,int32_t,class TR_OpaqueMethodBlock *,_Bool);TR;FECommon
TR;FrontEnd;getDesignatedCodeCache(TR::Compilation *);TR;FEBase
TR;FrontEnd;getOffsetOfIndexableSizeField();TR;FECommon
TR;FrontEnd;getPersistentInfo();TR;FEBase
TR;FrontEnd;indexedTrampolineLookup(int32_t,void *);TR;FEBase
TR;FrontEnd;methodTrampolineLookup(TR::Compilation *,TR::SymbolReference *,void *);TestCompiler;FrontEnd
TR;FECommon;persistentMemory();TR;FEBase
TR;FrontEnd;reserveTrampolineIfNecessary(TR::Compilation *,TR::SymbolReference *,_Bool);TestCompiler;FrontEnd
TR;FrontEnd;resizeCodeMemory(TR::Compilation *,uint8_t *,uint32_t);TR;FEBase
TR;FrontEnd;sampleSignature(class TR_OpaqueMethodBlock *,char *,int32_t,class TR_Memory *);TR;FECommon
TR;FrontEnd;unreserveCodeCache(TR::CodeCache *);TR;FEBase
TestCompiler;FrontEnd;~FrontEnd();TR;FrontEnd
OMR;IlInjector;IlInjector(TR::IlInjector *);TestCompiler;IlInjector
TestCompiler;IlInjector;IlInjector(TR::IlInjector *);TR;IlInjector
OMR;IlInjector;IlInjector(TR::TypeDictionary *);TestCompiler;IlInjector
TestCompiler;IlInjector;IlInjector(TR::TypeDictionary *);TR;IlInjector
OMR;IlInjector;block(int32_t);OMR;IlInjector
TR;IlGenerator;currentByteCodeIndex();OMR;IlInjector
TR;IlGenerator;genIL();OMR;IlInjector
TR;IlGenerator;getCurrentBlock();OMR;IlInjector
OMR;IlInjector;initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TestCompiler;IlInjector
OMR;IlInjector;injectIL();TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;injectIL();TestCompiler;BinaryOpIlInjector
OMR;IlInjector;jitPersistentAlloc(size_t);TestCompiler;IlInjector
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;jitPersistentFree(void *);TestCompiler;IlInjector
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;BinaryOpIlInjector
TR;IlGenerator;methodSymbol();OMR;IlInjector
OMR;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete(void *,size_t);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete(void *,TR::Region &);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new(size_t,TR::Region &);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;OpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;BinaryOpIlInjector
OMR;IlInjector;~IlInjector();TestCompiler;IlInjector
TestCompiler;IlInjector;~IlInjector();TR;IlInjector
TestCompiler;OpIlInjector;injectIL();TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;UnaryOpIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;ChildlessUnaryOpIlInjector
TestCompiler;OpIlInjector;injectIL();TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;CmpBranchOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;CmpBranchOpIlInjector
OMR;IlBuilder;IlBuilder(TR::MethodBuilder *,TR::TypeDictionary *);TestCompiler;IlBuilder
OMR;IlBuilder;IlBuilder(TR::IlBuilder *);TestCompiler;IlBuilder
TestCompiler;IlBuilder;IlBuilder(TR::IlBuilder *);TR;IlBuilder
OMR;IlInjector;asMethodBuilder();OMR;IlBuilder
OMR;IlInjector;injectIL();OMR;IlBuilder
OMR;IlInjector;isMethodBuilder();OMR;IlBuilder
TestCompiler;IlInjector;jitPersistentAlloc(size_t);OMR;IlBuilder
OMR;IlBuilder;jitPersistentAlloc(size_t);TestCompiler;IlBuilder
TestCompiler;IlInjector;jitPersistentFree(void *);OMR;IlBuilder
OMR;IlBuilder;jitPersistentFree(void *);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder
OMR;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete(void *,TR::Region &);OMR;IlBuilder
OMR;IlBuilder;operator delete(void *,TR::Region &);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete(void *,size_t);OMR;IlBuilder
OMR;IlBuilder;operator delete(void *,size_t);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);OMR;IlBuilder
OMR;IlBuilder;operator delete[](void *,TR::Region &);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder
OMR;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new(size_t,TR::Region &);OMR;IlBuilder
OMR;IlBuilder;operator new(size_t,TR::Region &);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);OMR;IlBuilder
OMR;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);OMR;IlBuilder
OMR;IlBuilder;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);OMR;IlBuilder
OMR;IlBuilder;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder
OMR;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder
OMR;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);OMR;IlBuilder
OMR;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);OMR;IlBuilder
OMR;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);OMR;IlBuilder
OMR;IlBuilder;operator new[](size_t,TR::Region &);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder
OMR;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder
OMR;IlBuilder;~IlBuilder();TestCompiler;IlBuilder
TestCompiler;IlBuilder;~IlBuilder();TR;IlBuilder
OMR;IlType;IlType();TR;IlType
OMR;IlType;IlType(const char *);TR;IlType
OMR;IlType;~IlType();TR;IlType
OMR;IlValue;IlValue(TR::Node *,TR::TreeTop *,TR::Block *,TR::MethodBuilder *);TR;IlValue
OMR;TypeDictionary;TypeDictionary();TR;TypeDictionary
OMR;TypeDictionary;~TypeDictionary();TR;TypeDictionary
TestCompiler;OpIlInjector;injectIL();TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;StoreOpIlInjector
TestCompiler;OpIlInjector;injectIL();TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;TernaryOpIlInjector
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;TernaryOpIlInjector
OMR;IlInjector;injectIL();TestCompiler;BarIlInjector
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;BarIlInjector
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;BarIlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;BarIlInjector
TestCompiler;TestDriver;compileTestMethods();TestCompiler;FooBarTest
TestCompiler;TestDriver;invokeTests();TestCompiler;FooBarTest
testing;Test;TestBody();;JITILBuilderTest_ControlFlowTest_Test
testing;Test;TestBody();;JITILBuilderTest_NestedControlFlowLoopTest_Test
testing;Test;TestBody();;JITTest_BuilderTest_Test
OMR;IlBuilder;AppendBuilder(TR::IlBuilder *);OMR;MethodBuilder
TestCompiler;MethodBuilder;MethodBuilder(TR::TypeDictionary *);TR;MethodBuilder
OMR;IlBuilder;asMethodBuilder();OMR;MethodBuilder
OMR;IlBuilder;buildIL();TestCompiler;AbsDiffIfThenElseMethod
OMR;IlBuilder;connectTrees();OMR;MethodBuilder
OMR;IlBuilder;countBlocks();OMR;MethodBuilder
OMR;IlBuilder;defineSymbol(const char *,TR::SymbolReference *);OMR;MethodBuilder
OMR;IlBuilder;injectIL();OMR;MethodBuilder
OMR;IlBuilder;isMethodBuilder();OMR;MethodBuilder
TestCompiler;IlBuilder;jitPersistentAlloc(size_t);OMR;MethodBuilder
OMR;MethodBuilder;jitPersistentAlloc(size_t);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;jitPersistentFree(void *);OMR;MethodBuilder
OMR;MethodBuilder;jitPersistentFree(void *);TestCompiler;MethodBuilder
OMR;IlBuilder;lookupSymbol(const char *);OMR;MethodBuilder
TestCompiler;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete(void *,TR::Region &);OMR;MethodBuilder
OMR;MethodBuilder;operator delete(void *,TR::Region &);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete(void *,size_t);OMR;MethodBuilder
OMR;MethodBuilder;operator delete(void *,size_t);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder
OMR;MethodBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete[](void *,TR::Region &);OMR;MethodBuilder
OMR;MethodBuilder;operator delete[](void *,TR::Region &);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder
OMR;MethodBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);OMR;MethodBuilder
OMR;MethodBuilder;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_PersistentMemory *);OMR;MethodBuilder
OMR;MethodBuilder;operator new(size_t,class TR_PersistentMemory *);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new(size_t,TR_ArenaAllocator *);OMR;MethodBuilder
OMR;MethodBuilder;operator new(size_t,TR_ArenaAllocator *);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new(size_t,TR::Region &);OMR;MethodBuilder
OMR;MethodBuilder;operator new(size_t,TR::Region &);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder
OMR;MethodBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder
OMR;MethodBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);OMR;MethodBuilder
OMR;MethodBuilder;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new[](size_t,TR::Region &);OMR;MethodBuilder
OMR;MethodBuilder;operator new[](size_t,TR::Region &);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder
OMR;MethodBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);OMR;MethodBuilder
OMR;MethodBuilder;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;MethodBuilder
OMR;IlBuilder;setupForBuildIL();OMR;MethodBuilder
OMR;IlInjector;typeDictionary();OMR;MethodBuilder
OMR;MethodBuilder;~MethodBuilder();TestCompiler;MethodBuilder
TestCompiler;MethodBuilder;~MethodBuilder();TR;MethodBuilder
OMR;IlBuilder;buildIL();TestCompiler;BasicForLoopDownMethod
OMR;IlBuilder;buildIL();TestCompiler;BasicForLoopUpMethod
TestCompiler;BinaryOpIlInjector;injectIL();TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;jitPersistentFree(void *);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete(void *,size_t);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IndirectStoreIlInjector
TestCompiler;TestDriver;compileTestMethods();TestCompiler;BuilderTest
TestCompiler;TestDriver;invokeTests();TestCompiler;BuilderTest
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;CallIlInjector
OMR;IlBuilder;buildIL();TestCompiler;DoWhileFibonnaciMethod
OMR;IlBuilder;buildIL();TestCompiler;DoWhileIfThenElseMethod
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithBreakAndContinueMethod
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithBreakMethod
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithContinueMethod
OMR;IlBuilder;buildIL();TestCompiler;ForLoopBreakAndContinueMethod
OMR;IlBuilder;buildIL();TestCompiler;ForLoopBreakMethod
OMR;IlBuilder;buildIL();TestCompiler;ForLoopContinueMethod
OMR;IlBuilder;buildIL();TestCompiler;ForLoopUPIfThenElseMethod
OMR;IlBuilder;buildIL();TestCompiler;IfThenElseLoopMethod
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IndirectLoadIlInjector
OMR;IlBuilder;buildIL();TestCompiler;IterativeFibonnaciMethod
OMR;IlBuilder;buildIL();TestCompiler;MaxIfThenMethod
TestCompiler;TestDriver;compileTestMethods();TestCompiler;OpCodesTest
TestCompiler;TestDriver;invokeTests();TestCompiler;OpCodesTest
OMR;IlBuilder;buildIL();TestCompiler;RecursiveFibonnaciMethod
OMR;IlBuilder;buildIL();TestCompiler;ShootoutNestedLoopMethod
OMR;IlBuilder;buildIL();TestCompiler;SubIfFalseThenMethod
OMR;IlBuilder;buildIL();TestCompiler;WhileDoFibonnaciMethod
OMR;IlBuilder;buildIL();TestCompiler;WhileDoIfThenElseMethod
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithBreakAndContinueMethod
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithBreakMethod
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithContinueMethod
testing;TestEventListener;OnEnvironmentsSetUpEnd(const class testing::UnitTest &);testing;EmptyTestEventListener
testing;TestEventListener;OnEnvironmentsSetUpStart(const class testing::UnitTest &);testing;EmptyTestEventListener
testing;TestEventListener;OnEnvironmentsTearDownEnd(const class testing::UnitTest &);testing;EmptyTestEventListener
testing;TestEventListener;OnEnvironmentsTearDownStart(const class testing::UnitTest &);testing;EmptyTestEventListener
testing;TestEventListener;OnTestCaseEnd(const class testing::TestCase &);testing;EmptyTestEventListener
testing;TestEventListener;OnTestCaseStart(const class testing::TestCase &);testing;EmptyTestEventListener
testing;TestEventListener;OnTestEnd(const class testing::TestInfo &);testing;EmptyTestEventListener
testing;TestEventListener;OnTestIterationEnd(const class testing::UnitTest &,int);testing;EmptyTestEventListener
testing;TestEventListener;OnTestIterationStart(const class testing::UnitTest &,int);testing;EmptyTestEventListener
testing;TestEventListener;OnTestPartResult(const class testing::TestPartResult &);testing;EmptyTestEventListener
testing;TestEventListener;OnTestProgramEnd(const class testing::UnitTest &);testing;EmptyTestEventListener
testing;TestEventListener;OnTestProgramStart(const class testing::UnitTest &);testing;EmptyTestEventListener
testing;TestEventListener;OnTestStart(const class testing::TestInfo &);testing;EmptyTestEventListener
testing::internal;DeathTestFactory;Create(const char *,const class testing::internal::RE *,const char *,int,class testing::internal::DeathTest **);testing::internal;DefaultDeathTestFactory
testing;TestPartResultReporterInterface;ReportTestPartResult(const class testing::TestPartResult &);testing::internal;HasNewFatalFailureHelper
testing::internal;ParameterizedTestCaseInfoBase;GetTestCaseName();testing::internal;ParameterizedTestCaseInfo
testing::internal;ParameterizedTestCaseInfoBase;GetTestCaseTypeId();testing::internal;ParameterizedTestCaseInfo
testing::internal;ParameterizedTestCaseInfoBase;RegisterTests();testing::internal;ParameterizedTestCaseInfo
testing::internal;TestFactoryBase;CreateTest();testing::internal;ParameterizedTestFactory
testing::internal;TestFactoryBase;CreateTest();testing::internal;TestFactoryImpl
testing::internal::ThreadLocal;ValueHolderFactory;MakeNewHolder();testing::internal::ThreadLocal;DefaultValueHolderFactory
testing::internal::ThreadLocal;ValueHolderFactory;MakeNewHolder();testing::internal::ThreadLocal;InstanceValueHolderFactory
testing::internal;ThreadWithParamBase;Run();testing::internal;ThreadWithParam
OMR;IlInjector;injectIL();TestCompiler;FooIlInjector
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;FooIlInjector
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;FooIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector
testing;Test;TestBody();TestCompiler;LimitFileTest_CheckVLogTest_Test
testing;Test;TestBody();TestCompiler;LimitFileTest_CreateVLogTest_Test
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileBoundTest_Test
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileRangeTest_Test
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileTest_Test
testing;Environment;SetUp();TestCompiler;OMRTestEnv
testing;Environment;TearDown();TestCompiler;OMRTestEnv
testing;Test;TestBody();TestCompiler;LogFileTest_CreateTFLogTest_Test
testing;Test;TestBody();TestCompiler;LogFileTest_EmptyTFLogTest_Test
testing;Test;TestBody();TestCompiler;LogFileTest_KeywordsLogTest_Test
testing;Test;TestBody();TestCompiler;OptionSetTest_UseOptionSets_Test
testing;Test;TestBody();TestCompiler;OptionSetTest_WithDefault_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_AddressTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_BitwiseTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_CompareTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_DISABLED_OpCodesTests_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_DISABLED_UnaryTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_IntegerArithmeticTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_MemoryOperationTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_TernaryTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_UnaryTest_Test
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_UnsupportedOpCodesTest_Test
TestCompiler;OpCodesTest;UnsupportedOpCodesTests();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;PPCOpCodesTest
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;PPCOpCodesTest
testing;Test;TestBody();;JITQuxTest_QuxTest2_Test
OMR;IlInjector;injectIL();TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector
TestCompiler;TestDriver;compileTestMethods();TestCompiler;Qux2Test
TestCompiler;TestDriver;invokeTests();TestCompiler;Qux2Test
TestCompiler;TestDriver;compileTestMethods();TestCompiler;OptTestDriver
TestCompiler;TestDriver;invokeTests();TestCompiler;SimplifierFoldAndTest
testing;Test;TestBody();TestCompiler;SimplifierFoldAndTest_SimplifierFoldAndTest_Test
OMR;IlInjector;injectIL();TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TestCompiler;SimplifierFoldAndIlVerifier
testing;Test;TestBody();;JITS390OpCodesTest_BitwiseTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_CompareTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390BitwiseTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390CompareTests_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390ConvertToAddressTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390DirectCallTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390IntegerArithmeticTests_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390MemoryOperationTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390TernaryTests_Test
testing;Test;TestBody();;JITS390OpCodesTest_DISABLED_S390UnaryTests_Test
testing;Test;TestBody();;JITS390OpCodesTest_DirectCallTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_FloatArithmeticTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_IntegerArithmeticTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_MemoryOperationTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_S390AddressTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_TernaryTest_Test
testing;Test;TestBody();;JITS390OpCodesTest_UnaryTest_Test
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;compileIntegerArithmeticTestMethods();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;invokeIntegerArithmeticTests();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;S390OpCodesTest
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;S390OpCodesTest
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TR;AllIlVerifier
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TR;NoCodegenVerifier
TestCompiler;OpCodesTest;UnsupportedOpCodesTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;compileIntegerArithmeticTestMethods();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeIntegerArithmeticTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeNoHelperUnaryTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;X86OpCodesTest
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;X86OpCodesTest
TR;CompilationStrategy;enableSwitchToProfiling();TR;DefaultCompilationStrategy
TR;CompilationStrategy;processEvent(class TR_MethodEvent *,_Bool *);TR;DefaultCompilationStrategy
TR;CompilationStrategy;shutdown();TR;DefaultCompilationStrategy
TR;SegmentAllocator;allocationLimit();TR;DebugSegmentProvider
TR;SegmentProvider;bytesAllocated();TR;DebugSegmentProvider
TR;SegmentAllocator;regionBytesAllocated();TR;DebugSegmentProvider
TR;SegmentProvider;release(TR::MemorySegment &);TR;DebugSegmentProvider
TR;SegmentProvider;request(size_t);TR;DebugSegmentProvider
TR;SegmentAllocator;setAllocationLimit(size_t);TR;DebugSegmentProvider
TR;SegmentAllocator;systemBytesAllocated();TR;DebugSegmentProvider
OMR;BytecodeBuilder;BytecodeBuilder(TR::MethodBuilder *,int32_t,char *);TR;BytecodeBuilder
OMR;IlBuilder;appendBlock(TR::Block *,_Bool);OMR;BytecodeBuilder
OMR;IlBuilder;connectTrees();OMR;BytecodeBuilder
OMR;IlBuilder;countBlocks();OMR;BytecodeBuilder
OMR;IlInjector;currentByteCodeIndex();OMR;BytecodeBuilder
TestCompiler;IlInjector;initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TR;BytecodeBuilder
OMR;IlBuilder;isBytecodeBuilder();OMR;BytecodeBuilder
OMR;IlBuilder;setHandlerInfo(uint32_t);OMR;BytecodeBuilder
OMR;BytecodeBuilder;~BytecodeBuilder();TR;BytecodeBuilder
TestCompiler;IlBuilder;jitPersistentAlloc(size_t);OMR;BytecodeBuilder
TestCompiler;IlBuilder;jitPersistentFree(void *);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete(void *,TR::Region &);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete(void *,size_t);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete[](void *,TR::Region &);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new(size_t,TR::Region &);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new(size_t,TR_ArenaAllocator *);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_PersistentMemory *);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new[](size_t,TR::Region &);OMR;BytecodeBuilder
TestCompiler;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);OMR;BytecodeBuilder
OMR;IlType;baseType();OMR;PointerType
OMR;IlType;getName();OMR;PointerType
OMR;IlType;getPrimitiveType();OMR;PointerType
OMR;IlType;getSize();OMR;PointerType
OMR;IlType;isPointer();OMR;PointerType
OMR;IlType;jitPersistentAlloc(size_t);OMR;PointerType
OMR;IlType;jitPersistentFree(void *);OMR;PointerType
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType
OMR;IlType;operator delete(void *,size_t);OMR;PointerType
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator delete(void *,TR::Region &);OMR;PointerType
OMR;IlType;operator delete[](void *,TR::Region &);OMR;PointerType
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;PointerType
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;PointerType
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;PointerType
OMR;IlType;operator new(size_t,TR::Region &);OMR;PointerType
OMR;IlType;operator new[](size_t,TR::Region &);OMR;PointerType
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;PointerType
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;PointerType
OMR;IlType;getPrimitiveType();OMR;PrimitiveType
OMR;IlType;getSignatureName();OMR;PrimitiveType
OMR;IlType;getSize();OMR;PrimitiveType
OMR;IlType;jitPersistentAlloc(size_t);OMR;PrimitiveType
OMR;IlType;jitPersistentFree(void *);OMR;PrimitiveType
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType
OMR;IlType;operator delete(void *,size_t);OMR;PrimitiveType
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator delete(void *,TR::Region &);OMR;PrimitiveType
OMR;IlType;operator delete[](void *,TR::Region &);OMR;PrimitiveType
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;PrimitiveType
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;PrimitiveType
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;PrimitiveType
OMR;IlType;operator new(size_t,TR::Region &);OMR;PrimitiveType
OMR;IlType;operator new[](size_t,TR::Region &);OMR;PrimitiveType
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;PrimitiveType
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;PrimitiveType
OMR;IlType;getPrimitiveType();OMR;StructType
OMR;IlType;getSize();OMR;StructType
OMR;IlType;isStruct();OMR;StructType
OMR;IlType;jitPersistentAlloc(size_t);OMR;StructType
OMR;IlType;jitPersistentFree(void *);OMR;StructType
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;StructType
OMR;IlType;operator delete(void *,size_t);OMR;StructType
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator delete(void *,TR::Region &);OMR;StructType
OMR;IlType;operator delete[](void *,TR::Region &);OMR;StructType
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;StructType
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;StructType
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;StructType
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;StructType
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;StructType
OMR;IlType;operator new(size_t,TR::Region &);OMR;StructType
OMR;IlType;operator new[](size_t,TR::Region &);OMR;StructType
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;StructType
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;StructType
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;StructType
OMR;IlType;getPrimitiveType();OMR;UnionType
OMR;IlType;getSize();OMR;UnionType
OMR;IlType;isUnion();OMR;UnionType
OMR;IlType;jitPersistentAlloc(size_t);OMR;UnionType
OMR;IlType;jitPersistentFree(void *);OMR;UnionType
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType
OMR;IlType;operator delete(void *,size_t);OMR;UnionType
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator delete(void *,TR::Region &);OMR;UnionType
OMR;IlType;operator delete[](void *,TR::Region &);OMR;UnionType
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;UnionType
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;UnionType
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;UnionType
OMR;IlType;operator new(size_t,TR::Region &);OMR;UnionType
OMR;IlType;operator new[](size_t,TR::Region &);OMR;UnionType
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;UnionType
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;UnionType
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,uint8_t *);TR;CodeCacheMemorySegment
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,size_t);TR;CodeCacheMemorySegment
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment();TR;CodeCacheMemorySegment

