FunctionName; FunctionSignature; IsFirstOccurence; Namespace; ClassName; isImplicit; isVirtual
Cursor;Cursor(const ABitVector<Allocator> &);1;CS2::ABitVector;Cursor;0;0
Cursor;Cursor(const class CS2::ABitVector::Cursor &);0;CS2::ABitVector;Cursor;0;0
GlobalSingletonAllocator;GlobalSingletonAllocator(const GlobalBaseAllocator &);1;TR;GlobalSingletonAllocator;0;0
GlobalSingletonAllocator;GlobalSingletonAllocator(class TR::GlobalSingletonAllocator &&);0;TR;GlobalSingletonAllocator;1;0
TRPersistentMemoryAllocator;TRPersistentMemoryAllocator(class TR_Memory *);1;TR;PersistentMemoryAllocator;0;0
TRPersistentMemoryAllocator;TRPersistentMemoryAllocator(class TR_PersistentMemory *);0;TR;PersistentMemoryAllocator;0;0
TRPersistentMemoryAllocator;TRPersistentMemoryAllocator(const class TRPersistentMemoryAllocator &);0;TR;PersistentMemoryAllocator;0;0
allocate;allocate(size_t,const char *,int);1;TR;PersistentMemoryAllocator;0;0
allocate;allocate(size_t,const char *);0;CS2;stat_allocator;0;0
deallocate;deallocate(void *,size_t,const char *,int);1;TR;PersistentMemoryAllocator;0;0
deallocate;deallocate(void *,size_t,const char *);0;CS2;stat_allocator;0;0
operator=;operator=(const class TRPersistentMemoryAllocator &);1;TR;PersistentMemoryAllocator;1;0
operator=;operator=(class TR::GlobalSingletonAllocator &&);0;TR;GlobalSingletonAllocator;1;0
reallocate;reallocate(size_t,void *,size_t,const char *,int);1;TR;PersistentMemoryAllocator;0;0
reallocate;reallocate(size_t,void *,size_t,const char *);0;CS2;stat_allocator;0;0
AutomaticSymbol;AutomaticSymbol(class OMR::AutomaticSymbol &&);1;OMR;AutomaticSymbol;1;0
AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t);0;OMR;AutomaticSymbol;0;0
AutomaticSymbol;AutomaticSymbol();0;OMR;AutomaticSymbol;0;0
AutomaticSymbol;AutomaticSymbol(TR::DataType);0;OMR;AutomaticSymbol;0;0
AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t,const char *);0;OMR;AutomaticSymbol;0;0
AutomaticSymbol;AutomaticSymbol(const class OMR::AutomaticSymbol &);0;OMR;AutomaticSymbol;1;0
AutomaticSymbol;AutomaticSymbol(int32_t);0;TR;AutomaticSymbol;0;0
RegisterMappedSymbol;RegisterMappedSymbol(class OMR::RegisterMappedSymbol &&);1;OMR;RegisterMappedSymbol;1;0
RegisterMappedSymbol;RegisterMappedSymbol(const class OMR::RegisterMappedSymbol &);0;OMR;RegisterMappedSymbol;1;0
RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType,uint32_t);0;OMR;RegisterMappedSymbol;0;0
RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType);0;OMR;RegisterMappedSymbol;0;0
RegisterMappedSymbol;RegisterMappedSymbol(int32_t);0;OMR;RegisterMappedSymbol;0;0
RegisterMappedSymbol;RegisterMappedSymbol(const class TR::RegisterMappedSymbol &);0;TR;RegisterMappedSymbol;1;0
RegisterMappedSymbol;RegisterMappedSymbol(class TR::RegisterMappedSymbol &&);0;TR;RegisterMappedSymbol;1;0
Symbol;Symbol(const class OMR::Symbol &);1;OMR;Symbol;1;0
Symbol;Symbol(TR::DataType);0;OMR;Symbol;0;0
Symbol;Symbol();0;OMR;Symbol;0;0
Symbol;Symbol(TR::DataType,uint32_t);0;OMR;Symbol;0;0
Symbol;Symbol(const class TR::Symbol &);0;TR;Symbol;1;0
Symbol;Symbol(class TR::Symbol &&);0;TR;Symbol;1;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Symbol;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Symbol;0;0
operator delete;operator delete(void *,size_t);0;OMR;Symbol;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;Symbol;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Symbol;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;Symbol;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Symbol;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Symbol;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Symbol;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Symbol;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Symbol;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator=;operator=(const class OMR::Symbol &);1;OMR;Symbol;1;0
operator=;operator=(class TR::Symbol &&);0;TR;Symbol;1;0
operator=;operator=(const class TR::Symbol &);0;TR;Symbol;1;0
operator=;operator=(const class OMR::RegisterMappedSymbol &);0;OMR;RegisterMappedSymbol;1;0
operator=;operator=(class OMR::RegisterMappedSymbol &&);0;OMR;RegisterMappedSymbol;1;0
operator=;operator=(class TR::RegisterMappedSymbol &&);0;TR;RegisterMappedSymbol;1;0
operator=;operator=(const class TR::RegisterMappedSymbol &);0;TR;RegisterMappedSymbol;1;0
operator=;operator=(class OMR::AutomaticSymbol &&);0;OMR;AutomaticSymbol;1;0
operator=;operator=(const class OMR::AutomaticSymbol &);0;OMR;AutomaticSymbol;1;0
operator=;operator=(class TR::AutomaticSymbol &&);0;TR;AutomaticSymbol;1;0
operator=;operator=(const class TR::AutomaticSymbol &);0;TR;AutomaticSymbol;1;0
setPinningArrayPointer;setPinningArrayPointer();1;OMR;Symbol;0;0
setPinningArrayPointer;setPinningArrayPointer(TR::AutomaticSymbol *);0;OMR;AutomaticSymbol;0;0
Block;Block(const class OMR::Block &);1;OMR;Block;1;0
Block;Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *);0;OMR;Block;0;0
Block;Block(class TR_Memory *);0;OMR;Block;0;0
Block;Block(TR::Block &,TR::TreeTop *,TR::TreeTop *);0;OMR;Block;0;0
Block;Block(class TR::Block &,TR::TreeTop *,TR::TreeTop *);0;TR;Block;0;0
Block;Block(class TR::Block &&);0;TR;Block;1;0
CFGNode;CFGNode(class TR::CFGNode &&);1;TR;CFGNode;1;0
CFGNode;CFGNode(int32_t,TR::Region &);0;TR;CFGNode;0;0
CFGNode;CFGNode(int32_t,class TR_Memory *);0;TR;CFGNode;0;0
CFGNode;CFGNode(class TR_Memory *);0;TR;CFGNode;0;0
CFGNode;CFGNode(TR::Region &);0;TR;CFGNode;0;0
CFGNode;CFGNode(const class TR::CFGNode &);0;TR;CFGNode;1;0
addExceptionPredecessor;addExceptionPredecessor(class TR::CFGEdge *,enum TR_AllocationKind);1;TR;CFGNode;0;0
addExceptionPredecessor;addExceptionPredecessor(class TR::CFGEdge *);0;TR;CFGNode;0;0
addExceptionSuccessor;addExceptionSuccessor(class TR::CFGEdge *,enum TR_AllocationKind);1;TR;CFGNode;0;0
addExceptionSuccessor;addExceptionSuccessor(class TR::CFGEdge *);0;TR;CFGNode;0;0
addPredecessor;addPredecessor(class TR::CFGEdge *);1;TR;CFGNode;0;0
addPredecessor;addPredecessor(class TR::CFGEdge *,enum TR_AllocationKind);0;TR;CFGNode;0;0
addSuccessor;addSuccessor(class TR::CFGEdge *);1;TR;CFGNode;0;0
addSuccessor;addSuccessor(class TR::CFGEdge *,enum TR_AllocationKind);0;TR;CFGNode;0;0
collectReferencedAutoSymRefsIn;collectReferencedAutoSymRefsIn(TR::Compilation *,TR::Node *,class TR_BitVector *,vcount_t);1;OMR;Block;0;0
collectReferencedAutoSymRefsIn;collectReferencedAutoSymRefsIn(TR::Compilation *,class TR_BitVector *,vcount_t);0;OMR;Block;0;0
createEmptyBlock;createEmptyBlock(TR::Compilation *,int32_t,TR::Block *);1;OMR;Block;0;0
createEmptyBlock;createEmptyBlock(TR::Node *,TR::Compilation *,int32_t,TR::Block *);0;OMR;Block;0;0
normalizeFrequency;normalizeFrequency(int32_t,int32_t);1;TR;CFGNode;0;0
normalizeFrequency;normalizeFrequency(int32_t);0;TR;CFGNode;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;CFGNode;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;CFGNode;0;0
operator delete;operator delete(void *,size_t);0;TR;CFGNode;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;CFGNode;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;CFGNode;0;0
operator new;operator new(size_t,TR::Region &);1;TR;CFGNode;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;CFGNode;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;CFGNode;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;CFGNode;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;CFGNode;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;CFGNode;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;CFGNode;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;CFGNode;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;CFGNode;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;CFGNode;0;0
operator=;operator=(class TR::CFGNode &&);1;TR;CFGNode;1;0
operator=;operator=(const class TR::CFGNode &);0;TR;CFGNode;1;0
operator=;operator=(const class OMR::Block &);0;OMR;Block;1;0
operator=;operator=(class TR::Block &&);0;TR;Block;1;0
operator=;operator=(const class TR::Block &);0;TR;Block;1;0
LabelSymbol;LabelSymbol();1;OMR;LabelSymbol;0;0
LabelSymbol;LabelSymbol(class OMR::LabelSymbol &&);0;OMR;LabelSymbol;1;0
LabelSymbol;LabelSymbol(TR::CodeGenerator *);0;OMR;LabelSymbol;0;0
LabelSymbol;LabelSymbol(const class OMR::LabelSymbol &);0;OMR;LabelSymbol;1;0
LabelSymbol;LabelSymbol(TR::CodeGenerator *,TR::Block *);0;OMR;LabelSymbol;0;0
getName;getName();1;OMR;Symbol;0;0
getName;getName(class TR_Debug *);0;OMR;LabelSymbol;0;0
operator=;operator=(class OMR::LabelSymbol &&);0;OMR;LabelSymbol;1;0
operator=;operator=(const class OMR::LabelSymbol &);0;OMR;LabelSymbol;1;0
operator=;operator=(class TR::LabelSymbol &&);0;TR;LabelSymbol;1;0
operator=;operator=(const class TR::LabelSymbol &);0;TR;LabelSymbol;1;0
MethodSymbol;MethodSymbol(class OMR::MethodSymbol &&);1;OMR;MethodSymbol;1;0
MethodSymbol;MethodSymbol(const class OMR::MethodSymbol &);0;OMR;MethodSymbol;1;0
MethodSymbol;MethodSymbol(enum TR_LinkageConventions,class TR_Method *);0;OMR;MethodSymbol;0;0
MethodSymbol;MethodSymbol(const class TR::MethodSymbol &);0;TR;MethodSymbol;1;0
MethodSymbol;MethodSymbol(class TR::MethodSymbol &&);0;TR;MethodSymbol;1;0
ResolvedMethodSymbol;ResolvedMethodSymbol(const class OMR::ResolvedMethodSymbol &);1;OMR;ResolvedMethodSymbol;1;0
ResolvedMethodSymbol;ResolvedMethodSymbol(class OMR::ResolvedMethodSymbol &&);0;OMR;ResolvedMethodSymbol;1;0
ResolvedMethodSymbol;ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *);0;OMR;ResolvedMethodSymbol;0;0
genInduceOSRCall;genInduceOSRCall(TR::TreeTop *,int32_t,class TR_OSRMethodData *,int32_t,_Bool,_Bool,TR::CFG *);1;OMR;ResolvedMethodSymbol;0;0
genInduceOSRCall;genInduceOSRCall(TR::TreeTop *,int32_t,int32_t,_Bool,_Bool,TR::CFG *);0;OMR;ResolvedMethodSymbol;0;0
getAutoSymRefs;getAutoSymRefs(int32_t);1;OMR;ResolvedMethodSymbol;0;0
getAutoSymRefs;getAutoSymRefs();0;OMR;ResolvedMethodSymbol;0;0
getPendingPushSymRefs;getPendingPushSymRefs();1;OMR;ResolvedMethodSymbol;0;0
getPendingPushSymRefs;getPendingPushSymRefs(int32_t);0;OMR;ResolvedMethodSymbol;0;0
isOSRRelatedNode;isOSRRelatedNode(TR::Node *,TR_ByteCodeInfo &);1;OMR;ResolvedMethodSymbol;0;0
isOSRRelatedNode;isOSRRelatedNode(TR::Node *);0;OMR;ResolvedMethodSymbol;0;0
operator=;operator=(class OMR::MethodSymbol &&);0;OMR;MethodSymbol;1;0
operator=;operator=(const class OMR::MethodSymbol &);0;OMR;MethodSymbol;1;0
operator=;operator=(const class TR::MethodSymbol &);0;TR;MethodSymbol;1;0
operator=;operator=(class TR::MethodSymbol &&);0;TR;MethodSymbol;1;0
operator=;operator=(class OMR::ResolvedMethodSymbol &&);0;OMR;ResolvedMethodSymbol;1;0
operator=;operator=(const class OMR::ResolvedMethodSymbol &);0;OMR;ResolvedMethodSymbol;1;0
operator=;operator=(class TR::ResolvedMethodSymbol &&);0;TR;ResolvedMethodSymbol;1;0
operator=;operator=(const class TR::ResolvedMethodSymbol &);0;TR;ResolvedMethodSymbol;1;0
setThisTempForObjectCtor;setThisTempForObjectCtor();1;OMR;Symbol;0;0
setThisTempForObjectCtor;setThisTempForObjectCtor(TR::SymbolReference *);0;OMR;ResolvedMethodSymbol;0;0
StaticSymbol;StaticSymbol(class OMR::StaticSymbol &&);1;OMR;StaticSymbol;1;0
StaticSymbol;StaticSymbol(const class OMR::StaticSymbol &);0;OMR;StaticSymbol;1;0
StaticSymbol;StaticSymbol(TR::DataType,uint32_t);0;OMR;StaticSymbol;0;0
StaticSymbol;StaticSymbol(TR::DataType,void *);0;OMR;StaticSymbol;0;0
StaticSymbol;StaticSymbol(TR::DataType);0;OMR;StaticSymbol;0;0
operator=;operator=(const class OMR::StaticSymbol &);0;OMR;StaticSymbol;1;0
operator=;operator=(class OMR::StaticSymbol &&);0;OMR;StaticSymbol;1;0
operator=;operator=(class TR::StaticSymbol &&);0;TR;StaticSymbol;1;0
operator=;operator=(const class TR::StaticSymbol &);0;TR;StaticSymbol;1;0
Machine;Machine(class OMR::Machine &&);1;OMR;Machine;1;0
Machine;Machine(uint8_t,uint8_t,uint8_t);0;OMR;Machine;0;0
Machine;Machine();0;OMR;Machine;0;0
Machine;Machine(const class OMR::Machine &);0;OMR;Machine;1;0
Machine;Machine(class OMR::X86::Machine &&);0;OMR::X86;Machine;1;0
Machine;Machine(const class OMR::X86::Machine &);0;OMR::X86;Machine;1;0
Machine;Machine(uint8_t,uint8_t,TR::CodeGenerator *,TR::RealRegister **,TR::Register **,uint8_t,uint8_t,uint8_t,TR::Register **,uint32_t *);0;OMR::X86;Machine;0;0
Machine;Machine(class OMR::X86::AMD64::Machine &&);0;OMR::X86::AMD64;Machine;1;0
Machine;Machine(const class OMR::X86::AMD64::Machine &);0;OMR::X86::AMD64;Machine;1;0
Machine;Machine(TR::CodeGenerator *);0;OMR::X86::AMD64;Machine;0;0
coerceGPRegisterAssignment;coerceGPRegisterAssignment(TR::Instruction *,TR::Register *,enum TR_RegisterSizes);1;OMR::X86;Machine;0;0
coerceGPRegisterAssignment;coerceGPRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,_Bool);0;OMR::X86;Machine;0;0
fpMapToStackRelativeRegister;fpMapToStackRelativeRegister(int32_t);1;OMR::X86;Machine;0;0
fpMapToStackRelativeRegister;fpMapToStackRelativeRegister(TR::Register *);0;OMR::X86;Machine;0;0
fpStackFXCH;fpStackFXCH(TR::Instruction *,int32_t);1;OMR::X86;Machine;0;0
fpStackFXCH;fpStackFXCH(TR::Instruction *,TR::Register *,_Bool);0;OMR::X86;Machine;0;0
getLastGlobalRegisterNumber;getLastGlobalRegisterNumber(enum TR_RegisterKinds);1;OMR;Machine;0;0
getLastGlobalRegisterNumber;getLastGlobalRegisterNumber();0;OMR;Machine;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Machine;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator delete;operator delete(void *,size_t);0;OMR;Machine;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Machine;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Machine;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Machine;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Machine;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Machine;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;Machine;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Machine;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Machine;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Machine;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Machine;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Machine;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Machine;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Machine;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Machine;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator=;operator=(class OMR::Machine &&);1;OMR;Machine;1;0
operator=;operator=(const class OMR::Machine &);0;OMR;Machine;1;0
operator=;operator=(const class OMR::X86::Machine &);0;OMR::X86;Machine;1;0
operator=;operator=(class OMR::X86::Machine &&);0;OMR::X86;Machine;1;0
operator=;operator=(class OMR::X86::AMD64::Machine &&);0;OMR::X86::AMD64;Machine;1;0
operator=;operator=(const class OMR::X86::AMD64::Machine &);0;OMR::X86::AMD64;Machine;1;0
operator=;operator=(class TR::Machine &&);0;TR;Machine;1;0
operator=;operator=(const class TR::Machine &);0;TR;Machine;1;0
RealRegister;RealRegister(class OMR::RealRegister &&);1;OMR;RealRegister;1;0
RealRegister;RealRegister(const class OMR::RealRegister &);0;OMR;RealRegister;1;0
RealRegister;RealRegister(enum TR_RegisterKinds,uint16_t,RegState,uint16_t,RegNum,RegMask,TR::CodeGenerator *);0;OMR;RealRegister;0;0
RealRegister;RealRegister(TR::CodeGenerator *,RegNum);0;OMR;RealRegister;0;0
RealRegister;RealRegister(const class OMR::X86::RealRegister &);0;OMR::X86;RealRegister;1;0
RealRegister;RealRegister(TR::CodeGenerator *);0;OMR::X86;RealRegister;0;0
RealRegister;RealRegister(class OMR::X86::RealRegister &&);0;OMR::X86;RealRegister;1;0
RealRegister;RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *);0;OMR::X86;RealRegister;0;0
RealRegister;RealRegister(class OMR::X86::AMD64::RealRegister &&);0;OMR::X86::AMD64;RealRegister;1;0
RealRegister;RealRegister(const class OMR::X86::AMD64::RealRegister &);0;OMR::X86::AMD64;RealRegister;1;0
RealRegister;RealRegister(const class TR::RealRegister &);0;TR;RealRegister;1;0
RealRegister;RealRegister(enum TR_RegisterKinds,uint16_t,RegState,TR::class RealRegister::RegNum,TR::class RealRegister::RegMask,TR::CodeGenerator *);0;TR;RealRegister;0;0
RealRegister;RealRegister(class TR::RealRegister &&);0;TR;RealRegister;1;0
Register;Register(class OMR::Register &&);1;OMR;Register;1;0
Register;Register(enum TR_RegisterKinds,uint16_t);0;OMR;Register;0;0
Register;Register(enum TR_RegisterKinds);0;OMR;Register;0;0
Register;Register(uint32_t);0;OMR;Register;0;0
Register;Register(const class OMR::Register &);0;OMR;Register;1;0
Register;Register(class OMR::X86::Register &&);0;OMR::X86;Register;1;0
Register;Register(const class OMR::X86::Register &);0;OMR::X86;Register;1;0
Register;Register(class TR::Register &&);0;TR;Register;1;0
Register;Register(const class TR::Register &);0;TR;Register;1;0
getRealRegisterMask;getRealRegisterMask();1;OMR;RealRegister;0;0
getRealRegisterMask;getRealRegisterMask(enum TR_RegisterKinds,RegNum);0;OMR::X86;RealRegister;0;0
operator delete;operator delete(void *,size_t);1;OMR;Register;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Register;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Register;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Register;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Register;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Register;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Register;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Register;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Register;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Register;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Register;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Register;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Register;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Register;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Register;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Register;0;0
operator=;operator=(const class OMR::Register &);1;OMR;Register;1;0
operator=;operator=(class OMR::Register &&);0;OMR;Register;1;0
operator=;operator=(class OMR::X86::Register &&);0;OMR::X86;Register;1;0
operator=;operator=(const class OMR::X86::Register &);0;OMR::X86;Register;1;0
operator=;operator=(class TR::Register &&);0;TR;Register;1;0
operator=;operator=(const class TR::Register &);0;TR;Register;1;0
operator=;operator=(class OMR::RealRegister &&);0;OMR;RealRegister;1;0
operator=;operator=(const class OMR::RealRegister &);0;OMR;RealRegister;1;0
operator=;operator=(const class OMR::X86::RealRegister &);0;OMR::X86;RealRegister;1;0
operator=;operator=(class OMR::X86::RealRegister &&);0;OMR::X86;RealRegister;1;0
operator=;operator=(const class OMR::X86::AMD64::RealRegister &);0;OMR::X86::AMD64;RealRegister;1;0
operator=;operator=(class OMR::X86::AMD64::RealRegister &&);0;OMR::X86::AMD64;RealRegister;1;0
operator=;operator=(const class TR::RealRegister &);0;TR;RealRegister;1;0
operator=;operator=(class TR::RealRegister &&);0;TR;RealRegister;1;0
operator=;operator=(class TR_X86FPStackRegister &&);0;TR;X86FPStackRegister;1;0
operator=;operator=(const class TR_X86FPStackRegister &);0;TR;X86FPStackRegister;1;0
setRegisterNumber;setRegisterNumber(RegNum);1;OMR;RealRegister;0;0
setRegisterNumber;setRegisterNumber();0;OMR::X86::AMD64;RealRegister;0;0
bcmpEvaluator;bcmpEvaluator(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);1;OMR::X86;TreeEvaluator;0;0
bcmpEvaluator;bcmpEvaluator(TR::Node *,TR::CodeGenerator *);0;OMR::X86;TreeEvaluator;0;0
checkNonNegativePowerOfTwo;checkNonNegativePowerOfTwo(int64_t);1;OMR;TreeEvaluator;0;0
checkNonNegativePowerOfTwo;checkNonNegativePowerOfTwo(int32_t);0;OMR;TreeEvaluator;0;0
checkPositiveOrNegativePowerOfTwo;checkPositiveOrNegativePowerOfTwo(int32_t);1;OMR;TreeEvaluator;0;0
checkPositiveOrNegativePowerOfTwo;checkPositiveOrNegativePowerOfTwo(int64_t);0;OMR;TreeEvaluator;0;0
compareIntegersForOrder;compareIntegersForOrder(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);1;OMR::X86;TreeEvaluator;0;0
compareIntegersForOrder;compareIntegersForOrder(TR::Node *,TR::CodeGenerator *);0;OMR::X86;TreeEvaluator;0;0
CPU;CPU(class OMR::CPU &&);1;OMR;CPU;1;0
CPU;CPU(const class OMR::CPU &);0;OMR;CPU;1;0
CPU;CPU();0;OMR;CPU;0;0
CPU;CPU(const class OMR::X86::CPU &);0;OMR::X86;CPU;1;0
CPU;CPU(class OMR::X86::CPU &&);0;OMR::X86;CPU;1;0
CPU;CPU(const class TR::CPU &);0;TR;CPU;1;0
CPU;CPU(class TR::CPU &&);0;TR;CPU;1;0
operator=;operator=(class OMR::CPU &&);1;OMR;CPU;1;0
operator=;operator=(const class OMR::CPU &);0;OMR;CPU;1;0
operator=;operator=(class OMR::X86::CPU &&);0;OMR::X86;CPU;1;0
operator=;operator=(const class OMR::X86::CPU &);0;OMR::X86;CPU;1;0
operator=;operator=(class TR::CPU &&);0;TR;CPU;1;0
operator=;operator=(const class TR::CPU &);0;TR;CPU;1;0
DebugEnv;DebugEnv();1;OMR;DebugEnv;0;0
DebugEnv;DebugEnv(const class OMR::DebugEnv &);0;OMR;DebugEnv;1;0
DebugEnv;DebugEnv(class OMR::DebugEnv &&);0;OMR;DebugEnv;1;0
DebugEnv;DebugEnv(const class OMR::X86::DebugEnv &);0;OMR::X86;DebugEnv;1;0
DebugEnv;DebugEnv(class OMR::X86::DebugEnv &&);0;OMR::X86;DebugEnv;1;0
DebugEnv;DebugEnv(const class TR::DebugEnv &);0;TR;DebugEnv;1;0
DebugEnv;DebugEnv(class TR::DebugEnv &&);0;TR;DebugEnv;1;0
operator=;operator=(class OMR::DebugEnv &&);1;OMR;DebugEnv;1;0
operator=;operator=(const class OMR::DebugEnv &);0;OMR;DebugEnv;1;0
operator=;operator=(class OMR::X86::DebugEnv &&);0;OMR::X86;DebugEnv;1;0
operator=;operator=(const class OMR::X86::DebugEnv &);0;OMR::X86;DebugEnv;1;0
operator=;operator=(class TR::DebugEnv &&);0;TR;DebugEnv;1;0
operator=;operator=(const class TR::DebugEnv &);0;TR;DebugEnv;1;0
Instruction;Instruction(class OMR::Instruction &&);1;OMR;Instruction;1;0
Instruction;Instruction(const class OMR::Instruction &);0;OMR;Instruction;1;0
Instruction;Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *);0;OMR;Instruction;0;0
Instruction;Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *);0;OMR;Instruction;0;0
Instruction;Instruction();0;OMR;Instruction;0;0
Instruction;Instruction(class OMR::X86::Instruction &&);0;OMR::X86;Instruction;1;0
Instruction;Instruction(const class OMR::X86::Instruction &);0;OMR::X86;Instruction;1;0
Instruction;Instruction(class TR::Instruction &&);0;TR;Instruction;1;0
Instruction;Instruction(const class TR::Instruction &);0;TR;Instruction;1;0
Instruction;Instruction(TR::RegisterDependencyConditions *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;Instruction;0;0
Instruction;Instruction(enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;Instruction;0;0
Instruction;Instruction(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;Instruction;0;0
Instruction;Instruction(TR::RegisterDependencyConditions *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;Instruction;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Instruction;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Instruction;0;0
operator delete;operator delete(void *,size_t);0;OMR;Instruction;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Instruction;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Instruction;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Instruction;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Instruction;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Instruction;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Instruction;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Instruction;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Instruction;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Instruction;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Instruction;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Instruction;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Instruction;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Instruction;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;Instruction;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Instruction;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Instruction;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Instruction;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Instruction;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Instruction;0;0
operator=;operator=(const class OMR::Instruction &);1;OMR;Instruction;1;0
operator=;operator=(class OMR::Instruction &&);0;OMR;Instruction;1;0
operator=;operator=(class OMR::X86::Instruction &&);0;OMR::X86;Instruction;1;0
operator=;operator=(const class OMR::X86::Instruction &);0;OMR::X86;Instruction;1;0
operator=;operator=(class TR::Instruction &&);0;TR;Instruction;1;0
operator=;operator=(const class TR::Instruction &);0;TR;Instruction;1;0
setOpCodeValue;setOpCodeValue(TR::class InstOpCode::Mnemonic);1;OMR;Instruction;0;0
setOpCodeValue;setOpCodeValue(enum TR_X86OpCodes);0;OMR::X86;Instruction;0;0
Snippet;Snippet(class OMR::Snippet &&);1;OMR;Snippet;1;0
Snippet;Snippet(const class OMR::Snippet &);0;OMR;Snippet;1;0
Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);0;OMR;Snippet;0;0
Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);0;OMR;Snippet;0;0
Snippet;Snippet(class OMR::X86::Snippet &&);0;OMR::X86;Snippet;1;0
Snippet;Snippet(const class OMR::X86::Snippet &);0;OMR::X86;Snippet;1;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Snippet;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Snippet;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Snippet;0;0
operator delete;operator delete(void *,size_t);0;OMR;Snippet;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Snippet;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Snippet;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Snippet;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Snippet;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Snippet;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Snippet;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Snippet;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Snippet;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;Snippet;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Snippet;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Snippet;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Snippet;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator=;operator=(class OMR::Snippet &&);1;OMR;Snippet;1;0
operator=;operator=(const class OMR::Snippet &);0;OMR;Snippet;1;0
operator=;operator=(class OMR::X86::Snippet &&);0;OMR::X86;Snippet;1;0
operator=;operator=(const class OMR::X86::Snippet &);0;OMR::X86;Snippet;1;0
operator=;operator=(const class TR::Snippet &);0;TR;Snippet;1;0
operator=;operator=(class TR::Snippet &&);0;TR;Snippet;1;0
AliasBuilder;AliasBuilder(const class OMR::AliasBuilder &);1;OMR;AliasBuilder;1;0
AliasBuilder;AliasBuilder(class OMR::AliasBuilder &&);0;OMR;AliasBuilder;1;0
AliasBuilder;AliasBuilder(TR::SymbolReferenceTable *,size_t,TR::Compilation *);0;OMR;AliasBuilder;0;0
AliasBuilder;AliasBuilder(const class TR::AliasBuilder &);0;TR;AliasBuilder;1;0
AliasBuilder;AliasBuilder(class TR::AliasBuilder &&);0;TR;AliasBuilder;1;0
gatherLocalUseInfo;gatherLocalUseInfo(TR::Block *,_Bool);1;OMR;AliasBuilder;0;0
gatherLocalUseInfo;gatherLocalUseInfo(TR::Node *,class TR_BitVector &,vcount_t,_Bool);0;OMR;AliasBuilder;0;0
gatherLocalUseInfo;gatherLocalUseInfo(TR::Block *,class TR_BitVector &,TR_ScratchList<TR_Pair<TR::Block, class TR_BitVector> > *,vcount_t,_Bool);0;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,size_t);0;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;AliasBuilder;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;AliasBuilder;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;AliasBuilder;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;AliasBuilder;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;AliasBuilder;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;AliasBuilder;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;AliasBuilder;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;AliasBuilder;0;0
operator=;operator=(class OMR::AliasBuilder &&);1;OMR;AliasBuilder;1;0
operator=;operator=(const class OMR::AliasBuilder &);0;OMR;AliasBuilder;1;0
operator=;operator=(class TR::AliasBuilder &&);0;TR;AliasBuilder;1;0
operator=;operator=(const class TR::AliasBuilder &);0;TR;AliasBuilder;1;0
ArithEnv;ArithEnv(const class OMR::ArithEnv &);1;OMR;ArithEnv;1;0
ArithEnv;ArithEnv();0;OMR;ArithEnv;1;0
ArithEnv;ArithEnv(class OMR::ArithEnv &&);0;OMR;ArithEnv;1;0
ArithEnv;ArithEnv(const class TR::ArithEnv &);0;TR;ArithEnv;1;0
ArithEnv;ArithEnv(class TR::ArithEnv &&);0;TR;ArithEnv;1;0
operator=;operator=(const class OMR::ArithEnv &);1;OMR;ArithEnv;1;0
operator=;operator=(class OMR::ArithEnv &&);0;OMR;ArithEnv;1;0
operator=;operator=(class TR::ArithEnv &&);0;TR;ArithEnv;1;0
operator=;operator=(const class TR::ArithEnv &);0;TR;ArithEnv;1;0
BlockChecklist;BlockChecklist(TR::Compilation *);1;TR;BlockChecklist;0;0
BlockChecklist;BlockChecklist(class TR::BlockChecklist &&);0;TR;BlockChecklist;1;0
Checklist;Checklist(const class TR::Checklist &);1;TR;Checklist;1;0
Checklist;Checklist(TR::Compilation *);0;TR;Checklist;0;0
add;add(TR::Block *);1;TR;BlockChecklist;0;0
add;add(class TR::BlockChecklist &);0;TR;BlockChecklist;0;0
operator=;operator=(const class TR::Checklist &);1;TR;Checklist;1;0
operator=;operator=(class TR::BlockChecklist &&);0;TR;BlockChecklist;1;0
remove;remove(TR::Block *);1;TR;BlockChecklist;0;0
remove;remove(class TR::BlockChecklist &);0;TR;BlockChecklist;0;0
CFG;CFG(const class OMR::CFG &);1;OMR;CFG;1;0
CFG;CFG(TR::Compilation *,TR::ResolvedMethodSymbol *);0;OMR;CFG;0;0
CFG;CFG(class OMR::CFG &&);0;OMR;CFG;1;0
addEdge;addEdge(TR::CFGEdge *);1;OMR;CFG;0;0
addEdge;addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);0;OMR;CFG;0;0
operator delete;operator delete(void *,size_t);1;OMR;CFG;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;CFG;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;CFG;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;CFG;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;CFG;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;CFG;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;CFG;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;CFG;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;CFG;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;CFG;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;CFG;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;CFG;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;CFG;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;CFG;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator=;operator=(class OMR::CFG &&);1;OMR;CFG;1;0
operator=;operator=(const class OMR::CFG &);0;OMR;CFG;1;0
operator=;operator=(class TR::CFG &&);0;TR;CFG;1;0
removeEdge;removeEdge(TR::CFGNode *,TR::CFGNode *);1;OMR;CFG;0;0
removeEdge;removeEdge(TR::CFGEdge *);0;OMR;CFG;0;0
removeEdge;removeEdge(TR::CFGEdgeList &,int32_t,int32_t);0;OMR;CFG;0;0
removeEdge;removeEdge(TR::CFGEdge *,_Bool);0;OMR;CFG;0;0
CFGEdge;CFGEdge();1;TR;CFGEdge;0;0
CFGEdge;CFGEdge(class TR::CFGNode *,class TR::CFGNode *);0;TR;CFGEdge;0;0
createEdge;createEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);1;TR;CFGEdge;0;0
createEdge;createEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);0;TR;CFGEdge;0;0
createExceptionEdge;createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);1;TR;CFGEdge;0;0
createExceptionEdge;createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);0;TR;CFGEdge;0;0
operator delete;operator delete(void *,size_t);1;TR;Link;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;Link;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Link;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Link;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Link;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;Link;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Link;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Link;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Link;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Link;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Link;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Link;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Link;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Link;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Link;0;0
operator new;operator new(size_t,TR::Region &);0;TR;Link;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;TR;Link;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;Link;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Link;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Link;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Link;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Link;0;0
ClassEnv;ClassEnv(class OMR::ClassEnv &&);1;OMR;ClassEnv;1;0
ClassEnv;ClassEnv();0;OMR;ClassEnv;1;0
ClassEnv;ClassEnv(const class OMR::ClassEnv &);0;OMR;ClassEnv;1;0
ClassEnv;ClassEnv(class TR::ClassEnv &&);0;TR;ClassEnv;1;0
ClassEnv;ClassEnv(const class TR::ClassEnv &);0;TR;ClassEnv;1;0
classNameChars;classNameChars(TR::Compilation *,TR::SymbolReference *,int32_t &);1;OMR;ClassEnv;0;0
classNameChars;classNameChars(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &);0;OMR;ClassEnv;0;0
classOfObject;classOfObject(TR::Compilation *,uintptrj_t);1;OMR;ClassEnv;0;0
classOfObject;classOfObject(struct OMR_VMThread *,uintptrj_t);0;OMR;ClassEnv;0;0
isString;isString(TR::Compilation *,uintptrj_t);1;OMR;ClassEnv;0;0
isString;isString(TR::Compilation *,class TR_OpaqueClassBlock *);0;OMR;ClassEnv;0;0
isStringClass;isStringClass(class TR_OpaqueClassBlock *);1;OMR;ClassEnv;0;0
isStringClass;isStringClass(uintptrj_t);0;OMR;ClassEnv;0;0
operator=;operator=(class OMR::ClassEnv &&);1;OMR;ClassEnv;1;0
operator=;operator=(const class OMR::ClassEnv &);0;OMR;ClassEnv;1;0
operator=;operator=(class TR::ClassEnv &&);0;TR;ClassEnv;1;0
operator=;operator=(const class TR::ClassEnv &);0;TR;ClassEnv;1;0
CodeGenPhase;CodeGenPhase(TR::CodeGenerator *);1;OMR;CodeGenPhase;0;0
CodeGenPhase;CodeGenPhase(const class OMR::CodeGenPhase &);0;OMR;CodeGenPhase;1;0
CodeGenPhase;CodeGenPhase(class OMR::CodeGenPhase &&);0;OMR;CodeGenPhase;1;0
CodeGenPhase;CodeGenPhase(class TR::CodeGenPhase &&);0;TR;CodeGenPhase;1;0
CodeGenPhase;CodeGenPhase(const class TR::CodeGenPhase &);0;TR;CodeGenPhase;1;0
getName;getName(enum OMR::CodeGenPhase::PhaseValue);1;OMR;CodeGenPhase;0;0
getName;getName();0;OMR;CodeGenPhase;0;0
operator=;operator=(class OMR::CodeGenPhase &&);1;OMR;CodeGenPhase;1;0
operator=;operator=(const class OMR::CodeGenPhase &);0;OMR;CodeGenPhase;1;0
operator=;operator=(class TR::CodeGenPhase &&);0;TR;CodeGenPhase;1;0
operator=;operator=(const class TR::CodeGenPhase &);0;TR;CodeGenPhase;1;0
CodeGenerator;CodeGenerator(class OMR::CodeGenerator &&);1;OMR;CodeGenerator;1;0
CodeGenerator;CodeGenerator(const class OMR::CodeGenerator &);0;OMR;CodeGenerator;1;0
CodeGenerator;CodeGenerator();0;OMR;CodeGenerator;0;0
CodeGenerator;CodeGenerator(const class OMR::X86::CodeGenerator &);0;OMR::X86;CodeGenerator;1;0
CodeGenerator;CodeGenerator(class OMR::X86::CodeGenerator &&);0;OMR::X86;CodeGenerator;1;0
CodeGenerator;CodeGenerator(const class OMR::X86::AMD64::CodeGenerator &);0;OMR::X86::AMD64;CodeGenerator;1;0
CodeGenerator;CodeGenerator(class OMR::X86::AMD64::CodeGenerator &&);0;OMR::X86::AMD64;CodeGenerator;1;0
CodeGenerator;CodeGenerator(class TestCompiler::CodeGenerator &&);0;TestCompiler;CodeGenerator;1;0
CodeGenerator;CodeGenerator(const class TestCompiler::CodeGenerator &);0;TestCompiler;CodeGenerator;1;0
addAOTRelocation;addAOTRelocation(TR::Relocation *,TR::RelocationDebugInfo *);1;OMR;CodeGenerator;0;0
addAOTRelocation;addAOTRelocation(TR::Relocation *,const char *,uintptr_t,TR::Node *);0;OMR;CodeGenerator;0;0
addProjectSpecializedRelocation;addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *);1;OMR;CodeGenerator;0;0
addProjectSpecializedRelocation;addProjectSpecializedRelocation(TR::Instruction *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *);0;OMR;CodeGenerator;0;0
addToOSRTable;addToOSRTable(TR::Instruction *);1;OMR;CodeGenerator;0;0
addToOSRTable;addToOSRTable(int32_t,TR_ByteCodeInfo &);0;OMR;CodeGenerator;0;0
alignment;alignment(intptrj_t,intptrj_t,intptrj_t);1;OMR::X86;CodeGenerator;0;0
alignment;alignment(void *,intptrj_t,intptrj_t);0;OMR::X86;CodeGenerator;0;0
allocateCodeMemory;allocateCodeMemory(uint32_t,_Bool,_Bool);1;OMR;CodeGenerator;0;0
allocateCodeMemory;allocateCodeMemory(uint32_t,uint32_t,uint8_t **,_Bool);0;OMR;CodeGenerator;0;0
allocateSpill;allocateSpill(int32_t,_Bool,int32_t *,_Bool);1;OMR;CodeGenerator;0;0
allocateSpill;allocateSpill(_Bool,int32_t *,_Bool);0;OMR;CodeGenerator;0;0
apply16BitLabelRelativeRelocation;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);1;OMR;CodeGenerator;0;0
apply16BitLabelRelativeRelocation;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool);0;OMR;CodeGenerator;0;0
canNullChkBeImplicit;canNullChkBeImplicit(TR::Node *,_Bool);1;OMR;CodeGenerator;0;0
canNullChkBeImplicit;canNullChkBeImplicit(TR::Node *);0;OMR;CodeGenerator;0;0
considerTypeForGRA;considerTypeForGRA(TR::DataType);1;OMR;CodeGenerator;0;0
considerTypeForGRA;considerTypeForGRA(TR::SymbolReference *);0;OMR;CodeGenerator;0;0
considerTypeForGRA;considerTypeForGRA(TR::Node *);0;OMR;CodeGenerator;0;0
estimateRegisterPressure;estimateRegisterPressure(TR::Block *,vcount_t,int32_t,int32_t,_Bool &,int32_t,class TR_BitVector *,TR::SymbolReference *,_Bool);1;OMR;CodeGenerator;0;0
estimateRegisterPressure;estimateRegisterPressure(TR::Node *,int32_t &,int32_t &,int32_t,class TR_BitVector *,_Bool,vcount_t,TR::SymbolReference *,_Bool &,_Bool,_Bool &);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,TR::Register *,class TR_ScratchRegisterManager &,int8_t,int32_t,TR::Instruction *);1;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,class TR_ScratchRegisterManager &,int32_t,int8_t,int32_t,TR::Instruction *);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,TR::RegisterDependencyConditions &,int32_t,int8_t,int32_t,TR::Instruction *);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(TR::Instruction *,const char *,TR::Register *,int8_t,int32_t);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(TR::Instruction *,const char *,int32_t,int8_t,int32_t);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,TR::Register *,TR::RegisterDependencyConditions &,int8_t,int32_t,TR::Instruction *);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,int32_t,int8_t);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,TR::Register *,int8_t);0;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &);1;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &);0;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *);0;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *);0;OMR;CodeGenerator;0;0
getLinkage;getLinkage(enum TR_LinkageConventions);1;OMR;CodeGenerator;0;0
getLinkage;getLinkage();0;OMR;CodeGenerator;0;0
getMaximumNumberOfGPRsAllowedAcrossEdge;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Block *);1;OMR;CodeGenerator;0;0
getMaximumNumberOfGPRsAllowedAcrossEdge;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *);0;OMR;CodeGenerator;0;0
getSupportsConstantOffsetInAddressing;getSupportsConstantOffsetInAddressing();1;OMR;CodeGenerator;0;0
getSupportsConstantOffsetInAddressing;getSupportsConstantOffsetInAddressing(int64_t);0;OMR;CodeGenerator;0;0
identifyUnneededByteConvNodes;identifyUnneededByteConvNodes(TR::Node *,TR::TreeTop *,vcount_t,TR::DataType);1;OMR;CodeGenerator;0;0
identifyUnneededByteConvNodes;identifyUnneededByteConvNodes();0;OMR;CodeGenerator;0;0
isCandidateLoad;isCandidateLoad(TR::Node *,TR::SymbolReference *);1;OMR;CodeGenerator;0;0
isCandidateLoad;isCandidateLoad(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);0;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,size_t);0;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;CodeGenerator;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;CodeGenerator;0;0
operator=;operator=(class OMR::CodeGenerator &&);1;OMR;CodeGenerator;1;0
operator=;operator=(const class OMR::CodeGenerator &);0;OMR;CodeGenerator;1;0
operator=;operator=(const class OMR::X86::CodeGenerator &);0;OMR::X86;CodeGenerator;1;0
operator=;operator=(class OMR::X86::CodeGenerator &&);0;OMR::X86;CodeGenerator;1;0
operator=;operator=(class OMR::X86::AMD64::CodeGenerator &&);0;OMR::X86::AMD64;CodeGenerator;1;0
operator=;operator=(const class OMR::X86::AMD64::CodeGenerator &);0;OMR::X86::AMD64;CodeGenerator;1;0
operator=;operator=(class TestCompiler::CodeGenerator &&);0;TestCompiler;CodeGenerator;1;0
operator=;operator=(const class TestCompiler::CodeGenerator &);0;TestCompiler;CodeGenerator;1;0
operator=;operator=(const class TR::CodeGenerator &);0;TR;CodeGenerator;1;0
operator=;operator=(class TR::CodeGenerator &&);0;TR;CodeGenerator;1;0
setLinkage;setLinkage(enum TR_LinkageConventions,TR::Linkage *);1;OMR;CodeGenerator;0;0
setLinkage;setLinkage(TR::Linkage *);0;OMR;CodeGenerator;0;0
simulatedNodeState;simulatedNodeState(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);1;OMR;CodeGenerator;0;0
simulatedNodeState;simulatedNodeState(TR::Node *);0;OMR;CodeGenerator;0;0
traceRegAssigned;traceRegAssigned(TR::Register *,TR::Register *);1;OMR;CodeGenerator;0;0
traceRegAssigned;traceRegAssigned(TR::Register *,TR::Register *,TR_RegisterAssignmentFlags);0;OMR;CodeGenerator;0;0
wantToPatchClassPointer;wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const uint8_t *);1;OMR;CodeGenerator;0;0
wantToPatchClassPointer;wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const TR::Node *);0;OMR;CodeGenerator;0;0
Compilation;Compilation(class OMR::Compilation &);1;OMR;Compilation;1;0
Compilation;Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *);0;OMR;Compilation;0;0
dumpMethodTrees;dumpMethodTrees(char *,TR::ResolvedMethodSymbol *);1;OMR;Compilation;0;0
dumpMethodTrees;dumpMethodTrees(char *,const char *,TR::ResolvedMethodSymbol *);0;OMR;Compilation;0;0
getHotnessName;getHotnessName();1;OMR;Compilation;0;0
getHotnessName;getHotnessName(enum TR_Hotness);0;OMR;Compilation;0;0
getOwningMethodSymbol;getOwningMethodSymbol(class TR_OpaqueMethodBlock *);1;OMR;Compilation;0;0
getOwningMethodSymbol;getOwningMethodSymbol(class TR_ResolvedMethod *);0;OMR;Compilation;0;0
getOwningMethodSymbol;getOwningMethodSymbol(class mcount_t);0;OMR;Compilation;0;0
incInlineDepth;incInlineDepth(class TR_OpaqueMethodBlock *,TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *);1;OMR;Compilation;0;0
incInlineDepth;incInlineDepth(TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,int32_t,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *);0;OMR;Compilation;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Compilation;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Compilation;0;0
operator delete;operator delete(void *,size_t);0;OMR;Compilation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Compilation;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Compilation;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;Compilation;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Compilation;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Compilation;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Compilation;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Compilation;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Compilation;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Compilation;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Compilation;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Compilation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Compilation;0;0
resetVisitCounts;resetVisitCounts(vcount_t);1;OMR;Compilation;0;0
resetVisitCounts;resetVisitCounts(vcount_t,TR::TreeTop *);0;OMR;Compilation;0;0
resetVisitCounts;resetVisitCounts(vcount_t,TR::ResolvedMethodSymbol *);0;OMR;Compilation;0;0
CompilerEnv;CompilerEnv(class OMR::CompilerEnv &&);1;OMR;CompilerEnv;1;0
CompilerEnv;CompilerEnv(TR::RawAllocator,const TR::PersistentAllocatorKit &);0;OMR;CompilerEnv;0;0
CompilerEnv;CompilerEnv(const class OMR::CompilerEnv &);0;OMR;CompilerEnv;1;0
CompilerEnv;CompilerEnv(class TR::CompilerEnv &&);0;TR;CompilerEnv;1;0
operator=;operator=(const class OMR::CompilerEnv &);1;OMR;CompilerEnv;1;0
operator=;operator=(class OMR::CompilerEnv &&);0;OMR;CompilerEnv;1;0
operator=;operator=(class TR::CompilerEnv &&);0;TR;CompilerEnv;1;0
DataType;DataType(class OMR::DataType &&);1;OMR;DataType;1;0
DataType;DataType(TR::DataTypes);0;OMR;DataType;0;0
DataType;DataType();0;OMR;DataType;0;0
DataType;DataType(const class OMR::DataType &);0;OMR;DataType;1;0
DataType;DataType(class TR::DataType &&);0;TR;DataType;1;0
DataType;DataType(const class TR::DataType &);0;TR;DataType;1;0
operator!=;operator!=(TR::DataTypes);1;OMR;DataType;0;0
operator!=;operator!=(const TR::DataType &);0;OMR;DataType;0;0
operator<;operator<(TR::DataTypes);1;OMR;DataType;0;0
operator<;operator<(const TR::DataType &);0;OMR;DataType;0;0
operator<=;operator<=(const TR::DataType &);1;OMR;DataType;0;0
operator<=;operator<=(TR::DataTypes);0;OMR;DataType;0;0
operator=;operator=(const class OMR::DataType &);1;OMR;DataType;1;0
operator=;operator=(class OMR::DataType &&);0;OMR;DataType;1;0
operator=;operator=(TR::DataTypes);0;OMR;DataType;0;0
operator=;operator=(const TR::DataType &);0;OMR;DataType;0;0
operator==;operator==(const TR::DataType &);1;OMR;DataType;0;0
operator==;operator==(TR::DataTypes);0;OMR;DataType;0;0
operator>;operator>(TR::DataTypes);1;OMR;DataType;0;0
operator>;operator>(const TR::DataType &);0;OMR;DataType;0;0
operator>=;operator>=(TR::DataTypes);1;OMR;DataType;0;0
operator>=;operator>=(const TR::DataType &);0;OMR;DataType;0;0
DebugCounterBase;DebugCounterBase(const class TR::DebugCounterBase &);1;TR;DebugCounterBase;1;0
DebugCounterBase;DebugCounterBase(class TR::DebugCounterBase &&);0;TR;DebugCounterBase;1;0
DebugCounterBase;DebugCounterBase();0;TR;DebugCounterBase;1;0
accumulate;accumulate();1;TR;DebugCounterBase;0;1
accumulate;accumulate(int64_t);0;TR;DebugCounter;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;DebugCounter;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;DebugCounter;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
operator delete;operator delete(void *,size_t);0;TR;DebugCounter;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;DebugCounter;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;DebugCounter;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;DebugCounter;0;0
operator new;operator new(size_t,TR::Region &);1;TR;DebugCounter;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;DebugCounter;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;DebugCounter;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;DebugCounter;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;DebugCounter;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;DebugCounter;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;DebugCounter;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;DebugCounter;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;DebugCounter;0;0
operator=;operator=(const class TR::DebugCounterBase &);1;TR;DebugCounterBase;1;0
operator=;operator=(class TR::DebugCounterBase &&);0;TR;DebugCounterBase;1;0
operator=;operator=(class TR::DebugCounter &&);0;TR;DebugCounter;1;0
operator=;operator=(const class TR::DebugCounter &);0;TR;DebugCounter;1;0
prependDebugCounter;prependDebugCounter(TR::Compilation *,const char *,TR::TreeTop *,int32_t,int8_t);1;TR;DebugCounter;0;0
prependDebugCounter;prependDebugCounter(TR::Compilation *,const char *,TR::TreeTop *,TR::Node *,int8_t,int32_t);0;TR;DebugCounter;0;0
prependDebugCounter;prependDebugCounter(TR::Compilation *,const char *,TR::TreeTop *,TR::Node *,int8_t);0;TR;DebugCounter;0;0
prependDebugCounter;prependDebugCounter(TR::Compilation *,const char *,TR::TreeTop *,int32_t,int8_t,int32_t);0;TR;DebugCounter;0;0
prependDebugCounterBump;prependDebugCounterBump(TR::Compilation *,TR::TreeTop *,class TR::DebugCounterBase *,int32_t);1;TR;DebugCounter;0;0
prependDebugCounterBump;prependDebugCounterBump(TR::Compilation *,TR::TreeTop *,class TR::DebugCounterBase *,TR::Node *);0;TR;DebugCounter;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;DebugCounterAggregation;0;0
operator delete;operator delete(void *,size_t);0;TR;DebugCounterAggregation;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounterAggregation;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;DebugCounterAggregation;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounterAggregation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;DebugCounterAggregation;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounterAggregation;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounterAggregation;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;DebugCounterAggregation;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;DebugCounterAggregation;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;DebugCounterAggregation;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;DebugCounterAggregation;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;DebugCounterAggregation;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounterAggregation;0;0
operator new;operator new(size_t,TR::Region &);0;TR;DebugCounterAggregation;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;DebugCounterAggregation;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;DebugCounterAggregation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;DebugCounterAggregation;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;DebugCounterAggregation;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;DebugCounterAggregation;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounterAggregation;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounterAggregation;0;0
operator=;operator=(const class TR::DebugCounterAggregation &);0;TR;DebugCounterAggregation;1;0
operator=;operator=(class TR::DebugCounterAggregation &&);0;TR;DebugCounterAggregation;1;0
Environment;Environment(TR::MajorOperatingSystem,TR::Bitness);1;OMR;Environment;0;0
Environment;Environment();0;OMR;Environment;0;0
Environment;Environment(const class OMR::Environment &);0;OMR;Environment;1;0
Environment;Environment(class OMR::Environment &&);0;OMR;Environment;1;0
Environment;Environment(const class TR::Environment &);0;TR;Environment;1;0
Environment;Environment(class TR::Environment &&);0;TR;Environment;1;0
operator=;operator=(class OMR::Environment &&);1;OMR;Environment;1;0
operator=;operator=(const class OMR::Environment &);0;OMR;Environment;1;0
operator=;operator=(const class TR::Environment &);0;TR;Environment;1;0
operator=;operator=(class TR::Environment &&);0;TR;Environment;1;0
GCRegisterMap;GCRegisterMap();1;OMR;GCRegisterMap;0;0
GCRegisterMap;GCRegisterMap(const class OMR::GCRegisterMap &);0;OMR;GCRegisterMap;1;0
GCRegisterMap;GCRegisterMap(class OMR::GCRegisterMap &&);0;OMR;GCRegisterMap;1;0
GCRegisterMap;GCRegisterMap(class TR::GCRegisterMap &&);0;TR;GCRegisterMap;1;0
GCRegisterMap;GCRegisterMap(const class TR::GCRegisterMap &);0;TR;GCRegisterMap;1;0
operator delete;operator delete(void *,size_t);1;OMR;GCRegisterMap;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;GCRegisterMap;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;GCRegisterMap;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;GCRegisterMap;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;GCRegisterMap;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
GCStackAtlas;GCStackAtlas(const class OMR::GCStackAtlas &);1;OMR;GCStackAtlas;1;0
GCStackAtlas;GCStackAtlas(class OMR::GCStackAtlas &&);0;OMR;GCStackAtlas;1;0
GCStackAtlas;GCStackAtlas(uint32_t,uint32_t,class TR_Memory *);0;OMR;GCStackAtlas;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;GCStackAtlas;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCStackAtlas;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;GCStackAtlas;0;0
operator delete;operator delete(void *,size_t);0;OMR;GCStackAtlas;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;GCStackAtlas;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;GCStackAtlas;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;GCStackAtlas;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCStackAtlas;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;GCStackAtlas;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;GCStackAtlas;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;GCStackAtlas;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;GCStackAtlas;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;GCStackAtlas;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCStackAtlas;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;GCStackAtlas;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;GCStackAtlas;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;GCStackAtlas;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCStackAtlas;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;GCStackAtlas;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;GCStackAtlas;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;GCStackAtlas;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;GCStackAtlas;0;0
IL;IL(const class OMR::IL &);1;OMR;IL;1;0
IL;IL(class OMR::IL &&);0;OMR;IL;1;0
IL;IL(class TR::IL &&);0;TR;IL;1;0
IL;IL(const class TR::IL &);0;TR;IL;1;0
ILOpCode;ILOpCode(class OMR::ILOpCode &&);1;OMR;ILOpCode;1;0
ILOpCode;ILOpCode(const class OMR::ILOpCode &);0;OMR;ILOpCode;1;0
ILOpCode;ILOpCode(TR::ILOpCodes);0;OMR;ILOpCode;0;0
ILOpCode;ILOpCode();0;OMR;ILOpCode;0;0
ILOpCode;ILOpCode(class TR::ILOpCode &&);0;TR;ILOpCode;1;0
ILOpCode;ILOpCode(const class TR::ILOpCode &);0;TR;ILOpCode;1;0
getDataType;getDataType();1;OMR;ILOpCode;0;0
getDataType;getDataType(TR::ILOpCodes);0;OMR;ILOpCode;0;0
getDirectCall;getDirectCall(TR::DataType);1;OMR;ILOpCode;0;0
getDirectCall;getDirectCall(TR::ILOpCodes);0;OMR;ILOpCode;0;0
getSize;getSize(TR::ILOpCodes);1;OMR;ILOpCode;0;0
getSize;getSize();0;OMR;ILOpCode;0;0
getType;getType();1;OMR;ILOpCode;0;0
getType;getType(TR::ILOpCodes);0;OMR;ILOpCode;0;0
KnownObjectTable;KnownObjectTable(class OMR::KnownObjectTable &&);1;OMR;KnownObjectTable;1;0
KnownObjectTable;KnownObjectTable(const class OMR::KnownObjectTable &);0;OMR;KnownObjectTable;1;0
KnownObjectTable;KnownObjectTable(TR::Compilation *);0;OMR;KnownObjectTable;0;0
getIndex;getIndex(uintptrj_t,_Bool);1;OMR;KnownObjectTable;0;0
getIndex;getIndex(uintptrj_t);0;OMR;KnownObjectTable;0;1
getIndexAt;getIndexAt(uintptrj_t *,_Bool);1;OMR;KnownObjectTable;0;0
getIndexAt;getIndexAt(uintptrj_t *);0;OMR;KnownObjectTable;0;0
operator=;operator=(const class OMR::KnownObjectTable &);1;OMR;KnownObjectTable;1;0
operator=;operator=(class OMR::KnownObjectTable &&);0;OMR;KnownObjectTable;1;0
operator=;operator=(class TR::KnownObjectTable &&);0;TR;KnownObjectTable;1;0
operator=;operator=(const class TR::KnownObjectTable &);0;TR;KnownObjectTable;1;0
Monitor;Monitor();1;OMR;Monitor;1;0
Monitor;Monitor(const class OMR::Monitor &);0;OMR;Monitor;1;0
Monitor;Monitor(class TR::Monitor &&);0;TR;Monitor;1;0
destroy;destroy();1;OMR;Monitor;0;0
destroy;destroy(TR::Monitor *);0;OMR;Monitor;0;0
operator=;operator=(const class OMR::Monitor &);1;OMR;Monitor;1;0
operator=;operator=(class TR::Monitor &&);0;TR;Monitor;1;0
Node;Node(const class OMR::Node &);1;OMR;Node;1;0
Node;Node();0;OMR;Node;0;0
Node;Node(TR::Node *,TR::ILOpCodes,uint16_t);0;OMR;Node;0;0
Node;Node(TR::Node *,uint16_t);0;OMR;Node;0;0
Node;Node(class TR::Node &);0;TR;Node;0;0
Node;Node(class TR::Node *,uint16_t);0;TR;Node;0;0
aconst;aconst(TR::Node *,uintptrj_t,uint8_t);1;OMR;Node;0;0
aconst;aconst(uintptrj_t);0;OMR;Node;0;0
aconst;aconst(TR::Node *,uintptrj_t);0;OMR;Node;0;0
addChildrenAndSymRef;addChildrenAndSymRef(uint16_t,TR::Node *);1;OMR;Node;0;0
addChildrenAndSymRef;addChildrenAndSymRef(uint16_t,TR::SymbolReference *);0;OMR;Node;0;0
bconst;bconst(TR::Node *,int8_t);1;OMR;Node;0;0
bconst;bconst(int8_t);0;OMR;Node;0;0
buconst;buconst(TR::Node *,uint8_t);1;OMR;Node;0;0
buconst;buconst(uint8_t);0;OMR;Node;0;0
cconst;cconst(uint16_t);1;OMR;Node;0;0
cconst;cconst(TR::Node *,uint16_t);0;OMR;Node;0;0
copy;copy(TR::Node *);1;OMR;Node;0;0
copy;copy(TR::Node *,int32_t);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::TreeTop *);1;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::Node *,TR::ILOpCodes,uint16_t,int32_t,TR::TreeTop *);0;OMR;Node;0;0
create;create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,int32_t,TR::TreeTop *);0;OMR;Node;0;0
create;create(TR::Node *,TR::ILOpCodes,uint16_t);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
create;create(TR::Node *,TR::ILOpCodes,uint16_t,TR::TreeTop *);0;OMR;Node;0;0
createAddressNode;createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t);1;OMR;Node;0;0
createAddressNode;createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t,uint8_t);0;OMR;Node;0;0
createArraycopy;createArraycopy(TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
createArraycopy;createArraycopy(TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
createArraycopy;createArraycopy();0;OMR;Node;0;0
createLoad;createLoad(TR::Node *,TR::SymbolReference *);1;OMR;Node;0;0
createLoad;createLoad(TR::SymbolReference *);0;OMR;Node;0;0
createRelative32BitFenceNode;createRelative32BitFenceNode(TR::Node *,void *);1;OMR;Node;0;0
createRelative32BitFenceNode;createRelative32BitFenceNode(void *);0;OMR;Node;0;0
createStore;createStore(TR::SymbolReference *,TR::Node *);1;OMR;Node;0;0
createStore;createStore(TR::Node *,TR::SymbolReference *,TR::Node *);0;OMR;Node;0;0
createStore;createStore(TR::SymbolReference *,TR::Node *,TR::ILOpCodes);0;OMR;Node;0;0
createStore;createStore(TR::SymbolReference *,TR::Node *,TR::ILOpCodes,size_t);0;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::SymbolReference *,uintptr_t);1;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::SymbolReference *);0;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,uintptr_t,TR::SymbolReference *);0;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,uintptr_t,TR::SymbolReference *);0;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::SymbolReference *);0;OMR;Node;0;0
iconst;iconst(int32_t);1;OMR;Node;0;0
iconst;iconst(TR::Node *,int32_t);0;OMR;Node;0;0
iuconst;iuconst(uint32_t);1;OMR;Node;0;0
iuconst;iuconst(TR::Node *,uint32_t);0;OMR;Node;0;0
lconst;lconst(int64_t);1;OMR;Node;0;0
lconst;lconst(TR::Node *,int64_t);0;OMR;Node;0;0
luconst;luconst(uint64_t);1;OMR;Node;0;0
luconst;luconst(TR::Node *,uint64_t);0;OMR;Node;0;0
operator new;operator new(size_t,TR::NodePool &);1;OMR;Node;0;0
operator new;operator new(size_t,void *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *);1;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
sconst;sconst(int16_t);1;OMR;Node;0;0
sconst;sconst(TR::Node *,int16_t);0;OMR;Node;0;0
NodeChecklist;NodeChecklist(const class TR::NodeChecklist &);1;TR;NodeChecklist;1;0
NodeChecklist;NodeChecklist(TR::Compilation *);0;TR;NodeChecklist;0;0
NodeChecklist;NodeChecklist(class TR::NodeChecklist &&);0;TR;NodeChecklist;1;0
add;add(TR::Node *);1;TR;NodeChecklist;0;0
add;add(class TR::NodeChecklist &);0;TR;NodeChecklist;0;0
operator=;operator=(class TR::NodeChecklist &&);0;TR;NodeChecklist;1;0
remove;remove(TR::Node *);1;TR;NodeChecklist;0;0
remove;remove(class TR::NodeChecklist &);0;TR;NodeChecklist;0;0
ObjectModel;ObjectModel(class OMR::ObjectModel &&);1;OMR;ObjectModel;1;0
ObjectModel;ObjectModel(const class OMR::ObjectModel &);0;OMR;ObjectModel;1;0
ObjectModel;ObjectModel();0;OMR;ObjectModel;0;0
ObjectModel;ObjectModel(class TestCompiler::ObjectModel &&);0;TestCompiler;ObjectModel;1;0
ObjectModel;ObjectModel(const class TestCompiler::ObjectModel &);0;TestCompiler;ObjectModel;1;0
ObjectModel;ObjectModel(const class TR::ObjectModel &);0;TR;ObjectModel;1;0
ObjectModel;ObjectModel(class TR::ObjectModel &&);0;TR;ObjectModel;1;0
getArrayElementWidthInBytes;getArrayElementWidthInBytes(TR::DataType);1;OMR;ObjectModel;0;0
getArrayElementWidthInBytes;getArrayElementWidthInBytes(TR::Compilation *,uintptrj_t);0;OMR;ObjectModel;0;0
isDiscontiguousArray;isDiscontiguousArray(int32_t);1;OMR;ObjectModel;0;0
isDiscontiguousArray;isDiscontiguousArray(int32_t,int32_t);0;OMR;ObjectModel;0;0
isDiscontiguousArray;isDiscontiguousArray(TR::Compilation *,uintptrj_t);0;OMR;ObjectModel;0;0
operator=;operator=(class OMR::ObjectModel &&);1;OMR;ObjectModel;1;0
operator=;operator=(const class OMR::ObjectModel &);0;OMR;ObjectModel;1;0
operator=;operator=(class TestCompiler::ObjectModel &&);0;TestCompiler;ObjectModel;1;0
operator=;operator=(const class TestCompiler::ObjectModel &);0;TestCompiler;ObjectModel;1;0
operator=;operator=(const class TR::ObjectModel &);0;TR;ObjectModel;1;0
operator=;operator=(class TR::ObjectModel &&);0;TR;ObjectModel;1;0
Optimizer;Optimizer(const class OMR::Optimizer &);1;OMR;Optimizer;1;0
Optimizer;Optimizer(TR::Compilation *,TR::ResolvedMethodSymbol *,_Bool,const struct OptimizationStrategy *,uint16_t);0;OMR;Optimizer;0;0
Optimizer;Optimizer(class OMR::Optimizer &&);0;OMR;Optimizer;1;0
areNodesEquivalent;areNodesEquivalent(TR::Node *,TR::Node *,TR::Compilation *,_Bool);1;OMR;Optimizer;0;0
areNodesEquivalent;areNodesEquivalent(TR::Node *,TR::Node *,_Bool);0;OMR;Optimizer;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Optimizer;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Optimizer;0;0
operator delete;operator delete(void *,size_t);0;OMR;Optimizer;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;Optimizer;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Optimizer;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;Optimizer;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Optimizer;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Optimizer;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Optimizer;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Optimizer;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Optimizer;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Optimizer;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Optimizer;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Optimizer;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Optimizer;0;0
switchToProfiling;switchToProfiling(uint32_t,uint32_t);1;OMR;Optimizer;0;0
switchToProfiling;switchToProfiling();0;OMR;Optimizer;0;0
Options;Options(class OMR::Options &&);1;OMR;Options;1;0
Options;Options(const class OMR::Options &);0;OMR;Options;1;0
Options;Options(TR::Options &);0;OMR;Options;0;0
Options;Options();0;OMR;Options;0;0
Options;Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t);0;OMR;Options;0;0
findOptionSet;findOptionSet(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,enum TR_Hotness,_Bool);1;OMR;Options;0;0
findOptionSet;findOptionSet(class TR_Memory *,class TR_ResolvedMethod *,_Bool);0;OMR;Options;0;0
findOptionSet;findOptionSet(int32_t,int32_t,const char *,enum TR_Hotness,_Bool);0;OMR;Options;0;0
isAnyVerboseOptionSet;isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags);1;OMR;Options;0;0
isAnyVerboseOptionSet;isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags);0;OMR;Options;0;0
isAnyVerboseOptionSet;isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags);0;OMR;Options;0;0
isAnyVerboseOptionSet;isAnyVerboseOptionSet(enum TR_VerboseFlags);0;OMR;Options;0;0
isAnyVerboseOptionSet;isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags);0;OMR;Options;0;0
isAnyVerboseOptionSet;isAnyVerboseOptionSet(enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags,enum TR_VerboseFlags);0;OMR;Options;0;0
isAnyVerboseOptionSet;isAnyVerboseOptionSet();0;OMR;Options;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Options;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator delete;operator delete(void *,size_t);0;OMR;Options;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Options;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Options;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Options;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Options;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;Options;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Options;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Options;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Options;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Options;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Options;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Options;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Options;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Options;0;0
processOptionSet;processOptionSet(char *,char *,TR::OptionSet *);1;OMR;Options;0;0
processOptionSet;processOptionSet(char *,char *,TR::Options *,_Bool);0;OMR;Options;0;0
processOptionSet;processOptionSet(char *,TR::OptionSet *,void *,_Bool);0;OMR;Options;0;0
processOptions;processOptions(char *,char *,void *,class TR_FrontEnd *,TR::Options *);1;OMR;Options;0;0
processOptions;processOptions(char *,char *,TR::Options *);0;OMR;Options;0;0
PersistentInfo;PersistentInfo(class OMR::PersistentInfo &&);1;OMR;PersistentInfo;1;0
PersistentInfo;PersistentInfo(class TR_PersistentMemory *);0;OMR;PersistentInfo;0;0
PersistentInfo;PersistentInfo(const class OMR::PersistentInfo &);0;OMR;PersistentInfo;1;0
PersistentInfo;PersistentInfo(const class TR::PersistentInfo &);0;TR;PersistentInfo;1;0
PersistentInfo;PersistentInfo(class TR::PersistentInfo &&);0;TR;PersistentInfo;1;0
operator=;operator=(class OMR::PersistentInfo &&);1;OMR;PersistentInfo;1;0
operator=;operator=(const class OMR::PersistentInfo &);0;OMR;PersistentInfo;1;0
operator=;operator=(class TR::PersistentInfo &&);0;TR;PersistentInfo;1;0
operator=;operator=(const class TR::PersistentInfo &);0;TR;PersistentInfo;1;0
Destructable;Destructable(const class TR::Region::Destructable &);1;TR::Region;Destructable;1;0
Destructable;Destructable(class TR::Region::Destructable *const);0;TR::Region;Destructable;0;0
RegisterIterator;RegisterIterator(class OMR::X86::RegisterIterator &&);1;OMR::X86;RegisterIterator;1;0
RegisterIterator;RegisterIterator(TR::Machine *,enum TR_RegisterKinds);0;OMR::X86;RegisterIterator;0;0
RegisterIterator;RegisterIterator(const class OMR::X86::RegisterIterator &);0;OMR::X86;RegisterIterator;1;0
RegisterIterator;RegisterIterator(class TR::RegisterIterator &&);0;TR;RegisterIterator;1;0
RegisterIterator;RegisterIterator(const class TR::RegisterIterator &);0;TR;RegisterIterator;1;0
ResolvedMethod;ResolvedMethod(class TestCompiler::ResolvedMethod &&);1;TestCompiler;ResolvedMethod;1;0
ResolvedMethod;ResolvedMethod(const class TestCompiler::ResolvedMethod &);0;TestCompiler;ResolvedMethod;1;0
ResolvedMethod;ResolvedMethod(TR::MethodBuilder *);0;TestCompiler;ResolvedMethod;0;0
ResolvedMethod;ResolvedMethod(class TR_OpaqueMethodBlock *);0;TestCompiler;ResolvedMethod;0;0
ResolvedMethod;ResolvedMethod(const char *,const char *,char *,int32_t,TR::IlType **,TR::IlType *,void *,TR::IlInjector *);0;TestCompiler;ResolvedMethod;0;0
ResolvedMethod;ResolvedMethod(char *,char *,char *,int32_t,TR::IlType **,TR::IlType *,void *,TR::IlInjector *);0;TR;ResolvedMethod;0;0
ResolvedMethodBase;ResolvedMethodBase(class TestCompiler::ResolvedMethodBase &&);1;TestCompiler;ResolvedMethodBase;1;0
ResolvedMethodBase;ResolvedMethodBase(const class TestCompiler::ResolvedMethodBase &);0;TestCompiler;ResolvedMethodBase;1;0
ResolvedMethodBase;ResolvedMethodBase();0;TestCompiler;ResolvedMethodBase;1;0
TR_ResolvedMethod;TR_ResolvedMethod();1;TR;ResolvedMethod;1;0
TR_ResolvedMethod;TR_ResolvedMethod(class TR_ResolvedMethod &&);0;TR;ResolvedMethod;1;0
TR_ResolvedMethod;TR_ResolvedMethod(const class TR_ResolvedMethod &);0;TR;ResolvedMethod;1;0
fieldName;fieldName(int32_t,int32_t &,class TR_Memory *,enum TR_AllocationKind);1;TR;ResolvedMethod;0;1
fieldName;fieldName(int32_t,class TR_Memory *,enum TR_AllocationKind);0;TR;ResolvedMethod;0;1
getResolvedInterfaceMethod;getResolvedInterfaceMethod(int32_t,uintptrj_t *);1;TR;ResolvedMethod;0;1
getResolvedInterfaceMethod;getResolvedInterfaceMethod(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t);0;TR;ResolvedMethod;0;1
getResolvedVirtualMethod;getResolvedVirtualMethod(TR::Compilation *,int32_t,_Bool,_Bool *);1;TR;ResolvedMethod;0;1
getResolvedVirtualMethod;getResolvedVirtualMethod(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t,_Bool);0;TR;ResolvedMethod;0;1
localName;localName(uint32_t,uint32_t,class TR_Memory *);1;TR;ResolvedMethod;0;1
localName;localName(uint32_t,uint32_t,int32_t &,class TR_Memory *);0;TR;ResolvedMethod;0;1
operator=;operator=(class TR_ResolvedMethod &&);1;TR;ResolvedMethod;1;0
operator=;operator=(const class TR_ResolvedMethod &);0;TR;ResolvedMethod;1;0
operator=;operator=(class TestCompiler::ResolvedMethodBase &&);0;TestCompiler;ResolvedMethodBase;1;0
operator=;operator=(const class TestCompiler::ResolvedMethodBase &);0;TestCompiler;ResolvedMethodBase;1;0
operator=;operator=(const class TestCompiler::ResolvedMethod &);0;TestCompiler;ResolvedMethod;1;0
operator=;operator=(class TestCompiler::ResolvedMethod &&);0;TestCompiler;ResolvedMethod;1;0
operator=;operator=(class TR::ResolvedMethod &&);0;TR;ResolvedMethod;1;0
operator=;operator=(const class TR::ResolvedMethod &);0;TR;ResolvedMethod;1;0
staticName;staticName(int32_t,int32_t &,class TR_Memory *,enum TR_AllocationKind);1;TR;ResolvedMethod;0;1
staticName;staticName(int32_t,class TR_Memory *,enum TR_AllocationKind);0;TR;ResolvedMethod;0;1
Method;Method(class TestCompiler::Method &&);1;TestCompiler;Method;1;0
Method;Method(const class TestCompiler::Method &);0;TestCompiler;Method;1;0
Method;Method();0;TestCompiler;Method;0;0
TR_Method;TR_Method(class TR_Method &&);1;TR;Method;1;0
TR_Method;TR_Method(const class TR_Method &);0;TR;Method;1;0
TR_Method;TR_Method(enum TR_Method::Type);0;TR;Method;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;Method;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Method;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Method;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;Method;0;0
operator delete;operator delete(void *,size_t);0;TR;Method;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;Method;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Method;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;Method;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Method;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;Method;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Method;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Method;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Method;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Method;0;0
operator new;operator new(size_t,TR::Region &);0;TR;Method;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Method;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;Method;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Method;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Method;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;Method;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Method;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Method;0;0
operator=;operator=(class TR_Method &&);1;TR;Method;1;0
operator=;operator=(const class TR_Method &);0;TR;Method;1;0
operator=;operator=(class TestCompiler::Method &&);0;TestCompiler;Method;1;0
operator=;operator=(const class TestCompiler::Method &);0;TestCompiler;Method;1;0
SnippetGCMap;SnippetGCMap(class OMR::SnippetGCMap &&);1;OMR;SnippetGCMap;1;0
SnippetGCMap;SnippetGCMap();0;OMR;SnippetGCMap;0;0
SnippetGCMap;SnippetGCMap(const class OMR::SnippetGCMap &);0;OMR;SnippetGCMap;1;0
SnippetGCMap;SnippetGCMap(class TR::SnippetGCMap &&);0;TR;SnippetGCMap;1;0
SnippetGCMap;SnippetGCMap(const class TR::SnippetGCMap &);0;TR;SnippetGCMap;1;0
operator=;operator=(const class OMR::SnippetGCMap &);1;OMR;SnippetGCMap;1;0
operator=;operator=(class OMR::SnippetGCMap &&);0;OMR;SnippetGCMap;1;0
operator=;operator=(const class TR::SnippetGCMap &);0;TR;SnippetGCMap;1;0
operator=;operator=(class TR::SnippetGCMap &&);0;TR;SnippetGCMap;1;0
registerStackMap;registerStackMap(uint8_t *,TR::CodeGenerator *);1;OMR;SnippetGCMap;0;0
registerStackMap;registerStackMap(TR::Instruction *,TR::CodeGenerator *);0;OMR;SnippetGCMap;0;0
Region;Region(TR::SegmentProvider &,TR::RawAllocator);1;TR;Region;0;0
Region;Region(const class TR::Region &);0;TR;Region;0;0
StackMemoryRegion;StackMemoryRegion(const class TR::StackMemoryRegion &);1;TR;StackMemoryRegion;1;0
StackMemoryRegion;StackMemoryRegion(class TR_Memory &);0;TR;StackMemoryRegion;0;0
operator=;operator=(const class TR::Region &);1;TR;Region;1;0
operator=;operator=(const class TR::StackMemoryRegion &);0;TR;StackMemoryRegion;1;0
SymbolReference;SymbolReference(const class OMR::SymbolReference &);1;OMR;SymbolReference;1;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *);0;OMR;SymbolReference;0;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t);0;OMR;SymbolReference;0;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t);0;OMR;SymbolReference;0;0
SymbolReference;SymbolReference(class OMR::SymbolReference &&);0;OMR;SymbolReference;1;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index);0;OMR;SymbolReference;0;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t);0;OMR;SymbolReference;0;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t);0;OMR;SymbolReference;0;0
SymbolReference;SymbolReference();0;OMR;SymbolReference;0;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *);0;OMR;SymbolReference;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReference;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReference;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;SymbolReference;0;0
operator delete;operator delete(void *,size_t);0;OMR;SymbolReference;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;SymbolReference;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReference;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;SymbolReference;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;SymbolReference;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReference;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;SymbolReference;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;SymbolReference;0;0
operator=;operator=(class OMR::SymbolReference &&);1;OMR;SymbolReference;1;0
operator=;operator=(const class OMR::SymbolReference &);0;OMR;SymbolReference;1;0
operator=;operator=(class TR::SymbolReference &&);0;TR;SymbolReference;1;0
operator=;operator=(const class TR::SymbolReference &);0;TR;SymbolReference;1;0
reallySharesSymbol;reallySharesSymbol(TR::Compilation *);1;OMR;SymbolReference;0;0
reallySharesSymbol;reallySharesSymbol();0;OMR;SymbolReference;0;0
setAliasedTo;setAliasedTo(TR::SymbolReference *,_Bool);1;OMR;SymbolReference;0;1
setAliasedTo;setAliasedTo(class TR_BitVector &,TR::SymbolReferenceTable *,_Bool);0;OMR;SymbolReference;0;1
SymbolReferenceTable;SymbolReferenceTable(const class OMR::SymbolReferenceTable &);1;OMR;SymbolReferenceTable;1;0
SymbolReferenceTable;SymbolReferenceTable(class OMR::SymbolReferenceTable &&);0;OMR;SymbolReferenceTable;1;0
SymbolReferenceTable;SymbolReferenceTable(size_t,TR::Compilation *);0;OMR;SymbolReferenceTable;0;0
createKnownStaticDataSymbolRef;createKnownStaticDataSymbolRef(void *,TR::DataType,TR::class KnownObjectTable::Index);1;OMR;SymbolReferenceTable;0;0
createKnownStaticDataSymbolRef;createKnownStaticDataSymbolRef(void *,TR::DataType);0;OMR;SymbolReferenceTable;0;0
createRefinedArrayShadowSymbolRef;createRefinedArrayShadowSymbolRef(TR::DataType,TR::Symbol *);1;OMR;SymbolReferenceTable;0;0
createRefinedArrayShadowSymbolRef;createRefinedArrayShadowSymbolRef(TR::DataType);0;OMR;SymbolReferenceTable;0;0
element;element(enum TR_RuntimeHelper);1;OMR;SymbolReferenceTable;0;0
element;element(enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);0;OMR;SymbolReferenceTable;0;0
findAvailableAuto;findAvailableAuto(List<TR::SymbolReference> &,TR::DataType,_Bool,_Bool);1;OMR;SymbolReferenceTable;0;0
findAvailableAuto;findAvailableAuto(TR::DataType,_Bool,_Bool);0;OMR;SymbolReferenceTable;0;0
findOrCreateArrayShadowSymbolRef;findOrCreateArrayShadowSymbolRef(TR::DataType,TR::Node *,int32_t,class TR_FrontEnd *);1;OMR;SymbolReferenceTable;0;0
findOrCreateArrayShadowSymbolRef;findOrCreateArrayShadowSymbolRef(TR::DataType,TR::Node *);0;OMR;SymbolReferenceTable;0;0
findOrCreateSymRefWithKnownObject;findOrCreateSymRefWithKnownObject(TR::SymbolReference *,uintptrj_t *);1;OMR;SymbolReferenceTable;0;0
findOrCreateSymRefWithKnownObject;findOrCreateSymRefWithKnownObject(TR::SymbolReference *,TR::class KnownObjectTable::Index);0;OMR;SymbolReferenceTable;0;0
findOrCreateSymRefWithKnownObject;findOrCreateSymRefWithKnownObject(TR::SymbolReference *,uintptrj_t *,_Bool);0;OMR;SymbolReferenceTable;0;0
getSymRef;getSymRef(enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);1;OMR;SymbolReferenceTable;0;0
getSymRef;getSymRef(int32_t);0;OMR;SymbolReferenceTable;0;0
isNonHelper;isNonHelper(int32_t,enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);1;OMR;SymbolReferenceTable;0;0
isNonHelper;isNonHelper(TR::SymbolReference *,enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);0;OMR;SymbolReferenceTable;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;SymbolReferenceTable;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReferenceTable;0;0
operator delete;operator delete(void *,size_t);0;OMR;SymbolReferenceTable;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;SymbolReferenceTable;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;SymbolReferenceTable;0;0
TreeTop;TreeTop(class OMR::TreeTop &&);1;OMR;TreeTop;1;0
TreeTop;TreeTop(const class OMR::TreeTop &);0;OMR;TreeTop;1;0
TreeTop;TreeTop(TR::TreeTop *,TR::Node *,TR::Compilation *);0;OMR;TreeTop;0;0
TreeTop;TreeTop(TR::Node *,TR::TreeTop *,TR::TreeTop *);0;OMR;TreeTop;0;0
TreeTop;TreeTop();0;TR;TreeTop;0;0
create;create(TR::Compilation *);1;OMR;TreeTop;0;0
create;create(TR::Compilation *,TR::TreeTop *,TR::Node *);0;OMR;TreeTop;0;0
create;create(TR::Compilation *,TR::Node *,TR::TreeTop *,TR::TreeTop *);0;OMR;TreeTop;0;0
removeDeadTrees;removeDeadTrees(TR::Compilation *,TR::TreeTop *[]);1;OMR;TreeTop;0;0
removeDeadTrees;removeDeadTrees(TR::Compilation *,TR::TreeTop *,TR::TreeTop *);0;OMR;TreeTop;0;0
VMEnv;VMEnv();1;OMR;VMEnv;1;0
VMEnv;VMEnv(class OMR::VMEnv &&);0;OMR;VMEnv;1;0
VMEnv;VMEnv(const class OMR::VMEnv &);0;OMR;VMEnv;1;0
VMEnv;VMEnv(const class TR::VMEnv &);0;TR;VMEnv;1;0
VMEnv;VMEnv(class TR::VMEnv &&);0;TR;VMEnv;1;0
acquireVMAccessIfNeeded;acquireVMAccessIfNeeded(struct OMR_VMThread *);1;OMR;VMEnv;0;0
acquireVMAccessIfNeeded;acquireVMAccessIfNeeded(TR::Compilation *);0;OMR;VMEnv;0;0
getHighResClock;getHighResClock(TR::Compilation *);1;OMR;VMEnv;0;0
getHighResClock;getHighResClock(struct OMR_VMThread *);0;OMR;VMEnv;0;0
getUSecClock;getUSecClock();1;OMR;VMEnv;0;0
getUSecClock;getUSecClock(struct OMR_VMThread *);0;OMR;VMEnv;0;0
getUSecClock;getUSecClock(TR::Compilation *);0;OMR;VMEnv;0;0
hasAccess;hasAccess(struct OMR_VMThread *);1;OMR;VMEnv;0;0
hasAccess;hasAccess(TR::Compilation *);0;OMR;VMEnv;0;0
hasResumableTrapHandler;hasResumableTrapHandler(struct OMR_VMThread *);1;OMR;VMEnv;0;0
hasResumableTrapHandler;hasResumableTrapHandler(TR::Compilation *);0;OMR;VMEnv;0;0
operator=;operator=(const class OMR::VMEnv &);1;OMR;VMEnv;1;0
operator=;operator=(class OMR::VMEnv &&);0;OMR;VMEnv;1;0
operator=;operator=(class TR::VMEnv &&);0;TR;VMEnv;1;0
operator=;operator=(const class TR::VMEnv &);0;TR;VMEnv;1;0
releaseAccess;releaseAccess(struct OMR_VMThread *);1;OMR;VMEnv;0;0
releaseAccess;releaseAccess(TR::Compilation *);0;OMR;VMEnv;0;0
releaseVMAccessIfNeeded;releaseVMAccessIfNeeded(TR::Compilation *,_Bool);1;OMR;VMEnv;0;0
releaseVMAccessIfNeeded;releaseVMAccessIfNeeded(struct OMR_VMThread *,_Bool);0;OMR;VMEnv;0;0
tryToAcquireAccess;tryToAcquireAccess(TR::Compilation *,_Bool *);1;OMR;VMEnv;0;0
tryToAcquireAccess;tryToAcquireAccess(struct OMR_VMThread *,_Bool *);0;OMR;VMEnv;0;0
VMMethodEnv;VMMethodEnv(const class OMR::VMMethodEnv &);1;OMR;VMMethodEnv;1;0
VMMethodEnv;VMMethodEnv(class OMR::VMMethodEnv &&);0;OMR;VMMethodEnv;1;0
VMMethodEnv;VMMethodEnv();0;OMR;VMMethodEnv;1;0
VMMethodEnv;VMMethodEnv(const class TR::VMMethodEnv &);0;TR;VMMethodEnv;1;0
VMMethodEnv;VMMethodEnv(class TR::VMMethodEnv &&);0;TR;VMMethodEnv;1;0
operator=;operator=(class OMR::VMMethodEnv &&);1;OMR;VMMethodEnv;1;0
operator=;operator=(const class OMR::VMMethodEnv &);0;OMR;VMMethodEnv;1;0
operator=;operator=(const class TR::VMMethodEnv &);0;TR;VMMethodEnv;1;0
operator=;operator=(class TR::VMMethodEnv &&);0;TR;VMMethodEnv;1;0
TR_BitContainerIterator;TR_BitContainerIterator(class TR_BitContainerIterator &&);1;TR;BitContainerIterator;1;0
TR_BitContainerIterator;TR_BitContainerIterator(const class TR_BitContainerIterator &);0;TR;BitContainerIterator;1;0
TR_BitContainerIterator;TR_BitContainerIterator();0;TR;BitContainerIterator;0;0
TR_BitContainerIterator;TR_BitContainerIterator(class TR_BitContainer &);0;TR;BitContainerIterator;0;0
TR_BitVectorIterator;TR_BitVectorIterator(const class TR_BitVectorIterator &);1;TR;BitVectorIterator;1;0
TR_BitVectorIterator;TR_BitVectorIterator();0;TR;BitVectorIterator;0;0
TR_BitVectorIterator;TR_BitVectorIterator(class TR_BitVector &,int32_t);0;TR;BitVectorIterator;0;0
TR_BitVectorIterator;TR_BitVectorIterator(class TR_BitVectorIterator &&);0;TR;BitVectorIterator;1;0
TR_FrontEnd;TR_FrontEnd(class TR_FrontEnd &&);1;TR;FrontEnd;1;0
TR_FrontEnd;TR_FrontEnd();0;TR;FrontEnd;0;0
TR_Uncopyable;TR_Uncopyable(const class TR_Uncopyable &);1;TR;Uncopyable;0;0
TR_Uncopyable;TR_Uncopyable();0;TR;Uncopyable;0;0
getClassFromSignature;getClassFromSignature(const char *,int32_t,class TR_ResolvedMethod *,_Bool);1;TR;FrontEnd;0;1
getClassFromSignature;getClassFromSignature(const char *,int32_t,class TR_OpaqueMethodBlock *,_Bool);0;TR;FrontEnd;0;1
getCodeCacheBase;getCodeCacheBase(TR::CodeCache *);1;TR;FrontEnd;0;1
getCodeCacheBase;getCodeCacheBase();0;TR;FrontEnd;0;1
getCodeCacheTop;getCodeCacheTop(TR::CodeCache *);1;TR;FrontEnd;0;1
getCodeCacheTop;getCodeCacheTop();0;TR;FrontEnd;0;1
operator=;operator=(const class TR_Uncopyable &);1;TR;Uncopyable;0;0
operator=;operator=(class TR_FrontEnd &&);0;TR;FrontEnd;1;0
operator=;operator=(const class TR_FrontEnd &);0;TR;FrontEnd;1;0
TR_HashTab;TR_HashTab(class TR_HashTab &&);1;TR;HashTab;1;0
TR_HashTab;TR_HashTab(const class TR_HashTab &);0;TR;HashTab;1;0
TR_HashTab;TR_HashTab(class TR_Memory *,enum TR_AllocationKind,uint32_t,_Bool);0;TR;HashTab;0;0
add;add(void *,TR_HashId,void *);1;TR;HashTab;0;0
add;add(double *,TR_HashId,void *);0;TR;HashTabDouble;0;0
locate;locate(const void *,TR_HashId &);1;TR;HashTab;0;0
locate;locate(const double *,TR_HashId &);0;TR;HashTabDouble;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;HashTab;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;HashTab;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;HashTab;0;0
operator delete;operator delete(void *,size_t);0;TR;HashTab;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;HashTab;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;HashTab;0;0
operator new;operator new(size_t,TR::Region &);1;TR;HashTab;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;HashTab;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;HashTab;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;HashTab;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;HashTab;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;HashTab;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;HashTab;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;HashTab;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;HashTab;0;0
operator=;operator=(class TR_HashTab &&);1;TR;HashTab;1;0
operator=;operator=(const class TR_HashTab &);0;TR;HashTab;1;0
operator=;operator=(class TR_HashTabDouble &&);0;TR;HashTabDouble;1;0
operator=;operator=(const class TR_HashTabDouble &);0;TR;HashTabDouble;1;0
add;add(float *,TR_HashId,void *);0;TR;HashTabFloat;0;0
locate;locate(const float *,TR_HashId &);0;TR;HashTabFloat;0;0
operator=;operator=(class TR_HashTabFloat &&);0;TR;HashTabFloat;1;0
operator=;operator=(const class TR_HashTabFloat &);0;TR;HashTabFloat;1;0
TR_HashTabInt;TR_HashTabInt(class TR_HashTabInt &&);1;TR;HashTabInt;1;0
TR_HashTabInt;TR_HashTabInt(const class TR_HashTabInt &);0;TR;HashTabInt;1;0
TR_HashTabInt;TR_HashTabInt(class TR_Memory *,enum TR_AllocationKind,uint32_t,_Bool);0;TR;HashTabInt;0;0
add;add(int32_t,TR_HashId,void *);0;TR;HashTabInt;0;0
locate;locate(int32_t,TR_HashId &);0;TR;HashTabInt;0;0
operator=;operator=(const class TR_HashTabInt &);0;TR;HashTabInt;1;0
operator=;operator=(class TR_HashTabInt &&);0;TR;HashTabInt;1;0
add;add(int64_t *,TR_HashId,void *);0;TR;HashTabLong;0;0
locate;locate(const int64_t *,TR_HashId &);0;TR;HashTabLong;0;0
operator=;operator=(class TR_HashTabLong &&);0;TR;HashTabLong;1;0
operator=;operator=(const class TR_HashTabLong &);0;TR;HashTabLong;1;0
add;add(const char *,TR_HashId,void *);0;TR;HashTabString;0;0
locate;locate(const char *,TR_HashId &);0;TR;HashTabString;0;0
operator=;operator=(class TR_HashTabString &&);0;TR;HashTabString;1;0
operator=;operator=(const class TR_HashTabString &);0;TR;HashTabString;1;0
TR_HeapMemory;TR_HeapMemory(class TR_Memory *);1;TR;HeapMemory;0;0
TR_HeapMemory;TR_HeapMemory(const class TR_HeapMemory &);0;TR;HeapMemory;1;0
TR_HeapMemory;TR_HeapMemory(class TR_HeapMemory &&);0;TR;HeapMemory;1;0
TR_MemoryAllocationType;TR_MemoryAllocationType(const class TR_MemoryAllocationType &);1;TR;MemoryAllocationType;1;0
TR_MemoryAllocationType;TR_MemoryAllocationType(class TR_MemoryAllocationType &&);0;TR;MemoryAllocationType;1;0
TR_MemoryAllocationType;TR_MemoryAllocationType(class TR_Memory &);0;TR;MemoryAllocationType;0;0
operator=;operator=(class TR_MemoryAllocationType &&);1;TR;MemoryAllocationType;1;0
operator=;operator=(const class TR_MemoryAllocationType &);0;TR;MemoryAllocationType;1;0
operator=;operator=(class TR_HeapMemory &&);0;TR;HeapMemory;1;0
TR_Memory;TR_Memory(class TR_Memory &&);1;TR;Memory;1;0
TR_Memory;TR_Memory(class TR_PersistentMemory &,TR::Region &);0;TR;Memory;0;0
TR_MemoryBase;TR_MemoryBase(void *);1;TR;MemoryBase;0;0
TR_MemoryBase;TR_MemoryBase(const class TR_MemoryBase &);0;TR;MemoryBase;0;0
operator=;operator=(const class TR_MemoryBase &);1;TR;MemoryBase;1;0
operator=;operator=(class TR_Memory &&);0;TR;Memory;1;0
contains;contains(TR::SymbolReference *,TR::Compilation *);1;TR;AliasSetInterface;0;0
contains;contains(uint32_t,TR::Compilation *);0;TR;AliasSetInterface;0;0
getAliasesAndUnionWith;getAliasesAndUnionWith(TR::SparseBitVector &);1;TR;AliasSetInterface;0;0
getAliasesAndUnionWith;getAliasesAndUnionWith(class TR_BitVector &);0;TR;AliasSetInterface;0;0
TR_PersistentMemory;TR_PersistentMemory(class TR_PersistentMemory &&);1;TR;PersistentMemory;1;0
TR_PersistentMemory;TR_PersistentMemory(void *,TR::PersistentAllocator &);0;TR;PersistentMemory;0;0
operator=;operator=(class TR_PersistentMemory &&);0;TR;PersistentMemory;1;0
TR_Dominators;TR_Dominators(TR::Compilation *,_Bool);1;TR;Dominators;0;0
TR_Dominators;TR_Dominators(class TR_Dominators &&);0;TR;Dominators;1;0
TR_Dominators;TR_Dominators(const class TR_Dominators &);0;TR;Dominators;1;0
operator delete;operator delete(void *,size_t);1;TR;Dominators;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;Dominators;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Dominators;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;Dominators;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Dominators;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Dominators;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Dominators;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Dominators;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Dominators;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Dominators;0;0
operator new;operator new(size_t,TR::Region &);0;TR;Dominators;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;TR;Dominators;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;Dominators;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Dominators;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Dominators;0;0
operator=;operator=(class TR_Dominators &&);1;TR;Dominators;1;0
operator=;operator=(const class TR_Dominators &);0;TR;Dominators;1;0
operator=;operator=(class TR_PostDominators &&);0;TR;PostDominators;1;0
TR_CFGIterator;TR_CFGIterator(TR::CFGEdgeList &,TR::CFGEdgeList &);1;TR;CFGIterator;0;0
TR_CFGIterator;TR_CFGIterator(const class TR_CFGIterator &);0;TR;CFGIterator;1;0
TR_CFGIterator;TR_CFGIterator(class TR_CFGIterator &&);0;TR;CFGIterator;1;0
operator=;operator=(const class TR_CFGIterator &);1;TR;CFGIterator;1;0
operator=;operator=(class TR_CFGIterator &&);0;TR;CFGIterator;1;0
operator=;operator=(class TR_PredecessorIterator &&);0;TR;PredecessorIterator;1;0
TR_StackMemory;TR_StackMemory(class TR_StackMemory &&);1;TR;StackMemory;1;0
TR_StackMemory;TR_StackMemory(const class TR_StackMemory &);0;TR;StackMemory;1;0
TR_StackMemory;TR_StackMemory(class TR_Memory *);0;TR;StackMemory;0;0
operator=;operator=(class TR_StackMemory &&);0;TR;StackMemory;1;0
operator=;operator=(class TR_SuccessorIterator &&);0;TR;SuccessorIterator;1;0
TR_ScratchRegisterManager;TR_ScratchRegisterManager(const class TR_ScratchRegisterManager &);1;TR;ScratchRegisterManager;1;0
TR_ScratchRegisterManager;TR_ScratchRegisterManager(int32_t,TR::CodeGenerator *);0;TR;ScratchRegisterManager;0;0
TR_ScratchRegisterManager;TR_ScratchRegisterManager(class TR_ScratchRegisterManager &&);0;TR;ScratchRegisterManager;1;0
operator delete;operator delete(void *,size_t);1;TR;ScratchRegisterManager;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;ScratchRegisterManager;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;ScratchRegisterManager;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;ScratchRegisterManager;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,TR::Region &);0;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;ScratchRegisterManager;0;0
ParameterSymbol;ParameterSymbol(class OMR::ParameterSymbol &&);1;OMR;ParameterSymbol;1;0
ParameterSymbol;ParameterSymbol(TR::DataType,int32_t);0;OMR;ParameterSymbol;0;0
ParameterSymbol;ParameterSymbol(TR::DataType,int32_t,size_t);0;OMR;ParameterSymbol;0;0
ParameterSymbol;ParameterSymbol(const class OMR::ParameterSymbol &);0;OMR;ParameterSymbol;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Symbol;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Symbol;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Symbol;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;Symbol;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Symbol;0;0
operator=;operator=(class OMR::ParameterSymbol &&);0;OMR;ParameterSymbol;1;0
operator=;operator=(const class OMR::ParameterSymbol &);0;OMR;ParameterSymbol;1;0
operator=;operator=(const class TR::ParameterSymbol &);0;TR;ParameterSymbol;1;0
operator=;operator=(class TR::ParameterSymbol &&);0;TR;ParameterSymbol;1;0
genInduceOSRCall;genInduceOSRCall(TR::TreeTop *,int32_t,int32_t,_Bool,_Bool,TR::CFG *);1;OMR;ResolvedMethodSymbol;0;0
genInduceOSRCall;genInduceOSRCall(TR::TreeTop *,int32_t,class TR_OSRMethodData *,int32_t,_Bool,_Bool,TR::CFG *);0;OMR;ResolvedMethodSymbol;0;0
getAutoSymRefs;getAutoSymRefs();1;OMR;ResolvedMethodSymbol;0;0
getAutoSymRefs;getAutoSymRefs(int32_t);0;OMR;ResolvedMethodSymbol;0;0
getPendingPushSymRefs;getPendingPushSymRefs(int32_t);1;OMR;ResolvedMethodSymbol;0;0
getPendingPushSymRefs;getPendingPushSymRefs();0;OMR;ResolvedMethodSymbol;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Snippet;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Snippet;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Snippet;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;Snippet;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Snippet;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Snippet;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Snippet;0;0
gatherLocalUseInfo;gatherLocalUseInfo(TR::Node *,class TR_BitVector &,vcount_t,_Bool);1;OMR;AliasBuilder;0;0
gatherLocalUseInfo;gatherLocalUseInfo(TR::Block *,_Bool);0;OMR;AliasBuilder;0;0
BlockChecklist;BlockChecklist(class TR::BlockChecklist &&);1;TR;BlockChecklist;1;0
BlockChecklist;BlockChecklist(TR::Compilation *);0;TR;BlockChecklist;0;0
classNameChars;classNameChars(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t &);1;OMR;ClassEnv;0;0
classNameChars;classNameChars(TR::Compilation *,TR::SymbolReference *,int32_t &);0;OMR;ClassEnv;0;0
Compilation;Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *);1;OMR;Compilation;0;0
Compilation;Compilation(class OMR::Compilation &);0;OMR;Compilation;1;0
getHotnessName;getHotnessName(enum TR_Hotness);1;OMR;Compilation;0;0
getHotnessName;getHotnessName();0;OMR;Compilation;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Compilation;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Compilation;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;Compilation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Compilation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;Compilation;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Compilation;0;0
resetVisitCounts;resetVisitCounts(vcount_t,TR::ResolvedMethodSymbol *);1;OMR;Compilation;0;0
resetVisitCounts;resetVisitCounts(vcount_t);0;OMR;Compilation;0;0
operator!=;operator!=(const TR::DataType &);1;OMR;DataType;0;0
operator!=;operator!=(TR::DataTypes);0;OMR;DataType;0;0
operator=;operator=(class OMR::DataType &&);1;OMR;DataType;1;0
operator=;operator=(const class OMR::DataType &);0;OMR;DataType;1;0
operator=;operator=(class TR::DataType &&);0;TR;DataType;1;0
operator=;operator=(const class TR::DataType &);0;TR;DataType;1;0
operator==;operator==(TR::DataTypes);1;OMR;DataType;0;0
operator==;operator==(const TR::DataType &);0;OMR;DataType;0;0
operator>=;operator>=(const TR::DataType &);1;OMR;DataType;0;0
operator>=;operator>=(TR::DataTypes);0;OMR;DataType;0;0
ILOpCode;ILOpCode(TR::ILOpCodes);1;OMR;ILOpCode;0;0
ILOpCode;ILOpCode(class OMR::ILOpCode &&);0;OMR;ILOpCode;1;0
getDirectCall;getDirectCall(TR::ILOpCodes);1;OMR;ILOpCode;0;0
getDirectCall;getDirectCall(TR::DataType);0;OMR;ILOpCode;0;0
getType;getType(TR::ILOpCodes);1;OMR;ILOpCode;0;0
getType;getType();0;OMR;ILOpCode;0;0
getIndex;getIndex(uintptrj_t);1;OMR;KnownObjectTable;0;1
getIndex;getIndex(uintptrj_t,_Bool);0;OMR;KnownObjectTable;0;0
cconst;cconst(TR::Node *,uint16_t);1;OMR;Node;0;0
cconst;cconst(uint16_t);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *);1;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::TreeTop *);0;OMR;Node;0;0
createAddressNode;createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t,uint8_t);1;OMR;Node;0;0
createAddressNode;createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t);0;OMR;Node;0;0
createArraycopy;createArraycopy(TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
createArraycopy;createArraycopy(TR::Node *,TR::Node *,TR::Node *);0;OMR;Node;0;0
createRelative32BitFenceNode;createRelative32BitFenceNode(void *);1;OMR;Node;0;0
createRelative32BitFenceNode;createRelative32BitFenceNode(TR::Node *,void *);0;OMR;Node;0;0
createStore;createStore(TR::Node *,TR::SymbolReference *,TR::Node *);1;OMR;Node;0;0
createStore;createStore(TR::SymbolReference *,TR::Node *);0;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::SymbolReference *);1;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::SymbolReference *,uintptr_t);0;OMR;Node;0;0
iuconst;iuconst(TR::Node *,uint32_t);1;OMR;Node;0;0
iuconst;iuconst(uint32_t);0;OMR;Node;0;0
lconst;lconst(TR::Node *,int64_t);1;OMR;Node;0;0
lconst;lconst(int64_t);0;OMR;Node;0;0
luconst;luconst(TR::Node *,uint64_t);1;OMR;Node;0;0
luconst;luconst(uint64_t);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);1;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *);0;OMR;Node;0;0
sconst;sconst(TR::Node *,int16_t);1;OMR;Node;0;0
sconst;sconst(int16_t);0;OMR;Node;0;0
NodeChecklist;NodeChecklist(TR::Compilation *);1;TR;NodeChecklist;0;0
ObjectModel;ObjectModel();1;OMR;ObjectModel;0;0
ObjectModel;ObjectModel(class OMR::ObjectModel &&);0;OMR;ObjectModel;1;0
isDiscontiguousArray;isDiscontiguousArray(int32_t,int32_t);1;OMR;ObjectModel;0;0
isDiscontiguousArray;isDiscontiguousArray(int32_t);0;OMR;ObjectModel;0;0
getResolvedInterfaceMethod;getResolvedInterfaceMethod(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t);1;TR;ResolvedMethod;0;1
getResolvedInterfaceMethod;getResolvedInterfaceMethod(int32_t,uintptrj_t *);0;TR;ResolvedMethod;0;1
getResolvedVirtualMethod;getResolvedVirtualMethod(TR::Compilation *,class TR_OpaqueClassBlock *,int32_t,_Bool);1;TR;ResolvedMethod;0;1
getResolvedVirtualMethod;getResolvedVirtualMethod(TR::Compilation *,int32_t,_Bool,_Bool *);0;TR;ResolvedMethod;0;1
operator=;operator=(const class TR_ResolvedMethod &);1;TR;ResolvedMethod;1;0
operator=;operator=(class TR_ResolvedMethod &&);0;TR;ResolvedMethod;1;0
TR_Method;TR_Method(const class TR_Method &);1;TR;Method;1;0
TR_Method;TR_Method(class TR_Method &&);0;TR;Method;1;0
operator new;operator new(size_t,TR::Region &);1;TR;Method;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Method;0;0
operator=;operator=(class OMR::SnippetGCMap &&);1;OMR;SnippetGCMap;1;0
operator=;operator=(const class OMR::SnippetGCMap &);0;OMR;SnippetGCMap;1;0
registerStackMap;registerStackMap(TR::Instruction *,TR::CodeGenerator *);1;OMR;SnippetGCMap;0;0
registerStackMap;registerStackMap(uint8_t *,TR::CodeGenerator *);0;OMR;SnippetGCMap;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReference;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReference;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;SymbolReference;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;SymbolReference;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;SymbolReference;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;SymbolReference;0;0
TreeTop;TreeTop(const class OMR::TreeTop &);1;OMR;TreeTop;1;0
TreeTop;TreeTop(class OMR::TreeTop &&);0;OMR;TreeTop;1;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Snippet;0;0
CFGEdge;CFGEdge(class TR::CFGNode *,class TR::CFGNode *);1;TR;CFGEdge;0;0
CFGEdge;CFGEdge();0;TR;CFGEdge;0;0
createEdge;createEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);1;TR;CFGEdge;0;0
createEdge;createEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);0;TR;CFGEdge;0;0
createExceptionEdge;createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);1;TR;CFGEdge;0;0
createExceptionEdge;createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);0;TR;CFGEdge;0;0
getName;getName();1;OMR;CodeGenPhase;0;0
getName;getName(enum OMR::CodeGenPhase::PhaseValue);0;OMR;CodeGenPhase;0;0
operator=;operator=(class OMR::KnownObjectTable &&);1;OMR;KnownObjectTable;1;0
operator=;operator=(const class OMR::KnownObjectTable &);0;OMR;KnownObjectTable;1;0
copy;copy(TR::Node *,int32_t);1;OMR;Node;0;0
copy;copy(TR::Node *);0;OMR;Node;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
createArraycopy;createArraycopy();1;OMR;Node;0;0
createLoad;createLoad(TR::SymbolReference *);1;OMR;Node;0;0
createLoad;createLoad(TR::Node *,TR::SymbolReference *);0;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,uintptr_t,TR::SymbolReference *);1;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);1;OMR;Node;0;0
TR_BitVectorIterator;TR_BitVectorIterator(class TR_BitVectorIterator &&);1;TR;BitVectorIterator;1;0
TR_BitVectorIterator;TR_BitVectorIterator(const class TR_BitVectorIterator &);0;TR;BitVectorIterator;1;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;TR;HashTab;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HashTab;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;HashTab;0;0
operator new;operator new(size_t,TR::Region &);0;TR;HashTab;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;HashTab;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;HashTab;0;0
operator=;operator=(const class TR_HashTab &);1;TR;HashTab;1;0
operator=;operator=(class TR_HashTab &&);0;TR;HashTab;1;0
operator=;operator=(const class TR_MemoryAllocationType &);1;TR;MemoryAllocationType;1;0
operator=;operator=(class TR_MemoryAllocationType &&);0;TR;MemoryAllocationType;1;0
operator delete;operator delete(void *,size_t);1;OMR;Symbol;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;Symbol;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Machine;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Machine;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Machine;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Machine;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Machine;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Register;0;0
operator delete;operator delete(void *,size_t);0;OMR;Register;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Register;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;Register;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Register;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;Register;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Register;0;0
operator=;operator=(class OMR::Register &&);1;OMR;Register;1;0
operator=;operator=(const class OMR::Register &);0;OMR;Register;1;0
checkNonNegativePowerOfTwo;checkNonNegativePowerOfTwo(int32_t);1;OMR;TreeEvaluator;0;0
checkNonNegativePowerOfTwo;checkNonNegativePowerOfTwo(int64_t);0;OMR;TreeEvaluator;0;0
Snippet;Snippet(const class OMR::Snippet &);1;OMR;Snippet;1;0
Snippet;Snippet(class OMR::Snippet &&);0;OMR;Snippet;1;0
ClassEnv;ClassEnv(const class OMR::ClassEnv &);1;OMR;ClassEnv;1;0
ClassEnv;ClassEnv(class OMR::ClassEnv &&);0;OMR;ClassEnv;1;0
operator=;operator=(const class OMR::ClassEnv &);1;OMR;ClassEnv;1;0
operator=;operator=(class OMR::ClassEnv &&);0;OMR;ClassEnv;1;0
CodeGenPhase;CodeGenPhase(const class OMR::CodeGenPhase &);1;OMR;CodeGenPhase;1;0
CodeGenPhase;CodeGenPhase(TR::CodeGenerator *);0;OMR;CodeGenPhase;0;0
aconst;aconst(uintptrj_t);1;OMR;Node;0;0
aconst;aconst(TR::Node *,uintptrj_t,uint8_t);0;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
Optimizer;Optimizer(TR::Compilation *,TR::ResolvedMethodSymbol *,_Bool,const struct OptimizationStrategy *,uint16_t);1;OMR;Optimizer;0;0
Optimizer;Optimizer(const class OMR::Optimizer &);0;OMR;Optimizer;1;0
areNodesEquivalent;areNodesEquivalent(TR::Node *,TR::Node *,_Bool);1;OMR;Optimizer;0;0
areNodesEquivalent;areNodesEquivalent(TR::Node *,TR::Node *,TR::Compilation *,_Bool);0;OMR;Optimizer;0;0
operator delete;operator delete(void *,size_t);1;OMR;Optimizer;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Optimizer;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;Optimizer;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Optimizer;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Optimizer;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Optimizer;0;0
switchToProfiling;switchToProfiling();1;OMR;Optimizer;0;0
switchToProfiling;switchToProfiling(uint32_t,uint32_t);0;OMR;Optimizer;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Options;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Options;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Options;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Options;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Options;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Options;0;0
operator=;operator=(const class OMR::Options &);1;OMR;Options;1;0
operator=;operator=(class OMR::Options &&);0;OMR;Options;1;0
processOptionSet;processOptionSet(char *,TR::OptionSet *,void *,_Bool);1;OMR;Options;0;0
processOptionSet;processOptionSet(char *,char *,TR::OptionSet *);0;OMR;Options;0;0
Recompilation;Recompilation(const class OMR::Recompilation &);1;OMR;Recompilation;1;0
Recompilation;Recompilation(class OMR::Recompilation &&);0;OMR;Recompilation;1;0
Recompilation;Recompilation(TR::Compilation *);0;OMR;Recompilation;0;0
operator delete;operator delete(void *,size_t);1;OMR;Recompilation;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Recompilation;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Recompilation;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;Recompilation;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Recompilation;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Recompilation;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Recompilation;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Recompilation;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Recompilation;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Recompilation;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Recompilation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;Recompilation;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Recompilation;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Recompilation;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Recompilation;0;0
operator=;operator=(class OMR::Recompilation &&);1;OMR;Recompilation;1;0
operator=;operator=(const class OMR::Recompilation &);0;OMR;Recompilation;1;0
operator=;operator=(class TR::Recompilation &&);0;TR;Recompilation;1;0
operator=;operator=(const class TR::Recompilation &);0;TR;Recompilation;1;0
getCodeCacheBase;getCodeCacheBase();1;TR;FrontEnd;0;1
getCodeCacheBase;getCodeCacheBase(TR::CodeCache *);0;TR;FrontEnd;0;1
getCodeCacheTop;getCodeCacheTop();1;TR;FrontEnd;0;1
getCodeCacheTop;getCodeCacheTop(TR::CodeCache *);0;TR;FrontEnd;0;1
operator>;operator>(const TR::DataType &);1;OMR;DataType;0;0
operator>;operator>(TR::DataTypes);0;OMR;DataType;0;0
getSize;getSize();1;OMR;ILOpCode;0;0
getSize;getSize(TR::ILOpCodes);0;OMR;ILOpCode;0;0
Monitor;Monitor(const class OMR::Monitor &);1;OMR;Monitor;1;0
Monitor;Monitor();0;OMR;Monitor;1;0
destroy;destroy(TR::Monitor *);1;OMR;Monitor;0;0
destroy;destroy();0;OMR;Monitor;0;0
createWithSymRef;createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::SymbolReference *);1;OMR;Node;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;Optimizer;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;Optimizer;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Link;0;0
operator delete;operator delete(void *,size_t);0;TR;Link;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;Link;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Link;0;0
checkPositiveOrNegativePowerOfTwo;checkPositiveOrNegativePowerOfTwo(int64_t);1;OMR;TreeEvaluator;0;0
checkPositiveOrNegativePowerOfTwo;checkPositiveOrNegativePowerOfTwo(int32_t);0;OMR;TreeEvaluator;0;0
create;create(TR::ILOpCodes,uint16_t,int32_t,TR::TreeTop *);1;OMR;Node;0;0
operator=;operator=(const class OMR::Recompilation &);1;OMR;Recompilation;1;0
operator=;operator=(class OMR::Recompilation &&);0;OMR;Recompilation;1;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Snippet;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;CFG;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;CFG;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;CFG;0;0
create;create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *);1;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,uintptr_t,TR::SymbolReference *);1;OMR;Node;0;0
TR_FrontEnd;TR_FrontEnd();1;TR;FrontEnd;0;0
TR_FrontEnd;TR_FrontEnd(class TR_FrontEnd &&);0;TR;FrontEnd;1;0
getClassFromSignature;getClassFromSignature(const char *,int32_t,class TR_OpaqueMethodBlock *,_Bool);1;TR;FrontEnd;0;1
getClassFromSignature;getClassFromSignature(const char *,int32_t,class TR_ResolvedMethod *,_Bool);0;TR;FrontEnd;0;1
operator delete;operator delete(void *,size_t);1;OMR;Snippet;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;Snippet;0;0
getIndexAt;getIndexAt(uintptrj_t *);1;OMR;KnownObjectTable;0;0
getIndexAt;getIndexAt(uintptrj_t *,_Bool);0;OMR;KnownObjectTable;0;0
BlockChecklist;BlockChecklist(const class TR::BlockChecklist &);0;TR;BlockChecklist;1;0
add;add(class TR::NodeChecklist &);1;TR;NodeChecklist;0;0
add;add(TR::Node *);0;TR;NodeChecklist;0;0
PersistentInfo;PersistentInfo(class TR_PersistentMemory *);1;OMR;PersistentInfo;0;0
PersistentInfo;PersistentInfo(class OMR::PersistentInfo &&);0;OMR;PersistentInfo;1;0
operator=;operator=(const class OMR::PersistentInfo &);1;OMR;PersistentInfo;1;0
operator=;operator=(class OMR::PersistentInfo &&);0;OMR;PersistentInfo;1;0
Optimization;Optimization(const class OMR::Optimization &);1;OMR;Optimization;1;0
Optimization;Optimization(TR::OptimizationManager *);0;OMR;Optimization;0;0
Optimization;Optimization(class TR::Optimization &&);0;TR;Optimization;1;0
TR_HasRandomGenerator;TR_HasRandomGenerator(const class TR_HasRandomGenerator &);1;TR;HasRandomGenerator;1;0
TR_HasRandomGenerator;TR_HasRandomGenerator(class TR_HasRandomGenerator &&);0;TR;HasRandomGenerator;1;0
TR_HasRandomGenerator;TR_HasRandomGenerator(TR::Compilation *);0;TR;HasRandomGenerator;0;0
operator=;operator=(const class TR_HasRandomGenerator &);1;TR;HasRandomGenerator;1;0
operator=;operator=(class TR_HasRandomGenerator &&);0;TR;HasRandomGenerator;1;0
operator=;operator=(const class OMR::Optimization &);0;OMR;Optimization;1;0
operator=;operator=(const class TR::Optimization &);0;TR;Optimization;1;0
operator=;operator=(class TR::Optimization &&);0;TR;Optimization;1;0
prepareToReplaceNode;prepareToReplaceNode(TR::Node *,TR::ILOpCodes);1;OMR;Optimization;0;0
prepareToReplaceNode;prepareToReplaceNode(TR::Node *);0;OMR;Optimization;0;0
randomInt;randomInt();1;TR;HasRandomGenerator;0;0
randomInt;randomInt(int32_t);0;TR;HasRandomGenerator;0;0
randomInt;randomInt(int32_t,int32_t);0;TR;HasRandomGenerator;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Snippet;0;0
gatherLocalUseInfo;gatherLocalUseInfo(TR::Block *,class TR_BitVector &,TR_ScratchList<TR_Pair<TR::Block, class TR_BitVector> > *,vcount_t,_Bool);1;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;AliasBuilder;0;0
AllBlockIterator;AllBlockIterator(const class TR::AllBlockIterator &);1;TR;AllBlockIterator;1;0
AllBlockIterator;AllBlockIterator(class TR::AllBlockIterator &&);0;TR;AllBlockIterator;1;0
AllBlockIterator;AllBlockIterator(TR::CFG *,TR::Compilation *,const char *);0;TR;AllBlockIterator;0;0
BlockIterator;BlockIterator(TR::Compilation *,const char *);1;TR;BlockIterator;0;0
BlockIterator;BlockIterator(const class TR::BlockIterator &);0;TR;BlockIterator;1;0
BlockIterator;BlockIterator(class TR::BlockIterator &&);0;TR;BlockIterator;1;0
operator=;operator=(class TR::BlockIterator &&);1;TR;BlockIterator;1;0
operator=;operator=(const class TR::BlockIterator &);0;TR;BlockIterator;1;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;CFG;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *);1;OMR;Node;0;0
createWithSymRef;createWithSymRef(TR::ILOpCodes,uint16_t,TR::SymbolReference *);1;OMR;Node;0;0
operator=;operator=(const class TR::NodeChecklist &);0;TR;NodeChecklist;1;0
NodeIterator;NodeIterator(const class TR::NodeIterator &);1;TR;NodeIterator;1;0
NodeIterator;NodeIterator(class TR::NodeIterator &&);0;TR;NodeIterator;1;0
NodeIterator;NodeIterator(TR::TreeTop *,TR::Compilation *);0;TR;NodeIterator;0;0
NodeIterator;NodeIterator(TR::TreeTop *,TR::Compilation *,const char *);0;TR;NodeIterator;0;0
NodeOccurrenceIterator;NodeOccurrenceIterator(TR::TreeTop *,TR::Compilation *,const char *);1;TR;NodeOccurrenceIterator;0;0
NodeOccurrenceIterator;NodeOccurrenceIterator(class TR::NodeOccurrenceIterator &&);0;TR;NodeOccurrenceIterator;1;0
NodeOccurrenceIterator;NodeOccurrenceIterator(const class TR::NodeOccurrenceIterator &);0;TR;NodeOccurrenceIterator;1;0
PostorderNodeOccurrenceIterator;PostorderNodeOccurrenceIterator(const class TR::PostorderNodeOccurrenceIterator &);1;TR;PostorderNodeOccurrenceIterator;1;0
PostorderNodeOccurrenceIterator;PostorderNodeOccurrenceIterator(class TR::PostorderNodeOccurrenceIterator &&);0;TR;PostorderNodeOccurrenceIterator;1;0
PostorderNodeOccurrenceIterator;PostorderNodeOccurrenceIterator(TR::TreeTop *,TR::Compilation *,const char *);0;TR;PostorderNodeOccurrenceIterator;0;0
TreeTopIteratorImpl;TreeTopIteratorImpl(class TR::TreeTopIteratorImpl &&);1;TR;TreeTopIteratorImpl;1;0
TreeTopIteratorImpl;TreeTopIteratorImpl(const class TR::TreeTopIteratorImpl &);0;TR;TreeTopIteratorImpl;1;0
TreeTopIteratorImpl;TreeTopIteratorImpl(TR::TreeTop *,TR::Compilation *,const char *);0;TR;TreeTopIteratorImpl;0;0
isAt;isAt(class TR::PreorderNodeIterator &);1;TR;TreeTopIteratorImpl;0;0
isAt;isAt(class TR::TreeTopIteratorImpl &);0;TR;TreeTopIteratorImpl;0;0
isAt;isAt(TR::TreeTop *);0;TR;TreeTopIteratorImpl;0;0
isAt;isAt(class TR::TreeTopIterator &);0;TR;NodeIterator;0;0
operator=;operator=(class TR::TreeTopIteratorImpl &&);1;TR;TreeTopIteratorImpl;1;0
operator=;operator=(const class TR::TreeTopIteratorImpl &);0;TR;TreeTopIteratorImpl;1;0
operator=;operator=(class TR::NodeIterator &&);0;TR;NodeIterator;1;0
OptimizationManager;OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *);1;OMR;OptimizationManager;0;0
OptimizationManager;OptimizationManager(const class OMR::OptimizationManager &);0;OMR;OptimizationManager;1;0
OptimizationManager;OptimizationManager(class TR::OptimizationManager &&);0;TR;OptimizationManager;1;0
operator=;operator=(const class OMR::OptimizationManager &);1;OMR;OptimizationManager;1;0
operator=;operator=(const class TR::OptimizationManager &);0;TR;OptimizationManager;1;0
operator=;operator=(class TR::OptimizationManager &&);0;TR;OptimizationManager;1;0
operator new;operator new(size_t,TR::Region &);1;OMR;Optimizer;0;0
PostorderNodeIterator;PostorderNodeIterator(class TR::PostorderNodeIterator &&);1;TR;PostorderNodeIterator;1;0
PostorderNodeIterator;PostorderNodeIterator(const class TR::PostorderNodeIterator &);0;TR;PostorderNodeIterator;1;0
PostorderNodeIterator;PostorderNodeIterator(TR::TreeTop *,TR::Compilation *,const char *);0;TR;PostorderNodeIterator;0;0
PreorderNodeIterator;PreorderNodeIterator(class TR::PreorderNodeIterator &&);1;TR;PreorderNodeIterator;1;0
PreorderNodeIterator;PreorderNodeIterator(const class TR::PreorderNodeIterator &);0;TR;PreorderNodeIterator;1;0
PreorderNodeIterator;PreorderNodeIterator(TR::TreeTop *,TR::Compilation *,const char *);0;TR;PreorderNodeIterator;0;0
PreorderNodeOccurrenceIterator;PreorderNodeOccurrenceIterator(const class TR::PreorderNodeOccurrenceIterator &);1;TR;PreorderNodeOccurrenceIterator;1;0
PreorderNodeOccurrenceIterator;PreorderNodeOccurrenceIterator(TR::TreeTop *,TR::Compilation *,const char *);0;TR;PreorderNodeOccurrenceIterator;0;0
PreorderNodeOccurrenceIterator;PreorderNodeOccurrenceIterator(class TR::PreorderNodeOccurrenceIterator &&);0;TR;PreorderNodeOccurrenceIterator;1;0
ReversePostorderSnapshotBlockIterator;ReversePostorderSnapshotBlockIterator(class TR::ReversePostorderSnapshotBlockIterator &&);1;TR;ReversePostorderSnapshotBlockIterator;1;0
ReversePostorderSnapshotBlockIterator;ReversePostorderSnapshotBlockIterator(const class TR::ReversePostorderSnapshotBlockIterator &);0;TR;ReversePostorderSnapshotBlockIterator;1;0
ReversePostorderSnapshotBlockIterator;ReversePostorderSnapshotBlockIterator(TR::CFG *,TR::Compilation *,const char *);0;TR;ReversePostorderSnapshotBlockIterator;0;0
ReversePostorderSnapshotBlockIterator;ReversePostorderSnapshotBlockIterator(TR::Block *,TR::Compilation *,const char *);0;TR;ReversePostorderSnapshotBlockIterator;0;0
operator=;operator=(class TR::ReversePostorderSnapshotBlockIterator &&);0;TR;ReversePostorderSnapshotBlockIterator;1;0
operator delete;operator delete(void *,size_t);1;OMR;SymbolReference;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReference;0;0
element;element(enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);1;OMR;SymbolReferenceTable;0;0
element;element(enum TR_RuntimeHelper);0;OMR;SymbolReferenceTable;0;0
isNonHelper;isNonHelper(TR::SymbolReference *,enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);1;OMR;SymbolReferenceTable;0;0
isNonHelper;isNonHelper(int32_t,enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);0;OMR;SymbolReferenceTable;0;0
operator delete;operator delete(void *,size_t);1;OMR;SymbolReferenceTable;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;SymbolReferenceTable;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;SymbolReferenceTable;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;SymbolReferenceTable;0;0
TreeTopOrderExtendedBlockIterator;TreeTopOrderExtendedBlockIterator(class TR::TreeTopOrderExtendedBlockIterator &&);1;TR;TreeTopOrderExtendedBlockIterator;1;0
TreeTopOrderExtendedBlockIterator;TreeTopOrderExtendedBlockIterator(const class TR::TreeTopOrderExtendedBlockIterator &);0;TR;TreeTopOrderExtendedBlockIterator;1;0
TreeTopOrderExtendedBlockIterator;TreeTopOrderExtendedBlockIterator(TR::Compilation *,const char *);0;TR;TreeTopOrderExtendedBlockIterator;0;0
TR_SuccessorIterator;TR_SuccessorIterator(class TR_SuccessorIterator &&);1;TR;SuccessorIterator;1;0
TR_SuccessorIterator;TR_SuccessorIterator(const class TR_SuccessorIterator &);0;TR;SuccessorIterator;1;0
TR_SuccessorIterator;TR_SuccessorIterator(TR::CFGNode *);0;TR;SuccessorIterator;0;0
TR_IGBase;TR_IGBase(const class TR_IGBase &);1;TR;IGBase;1;0
TR_IGBase;TR_IGBase();0;TR;IGBase;0;0
TR_IGBase;TR_IGBase(class TR_IGBase &&);0;TR;IGBase;1;0
TR_InterferenceGraph;TR_InterferenceGraph(class TR_InterferenceGraph &&);1;TR;InterferenceGraph;1;0
TR_InterferenceGraph;TR_InterferenceGraph(const class TR_InterferenceGraph &);0;TR;InterferenceGraph;1;0
TR_InterferenceGraph;TR_InterferenceGraph(TR::Compilation *);0;TR;InterferenceGraph;0;0
TR_InterferenceGraph;TR_InterferenceGraph(TR::Compilation *,int32_t);0;TR;InterferenceGraph;0;0
addInterferenceBetween;addInterferenceBetween(void *,void *);1;TR;InterferenceGraph;0;0
addInterferenceBetween;addInterferenceBetween(class TR_IGNode *,class TR_IGNode *);0;TR;InterferenceGraph;0;0
hasInterference;hasInterference(class TR_IGNode *,class TR_IGNode *);1;TR;InterferenceGraph;0;0
hasInterference;hasInterference(void *,void *);0;TR;InterferenceGraph;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;IGBase;0;0
operator delete;operator delete(void *,size_t);0;TR;IGBase;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;IGBase;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;IGBase;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;IGBase;0;0
operator new;operator new(size_t,TR::Region &);1;TR;IGBase;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;IGBase;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;IGBase;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;IGBase;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;IGBase;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;IGBase;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;IGBase;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;IGBase;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;IGBase;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;IGBase;0;0
operator=;operator=(const class TR_IGBase &);1;TR;IGBase;1;0
operator=;operator=(class TR_IGBase &&);0;TR;IGBase;1;0
operator=;operator=(class TR_InterferenceGraph &&);0;TR;InterferenceGraph;1;0
operator=;operator=(const class TR_InterferenceGraph &);0;TR;InterferenceGraph;1;0
removeInterferenceBetween;removeInterferenceBetween(class TR_IGNode *,class TR_IGNode *);1;TR;InterferenceGraph;0;0
removeInterferenceBetween;removeInterferenceBetween(void *,void *);0;TR;InterferenceGraph;0;0
DebugEnv;DebugEnv(const class OMR::DebugEnv &);1;OMR;DebugEnv;1;0
DebugEnv;DebugEnv();0;OMR;DebugEnv;0;0
ArithEnv;ArithEnv();1;OMR;ArithEnv;1;0
ArithEnv;ArithEnv(const class OMR::ArithEnv &);0;OMR;ArithEnv;1;0
classOfObject;classOfObject(struct OMR_VMThread *,uintptrj_t);1;OMR;ClassEnv;0;0
classOfObject;classOfObject(TR::Compilation *,uintptrj_t);0;OMR;ClassEnv;0;0
isStringClass;isStringClass(uintptrj_t);1;OMR;ClassEnv;0;0
isStringClass;isStringClass(class TR_OpaqueClassBlock *);0;OMR;ClassEnv;0;0
Monitor;Monitor(const class TR::Monitor &);0;TR;Monitor;1;0
MonitorTable;MonitorTable(class OMR::MonitorTable &&);1;OMR;MonitorTable;1;0
MonitorTable;MonitorTable();0;OMR;MonitorTable;1;0
MonitorTable;MonitorTable(const class OMR::MonitorTable &);0;OMR;MonitorTable;1;0
acquireVMAccessIfNeeded;acquireVMAccessIfNeeded(TR::Compilation *);1;OMR;VMEnv;0;0
acquireVMAccessIfNeeded;acquireVMAccessIfNeeded(struct OMR_VMThread *);0;OMR;VMEnv;0;0
operator=;operator=(class OMR::VMEnv &&);1;OMR;VMEnv;1;0
operator=;operator=(const class OMR::VMEnv &);0;OMR;VMEnv;1;0
RandomExercizer;RandomExercizer(class RandomExercizer &&);1;;RandomExercizer;1;0
RandomExercizer;RandomExercizer(const class RandomExercizer &);0;;RandomExercizer;1;0
RandomExercizer;RandomExercizer(TR::Compilation *);0;;RandomExercizer;0;0
TR_HasRandomGenerator;TR_HasRandomGenerator(class TR_HasRandomGenerator &&);1;TR;HasRandomGenerator;1;0
TR_HasRandomGenerator;TR_HasRandomGenerator(const class TR_HasRandomGenerator &);0;TR;HasRandomGenerator;1;0
create;create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *);1;OMR;Node;0;0
iconst;iconst(TR::Node *,int32_t);1;OMR;Node;0;0
iconst;iconst(int32_t);0;OMR;Node;0;0
operator new;operator new(size_t,void *);1;OMR;Node;0;0
operator new;operator new(size_t,TR::NodePool &);0;OMR;Node;0;0
TR_AnythingPattern;TR_AnythingPattern(class TR_AnythingPattern &&);1;TR;AnythingPattern;1;0
TR_AnythingPattern;TR_AnythingPattern(const class TR_AnythingPattern &);0;TR;AnythingPattern;1;0
TR_AnythingPattern;TR_AnythingPattern(class TR_Pattern *);0;TR;AnythingPattern;0;0
TR_Pattern;TR_Pattern(class TR_Pattern &&);1;TR;Pattern;1;0
TR_Pattern;TR_Pattern(const class TR_Pattern &);0;TR;Pattern;1;0
TR_Pattern;TR_Pattern(class TR_Pattern *);0;TR;Pattern;0;0
matches;matches(TR::Node *,class TR_Unification &,TR::Compilation *);1;TR;Pattern;0;0
matches;matches(TR::Node *,TR::Node **,TR::Compilation *);0;TR;Pattern;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;Pattern;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator delete;operator delete(void *,size_t);0;TR;Pattern;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Pattern;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;Pattern;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Pattern;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;TR;Pattern;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator new;operator new(size_t,TR::Region &);0;TR;Pattern;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Pattern;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Pattern;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Pattern;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;TR;Pattern;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;Pattern;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Pattern;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Pattern;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Pattern;0;0
operator=;operator=(const class TR_Pattern &);1;TR;Pattern;1;0
operator=;operator=(class TR_Pattern &&);0;TR;Pattern;1;0
operator=;operator=(class TR_AnythingPattern &&);0;TR;AnythingPattern;1;0
operator=;operator=(const class TR_AnythingPattern &);0;TR;AnythingPattern;1;0
TR_ChildPattern;TR_ChildPattern(const class TR_ChildPattern &);1;TR;ChildPattern;1;0
TR_ChildPattern;TR_ChildPattern(class TR_ChildPattern &&);0;TR;ChildPattern;1;0
TR_ChildPattern;TR_ChildPattern(int32_t,class TR_Pattern *,class TR_Pattern *);0;TR;ChildPattern;0;0
operator=;operator=(class TR_ChildPattern &&);0;TR;ChildPattern;1;0
operator=;operator=(const class TR_ChildPattern &);0;TR;ChildPattern;1;0
TR_ChildrenPattern;TR_ChildrenPattern(class TR_ChildrenPattern &&);1;TR;ChildrenPattern;1;0
TR_ChildrenPattern;TR_ChildrenPattern(const class TR_ChildrenPattern &);0;TR;ChildrenPattern;1;0
TR_ChildrenPattern;TR_ChildrenPattern(class TR_Pattern *,class TR_Pattern *,class TR_Pattern *);0;TR;ChildrenPattern;0;0
TR_CommutativePattern;TR_CommutativePattern(const class TR_CommutativePattern &);1;TR;CommutativePattern;1;0
TR_CommutativePattern;TR_CommutativePattern(class TR_CommutativePattern &&);0;TR;CommutativePattern;1;0
TR_CommutativePattern;TR_CommutativePattern(class TR_Pattern *,class TR_Pattern *,class TR_Pattern *);0;TR;CommutativePattern;0;0
operator=;operator=(class TR_ChildrenPattern &&);0;TR;ChildrenPattern;1;0
operator=;operator=(const class TR_ChildrenPattern &);0;TR;ChildrenPattern;1;0
operator=;operator=(class TR_CommutativePattern &&);0;TR;CommutativePattern;1;0
operator=;operator=(const class TR_CommutativePattern &);0;TR;CommutativePattern;1;0
TR_ChoicePattern;TR_ChoicePattern(const class TR_ChoicePattern &);1;TR;ChoicePattern;1;0
TR_ChoicePattern;TR_ChoicePattern(class TR_ChoicePattern &&);0;TR;ChoicePattern;1;0
TR_ChoicePattern;TR_ChoicePattern(class TR_Pattern *,class TR_Pattern *,class TR_Pattern *);0;TR;ChoicePattern;0;0
operator=;operator=(class TR_ChoicePattern &&);0;TR;ChoicePattern;1;0
operator=;operator=(const class TR_ChoicePattern &);0;TR;ChoicePattern;1;0
TR_IConstPattern;TR_IConstPattern(class TR_IConstPattern &&);1;TR;IConstPattern;1;0
TR_IConstPattern;TR_IConstPattern(const class TR_IConstPattern &);0;TR;IConstPattern;1;0
TR_IConstPattern;TR_IConstPattern(int32_t,class TR_Pattern *);0;TR;IConstPattern;0;0
TR_OpCodePattern;TR_OpCodePattern(class TR_OpCodePattern &&);1;TR;OpCodePattern;1;0
TR_OpCodePattern;TR_OpCodePattern(const class TR_OpCodePattern &);0;TR;OpCodePattern;1;0
TR_OpCodePattern;TR_OpCodePattern(TR::ILOpCodes,class TR_Pattern *);0;TR;OpCodePattern;0;0
operator=;operator=(class TR_OpCodePattern &&);0;TR;OpCodePattern;1;0
operator=;operator=(const class TR_OpCodePattern &);0;TR;OpCodePattern;1;0
operator=;operator=(class TR_IConstPattern &&);0;TR;IConstPattern;1;0
operator=;operator=(const class TR_IConstPattern &);0;TR;IConstPattern;1;0
TR_LConstPattern;TR_LConstPattern(const class TR_LConstPattern &);1;TR;LConstPattern;1;0
TR_LConstPattern;TR_LConstPattern(int64_t,class TR_Pattern *);0;TR;LConstPattern;0;0
TR_LConstPattern;TR_LConstPattern(class TR_LConstPattern &&);0;TR;LConstPattern;1;0
operator=;operator=(class TR_LConstPattern &&);0;TR;LConstPattern;1;0
operator=;operator=(const class TR_LConstPattern &);0;TR;LConstPattern;1;0
TR_NoRegisterPattern;TR_NoRegisterPattern(const class TR_NoRegisterPattern &);1;TR;NoRegisterPattern;1;0
TR_NoRegisterPattern;TR_NoRegisterPattern(class TR_NoRegisterPattern &&);0;TR;NoRegisterPattern;1;0
TR_NoRegisterPattern;TR_NoRegisterPattern(class TR_Pattern *);0;TR;NoRegisterPattern;0;0
operator=;operator=(class TR_NoRegisterPattern &&);0;TR;NoRegisterPattern;1;0
operator=;operator=(const class TR_NoRegisterPattern &);0;TR;NoRegisterPattern;1;0
TR_UnifyPattern;TR_UnifyPattern(const class TR_UnifyPattern &);1;TR;UnifyPattern;1;0
TR_UnifyPattern;TR_UnifyPattern(class TR_UnifyPattern &&);0;TR;UnifyPattern;1;0
TR_UnifyPattern;TR_UnifyPattern(class TR_Unification::TR_Index,class TR_Pattern *);0;TR;UnifyPattern;0;0
operator=;operator=(class TR_UnifyPattern &&);0;TR;UnifyPattern;1;0
operator=;operator=(const class TR_UnifyPattern &);0;TR;UnifyPattern;1;0
addPredecessor;addPredecessor(class TR::CFGEdge *,enum TR_AllocationKind);1;TR;CFGNode;0;0
addPredecessor;addPredecessor(class TR::CFGEdge *);0;TR;CFGNode;0;0
addSuccessor;addSuccessor(class TR::CFGEdge *,enum TR_AllocationKind);1;TR;CFGNode;0;0
addSuccessor;addSuccessor(class TR::CFGEdge *);0;TR;CFGNode;0;0
collectReferencedAutoSymRefsIn;collectReferencedAutoSymRefsIn(TR::Compilation *,class TR_BitVector *,vcount_t);1;OMR;Block;0;0
collectReferencedAutoSymRefsIn;collectReferencedAutoSymRefsIn(TR::Compilation *,TR::Node *,class TR_BitVector *,vcount_t);0;OMR;Block;0;0
createEmptyBlock;createEmptyBlock(TR::Node *,TR::Compilation *,int32_t,TR::Block *);1;OMR;Block;0;0
createEmptyBlock;createEmptyBlock(TR::Compilation *,int32_t,TR::Block *);0;OMR;Block;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;CFGNode;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;CFGNode;0;0
LabelSymbol;LabelSymbol(class OMR::LabelSymbol &&);1;OMR;LabelSymbol;1;0
LabelSymbol;LabelSymbol();0;OMR;LabelSymbol;0;0
AliasBuilder;AliasBuilder(class OMR::AliasBuilder &&);1;OMR;AliasBuilder;1;0
AliasBuilder;AliasBuilder(const class OMR::AliasBuilder &);0;OMR;AliasBuilder;1;0
operator=;operator=(const class OMR::AliasBuilder &);1;OMR;AliasBuilder;1;0
operator=;operator=(class OMR::AliasBuilder &&);0;OMR;AliasBuilder;1;0
CFGEdge;CFGEdge(class TR::CFGEdge &&);1;TR;CFGEdge;1;0
CFGEdge;CFGEdge(const class TR::CFGEdge &);0;TR;CFGEdge;1;0
isDiscontiguousArray;isDiscontiguousArray(TR::Compilation *,uintptrj_t);1;OMR;ObjectModel;0;0
operator=;operator=(const class OMR::ObjectModel &);1;OMR;ObjectModel;1;0
operator=;operator=(class OMR::ObjectModel &&);0;OMR;ObjectModel;1;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Optimizer;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;Optimizer;0;0
createKnownStaticDataSymbolRef;createKnownStaticDataSymbolRef(void *,TR::DataType);1;OMR;SymbolReferenceTable;0;0
createKnownStaticDataSymbolRef;createKnownStaticDataSymbolRef(void *,TR::DataType,TR::class KnownObjectTable::Index);0;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;SymbolReferenceTable;0;0
VPConstraint;VPConstraint(class TR::VPConstraint &&);1;TR;VPConstraint;1;0
VPConstraint;VPConstraint(const class TR::VPConstraint &);0;TR;VPConstraint;1;0
VPConstraint;VPConstraint(int32_t);0;TR;VPConstraint;0;0
create;create(OMR::ValuePropagation *,const char *,int32_t,class TR_ResolvedMethod *,_Bool);1;TR;VPConstraint;0;0
create;create(OMR::ValuePropagation *,char *);0;TR;VPArrayInfo;0;0
create;create(OMR::ValuePropagation *,int32_t,int32_t,int32_t);0;TR;VPArrayInfo;0;0
mustBeEqual;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);1;TR;VPConstraint;0;1
mustBeEqual;mustBeEqual();0;TR;VPConstraint;0;1
mustBeLessThan;mustBeLessThan();1;TR;VPConstraint;0;1
mustBeLessThan;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);0;TR;VPConstraint;0;1
mustBeLessThanOrEqual;mustBeLessThanOrEqual();1;TR;VPConstraint;0;1
mustBeLessThanOrEqual;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);0;TR;VPConstraint;0;1
mustBeNotEqual;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);1;TR;VPConstraint;0;1
mustBeNotEqual;mustBeNotEqual();0;TR;VPConstraint;0;1
operator delete;operator delete(void *,size_t);1;TR;VPConstraint;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;VPConstraint;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;VPConstraint;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;VPConstraint;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;VPConstraint;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;VPConstraint;0;0
operator new;operator new(size_t,TR::Region &);0;TR;VPConstraint;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;VPConstraint;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;VPConstraint;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;VPConstraint;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;VPConstraint;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;VPConstraint;0;0
operator=;operator=(class TR::VPConstraint &&);1;TR;VPConstraint;1;0
operator=;operator=(const class TR::VPConstraint &);0;TR;VPConstraint;1;0
operator=;operator=(class TR::VPArrayInfo &&);0;TR;VPArrayInfo;1;0
operator=;operator=(const class TR::VPArrayInfo &);0;TR;VPArrayInfo;1;0
print;print(TR::Compilation *,TR::FILE *,int32_t);1;TR;VPConstraint;0;1
print;print(OMR::ValuePropagation *);0;TR;VPConstraint;0;0
print;print(TR::Compilation *,TR::FILE *);0;TR;VPConstraint;0;0
create;create(OMR::ValuePropagation *,TR::VPClassType *,TR::VPClassPresence *,TR::VPPreexistentObject *,TR::VPArrayInfo *,TR::VPObjectLocation *);0;TR;VPClass;0;0
operator=;operator=(const class TR::VPClass &);0;TR;VPClass;1;0
operator=;operator=(class TR::VPClass &&);0;TR;VPClass;1;0
create;create(OMR::ValuePropagation *);0;TR;VPNonNullObject;0;0
operator=;operator=(class TR::VPClassPresence &&);0;TR;VPClassPresence;1;0
operator=;operator=(const class TR::VPClassPresence &);0;TR;VPClassPresence;1;0
operator=;operator=(const class TR::VPNonNullObject &);0;TR;VPNonNullObject;1;0
operator=;operator=(class TR::VPNonNullObject &&);0;TR;VPNonNullObject;1;0
VPClassType;VPClassType(int32_t);1;TR;VPClassType;0;0
VPClassType;VPClassType(class TR::VPClassType &&);0;TR;VPClassType;1;0
VPClassType;VPClassType(const class TR::VPClassType &);0;TR;VPClassType;1;0
VPFixedClass;VPFixedClass(class TR::VPFixedClass &&);1;TR;VPFixedClass;1;0
VPFixedClass;VPFixedClass(class TR_OpaqueClassBlock *,TR::Compilation *,int32_t);0;TR;VPFixedClass;0;0
VPFixedClass;VPFixedClass(const class TR::VPFixedClass &);0;TR;VPFixedClass;1;0
VPResolvedClass;VPResolvedClass(const class TR::VPResolvedClass &);1;TR;VPResolvedClass;1;0
VPResolvedClass;VPResolvedClass(class TR_OpaqueClassBlock *,TR::Compilation *);0;TR;VPResolvedClass;0;0
VPResolvedClass;VPResolvedClass(class TR_OpaqueClassBlock *,TR::Compilation *,int32_t);0;TR;VPResolvedClass;0;0
VPResolvedClass;VPResolvedClass(class TR::VPResolvedClass &&);0;TR;VPResolvedClass;1;0
create;create(OMR::ValuePropagation *,TR::SymbolReference *,_Bool,_Bool);0;TR;VPClassType;0;0
create;create(OMR::ValuePropagation *,const char *,int32_t,class TR_ResolvedMethod *,_Bool,class TR_OpaqueClassBlock *);0;TR;VPClassType;0;0
create;create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);0;TR;VPResolvedClass;0;0
create;create(OMR::ValuePropagation *,TR::SymbolReference *);0;TR;VPConstString;0;0
operator=;operator=(class TR::VPClassType &&);0;TR;VPClassType;1;0
operator=;operator=(const class TR::VPClassType &);0;TR;VPClassType;1;0
operator=;operator=(const class TR::VPResolvedClass &);0;TR;VPResolvedClass;1;0
operator=;operator=(class TR::VPResolvedClass &&);0;TR;VPResolvedClass;1;0
operator=;operator=(const class TR::VPFixedClass &);0;TR;VPFixedClass;1;0
operator=;operator=(class TR::VPFixedClass &&);0;TR;VPFixedClass;1;0
operator=;operator=(class TR::VPConstString &&);0;TR;VPConstString;1;0
operator=;operator=(const class TR::VPConstString &);0;TR;VPConstString;1;0
VPRelation;VPRelation(class TR::VPRelation &&);1;TR;VPRelation;1;0
VPRelation;VPRelation(const class TR::VPRelation &);0;TR;VPRelation;1;0
VPRelation;VPRelation(int32_t,int32_t);0;TR;VPRelation;0;0
create;create(OMR::ValuePropagation *,int32_t);0;TR;VPEqual;0;0
operator=;operator=(const class TR::VPRelation &);0;TR;VPRelation;1;0
operator=;operator=(class TR::VPRelation &&);0;TR;VPRelation;1;0
operator=;operator=(class TR::VPEqual &&);0;TR;VPEqual;1;0
operator=;operator=(const class TR::VPEqual &);0;TR;VPEqual;1;0
create;create(OMR::ValuePropagation *,int32_t);0;TR;VPGreaterThanOrEqual;0;0
operator=;operator=(class TR::VPGreaterThanOrEqual &&);0;TR;VPGreaterThanOrEqual;1;0
operator=;operator=(const class TR::VPGreaterThanOrEqual &);0;TR;VPGreaterThanOrEqual;1;0
VPIntConstraint;VPIntConstraint(class TR::VPIntConstraint &&);1;TR;VPIntConstraint;1;0
VPIntConstraint;VPIntConstraint(int32_t);0;TR;VPIntConstraint;0;0
VPIntConstraint;VPIntConstraint(const class TR::VPIntConstraint &);0;TR;VPIntConstraint;1;0
create;create(OMR::ValuePropagation *,int32_t);0;TR;VPIntConst;0;0
operator=;operator=(class TR::VPIntConstraint &&);0;TR;VPIntConstraint;1;0
operator=;operator=(const class TR::VPIntConstraint &);0;TR;VPIntConstraint;1;0
operator=;operator=(class TR::VPIntConst &&);0;TR;VPIntConst;1;0
operator=;operator=(const class TR::VPIntConst &);0;TR;VPIntConst;1;0
create;create(OMR::ValuePropagation *,int32_t,int32_t,enum TR_YesNoMaybe);0;TR;VPIntRange;0;0
create;create(OMR::ValuePropagation *,TR::DataTypes,enum TR_YesNoMaybe);0;TR;VPIntRange;0;0
operator=;operator=(class TR::VPIntRange &&);0;TR;VPIntRange;1;0
operator=;operator=(const class TR::VPIntRange &);0;TR;VPIntRange;1;0
create;create(OMR::ValuePropagation *,TR::class KnownObjectTable::Index);0;TR;VPKnownObject;0;0
create;create(OMR::ValuePropagation *,TR::class KnownObjectTable::Index,_Bool);0;TR;VPKnownObject;0;0
operator=;operator=(const class TR::VPKnownObject &);0;TR;VPKnownObject;1;0
operator=;operator=(class TR::VPKnownObject &&);0;TR;VPKnownObject;1;0
create;create(OMR::ValuePropagation *,int32_t);0;TR;VPLessThanOrEqual;0;0
operator=;operator=(const class TR::VPLessThanOrEqual &);0;TR;VPLessThanOrEqual;1;0
operator=;operator=(class TR::VPLessThanOrEqual &&);0;TR;VPLessThanOrEqual;1;0
VPLongConstraint;VPLongConstraint(class TR::VPLongConstraint &&);1;TR;VPLongConstraint;1;0
VPLongConstraint;VPLongConstraint(const class TR::VPLongConstraint &);0;TR;VPLongConstraint;1;0
VPLongConstraint;VPLongConstraint(int64_t);0;TR;VPLongConstraint;0;0
create;create(OMR::ValuePropagation *,int64_t);0;TR;VPLongConst;0;0
operator=;operator=(const class TR::VPLongConstraint &);0;TR;VPLongConstraint;1;0
operator=;operator=(class TR::VPLongConstraint &&);0;TR;VPLongConstraint;1;0
operator=;operator=(class TR::VPLongConst &&);0;TR;VPLongConst;1;0
operator=;operator=(const class TR::VPLongConst &);0;TR;VPLongConst;1;0
create;create(OMR::ValuePropagation *,int64_t,int64_t,_Bool,enum TR_YesNoMaybe);0;TR;VPLongRange;0;0
operator=;operator=(class TR::VPLongRange &&);0;TR;VPLongRange;1;0
operator=;operator=(const class TR::VPLongRange &);0;TR;VPLongRange;1;0
create;create(OMR::ValuePropagation *,TR::VPConstraint *,TR::VPConstraint *);0;TR;VPMergedConstraints;0;0
create;create(OMR::ValuePropagation *,ListElement<TR::VPConstraint> *);0;TR;VPMergedConstraints;0;0
operator=;operator=(const class TR::VPMergedConstraints &);0;TR;VPMergedConstraints;1;0
operator=;operator=(class TR::VPMergedConstraints &&);0;TR;VPMergedConstraints;1;0
create;create(OMR::ValuePropagation *,int32_t);0;TR;VPNotEqual;0;0
operator=;operator=(class TR::VPNotEqual &&);0;TR;VPNotEqual;1;0
operator=;operator=(const class TR::VPNotEqual &);0;TR;VPNotEqual;1;0
create;create(OMR::ValuePropagation *);0;TR;VPNullObject;0;0
operator=;operator=(const class TR::VPNullObject &);0;TR;VPNullObject;1;0
operator=;operator=(class TR::VPNullObject &&);0;TR;VPNullObject;1;0
create;create(OMR::ValuePropagation *,enum TR::VPObjectLocation::VPObjectLocationKind);0;TR;VPObjectLocation;0;0
operator=;operator=(class TR::VPObjectLocation &&);0;TR;VPObjectLocation;1;0
operator=;operator=(const class TR::VPObjectLocation &);0;TR;VPObjectLocation;1;0
create;create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);0;TR;VPPreexistentObject;0;0
operator=;operator=(class TR::VPPreexistentObject &&);0;TR;VPPreexistentObject;1;0
operator=;operator=(const class TR::VPPreexistentObject &);0;TR;VPPreexistentObject;1;0
VPShortConstraint;VPShortConstraint(class TR::VPShortConstraint &&);1;TR;VPShortConstraint;1;0
VPShortConstraint;VPShortConstraint(const class TR::VPShortConstraint &);0;TR;VPShortConstraint;1;0
VPShortConstraint;VPShortConstraint(int16_t);0;TR;VPShortConstraint;0;0
create;create(OMR::ValuePropagation *,int16_t);0;TR;VPShortConst;0;0
operator=;operator=(class TR::VPShortConstraint &&);0;TR;VPShortConstraint;1;0
operator=;operator=(const class TR::VPShortConstraint &);0;TR;VPShortConstraint;1;0
operator=;operator=(class TR::VPShortConst &&);0;TR;VPShortConst;1;0
operator=;operator=(const class TR::VPShortConst &);0;TR;VPShortConst;1;0
create;create(OMR::ValuePropagation *);0;TR;VPShortRange;0;0
create;create(OMR::ValuePropagation *,int16_t,int16_t,enum TR_YesNoMaybe);0;TR;VPShortRange;0;0
operator=;operator=(class TR::VPShortRange &&);0;TR;VPShortRange;1;0
operator=;operator=(const class TR::VPShortRange &);0;TR;VPShortRange;1;0
create;create(OMR::ValuePropagation *,enum TR_YesNoMaybe);0;TR;VPSync;0;0
operator=;operator=(class TR::VPSync &&);0;TR;VPSync;1;0
operator=;operator=(const class TR::VPSync &);0;TR;VPSync;1;0
create;create(OMR::ValuePropagation *);0;TR;VPUnreachablePath;0;0
operator=;operator=(class TR::VPUnreachablePath &&);0;TR;VPUnreachablePath;1;0
operator=;operator=(const class TR::VPUnreachablePath &);0;TR;VPUnreachablePath;1;0
create;create(OMR::ValuePropagation *,const char *,int32_t,class TR_ResolvedMethod *);0;TR;VPUnresolvedClass;0;0
operator=;operator=(class TR::VPUnresolvedClass &&);0;TR;VPUnresolvedClass;1;0
operator=;operator=(const class TR::VPUnresolvedClass &);0;TR;VPUnresolvedClass;1;0
TR_BlockStructure;TR_BlockStructure(const class TR_BlockStructure &);1;TR;BlockStructure;1;0
TR_BlockStructure;TR_BlockStructure(TR::Compilation *,int32_t,TR::Block *);0;TR;BlockStructure;0;0
TR_BlockStructure;TR_BlockStructure(class TR_BlockStructure &&);0;TR;BlockStructure;1;0
TR_Structure;TR_Structure(class TR_Structure &&);1;TR;Structure;1;0
TR_Structure;TR_Structure(const class TR_Structure &);0;TR;Structure;1;0
TR_Structure;TR_Structure(TR::Compilation *,int32_t);0;TR;Structure;0;0
getBlocks;getBlocks(List<TR::Block> *,vcount_t);1;TR;Structure;0;1
getBlocks;getBlocks(List<TR::Block> *);0;TR;Structure;0;1
getMaxNestingDepth;getMaxNestingDepth();1;TR;Structure;0;0
getMaxNestingDepth;getMaxNestingDepth(int32_t *,int32_t *);0;TR;Structure;0;1
operator delete;operator delete(void *,size_t);1;TR;Structure;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Structure;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;Structure;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Structure;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Structure;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;Structure;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;TR;Structure;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Structure;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator new;operator new(size_t,TR::Region &);0;TR;Structure;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Structure;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Structure;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;TR;Structure;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;Structure;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Structure;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Structure;0;0
operator=;operator=(class TR_Structure &&);1;TR;Structure;1;0
operator=;operator=(const class TR_Structure &);0;TR;Structure;1;0
operator=;operator=(const class TR_BlockStructure &);0;TR;BlockStructure;1;0
operator=;operator=(class TR_BlockStructure &&);0;TR;BlockStructure;1;0
TR_InductionVariable;TR_InductionVariable(TR::RegisterMappedSymbol *,TR::VPConstraint *,TR::VPConstraint *,TR::VPConstraint *,enum TR_YesNoMaybe);1;TR;InductionVariable;0;0
TR_InductionVariable;TR_InductionVariable();0;TR;InductionVariable;0;0
TR_PredecessorIterator;TR_PredecessorIterator(class TR_PredecessorIterator &&);1;TR;PredecessorIterator;1;0
TR_PredecessorIterator;TR_PredecessorIterator(const class TR_PredecessorIterator &);0;TR;PredecessorIterator;1;0
TR_PredecessorIterator;TR_PredecessorIterator(TR::CFGNode *);0;TR;PredecessorIterator;0;0
TR_RegionStructure;TR_RegionStructure(class TR_RegionStructure &&);1;TR;RegionStructure;1;0
TR_RegionStructure;TR_RegionStructure(TR::Compilation *,int32_t);0;TR;RegionStructure;0;0
addExitEdge;addExitEdge(TR::CFGEdge *);1;TR;RegionStructure;0;0
addExitEdge;addExitEdge(class TR_StructureSubGraphNode *,int32_t,_Bool,TR::CFGEdge *);0;TR;RegionStructure;0;0
addInductionVariable;addInductionVariable(class TR_InductionVariable *);1;TR;RegionStructure;0;0
addInductionVariable;addInductionVariable(class TR_BasicInductionVariable *);0;TR;RegionStructure;0;0
findNodeInHierarchy;findNodeInHierarchy(class TR_RegionStructure *,int32_t);1;TR;Structure;0;0
findNodeInHierarchy;findNodeInHierarchy(int32_t);0;TR;RegionStructure;0;0
operator=;operator=(class TR_RegionStructure &&);0;TR;RegionStructure;1;0
operator=;operator=(const class TR_RegionStructure &);0;TR;RegionStructure;1;0
removeEdge;removeEdge(class TR_Structure *,class TR_Structure *);1;TR;Structure;0;1
removeEdge;removeEdge(TR::CFGEdge *,_Bool);0;TR;RegionStructure;0;0
TR_StructureSubGraphNode;TR_StructureSubGraphNode(class TR_StructureSubGraphNode &&);1;TR;StructureSubGraphNode;1;0
TR_StructureSubGraphNode;TR_StructureSubGraphNode(int32_t,TR::Region &);0;TR;StructureSubGraphNode;0;0
TR_StructureSubGraphNode;TR_StructureSubGraphNode(class TR_Structure *);0;TR;StructureSubGraphNode;0;0
TR_StructureSubGraphNode;TR_StructureSubGraphNode(const class TR_StructureSubGraphNode &);0;TR;StructureSubGraphNode;1;0
operator=;operator=(class TR_StructureSubGraphNode &&);0;TR;StructureSubGraphNode;1;0
operator=;operator=(const class TR_StructureSubGraphNode &);0;TR;StructureSubGraphNode;1;0
TR_SuccessorIterator;TR_SuccessorIterator(TR::CFGNode *);1;TR;SuccessorIterator;0;0
TR_SuccessorIterator;TR_SuccessorIterator(class TR_SuccessorIterator &&);0;TR;SuccessorIterator;1;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Machine;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Machine;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Machine;0;0
operator<=;operator<=(TR::DataTypes);1;OMR;DataType;0;0
operator<=;operator<=(const TR::DataType &);0;OMR;DataType;0;0
IlGenRequest;IlGenRequest(class OMR::IlGenRequest &&);1;OMR;IlGenRequest;1;0
IlGenRequest;IlGenRequest(const class OMR::IlGenRequest &);0;OMR;IlGenRequest;1;0
IlGenRequest;IlGenRequest(TR::IlGeneratorMethodDetails &);0;OMR;IlGenRequest;0;0
IlGenRequest;IlGenRequest(class TR::IlGenRequest &&);0;TR;IlGenRequest;1;0
IlGenRequest;IlGenRequest(const class TR::IlGenRequest &);0;TR;IlGenRequest;1;0
operator=;operator=(class OMR::IlGenRequest &&);1;OMR;IlGenRequest;1;0
operator=;operator=(const class OMR::IlGenRequest &);0;OMR;IlGenRequest;1;0
operator=;operator=(const class TR::IlGenRequest &);0;TR;IlGenRequest;1;0
operator=;operator=(class TR::IlGenRequest &&);0;TR;IlGenRequest;1;0
operator=;operator=(class TR::CompileIlGenRequest &&);0;TR;CompileIlGenRequest;1;0
operator=;operator=(const class TR::CompileIlGenRequest &);0;TR;CompileIlGenRequest;1;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(const class OMR::IlGeneratorMethodDetails &);1;OMR;IlGeneratorMethodDetails;1;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails();0;OMR;IlGeneratorMethodDetails;0;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(const class TestCompiler::IlGeneratorMethodDetails &);0;TestCompiler;IlGeneratorMethodDetails;1;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(TR::ResolvedMethod *);0;TestCompiler;IlGeneratorMethodDetails;0;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(class TestCompiler::IlGeneratorMethodDetails &&);0;TestCompiler;IlGeneratorMethodDetails;1;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(class TR_ResolvedMethod *);0;TestCompiler;IlGeneratorMethodDetails;0;0
operator new;operator new(size_t,TR::IlGeneratorMethodDetails *);1;OMR;IlGeneratorMethodDetails;0;0
operator new;operator new(size_t,TR::IlGeneratorMethodDetails &);0;OMR;IlGeneratorMethodDetails;0;0
operator=;operator=(const class OMR::IlGeneratorMethodDetails &);1;OMR;IlGeneratorMethodDetails;1;0
operator=;operator=(class TestCompiler::IlGeneratorMethodDetails &&);0;TestCompiler;IlGeneratorMethodDetails;1;0
operator=;operator=(const class TestCompiler::IlGeneratorMethodDetails &);0;TestCompiler;IlGeneratorMethodDetails;1;0
operator=;operator=(class TR::IlGeneratorMethodDetails &&);0;TR;IlGeneratorMethodDetails;1;0
operator=;operator=(const class TR::IlGeneratorMethodDetails &);0;TR;IlGeneratorMethodDetails;1;0
sameAs;sameAs(TR::IlGeneratorMethodDetails &);1;OMR;IlGeneratorMethodDetails;0;0
sameAs;sameAs(TR::IlGeneratorMethodDetails &,class TR_FrontEnd *);0;TestCompiler;IlGeneratorMethodDetails;0;0
InliningIlGenRequest;InliningIlGenRequest(const class TR::InliningIlGenRequest &);1;TR;InliningIlGenRequest;1;0
InliningIlGenRequest;InliningIlGenRequest(class TR::InliningIlGenRequest &&);0;TR;InliningIlGenRequest;1;0
InliningIlGenRequest;InliningIlGenRequest(TR::IlGeneratorMethodDetails &,TR::ResolvedMethodSymbol *);0;TR;InliningIlGenRequest;0;0
operator=;operator=(const class TR::InliningIlGenRequest &);0;TR;InliningIlGenRequest;1;0
operator=;operator=(class TR::InliningIlGenRequest &&);0;TR;InliningIlGenRequest;1;0
operator=;operator=(class TR::PartialInliningIlGenRequest &&);0;TR;PartialInliningIlGenRequest;1;0
operator=;operator=(const class TR::PartialInliningIlGenRequest &);0;TR;PartialInliningIlGenRequest;1;0
Symbol;Symbol();1;OMR;Symbol;0;0
Symbol;Symbol(const class OMR::Symbol &);0;OMR;Symbol;1;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Symbol;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Symbol;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;AliasBuilder;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;AliasBuilder;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;AliasBuilder;0;0
Node;Node();1;OMR;Node;0;0
Node;Node(const class OMR::Node &);0;OMR;Node;1;0
addChildrenAndSymRef;addChildrenAndSymRef(uint16_t,TR::SymbolReference *);1;OMR;Node;0;0
addChildrenAndSymRef;addChildrenAndSymRef(uint16_t,TR::Node *);0;OMR;Node;0;0
buconst;buconst(uint8_t);1;OMR;Node;0;0
buconst;buconst(TR::Node *,uint8_t);0;OMR;Node;0;0
createStore;createStore(TR::SymbolReference *,TR::Node *,TR::ILOpCodes,size_t);1;OMR;Node;0;0
BSDTimer;BSDTimer(const class CS2::BSDTimer &);1;CS2;BSDTimer;1;0
BSDTimer;BSDTimer(class CS2::BSDTimer &&);0;CS2;BSDTimer;1;0
BSDTimer;BSDTimer();0;CS2;BSDTimer;1;0
Timer;Timer(class CS2::Timer &&);1;CS2;Timer;1;0
Timer;Timer();0;CS2;Timer;1;0
Timer;Timer(const class CS2::Timer &);0;CS2;Timer;1;0
Block;Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *);1;OMR;Block;0;0
Block;Block(const class OMR::Block &);0;OMR;Block;1;0
Block;Block(const class TR::Block &);0;TR;Block;1;0
Optimization;Optimization(const class TR::Optimization &);0;TR;Optimization;1;0
TR_HasRandomGenerator;TR_HasRandomGenerator(TR::Compilation *);1;TR;HasRandomGenerator;0;0
TR_Inliner;TR_Inliner(class TR_Inliner &&);1;TR;Inliner;1;0
TR_Inliner;TR_Inliner(const class TR_Inliner &);0;TR;Inliner;1;0
TR_Inliner;TR_Inliner(TR::OptimizationManager *);0;TR;Inliner;0;0
operator=;operator=(class TR_HasRandomGenerator &&);1;TR;HasRandomGenerator;1;0
operator=;operator=(const class TR_HasRandomGenerator &);0;TR;HasRandomGenerator;1;0
operator=;operator=(class TR_Inliner &&);0;TR;Inliner;1;0
operator=;operator=(const class TR_Inliner &);0;TR;Inliner;1;0
randomInt;randomInt(int32_t,int32_t);1;TR;HasRandomGenerator;0;0
randomInt;randomInt();0;TR;HasRandomGenerator;0;0
OMR_InlinerPolicy;OMR_InlinerPolicy(class OMR_InlinerPolicy &&);1;;OMR_InlinerPolicy;1;0
OMR_InlinerPolicy;OMR_InlinerPolicy(TR::Compilation *);0;;OMR_InlinerPolicy;0;0
OptimizationPolicy;OptimizationPolicy(const class TR::OptimizationPolicy &);1;TR;OptimizationPolicy;1;0
OptimizationPolicy;OptimizationPolicy(TR::Compilation *);0;TR;OptimizationPolicy;0;0
getInitialBytecodeSize;getInitialBytecodeSize(TR::ResolvedMethodSymbol *,TR::Compilation *);1;;OMR_InlinerPolicy;0;0
getInitialBytecodeSize;getInitialBytecodeSize(class TR_ResolvedMethod *,TR::ResolvedMethodSymbol *,TR::Compilation *);0;;OMR_InlinerPolicy;0;1
operator=;operator=(const class TR::OptimizationPolicy &);1;TR;OptimizationPolicy;1;0
operator=;operator=(class OMR_InlinerPolicy &&);0;;OMR_InlinerPolicy;1;0
operator=;operator=(const class OMR_InlinerPolicy &);0;;OMR_InlinerPolicy;1;0
OMR_InlinerHelper;OMR_InlinerHelper(class OMR_InlinerHelper &&);1;;OMR_InlinerHelper;1;0
OMR_InlinerHelper;OMR_InlinerHelper(const class OMR_InlinerHelper &);0;;OMR_InlinerHelper;1;0
operator=;operator=(class OMR_InlinerHelper &&);1;;OMR_InlinerHelper;1;0
operator=;operator=(const class OMR_InlinerHelper &);0;;OMR_InlinerHelper;1;0
OMR_InlinerUtil;OMR_InlinerUtil(TR::Compilation *);1;;OMR_InlinerUtil;0;0
OMR_InlinerUtil;OMR_InlinerUtil(class OMR_InlinerUtil &&);0;;OMR_InlinerUtil;1;0
OptimizationUtil;OptimizationUtil(const class TR::OptimizationUtil &);1;TR;OptimizationUtil;1;0
OptimizationUtil;OptimizationUtil(TR::Compilation *);0;TR;OptimizationUtil;0;0
operator=;operator=(const class TR::OptimizationUtil &);1;TR;OptimizationUtil;1;0
operator=;operator=(class OMR_InlinerUtil &&);0;;OMR_InlinerUtil;1;0
operator=;operator=(const class OMR_InlinerUtil &);0;;OMR_InlinerUtil;1;0
addToOSRTable;addToOSRTable(int32_t,TR_ByteCodeInfo &);1;OMR;CodeGenerator;0;0
addToOSRTable;addToOSRTable(TR::Instruction *);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,class TR_ScratchRegisterManager &,int32_t,int8_t,int32_t,TR::Instruction *);1;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,TR::Register *,class TR_ScratchRegisterManager &,int8_t,int32_t,TR::Instruction *);0;OMR;CodeGenerator;0;0
getLinkage;getLinkage();1;OMR;CodeGenerator;0;0
getLinkage;getLinkage(enum TR_LinkageConventions);0;OMR;CodeGenerator;0;0
getMaximumNumberOfGPRsAllowedAcrossEdge;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *);1;OMR;CodeGenerator;0;0
getMaximumNumberOfGPRsAllowedAcrossEdge;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Block *);0;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,size_t);1;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;CodeGenerator;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;CodeGenerator;0;0
operator=;operator=(const class OMR::CodeGenerator &);1;OMR;CodeGenerator;1;0
operator=;operator=(class OMR::CodeGenerator &&);0;OMR;CodeGenerator;1;0
simulatedNodeState;simulatedNodeState(TR::Node *);1;OMR;CodeGenerator;0;0
simulatedNodeState;simulatedNodeState(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);0;OMR;CodeGenerator;0;0
wantToPatchClassPointer;wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const TR::Node *);1;OMR;CodeGenerator;0;0
wantToPatchClassPointer;wantToPatchClassPointer(const class TR_OpaqueClassBlock *,const uint8_t *);0;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Compilation;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Compilation;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Compilation;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Compilation;0;0
getDataType;getDataType(TR::ILOpCodes);1;OMR;ILOpCode;0;0
getDataType;getDataType();0;OMR;ILOpCode;0;0
aconst;aconst(TR::Node *,uintptrj_t);1;OMR;Node;0;0
bconst;bconst(int8_t);1;OMR;Node;0;0
bconst;bconst(TR::Node *,int8_t);0;OMR;Node;0;0
OptimizationManager;OptimizationManager(const class OMR::OptimizationManager &);1;OMR;OptimizationManager;1;0
OptimizationManager;OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *);0;OMR;OptimizationManager;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Optimizer;0;0
ResolvedMethod;ResolvedMethod(const class TestCompiler::ResolvedMethod &);1;TestCompiler;ResolvedMethod;1;0
ResolvedMethod;ResolvedMethod(class TestCompiler::ResolvedMethod &&);0;TestCompiler;ResolvedMethod;1;0
TransformUtil;TransformUtil(const class OMR::TransformUtil &);1;OMR;TransformUtil;1;0
TransformUtil;TransformUtil(class OMR::TransformUtil &&);0;OMR;TransformUtil;1;0
TransformUtil;TransformUtil();0;OMR;TransformUtil;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;TransformUtil;0;0
operator delete;operator delete(void *,size_t);0;OMR;TransformUtil;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;TransformUtil;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;TransformUtil;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;TransformUtil;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;TransformUtil;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;TransformUtil;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;TransformUtil;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;TransformUtil;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;TransformUtil;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;TransformUtil;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;TransformUtil;0;0
mustBeLessThanOrEqual;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);1;TR;VPConstraint;0;1
mustBeLessThanOrEqual;mustBeLessThanOrEqual();0;TR;VPConstraint;0;1
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
operator delete;operator delete(void *,size_t);0;TR;VPConstraint;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;VPConstraint;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;TR;VPConstraint;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;VPConstraint;0;0
TR_DirectCallSite;TR_DirectCallSite(class TR_DirectCallSite &&);1;TR;DirectCallSite;1;0
TR_DirectCallSite;TR_DirectCallSite(class TR_ResolvedMethod *,TR::TreeTop *,TR::Node *,TR::Node *,class TR_Method *,class TR_OpaqueClassBlock *,int32_t,int32_t,class TR_ResolvedMethod *,TR::ResolvedMethodSymbol *,_Bool,_Bool,TR_ByteCodeInfo &,TR::Compilation *,int32_t,_Bool);0;TR;DirectCallSite;0;0
operator=;operator=(const class TR_DirectCallSite &);1;TR;DirectCallSite;1;0
operator=;operator=(class TR_DirectCallSite &&);0;TR;DirectCallSite;1;0
makeTempsAvailable;makeTempsAvailable(List<TR::SymbolReference> &);1;TR;CallStack;0;0
makeTempsAvailable;makeTempsAvailable(List<TR::SymbolReference> &,List<TR::SymbolReference> &);0;TR;CallStack;0;0
operator=;operator=(class TR_InlinerBase &&);0;TR;InlinerBase;1;0
operator=;operator=(const class TR_InlinerBase &);0;TR;InlinerBase;1;0
operator=;operator=(class TR_DumbInliner &&);0;TR;DumbInliner;1;0
operator=;operator=(const class TR_DumbInliner &);0;TR;DumbInliner;1;0
operator=;operator=(class TR_InlineCall &&);0;TR;InlineCall;1;0
operator=;operator=(const class TR_InlineCall &);0;TR;InlineCall;1;0
TR_IndirectCallSite;TR_IndirectCallSite(class TR_IndirectCallSite &&);1;TR;IndirectCallSite;1;0
TR_IndirectCallSite;TR_IndirectCallSite(class TR_ResolvedMethod *,TR::TreeTop *,TR::Node *,TR::Node *,class TR_Method *,class TR_OpaqueClassBlock *,int32_t,int32_t,class TR_ResolvedMethod *,TR::ResolvedMethodSymbol *,_Bool,_Bool,TR_ByteCodeInfo &,TR::Compilation *,int32_t,_Bool);0;TR;IndirectCallSite;0;0
TR_IndirectCallSite;TR_IndirectCallSite(const class TR_IndirectCallSite &);0;TR;IndirectCallSite;1;0
operator=;operator=(const class TR_IndirectCallSite &);1;TR;IndirectCallSite;1;0
operator=;operator=(class TR_IndirectCallSite &&);0;TR;IndirectCallSite;1;0
operator=;operator=(const class TR_FunctionPointerCallSite &);0;TR;FunctionPointerCallSite;1;0
operator=;operator=(class TR_FunctionPointerCallSite &&);0;TR;FunctionPointerCallSite;1;0
operator delete;operator delete(void *,size_t);1;TR;InlinerTracer;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;InlinerTracer;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;InlinerTracer;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;InlinerTracer;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;InlinerTracer;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;InlinerTracer;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;InlinerTracer;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;InlinerTracer;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;InlinerTracer;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;InlinerTracer;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator new;operator new(size_t,TR::Region &);0;TR;InlinerTracer;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;InlinerTracer;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;InlinerTracer;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;InlinerTracer;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;InlinerTracer;0;0
TR_Dominators;TR_Dominators(const class TR_Dominators &);1;TR;Dominators;1;0
TR_Dominators;TR_Dominators(TR::Compilation *,_Bool);0;TR;Dominators;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;Dominators;0;0
operator delete;operator delete(void *,size_t);0;TR;Dominators;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;Dominators;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Dominators;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;Dominators;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Dominators;0;0
TR_RegisterCandidate;TR_RegisterCandidate(class TR_RegisterCandidate &&);1;TR;RegisterCandidate;1;0
TR_RegisterCandidate;TR_RegisterCandidate(TR::SymbolReference *,TR::Region &);0;TR;RegisterCandidate;0;0
TR_TrivialInliner;TR_TrivialInliner(const class TR_TrivialInliner &);1;TR;TrivialInliner;1;0
TR_TrivialInliner;TR_TrivialInliner(class TR_TrivialInliner &&);0;TR;TrivialInliner;1;0
TR_TrivialInliner;TR_TrivialInliner(TR::OptimizationManager *);0;TR;TrivialInliner;0;0
operator=;operator=(class TR_TrivialInliner &&);0;TR;TrivialInliner;1;0
operator=;operator=(const class TR_TrivialInliner &);0;TR;TrivialInliner;1;0
Symbol;Symbol(TR::DataType,uint32_t);1;OMR;Symbol;0;0
operator delete;operator delete(void *,size_t);1;OMR;Instruction;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Instruction;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Instruction;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Instruction;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Instruction;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Instruction;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;AliasBuilder;0;0
allocateCodeMemory;allocateCodeMemory(uint32_t,uint32_t,uint8_t **,_Bool);1;OMR;CodeGenerator;0;0
allocateCodeMemory;allocateCodeMemory(uint32_t,_Bool,_Bool);0;OMR;CodeGenerator;0;0
considerTypeForGRA;considerTypeForGRA(TR::SymbolReference *);1;OMR;CodeGenerator;0;0
considerTypeForGRA;considerTypeForGRA(TR::DataType);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(TR::Instruction *,const char *,TR::Register *,int8_t,int32_t);1;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *);1;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &);0;OMR;CodeGenerator;0;0
identifyUnneededByteConvNodes;identifyUnneededByteConvNodes();1;OMR;CodeGenerator;0;0
identifyUnneededByteConvNodes;identifyUnneededByteConvNodes(TR::Node *,TR::TreeTop *,vcount_t,TR::DataType);0;OMR;CodeGenerator;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Compilation;0;0
resetVisitCounts;resetVisitCounts(vcount_t,TR::TreeTop *);1;OMR;Compilation;0;0
ILOpCode;ILOpCode(const class OMR::ILOpCode &);1;OMR;ILOpCode;1;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *);1;OMR;Node;0;0
staticName;staticName(int32_t,class TR_Memory *,enum TR_AllocationKind);1;TR;ResolvedMethod;0;1
staticName;staticName(int32_t,int32_t &,class TR_Memory *,enum TR_AllocationKind);0;TR;ResolvedMethod;0;1
SymbolReference;SymbolReference(class TR::SymbolReference &&);0;TR;SymbolReference;1;0
SymbolReference;SymbolReference(const class TR::SymbolReference &);0;TR;SymbolReference;1;0
operator delete;operator delete(void *,TR::Region &);1;OMR;SymbolReference;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;SymbolReference;0;0
setAliasedTo;setAliasedTo(class TR_BitVector &,TR::SymbolReferenceTable *,_Bool);1;OMR;SymbolReference;0;1
setAliasedTo;setAliasedTo(TR::SymbolReference *,_Bool);0;OMR;SymbolReference;0;1
findAvailableAuto;findAvailableAuto(TR::DataType,_Bool,_Bool);1;OMR;SymbolReferenceTable;0;0
findAvailableAuto;findAvailableAuto(List<TR::SymbolReference> &,TR::DataType,_Bool,_Bool);0;OMR;SymbolReferenceTable;0;0
findOrCreateSymRefWithKnownObject;findOrCreateSymRefWithKnownObject(TR::SymbolReference *,TR::class KnownObjectTable::Index);1;OMR;SymbolReferenceTable;0;0
findOrCreateSymRefWithKnownObject;findOrCreateSymRefWithKnownObject(TR::SymbolReference *,uintptrj_t *);0;OMR;SymbolReferenceTable;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;SymbolReferenceTable;0;0
TR_SymRefIterator;TR_SymRefIterator(const class TR_SymRefIterator &);1;TR;SymRefIterator;1;0
TR_SymRefIterator;TR_SymRefIterator(class TR_SymRefIterator &&);0;TR;SymRefIterator;1;0
TR_SymRefIterator;TR_SymRefIterator(class TR_BitVector &,TR::SymbolReferenceTable *);0;TR;SymRefIterator;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Snippet;0;0
operator=;operator=(const class OMR::Snippet &);1;OMR;Snippet;1;0
operator=;operator=(class OMR::Snippet &&);0;OMR;Snippet;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
operator delete;operator delete(void *,size_t);0;OMR;CFG;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
CodeGenPhase;CodeGenPhase(class OMR::CodeGenPhase &&);1;OMR;CodeGenPhase;1;0
SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *);1;OMR;SymbolReference;0;0
SymbolReference;SymbolReference(const class OMR::SymbolReference &);0;OMR;SymbolReference;1;0
AutomaticSymbol;AutomaticSymbol(const class TR::AutomaticSymbol &);0;TR;AutomaticSymbol;1;0
AutomaticSymbol;AutomaticSymbol(class TR::AutomaticSymbol &&);0;TR;AutomaticSymbol;1;0
RegisterMappedSymbol;RegisterMappedSymbol(const class OMR::RegisterMappedSymbol &);1;OMR;RegisterMappedSymbol;1;0
RegisterMappedSymbol;RegisterMappedSymbol(class OMR::RegisterMappedSymbol &&);0;OMR;RegisterMappedSymbol;1;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);1;OMR;Node;0;0
TR_IGBase;TR_IGBase(class TR_IGBase &&);1;TR;IGBase;1;0
TR_IGBase;TR_IGBase(const class TR_IGBase &);0;TR;IGBase;1;0
TR_InterferenceGraph;TR_InterferenceGraph(TR::Compilation *);1;TR;InterferenceGraph;0;0
operator delete;operator delete(void *,size_t);1;TR;IGBase;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;IGBase;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;IGBase;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;IGBase;0;0
Symbol;Symbol(TR::DataType);1;OMR;Symbol;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
LabelSymbol;LabelSymbol(class TR::LabelSymbol &&);0;TR;LabelSymbol;1;0
LabelSymbol;LabelSymbol(const class TR::LabelSymbol &);0;TR;LabelSymbol;1;0
GCRegisterMap;GCRegisterMap(class OMR::GCRegisterMap &&);1;OMR;GCRegisterMap;1;0
GCRegisterMap;GCRegisterMap();0;OMR;GCRegisterMap;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;GCRegisterMap;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;Symbol;0;0
ParameterSymbol;ParameterSymbol(const class OMR::ParameterSymbol &);1;OMR;ParameterSymbol;1;0
ParameterSymbol;ParameterSymbol(class OMR::ParameterSymbol &&);0;OMR;ParameterSymbol;1;0
ParameterSymbol;ParameterSymbol(const class TR::ParameterSymbol &);0;TR;ParameterSymbol;1;0
ParameterSymbol;ParameterSymbol(class TR::ParameterSymbol &&);0;TR;ParameterSymbol;1;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Symbol;0;0
SymbolReferenceTable;SymbolReferenceTable(class OMR::SymbolReferenceTable &&);1;OMR;SymbolReferenceTable;1;0
SymbolReferenceTable;SymbolReferenceTable(const class OMR::SymbolReferenceTable &);0;OMR;SymbolReferenceTable;1;0
getSymRef;getSymRef(int32_t);1;OMR;SymbolReferenceTable;0;0
getSymRef;getSymRef(enum OMR::SymbolReferenceTable::CommonNonhelperSymbol);0;OMR;SymbolReferenceTable;0;0
ResolvedMethodSymbol;ResolvedMethodSymbol(class TR::ResolvedMethodSymbol &&);0;TR;ResolvedMethodSymbol;1;0
ResolvedMethodSymbol;ResolvedMethodSymbol(const class TR::ResolvedMethodSymbol &);0;TR;ResolvedMethodSymbol;1;0
Linkage;Linkage(const class OMR::Linkage &);1;OMR;Linkage;1;0
Linkage;Linkage();0;OMR;Linkage;0;0
Linkage;Linkage(class OMR::Linkage &&);0;OMR;Linkage;1;0
Linkage;Linkage(const class OMR::X86::Linkage &);0;OMR::X86;Linkage;1;0
Linkage;Linkage(class OMR::X86::Linkage &&);0;OMR::X86;Linkage;1;0
Linkage;Linkage(TR::CodeGenerator *);0;OMR::X86;Linkage;0;0
flushArguments;flushArguments(TR::Node *,uint8_t *,_Bool,int32_t *,_Bool,_Bool);1;OMR::X86;Linkage;0;1
flushArguments;flushArguments(TR::Instruction *,TR::ResolvedMethodSymbol *,_Bool,_Bool);0;OMR::X86;Linkage;0;1
loadArguments;loadArguments(TR::Node *,uint8_t *,_Bool,int32_t *,_Bool);1;OMR::X86;Linkage;0;0
loadArguments;loadArguments(TR::Instruction *,TR::ResolvedMethodSymbol *);0;OMR::X86;Linkage;0;0
mapSingleAutomatic;mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);1;OMR;Linkage;0;1
mapSingleAutomatic;mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t,uint32_t &);0;OMR::X86;Linkage;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Linkage;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Linkage;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;Linkage;0;0
operator delete;operator delete(void *,size_t);0;OMR;Linkage;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;Linkage;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Linkage;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;Linkage;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;Linkage;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Linkage;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;Linkage;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;Linkage;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Linkage;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;Linkage;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Linkage;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;Linkage;0;0
operator=;operator=(class OMR::Linkage &&);1;OMR;Linkage;1;0
operator=;operator=(const class OMR::Linkage &);0;OMR;Linkage;1;0
operator=;operator=(class OMR::X86::Linkage &&);0;OMR::X86;Linkage;1;0
operator=;operator=(const class OMR::X86::Linkage &);0;OMR::X86;Linkage;1;0
operator=;operator=(class TR::Linkage &&);0;TR;Linkage;1;0
operator=;operator=(const class TR::Linkage &);0;TR;Linkage;1;0
setParameterLinkageRegisterIndex;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &);1;OMR;Linkage;0;1
setParameterLinkageRegisterIndex;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);0;OMR;Linkage;0;1
storeArguments;storeArguments(TR::Node *,uint8_t *,_Bool,int32_t *);1;OMR::X86;Linkage;0;0
storeArguments;storeArguments(TR::Instruction *,TR::ResolvedMethodSymbol *);0;OMR::X86;Linkage;0;0
CFG;CFG(const class TR::CFG &);0;TR;CFG;1;0
CFG;CFG(class TR::CFG &&);0;TR;CFG;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;CodeGenerator;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Compilation;0;0
IlGenRequest;IlGenRequest(const class OMR::IlGenRequest &);1;OMR;IlGenRequest;1;0
IlGenRequest;IlGenRequest(class OMR::IlGenRequest &&);0;OMR;IlGenRequest;1;0
InliningIlGenRequest;InliningIlGenRequest(class TR::InliningIlGenRequest &&);1;TR;InliningIlGenRequest;1;0
InliningIlGenRequest;InliningIlGenRequest(const class TR::InliningIlGenRequest &);0;TR;InliningIlGenRequest;1;0
fieldName;fieldName(int32_t,class TR_Memory *,enum TR_AllocationKind);1;TR;ResolvedMethod;0;1
fieldName;fieldName(int32_t,int32_t &,class TR_Memory *,enum TR_AllocationKind);0;TR;ResolvedMethod;0;1
operator=;operator=(const class TR_Dominators &);1;TR;Dominators;1;0
operator=;operator=(class TR_Dominators &&);0;TR;Dominators;1;0
StaticSymbol;StaticSymbol(class TR::StaticSymbol &&);0;TR;StaticSymbol;1;0
StaticSymbol;StaticSymbol(const class TR::StaticSymbol &);0;TR;StaticSymbol;1;0
BSDTimer;BSDTimer(class CS2::BSDTimer &&);1;CS2;BSDTimer;1;0
BSDTimer;BSDTimer(const class CS2::BSDTimer &);0;CS2;BSDTimer;1;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Symbol;0;0
TR_LoadExtensions;TR_LoadExtensions(class TR_LoadExtensions &&);1;TR;LoadExtensions;1;0
TR_LoadExtensions;TR_LoadExtensions(const class TR_LoadExtensions &);0;TR;LoadExtensions;1;0
TR_LoadExtensions;TR_LoadExtensions(TR::OptimizationManager *);0;TR;LoadExtensions;0;0
operator=;operator=(class TR_LoadExtensions &&);0;TR;LoadExtensions;1;0
operator=;operator=(const class TR_LoadExtensions &);0;TR;LoadExtensions;1;0
RegisterPair;RegisterPair(const class OMR::RegisterPair &);1;OMR;RegisterPair;1;0
RegisterPair;RegisterPair(class OMR::RegisterPair &&);0;OMR;RegisterPair;1;0
RegisterPair;RegisterPair(TR::Register *,TR::Register *);0;OMR;RegisterPair;0;0
RegisterPair;RegisterPair(enum TR_RegisterKinds);0;OMR;RegisterPair;0;0
RegisterPair;RegisterPair();0;OMR;RegisterPair;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Register;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;Register;0;0
operator=;operator=(class OMR::RegisterPair &&);0;OMR;RegisterPair;1;0
operator=;operator=(const class OMR::RegisterPair &);0;OMR;RegisterPair;1;0
operator=;operator=(class TR::RegisterPair &&);0;TR;RegisterPair;1;0
operator=;operator=(const class TR::RegisterPair &);0;TR;RegisterPair;1;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CodeGenerator;0;0
getOwningMethodSymbol;getOwningMethodSymbol(class mcount_t);1;OMR;Compilation;0;0
getOwningMethodSymbol;getOwningMethodSymbol(class TR_OpaqueMethodBlock *);0;OMR;Compilation;0;0
incInlineDepth;incInlineDepth(TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,int32_t,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *);1;OMR;Compilation;0;0
incInlineDepth;incInlineDepth(class TR_OpaqueMethodBlock *,TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *);0;OMR;Compilation;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);1;OMR;Node;0;0
TR_HashValueNumberInfo;TR_HashValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);1;TR;HashValueNumberInfo;0;0
TR_HashValueNumberInfo;TR_HashValueNumberInfo(class TR_HashValueNumberInfo &&);0;TR;HashValueNumberInfo;1;0
TR_ValueNumberInfo;TR_ValueNumberInfo(class TR_ValueNumberInfo &);1;TR;ValueNumberInfo;1;0
TR_ValueNumberInfo;TR_ValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);0;TR;ValueNumberInfo;0;0
TR_ValueNumberInfo;TR_ValueNumberInfo(TR::Compilation *);0;TR;ValueNumberInfo;0;0
allocateValueNumber;allocateValueNumber(TR::Node *);1;TR;ValueNumberInfo;0;1
allocateValueNumber;allocateValueNumber(TR::Node *,vcount_t);0;TR;ValueNumberInfo;0;1
operator=;operator=(const class TR_ValueNumberInfo &);1;TR;ValueNumberInfo;1;0
operator=;operator=(class TR_HashValueNumberInfo &&);0;TR;HashValueNumberInfo;1;0
operator=;operator=(const class TR_HashValueNumberInfo &);0;TR;HashValueNumberInfo;1;0
operator<;operator<(const TR::DataType &);1;OMR;DataType;0;0
operator<;operator<(TR::DataTypes);0;OMR;DataType;0;0
contains;contains(uint32_t,TR::Compilation *);1;TR;AliasSetInterface;0;0
contains;contains(TR::SymbolReference *,TR::Compilation *);0;TR;AliasSetInterface;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
isOSRRelatedNode;isOSRRelatedNode(TR::Node *);1;OMR;ResolvedMethodSymbol;0;0
isOSRRelatedNode;isOSRRelatedNode(TR::Node *,TR_ByteCodeInfo &);0;OMR;ResolvedMethodSymbol;0;0
CodeGenerator;CodeGenerator(const class TR::CodeGenerator &);0;TR;CodeGenerator;1;0
CodeGenerator;CodeGenerator(class TR::CodeGenerator &&);0;TR;CodeGenerator;1;0
operator delete;operator delete(void *,size_t);1;OMR;Compilation;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Compilation;0;0
IL;IL();0;OMR;IL;1;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Recompilation;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Recompilation;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;Recompilation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;Recompilation;0;0
localName;localName(uint32_t,uint32_t,int32_t &,class TR_Memory *);1;TR;ResolvedMethod;0;1
localName;localName(uint32_t,uint32_t,class TR_Memory *);0;TR;ResolvedMethod;0;1
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReference;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;SymbolReference;0;0
SymbolReferenceTable;SymbolReferenceTable(class TR::SymbolReferenceTable &&);0;TR;SymbolReferenceTable;1;0
SymbolReferenceTable;SymbolReferenceTable(const class TR::SymbolReferenceTable &);0;TR;SymbolReferenceTable;1;0
operator delete;operator delete(void *,size_t);1;OMR;TransformUtil;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;TransformUtil;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;TransformUtil;0;0
TR_RegionStructure;TR_RegionStructure(TR::Compilation *,int32_t);1;TR;RegionStructure;0;0
TR_RegionStructure;TR_RegionStructure(class TR_RegionStructure &&);0;TR;RegionStructure;1;0
addExitEdge;addExitEdge(class TR_StructureSubGraphNode *,int32_t,_Bool,TR::CFGEdge *);1;TR;RegionStructure;0;0
addExitEdge;addExitEdge(TR::CFGEdge *);0;TR;RegionStructure;0;0
addInductionVariable;addInductionVariable(class TR_BasicInductionVariable *);1;TR;RegionStructure;0;0
addInductionVariable;addInductionVariable(class TR_InductionVariable *);0;TR;RegionStructure;0;0
TR_RegisterCandidate;TR_RegisterCandidate(TR::SymbolReference *,TR::Region &);1;TR;RegisterCandidate;0;0
TR_RegisterCandidate;TR_RegisterCandidate(class TR_RegisterCandidate &&);0;TR;RegisterCandidate;1;0
TR_StructureSubGraphNode;TR_StructureSubGraphNode(class TR_Structure *);1;TR;StructureSubGraphNode;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Optimizer;0;0
create;create(TR::Compilation *,TR::Node *,TR::TreeTop *,TR::TreeTop *);1;OMR;TreeTop;0;0
create;create(TR::Compilation *);0;OMR;TreeTop;0;0
CPU;CPU(const class OMR::CPU &);1;OMR;CPU;1;0
CPU;CPU(class OMR::CPU &&);0;OMR;CPU;1;0
operator=;operator=(const class OMR::CPU &);1;OMR;CPU;1;0
operator=;operator=(class OMR::CPU &&);0;OMR;CPU;1;0
DataType;DataType(TR::DataTypes);1;OMR;DataType;0;0
DataType;DataType(class OMR::DataType &&);0;OMR;DataType;1;0
getArrayElementWidthInBytes;getArrayElementWidthInBytes(TR::Compilation *,uintptrj_t);1;OMR;ObjectModel;0;0
getArrayElementWidthInBytes;getArrayElementWidthInBytes(TR::DataType);0;OMR;ObjectModel;0;0
ClassEnv;ClassEnv();1;OMR;ClassEnv;1;0
VMEnv;VMEnv(class OMR::VMEnv &&);1;OMR;VMEnv;1;0
VMEnv;VMEnv();0;OMR;VMEnv;1;0
getUSecClock;getUSecClock(TR::Compilation *);1;OMR;VMEnv;0;0
getUSecClock;getUSecClock();0;OMR;VMEnv;0;0
operator=;operator=(const class OMR::DebugEnv &);1;OMR;DebugEnv;1;0
operator=;operator=(class OMR::DebugEnv &&);0;OMR;DebugEnv;1;0
SegmentAllocator;SegmentAllocator(const class TR::SegmentAllocator &);1;TR;SegmentAllocator;0;0
SegmentAllocator;SegmentAllocator(size_t);0;TR;SegmentAllocator;0;0
SegmentProvider;SegmentProvider(const class TR::SegmentProvider &);1;TR;SegmentProvider;0;0
SegmentProvider;SegmentProvider(size_t);0;TR;SegmentProvider;0;0
SystemSegmentProvider;SystemSegmentProvider(size_t,TR::RawAllocator);1;OMR;SystemSegmentProvider;0;0
SystemSegmentProvider;SystemSegmentProvider(const class OMR::SystemSegmentProvider &);0;OMR;SystemSegmentProvider;1;0
operator=;operator=(const class TR::SegmentProvider &);1;TR;SegmentProvider;1;0
operator=;operator=(const class TR::SegmentAllocator &);0;TR;SegmentAllocator;1;0
operator=;operator=(const class OMR::SystemSegmentProvider &);0;OMR;SystemSegmentProvider;1;0
PersistentInfo;PersistentInfo(const class OMR::PersistentInfo &);1;OMR;PersistentInfo;1;0
GlobalSingletonAllocator;GlobalSingletonAllocator(const class TR::GlobalSingletonAllocator &);1;TR;GlobalSingletonAllocator;1;0
GlobalSingletonAllocator;GlobalSingletonAllocator(const GlobalBaseAllocator &);0;TR;GlobalSingletonAllocator;0;0
TRPersistentMemoryAllocator;TRPersistentMemoryAllocator(const class TRPersistentMemoryAllocator &);1;TR;PersistentMemoryAllocator;0;0
TRPersistentMemoryAllocator;TRPersistentMemoryAllocator(class TR_Memory *);0;TR;PersistentMemoryAllocator;0;0
TR_Memory;TR_Memory(const class TR_Memory &);1;TR;Memory;1;0
TR_Memory;TR_Memory(class TR_Memory &&);0;TR;Memory;1;0
operator delete;operator delete(void *,size_t);1;OMR;Machine;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Machine;0;0
DebugCounterBase;DebugCounterBase(class TR::DebugCounterBase &&);1;TR;DebugCounterBase;1;0
DebugCounterBase;DebugCounterBase(const class TR::DebugCounterBase &);0;TR;DebugCounterBase;1;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;DebugCounter;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;DebugCounter;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;DebugCounter;0;0
operator new;operator new(size_t,TR::Region &);0;TR;DebugCounter;0;0
operator=;operator=(class TR::DebugCounterBase &&);1;TR;DebugCounterBase;1;0
operator=;operator=(const class TR::DebugCounterBase &);0;TR;DebugCounterBase;1;0
prependDebugCounter;prependDebugCounter(TR::Compilation *,const char *,TR::TreeTop *,TR::Node *,int8_t);1;TR;DebugCounter;0;0
prependDebugCounter;prependDebugCounter(TR::Compilation *,const char *,TR::TreeTop *,int32_t,int8_t);0;TR;DebugCounter;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;DebugCounterAggregation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;DebugCounterAggregation;0;0
MonitorTable;MonitorTable(const class OMR::MonitorTable &);1;OMR;MonitorTable;1;0
MonitorTable;MonitorTable(class OMR::MonitorTable &&);0;OMR;MonitorTable;1;0
create;create(TR::ILOpCodes,uint16_t);1;OMR;Node;0;0
TR_MemoryAllocationType;TR_MemoryAllocationType(class TR_MemoryAllocationType &&);1;TR;MemoryAllocationType;1;0
TR_MemoryAllocationType;TR_MemoryAllocationType(const class TR_MemoryAllocationType &);0;TR;MemoryAllocationType;1;0
TR_PersistentMemory;TR_PersistentMemory(const class TR_PersistentMemory &);0;TR;PersistentMemory;1;0
TreeTop;TreeTop(class TR::TreeTop &&);0;TR;TreeTop;1;0
TreeTop;TreeTop(const class TR::TreeTop &);0;TR;TreeTop;1;0
operator=;operator=(TR::DataTypes);1;OMR;DataType;0;0
TR_CallStackIterator;TR_CallStackIterator(class TR_CallStackIterator &&);1;TR;CallStackIterator;1;0
TR_CallStackIterator;TR_CallStackIterator(const class TR_CallStackIterator &);0;TR;CallStackIterator;1;0
TR_CallStackIterator;TR_CallStackIterator();0;TR;CallStackIterator;0;0
operator=;operator=(class TR_CallStackIterator &&);1;TR;CallStackIterator;1;0
operator=;operator=(const class TR_CallStackIterator &);0;TR;CallStackIterator;1;0
operator=;operator=(class TR_LinuxCallStackIterator &&);0;TR;LinuxCallStackIterator;1;0
operator=;operator=(const class TR_LinuxCallStackIterator &);0;TR;LinuxCallStackIterator;1;0
__pbase_type_info;__pbase_type_info(const class __cxxabiv1::__pbase_type_info &);0;__cxxabiv1;__pbase_type_info;0;0
__pointer_to_member_type_info;__pointer_to_member_type_info(const class __cxxabiv1::__pointer_to_member_type_info &);0;__cxxabiv1;__pointer_to_member_type_info;0;0
operator=;operator=(const class __cxxabiv1::__pbase_type_info &);1;__cxxabiv1;__pbase_type_info;0;0
operator=;operator=(const class __cxxabiv1::__pointer_to_member_type_info &);0;__cxxabiv1;__pointer_to_member_type_info;0;0
operator=;operator=(const class __cxxabiv1::__pointer_type_info &);0;__cxxabiv1;__pointer_type_info;1;0
__class_type_info;__class_type_info(const class __cxxabiv1::__class_type_info &);1;__cxxabiv1;__class_type_info;1;0
__class_type_info;__class_type_info(const char *);0;__cxxabiv1;__class_type_info;0;0
__do_upcast;__do_upcast(const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__upcast_result &__restrict);1;__cxxabiv1;__class_type_info;0;1
__do_upcast;__do_upcast(const class __cxxabiv1::__class_type_info *,void **);0;__cxxabiv1;__class_type_info;0;1
__si_class_type_info;__si_class_type_info(const char *,const class __cxxabiv1::__class_type_info *);1;__cxxabiv1;__si_class_type_info;0;0
__si_class_type_info;__si_class_type_info(const class __cxxabiv1::__si_class_type_info &);0;__cxxabiv1;__si_class_type_info;0;0
operator=;operator=(const class __cxxabiv1::__class_type_info &);1;__cxxabiv1;__class_type_info;1;0
operator=;operator=(const class __cxxabiv1::__si_class_type_info &);0;__cxxabiv1;__si_class_type_info;0;0
operator=;operator=(const class __cxxabiv1::__vmi_class_type_info &);0;__cxxabiv1;__vmi_class_type_info;1;0
Block;Block(class TR_Memory *);1;OMR;Block;0;0
AutomaticSymbol;AutomaticSymbol(const class OMR::AutomaticSymbol &);1;OMR;AutomaticSymbol;1;0
AutomaticSymbol;AutomaticSymbol(class OMR::AutomaticSymbol &&);0;OMR;AutomaticSymbol;1;0
Register;Register(const class OMR::Register &);1;OMR;Register;1;0
Register;Register(class OMR::Register &&);0;OMR;Register;1;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Register;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;Register;0;0
Machine;Machine(const class OMR::Machine &);1;OMR;Machine;1;0
Machine;Machine(class OMR::Machine &&);0;OMR;Machine;1;0
getLastGlobalRegisterNumber;getLastGlobalRegisterNumber();1;OMR;Machine;0;0
getLastGlobalRegisterNumber;getLastGlobalRegisterNumber(enum TR_RegisterKinds);0;OMR;Machine;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Machine;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;Machine;0;0
generateDebugCounter;generateDebugCounter(const char *,TR::RegisterDependencyConditions &,int32_t,int8_t,int32_t,TR::Instruction *);1;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *);1;OMR;CodeGenerator;0;0
Recompilation;Recompilation(TR::Compilation *);1;OMR;Recompilation;0;0
Recompilation;Recompilation(const class OMR::Recompilation &);0;OMR;Recompilation;1;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;Recompilation;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;Recompilation;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;Recompilation;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;VPConstraint;0;0
TR_LinuxCallStackIterator;TR_LinuxCallStackIterator(const class TR_LinuxCallStackIterator &);1;TR;LinuxCallStackIterator;1;0
TR_LinuxCallStackIterator;TR_LinuxCallStackIterator(class TR_LinuxCallStackIterator &&);0;TR;LinuxCallStackIterator;1;0
TR_LinuxCallStackIterator;TR_LinuxCallStackIterator();0;TR;LinuxCallStackIterator;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Register;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;Register;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;Register;0;0
DebugCounter;DebugCounter(class TR::DebugCounter &&);1;TR;DebugCounter;1;0
DebugCounter;DebugCounter(const class TR::DebugCounter &);0;TR;DebugCounter;1;0
DebugCounter;DebugCounter(const char *,int8_t,class TR::DebugCounter *,int8_t);0;TR;DebugCounter;0;0
DebugCounterAggregation;DebugCounterAggregation(const class TR::DebugCounterAggregation &);1;TR;DebugCounterAggregation;1;0
DebugCounterAggregation;DebugCounterAggregation(class TR::DebugCounterAggregation &&);0;TR;DebugCounterAggregation;1;0
DebugCounterAggregation;DebugCounterAggregation(class TR_Memory *);0;TR;DebugCounterAggregation;0;0
Node;Node(TR::Node *,TR::ILOpCodes,uint16_t);1;OMR;Node;0;0
Options;Options(const class OMR::Options &);1;OMR;Options;1;0
Options;Options(class OMR::Options &&);0;OMR;Options;1;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Options;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;Options;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Options;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Optimizer;0;0
VPConstraint;VPConstraint(const class TR::VPConstraint &);1;TR;VPConstraint;1;0
VPConstraint;VPConstraint(class TR::VPConstraint &&);0;TR;VPConstraint;1;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
print;print(OMR::ValuePropagation *);1;TR;VPConstraint;0;0
print;print(TR::Compilation *,TR::FILE *,int32_t);0;TR;VPConstraint;0;1
TR_BitVectorCursor;TR_BitVectorCursor(const class TR_BitVectorCursor &);1;TR;BitVectorCursor;1;0
TR_BitVectorCursor;TR_BitVectorCursor(class TR_BitVector &);0;TR;BitVectorCursor;0;0
TR_BitVectorCursor;TR_BitVectorCursor(class TR_BitVectorCursor &&);0;TR;BitVectorCursor;1;0
TR_AsyncCheckInsertion;TR_AsyncCheckInsertion(class TR_AsyncCheckInsertion &&);1;TR;AsyncCheckInsertion;1;0
TR_AsyncCheckInsertion;TR_AsyncCheckInsertion(const class TR_AsyncCheckInsertion &);0;TR;AsyncCheckInsertion;1;0
TR_AsyncCheckInsertion;TR_AsyncCheckInsertion(TR::OptimizationManager *);0;TR;AsyncCheckInsertion;0;0
operator=;operator=(const class TR_AsyncCheckInsertion &);0;TR;AsyncCheckInsertion;1;0
operator=;operator=(class TR_AsyncCheckInsertion &&);0;TR;AsyncCheckInsertion;1;0
operator delete;operator delete(void *,TR::Region &);1;OMR;CFG;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;CFG;0;0
Recompilation;Recompilation(class OMR::Recompilation &&);1;OMR;Recompilation;1;0
operator delete;operator delete(void *,TR::Region &);1;OMR;AliasBuilder;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;AliasBuilder;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;AliasBuilder;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;AliasBuilder;0;0
TR_BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(class TR_BackwardDFSetAnalysis<class TR_SingleBitContainer *> &&);1;TR;BackwardDFSetAnalysis;1;0
TR_BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(const class TR_BackwardDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;BackwardDFSetAnalysis;1;0
TR_BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;BackwardDFSetAnalysis;0;0
TR_BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(const class TR_BackwardDFSetAnalysis<class TR_BitVector *> &);0;TR;BackwardDFSetAnalysis;1;0
TR_BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(class TR_BackwardDFSetAnalysis<class TR_BitVector *> &&);0;TR;BackwardDFSetAnalysis;1;0
TR_DataFlowAnalysis;TR_DataFlowAnalysis(const class TR_DataFlowAnalysis &);1;TR;DataFlowAnalysis;1;0
TR_DataFlowAnalysis;TR_DataFlowAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;DataFlowAnalysis;0;0
allocateBlockInfoContainer;allocateBlockInfoContainer(Container **,_Bool,_Bool);1;TR;BasicDFSetAnalysis;0;1
allocateBlockInfoContainer;allocateBlockInfoContainer(Container **,Container *);0;TR;BasicDFSetAnalysis;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_SingleBitContainer *);1;TR;BackwardDFSetAnalysis;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,Container *);0;TR;BackwardDFSetAnalysis;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;BackwardDFSetAnalysis;0;1
compose;compose(Container *,Container *);1;TR;BasicDFSetAnalysis;0;1
compose;compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;BackwardDFSetAnalysis;0;1
compose;compose(class TR_BitVector *,class TR_BitVector *);0;TR;BackwardDFSetAnalysis;0;1
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<type-parameter-0-0 *>::ExtraAnalysisInfo *,class TR_RegionStructure *);1;TR;BasicDFSetAnalysis;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<type-parameter-0-0 *>::ExtraAnalysisInfo *,TR::Block *);0;TR;BasicDFSetAnalysis;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<type-parameter-0-0 *>::ExtraAnalysisInfo *,class TR_Structure *);0;TR;BasicDFSetAnalysis;0;0
initializeGenAndKillSetInfo;initializeGenAndKillSetInfo();1;TR;BasicDFSetAnalysis;0;1
initializeGenAndKillSetInfo;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &,_Bool);0;TR;BackwardDFSetAnalysis;0;1
initializeInfo;initializeInfo(Container *);1;TR;BasicDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_SingleBitContainer *);0;TR;BackwardDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_BitVector *);0;TR;BackwardDFSetAnalysis;0;1
inverseCompose;inverseCompose(Container *,Container *);1;TR;BasicDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;BackwardDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_BitVector *,class TR_BitVector *);0;TR;BackwardDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(Container *);1;TR;BasicDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_BitVector *);0;TR;BackwardDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_SingleBitContainer *);0;TR;BackwardDFSetAnalysis;0;1
operator=;operator=(const class TR_DataFlowAnalysis &);1;TR;DataFlowAnalysis;1;0
operator=;operator=(const class TR_BackwardDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;BackwardDFSetAnalysis;1;0
operator=;operator=(class TR_BackwardDFSetAnalysis<class TR_SingleBitContainer *> &&);0;TR;BackwardDFSetAnalysis;1;0
operator=;operator=(const class TR_BackwardDFSetAnalysis<class TR_BitVector *> &);0;TR;BackwardDFSetAnalysis;1;0
operator=;operator=(class TR_BackwardDFSetAnalysis<class TR_BitVector *> &&);0;TR;BackwardDFSetAnalysis;1;0
operator=;operator=(class TR_BackwardIntersectionBitVectorAnalysis &&);0;TR;BackwardIntersectionBitVectorAnalysis;1;0
operator=;operator=(const class TR_BackwardIntersectionBitVectorAnalysis &);0;TR;BackwardIntersectionBitVectorAnalysis;1;0
operator=;operator=(const class TR_GlobalAnticipatability &);0;TR;GlobalAnticipatability;1;0
operator=;operator=(class TR_GlobalAnticipatability &&);0;TR;GlobalAnticipatability;1;0
operator=;operator=(class TR_BackwardUnionBitVectorAnalysis &&);0;TR;BackwardUnionBitVectorAnalysis;1;0
operator=;operator=(const class TR_BackwardUnionBitVectorAnalysis &);0;TR;BackwardUnionBitVectorAnalysis;1;0
operator=;operator=(const class TR_Liveness &);0;TR;Liveness;1;0
operator=;operator=(class TR_Liveness &&);0;TR;Liveness;1;0
operator=;operator=(const class TR_BackwardUnionSingleBitContainerAnalysis &);0;TR;BackwardUnionSingleBitContainerAnalysis;1;0
operator=;operator=(class TR_BackwardUnionSingleBitContainerAnalysis &&);0;TR;BackwardUnionSingleBitContainerAnalysis;1;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Structure;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Structure;0;0
operator=;operator=(const class TR_Structure &);1;TR;Structure;1;0
operator=;operator=(class TR_Structure &&);0;TR;Structure;1;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,Container *);1;TR;ForwardDFSetAnalysis;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,ContainerType *);0;TR;Delayedness;0;1
compose;compose(class TR_BitVector *,class TR_BitVector *);0;TR;IntersectionBitVectorAnalysis;0;1
initializeGenAndKillSetInfo;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &);0;TR;ForwardDFSetAnalysis;0;1
operator=;operator=(const class TR_IntersectionBitVectorAnalysis &);0;TR;IntersectionBitVectorAnalysis;1;0
operator=;operator=(class TR_IntersectionBitVectorAnalysis &&);0;TR;IntersectionBitVectorAnalysis;1;0
operator=;operator=(class TR_Delayedness &&);0;TR;Delayedness;1;0
operator=;operator=(const class TR_Delayedness &);0;TR;Delayedness;1;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;Earliestness;0;1
operator=;operator=(class TR_UnionBitVectorAnalysis &&);0;TR;UnionBitVectorAnalysis;1;0
operator=;operator=(const class TR_UnionBitVectorAnalysis &);0;TR;UnionBitVectorAnalysis;1;0
operator=;operator=(const class TR_Earliestness &);0;TR;Earliestness;1;0
operator=;operator=(class TR_Earliestness &&);0;TR;Earliestness;1;0
analyzeNode;analyzeNode(TR::Node *,_Bool,int32_t,TR::Node *);0;TR;FlowSensitiveEscapeAnalysis;0;1
operator=;operator=(const class TR_FlowSensitiveEscapeAnalysis &);0;TR;FlowSensitiveEscapeAnalysis;1;0
operator=;operator=(class TR_FlowSensitiveEscapeAnalysis &&);0;TR;FlowSensitiveEscapeAnalysis;1;0
operator=;operator=(const class TR_Isolatedness &);0;TR;Isolatedness;1;0
operator=;operator=(class TR_Isolatedness &&);0;TR;Isolatedness;1;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,ContainerType *);0;TR;Latestness;0;1
operator=;operator=(class TR_Latestness &&);0;TR;Latestness;1;0
operator=;operator=(const class TR_Latestness &);0;TR;Latestness;1;0
operator=;operator=(class TR_LiveOnAllPaths &&);0;TR;LiveOnAllPaths;1;0
operator=;operator=(const class TR_LiveOnAllPaths &);0;TR;LiveOnAllPaths;1;0
killDownwardExposedExprs;killDownwardExposedExprs(TR::Block *,TR::Node *);1;TR;LocalAnticipatability;0;0
killDownwardExposedExprs;killDownwardExposedExprs(TR::Block *,ContainerType *,TR::Node *);0;TR;LocalAnticipatability;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;LocalAnalysis;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;LocalAnalysis;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator delete;operator delete(void *,size_t);0;TR;LocalAnalysis;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;LocalAnalysis;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;LocalAnalysis;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;LocalAnalysis;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;LocalAnalysis;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;LocalAnalysis;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;LocalAnalysis;0;0
operator new;operator new(size_t,TR::Region &);0;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;LocalAnalysis;0;0
operator=;operator=(class TR_LocalAnalysis &&);1;TR;LocalAnalysis;1;0
operator=;operator=(const class TR_LocalAnalysis &);0;TR;LocalAnalysis;1;0
operator=;operator=(class TR_LocalAnticipatability &&);0;TR;LocalAnticipatability;1;0
operator=;operator=(class TR_LocalTransparency &&);0;TR;LocalTransparency;1;0
operator=;operator=(const class TR_LocalTransparency &);0;TR;LocalTransparency;1;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;LiveVariableInformation;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator delete;operator delete(void *,size_t);0;TR;LiveVariableInformation;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;LiveVariableInformation;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;LiveVariableInformation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;LiveVariableInformation;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;LiveVariableInformation;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,TR::Region &);1;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;LiveVariableInformation;0;0
operator=;operator=(const class TR_LiveVariableInformation &);1;TR;LiveVariableInformation;1;0
operator=;operator=(class TR_LiveVariableInformation &&);0;TR;LiveVariableInformation;1;0
operator=;operator=(const class TR_OSRLiveVariableInformation &);0;TR;OSRLiveVariableInformation;1;0
operator=;operator=(class TR_OSRLiveVariableInformation &&);0;TR;OSRLiveVariableInformation;1;0
TR_PredecessorIterator;TR_PredecessorIterator(const class TR_PredecessorIterator &);1;TR;PredecessorIterator;1;0
TR_PredecessorIterator;TR_PredecessorIterator(class TR_PredecessorIterator &&);0;TR;PredecessorIterator;1;0
operator=;operator=(class TR_ReachingDefinitions &&);0;TR;ReachingDefinitions;1;0
operator=;operator=(const class TR_ReachingDefinitions &);0;TR;ReachingDefinitions;1;0
operator=;operator=(const class TR_RegisterAnticipatability &);0;TR;RegisterAnticipatability;1;0
operator=;operator=(class TR_RegisterAnticipatability &&);0;TR;RegisterAnticipatability;1;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;RegisterAvailability;0;1
operator=;operator=(class TR_RegisterAvailability &&);0;TR;RegisterAvailability;1;0
operator=;operator=(const class TR_RegisterAvailability &);0;TR;RegisterAvailability;1;0
operator=;operator=(class TR_UnionSingleBitContainerAnalysis &&);0;TR;UnionSingleBitContainerAnalysis;1;0
operator=;operator=(const class TR_UnionSingleBitContainerAnalysis &);0;TR;UnionSingleBitContainerAnalysis;1;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
TR_BackwardIntersectionDFSetAnalysis;TR_BackwardIntersectionDFSetAnalysis(const class TR_BackwardIntersectionDFSetAnalysis<class TR_BitVector *> &);1;TR;BackwardIntersectionDFSetAnalysis;1;0
TR_BackwardIntersectionDFSetAnalysis;TR_BackwardIntersectionDFSetAnalysis(class TR_BackwardIntersectionDFSetAnalysis<class TR_BitVector *> &&);0;TR;BackwardIntersectionDFSetAnalysis;1;0
TR_BackwardIntersectionDFSetAnalysis;TR_BackwardIntersectionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;BackwardIntersectionDFSetAnalysis;0;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,Container *);1;TR;BackwardDFSetAnalysis;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;GlobalAnticipatability;0;1
compose;compose(class TR_BitVector *,class TR_BitVector *);0;TR;BackwardIntersectionDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_BitVector *);0;TR;BackwardIntersectionDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_BitVector *,class TR_BitVector *);0;TR;BackwardIntersectionDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_BitVector *);0;TR;BackwardIntersectionDFSetAnalysis;0;1
operator=;operator=(class TR_BackwardIntersectionDFSetAnalysis<class TR_BitVector *> &&);0;TR;BackwardIntersectionDFSetAnalysis;1;0
operator=;operator=(const class TR_BackwardIntersectionDFSetAnalysis<class TR_BitVector *> &);0;TR;BackwardIntersectionDFSetAnalysis;1;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;Liveness;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;LiveOnAllPaths;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;RegisterAnticipatability;0;1
TR_BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(class TR_BackwardUnionDFSetAnalysis<class TR_SingleBitContainer *> &&);1;TR;BackwardUnionDFSetAnalysis;1;0
TR_BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;BackwardUnionDFSetAnalysis;0;0
TR_BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(const class TR_BackwardUnionDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;BackwardUnionDFSetAnalysis;1;0
TR_BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(const class TR_BackwardUnionDFSetAnalysis<class TR_BitVector *> &);0;TR;BackwardUnionDFSetAnalysis;1;0
TR_BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(class TR_BackwardUnionDFSetAnalysis<class TR_BitVector *> &&);0;TR;BackwardUnionDFSetAnalysis;1;0
compose;compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;BackwardUnionDFSetAnalysis;0;1
compose;compose(class TR_BitVector *,class TR_BitVector *);0;TR;BackwardUnionDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_SingleBitContainer *);0;TR;BackwardUnionDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_BitVector *);0;TR;BackwardUnionDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;BackwardUnionDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_BitVector *,class TR_BitVector *);0;TR;BackwardUnionDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_BitVector *);0;TR;BackwardUnionDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_SingleBitContainer *);0;TR;BackwardUnionDFSetAnalysis;0;1
operator=;operator=(const class TR_BackwardUnionDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;BackwardUnionDFSetAnalysis;1;0
operator=;operator=(class TR_BackwardUnionDFSetAnalysis<class TR_SingleBitContainer *> &&);0;TR;BackwardUnionDFSetAnalysis;1;0
operator=;operator=(const class TR_BackwardUnionDFSetAnalysis<class TR_BitVector *> &);0;TR;BackwardUnionDFSetAnalysis;1;0
operator=;operator=(class TR_BackwardUnionDFSetAnalysis<class TR_BitVector *> &&);0;TR;BackwardUnionDFSetAnalysis;1;0
TR_BasicDFSetAnalysis;TR_BasicDFSetAnalysis(const class TR_BasicDFSetAnalysis<class TR_SingleBitContainer *> &);1;TR;BasicDFSetAnalysis;1;0
TR_BasicDFSetAnalysis;TR_BasicDFSetAnalysis(class TR_BasicDFSetAnalysis<class TR_SingleBitContainer *> &&);0;TR;BasicDFSetAnalysis;1;0
TR_BasicDFSetAnalysis;TR_BasicDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;BasicDFSetAnalysis;0;0
TR_BasicDFSetAnalysis;TR_BasicDFSetAnalysis(class TR_BasicDFSetAnalysis<class TR_BitVector *> &&);0;TR;BasicDFSetAnalysis;1;0
TR_BasicDFSetAnalysis;TR_BasicDFSetAnalysis(const class TR_BasicDFSetAnalysis<class TR_BitVector *> &);0;TR;BasicDFSetAnalysis;1;0
allocateBlockInfoContainer;allocateBlockInfoContainer(class TR_SingleBitContainer **,_Bool,_Bool);1;TR;BasicDFSetAnalysis;0;1
allocateBlockInfoContainer;allocateBlockInfoContainer(Container **,_Bool,_Bool);0;TR;BasicDFSetAnalysis;0;1
allocateBlockInfoContainer;allocateBlockInfoContainer(class TR_BitVector **,_Bool,_Bool);0;TR;BasicDFSetAnalysis;0;1
allocateBlockInfoContainer;allocateBlockInfoContainer(class TR_BitVector **,class TR_BitVector *);0;TR;BasicDFSetAnalysis;0;1
allocateBlockInfoContainer;allocateBlockInfoContainer(class TR_SingleBitContainer **,class TR_SingleBitContainer *);0;TR;BasicDFSetAnalysis;0;1
allocateContainer;allocateContainer(class TR_SingleBitContainer **,_Bool,_Bool);1;TR;BasicDFSetAnalysis;0;1
allocateContainer;allocateContainer(Container **,_Bool,_Bool);0;TR;BasicDFSetAnalysis;0;1
allocateContainer;allocateContainer(class TR_BitVector **,_Bool,_Bool);0;TR;BasicDFSetAnalysis;0;1
allocateTempContainer;allocateTempContainer(class TR_SingleBitContainer **,class TR_SingleBitContainer *);1;TR;BasicDFSetAnalysis;0;1
allocateTempContainer;allocateTempContainer(Container **,Container *);0;TR;BasicDFSetAnalysis;0;1
allocateTempContainer;allocateTempContainer(class TR_BitVector **,class TR_BitVector *);0;TR;BasicDFSetAnalysis;0;1
clearAnalysisInfo;clearAnalysisInfo(struct TR_BasicDFSetAnalysis<type-parameter-0-0 *>::ExtraAnalysisInfo *);1;TR;BasicDFSetAnalysis;0;0
clearAnalysisInfo;clearAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_BitVector *>::ExtraAnalysisInfo *);0;TR;BasicDFSetAnalysis;0;0
clearAnalysisInfo;clearAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::ExtraAnalysisInfo *);0;TR;BasicDFSetAnalysis;0;0
compose;compose(class TR_BitVector *,class TR_BitVector *);1;TR;BasicDFSetAnalysis;0;1
compose;compose(Container *,Container *);0;TR;BasicDFSetAnalysis;0;1
compose;compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;BasicDFSetAnalysis;0;1
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_BitVector *>::ExtraAnalysisInfo *,class TR_Structure *);0;TR;BasicDFSetAnalysis;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_BitVector *>::ExtraAnalysisInfo *,class TR_RegionStructure *);0;TR;BasicDFSetAnalysis;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_BitVector *>::ExtraAnalysisInfo *,TR::Block *);0;TR;BasicDFSetAnalysis;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::ExtraAnalysisInfo *,TR::Block *);0;TR;BasicDFSetAnalysis;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::ExtraAnalysisInfo *,class TR_Structure *);0;TR;BasicDFSetAnalysis;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::ExtraAnalysisInfo *,class TR_RegionStructure *);0;TR;BasicDFSetAnalysis;0;0
initializeInfo;initializeInfo(class TR_BitVector *);0;TR;BasicDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_SingleBitContainer *);0;TR;BasicDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_BitVector *,class TR_BitVector *);1;TR;BasicDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;BasicDFSetAnalysis;0;1
inverseCompose;inverseCompose(Container *,Container *);0;TR;BasicDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_BitVector *);1;TR;BasicDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(Container *);0;TR;BasicDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_SingleBitContainer *);0;TR;BasicDFSetAnalysis;0;1
operator=;operator=(class TR_BasicDFSetAnalysis<class TR_SingleBitContainer *> &&);0;TR;BasicDFSetAnalysis;1;0
operator=;operator=(const class TR_BasicDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;BasicDFSetAnalysis;1;0
operator=;operator=(const class TR_BasicDFSetAnalysis<class TR_BitVector *> &);0;TR;BasicDFSetAnalysis;1;0
operator=;operator=(class TR_BasicDFSetAnalysis<class TR_BitVector *> &&);0;TR;BasicDFSetAnalysis;1;0
TR_ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(const class TR_ForwardDFSetAnalysis<class TR_SingleBitContainer *> &);1;TR;ForwardDFSetAnalysis;1;0
TR_ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;ForwardDFSetAnalysis;0;0
TR_ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(class TR_ForwardDFSetAnalysis<class TR_SingleBitContainer *> &&);0;TR;ForwardDFSetAnalysis;1;0
TR_ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(const class TR_ForwardDFSetAnalysis<class TR_BitVector *> &);0;TR;ForwardDFSetAnalysis;1;0
TR_ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(class TR_ForwardDFSetAnalysis<class TR_BitVector *> &&);0;TR;ForwardDFSetAnalysis;1;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_SingleBitContainer *);0;TR;ForwardDFSetAnalysis;0;1
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);0;TR;ForwardDFSetAnalysis;0;1
operator=;operator=(class TR_ForwardDFSetAnalysis<class TR_SingleBitContainer *> &&);0;TR;ForwardDFSetAnalysis;1;0
operator=;operator=(const class TR_ForwardDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;ForwardDFSetAnalysis;1;0
operator=;operator=(class TR_ForwardDFSetAnalysis<class TR_BitVector *> &&);0;TR;ForwardDFSetAnalysis;1;0
operator=;operator=(const class TR_ForwardDFSetAnalysis<class TR_BitVector *> &);0;TR;ForwardDFSetAnalysis;1;0
TR_CatchBlockRemover;TR_CatchBlockRemover(class TR_CatchBlockRemover &&);1;TR;CatchBlockRemover;1;0
TR_CatchBlockRemover;TR_CatchBlockRemover(const class TR_CatchBlockRemover &);0;TR;CatchBlockRemover;1;0
TR_CatchBlockRemover;TR_CatchBlockRemover(TR::OptimizationManager *);0;TR;CatchBlockRemover;0;0
operator=;operator=(const class TR_CatchBlockRemover &);0;TR;CatchBlockRemover;1;0
operator=;operator=(class TR_CatchBlockRemover &&);0;TR;CatchBlockRemover;1;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;CFG;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;CFG;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;CFG;0;0
TR_CFGSimplifier;TR_CFGSimplifier(class TR_CFGSimplifier &&);1;TR;CFGSimplifier;1;0
TR_CFGSimplifier;TR_CFGSimplifier(const class TR_CFGSimplifier &);0;TR;CFGSimplifier;1;0
TR_CFGSimplifier;TR_CFGSimplifier(TR::OptimizationManager *);0;TR;CFGSimplifier;0;0
operator=;operator=(class TR_CFGSimplifier &&);0;TR;CFGSimplifier;1;0
operator=;operator=(const class TR_CFGSimplifier &);0;TR;CFGSimplifier;1;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
TR_CompactLocals;TR_CompactLocals(class TR_CompactLocals &&);1;TR;CompactLocals;1;0
TR_CompactLocals;TR_CompactLocals(const class TR_CompactLocals &);0;TR;CompactLocals;1;0
TR_CompactLocals;TR_CompactLocals(TR::OptimizationManager *);0;TR;CompactLocals;0;0
createInterferenceBetween;createInterferenceBetween(class TR_BitVector *,class TR_BitVector *);1;TR;CompactLocals;0;0
createInterferenceBetween;createInterferenceBetween(class TR_BitVector *);0;TR;CompactLocals;0;0
operator=;operator=(class TR_CompactLocals &&);0;TR;CompactLocals;1;0
operator=;operator=(const class TR_CompactLocals &);0;TR;CompactLocals;1;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Optimizer;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Optimizer;0;0
TR_BackwardUnionBitVectorAnalysis;TR_BackwardUnionBitVectorAnalysis(const class TR_BackwardUnionBitVectorAnalysis &);1;TR;BackwardUnionBitVectorAnalysis;1;0
TR_BackwardUnionBitVectorAnalysis;TR_BackwardUnionBitVectorAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;BackwardUnionBitVectorAnalysis;0;0
TR_BackwardUnionBitVectorAnalysis;TR_BackwardUnionBitVectorAnalysis(class TR_BackwardUnionBitVectorAnalysis &&);0;TR;BackwardUnionBitVectorAnalysis;1;0
TR_Liveness;TR_Liveness(class TR_Liveness &&);1;TR;Liveness;1;0
TR_Liveness;TR_Liveness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool,class TR_LiveVariableInformation *,_Bool,_Bool);0;TR;Liveness;0;0
TR_Liveness;TR_Liveness(const class TR_Liveness &);0;TR;Liveness;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Structure;0;0
operator delete;operator delete(void *,size_t);0;TR;Structure;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;Structure;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Structure;0;0
operator new;operator new(size_t,TR::Region &);1;TR;Structure;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;Structure;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Structure;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;IGBase;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;IGBase;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;IGBase;0;0
operator new;operator new(size_t,TR::Region &);0;TR;IGBase;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;TR;IGBase;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;LocalAnalysis;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;LocalAnalysis;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;LocalAnalysis;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;LocalAnalysis;0;0
operator new;operator new(size_t,TR::Region &);1;TR;LocalAnalysis;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;LocalAnalysis;0;0
TR_CopyPropagation;TR_CopyPropagation(class TR_CopyPropagation &&);1;TR;CopyPropagation;1;0
TR_CopyPropagation;TR_CopyPropagation(const class TR_CopyPropagation &);0;TR;CopyPropagation;1;0
TR_CopyPropagation;TR_CopyPropagation(TR::OptimizationManager *);0;TR;CopyPropagation;0;0
operator=;operator=(class TR_CopyPropagation &&);0;TR;CopyPropagation;1;0
operator=;operator=(const class TR_CopyPropagation &);0;TR;CopyPropagation;1;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Optimizer;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;TransformUtil;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TransformUtil;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;TransformUtil;0;0
TR_DeadStoreElimination;TR_DeadStoreElimination(class TR_DeadStoreElimination &&);1;TR;DeadStoreElimination;1;0
TR_DeadStoreElimination;TR_DeadStoreElimination(const class TR_DeadStoreElimination &);0;TR;DeadStoreElimination;1;0
TR_DeadStoreElimination;TR_DeadStoreElimination(TR::OptimizationManager *);0;TR;DeadStoreElimination;0;0
TR_IsolatedStoreElimination;TR_IsolatedStoreElimination(const class TR_IsolatedStoreElimination &);1;TR;IsolatedStoreElimination;1;0
TR_IsolatedStoreElimination;TR_IsolatedStoreElimination(class TR_IsolatedStoreElimination &&);0;TR;IsolatedStoreElimination;1;0
TR_IsolatedStoreElimination;TR_IsolatedStoreElimination(TR::OptimizationManager *);0;TR;IsolatedStoreElimination;0;0
operator=;operator=(class TR_IsolatedStoreElimination &&);0;TR;IsolatedStoreElimination;1;0
operator=;operator=(const class TR_IsolatedStoreElimination &);0;TR;IsolatedStoreElimination;1;0
operator=;operator=(class TR_DeadStoreElimination &&);0;TR;DeadStoreElimination;1;0
operator=;operator=(const class TR_DeadStoreElimination &);0;TR;DeadStoreElimination;1;0
operator=;operator=(const class TR::BlockIterator &);1;TR;BlockIterator;1;0
operator=;operator=(class TR::BlockIterator &&);0;TR;BlockIterator;1;0
DeadTreesElimination;DeadTreesElimination(const class TR::DeadTreesElimination &);1;TR;DeadTreesElimination;1;0
DeadTreesElimination;DeadTreesElimination(TR::OptimizationManager *);0;TR;DeadTreesElimination;0;0
DeadTreesElimination;DeadTreesElimination(class TR::DeadTreesElimination &&);0;TR;DeadTreesElimination;1;0
operator=;operator=(const class TR::DeadTreesElimination &);0;TR;DeadTreesElimination;1;0
operator=;operator=(class TR::DeadTreesElimination &&);0;TR;DeadTreesElimination;1;0
TreeTopIteratorImpl;TreeTopIteratorImpl(const class TR::TreeTopIteratorImpl &);1;TR;TreeTopIteratorImpl;1;0
TreeTopIteratorImpl;TreeTopIteratorImpl(class TR::TreeTopIteratorImpl &&);0;TR;TreeTopIteratorImpl;1;0
TransformUtil;TransformUtil(class OMR::TransformUtil &&);1;OMR;TransformUtil;1;0
TransformUtil;TransformUtil(const class OMR::TransformUtil &);0;OMR;TransformUtil;1;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;TransformUtil;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;TransformUtil;0;0
TreeTopIterator;TreeTopIterator(class TR::TreeTopIterator &&);1;TR;TreeTopIterator;1;0
TreeTopIterator;TreeTopIterator(TR::TreeTop *,TR::Compilation *,const char *);0;TR;TreeTopIterator;0;0
TreeTopIterator;TreeTopIterator(const class TR::TreeTopIterator &);0;TR;TreeTopIterator;1;0
TR_Delayedness;TR_Delayedness(class TR_Delayedness &&);1;TR;Delayedness;1;0
TR_Delayedness;TR_Delayedness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);0;TR;Delayedness;0;0
TR_Delayedness;TR_Delayedness(const class TR_Delayedness &);0;TR;Delayedness;1;0
TR_IntersectionBitVectorAnalysis;TR_IntersectionBitVectorAnalysis(class TR_IntersectionBitVectorAnalysis &&);1;TR;IntersectionBitVectorAnalysis;1;0
TR_IntersectionBitVectorAnalysis;TR_IntersectionBitVectorAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;IntersectionBitVectorAnalysis;0;0
TR_IntersectionBitVectorAnalysis;TR_IntersectionBitVectorAnalysis(const class TR_IntersectionBitVectorAnalysis &);0;TR;IntersectionBitVectorAnalysis;1;0
TR_Earliestness;TR_Earliestness(class TR_Earliestness &&);1;TR;Earliestness;1;0
TR_Earliestness;TR_Earliestness(const class TR_Earliestness &);0;TR;Earliestness;1;0
TR_Earliestness;TR_Earliestness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);0;TR;Earliestness;0;0
TR_UnionBitVectorAnalysis;TR_UnionBitVectorAnalysis(class TR_UnionBitVectorAnalysis &&);1;TR;UnionBitVectorAnalysis;1;0
TR_UnionBitVectorAnalysis;TR_UnionBitVectorAnalysis(const class TR_UnionBitVectorAnalysis &);0;TR;UnionBitVectorAnalysis;1;0
TR_UnionBitVectorAnalysis;TR_UnionBitVectorAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;UnionBitVectorAnalysis;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;LiveVariableInformation;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;LiveVariableInformation;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;LiveVariableInformation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;LiveVariableInformation;0;0
TR_Dominators;TR_Dominators(class TR_Dominators &&);1;TR;Dominators;1;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;CFG;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;AliasBuilder;0;0
TR_BackwardIntersectionBitVectorAnalysis;TR_BackwardIntersectionBitVectorAnalysis(class TR_BackwardIntersectionBitVectorAnalysis &&);1;TR;BackwardIntersectionBitVectorAnalysis;1;0
TR_BackwardIntersectionBitVectorAnalysis;TR_BackwardIntersectionBitVectorAnalysis(const class TR_BackwardIntersectionBitVectorAnalysis &);0;TR;BackwardIntersectionBitVectorAnalysis;1;0
TR_BackwardIntersectionBitVectorAnalysis;TR_BackwardIntersectionBitVectorAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;BackwardIntersectionBitVectorAnalysis;0;0
TR_GlobalAnticipatability;TR_GlobalAnticipatability(class TR_GlobalAnticipatability &&);1;TR;GlobalAnticipatability;1;0
TR_GlobalAnticipatability;TR_GlobalAnticipatability(const class TR_GlobalAnticipatability &);0;TR;GlobalAnticipatability;1;0
TR_GlobalAnticipatability;TR_GlobalAnticipatability(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);0;TR;GlobalAnticipatability;0;0
TR_LocalAnalysis;TR_LocalAnalysis(const class TR_LocalAnalysis &);1;TR;LocalAnalysis;1;0
TR_LocalAnalysis;TR_LocalAnalysis(class TR_LocalAnalysisInfo &,_Bool);0;TR;LocalAnalysis;0;0
TR_LocalAnalysis;TR_LocalAnalysis(class TR_LocalAnalysis &&);0;TR;LocalAnalysis;1;0
TR_LocalAnticipatability;TR_LocalAnticipatability(class TR_LocalAnticipatability &&);1;TR;LocalAnticipatability;1;0
TR_LocalAnticipatability;TR_LocalAnticipatability(const class TR_LocalAnticipatability &);0;TR;LocalAnticipatability;1;0
TR_LocalAnticipatability;TR_LocalAnticipatability(class TR_LocalAnalysisInfo &,class TR_LocalTransparency *,_Bool);0;TR;LocalAnticipatability;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;LocalAnalysis;0;0
TR_LocalTransparency;TR_LocalTransparency(class TR_LocalTransparency &&);1;TR;LocalTransparency;1;0
TR_LocalTransparency;TR_LocalTransparency(class TR_LocalAnalysisInfo &,_Bool);0;TR;LocalTransparency;0;0
TR_LocalTransparency;TR_LocalTransparency(const class TR_LocalTransparency &);0;TR;LocalTransparency;1;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;LiveVariableInformation;0;0
TR_ExpressionsSimplification;TR_ExpressionsSimplification(const class TR_ExpressionsSimplification &);1;TR;ExpressionsSimplification;1;0
TR_ExpressionsSimplification;TR_ExpressionsSimplification(TR::OptimizationManager *);0;TR;ExpressionsSimplification;0;0
TR_ExpressionsSimplification;TR_ExpressionsSimplification(class TR_ExpressionsSimplification &&);0;TR;ExpressionsSimplification;1;0
findUseInRegion;findUseInRegion(class TR_RegionStructure *,uint16_t,uint16_t);1;TR;ExpressionsSimplification;0;0
findUseInRegion;findUseInRegion(TR::Node *,uint16_t,uint16_t);0;TR;ExpressionsSimplification;0;0
operator=;operator=(class TR_ExpressionsSimplification &&);0;TR;ExpressionsSimplification;1;0
operator=;operator=(const class TR_ExpressionsSimplification &);0;TR;ExpressionsSimplification;1;0
perform;perform();1;OMR;Optimization;0;1
perform;perform(class TR_Structure *);0;TR;ExpressionsSimplification;0;0
removeCandidate;removeCandidate(class TR_RegionStructure *);1;TR;ExpressionsSimplification;0;0
removeCandidate;removeCandidate(TR::Node *,TR::TreeTop *);0;TR;ExpressionsSimplification;0;0
removeEdge;removeEdge(TR::CFGEdge *);1;OMR;CFG;0;0
removeEdge;removeEdge(TR::CFGNode *,TR::CFGNode *);0;OMR;CFG;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;TransformUtil;0;0
TR_PostDominators;TR_PostDominators(TR::Compilation *);1;TR;PostDominators;0;0
TR_PostDominators;TR_PostDominators(const class TR_PostDominators &);0;TR;PostDominators;1;0
TR_PostDominators;TR_PostDominators(class TR_PostDominators &&);0;TR;PostDominators;1;0
TR_Inliner;TR_Inliner(TR::OptimizationManager *);1;TR;Inliner;0;0
TR_Inliner;TR_Inliner(class TR_Inliner &&);0;TR;Inliner;1;0
TR_FieldPrivatizer;TR_FieldPrivatizer(const class TR_FieldPrivatizer &);1;TR;FieldPrivatizer;1;0
TR_FieldPrivatizer;TR_FieldPrivatizer(class TR_FieldPrivatizer &&);0;TR;FieldPrivatizer;1;0
TR_FieldPrivatizer;TR_FieldPrivatizer(TR::OptimizationManager *);0;TR;FieldPrivatizer;0;0
TR_LoopTransformer;TR_LoopTransformer(const class TR_LoopTransformer &);1;TR;LoopTransformer;1;0
TR_LoopTransformer;TR_LoopTransformer(class TR_LoopTransformer &&);0;TR;LoopTransformer;1;0
TR_LoopTransformer;TR_LoopTransformer(TR::OptimizationManager *);0;TR;LoopTransformer;0;0
collectSymbolsWrittenAndReadExactlyOnce;collectSymbolsWrittenAndReadExactlyOnce(class TR_Structure *,vcount_t,struct TR_LoopTransformer::updateInfo_tables &);1;TR;LoopTransformer;0;0
collectSymbolsWrittenAndReadExactlyOnce;collectSymbolsWrittenAndReadExactlyOnce(class TR_Structure *,vcount_t);0;TR;LoopTransformer;0;0
detectFieldsThatCannotBePrivatized;detectFieldsThatCannotBePrivatized(TR::Node *,vcount_t);1;TR;FieldPrivatizer;0;0
detectFieldsThatCannotBePrivatized;detectFieldsThatCannotBePrivatized(class TR_Structure *,vcount_t);0;TR;FieldPrivatizer;0;0
detectWhileLoopsInSubnodesInOrder;detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,class TR_StructureSubGraphNode *,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);1;TR;LoopTransformer;0;0
detectWhileLoopsInSubnodesInOrder;detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);0;TR;LoopTransformer;0;0
operator=;operator=(class TR_LoopTransformer &&);0;TR;LoopTransformer;1;0
operator=;operator=(const class TR_LoopTransformer &);0;TR;LoopTransformer;1;0
operator=;operator=(class TR_FieldPrivatizer &&);0;TR;FieldPrivatizer;1;0
operator=;operator=(const class TR_FieldPrivatizer &);0;TR;FieldPrivatizer;1;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;InlinerTracer;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;InlinerTracer;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;InlinerTracer;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;InlinerTracer;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;LocalAnalysis;0;0
TR_LoopCanonicalizer;TR_LoopCanonicalizer(const class TR_LoopCanonicalizer &);1;TR;LoopCanonicalizer;1;0
TR_LoopCanonicalizer;TR_LoopCanonicalizer(TR::OptimizationManager *);0;TR;LoopCanonicalizer;0;0
TR_LoopCanonicalizer;TR_LoopCanonicalizer(class TR_LoopCanonicalizer &&);0;TR;LoopCanonicalizer;1;0
TR_RedundantInductionVarElimination;TR_RedundantInductionVarElimination(const class TR_RedundantInductionVarElimination &);1;TR;RedundantInductionVarElimination;1;0
TR_RedundantInductionVarElimination;TR_RedundantInductionVarElimination(TR::OptimizationManager *);0;TR;RedundantInductionVarElimination;0;0
TR_RedundantInductionVarElimination;TR_RedundantInductionVarElimination(class TR_RedundantInductionVarElimination &&);0;TR;RedundantInductionVarElimination;1;0
operator=;operator=(class TR_LoopCanonicalizer &&);0;TR;LoopCanonicalizer;1;0
operator=;operator=(const class TR_LoopCanonicalizer &);0;TR;LoopCanonicalizer;1;0
operator=;operator=(class TR_RedundantInductionVarElimination &&);0;TR;RedundantInductionVarElimination;1;0
operator=;operator=(const class TR_RedundantInductionVarElimination &);0;TR;RedundantInductionVarElimination;1;0
TR_LoopInverter;TR_LoopInverter(class TR_LoopInverter &&);1;TR;LoopInverter;1;0
TR_LoopInverter;TR_LoopInverter(const class TR_LoopInverter &);0;TR;LoopInverter;1;0
TR_LoopInverter;TR_LoopInverter(TR::OptimizationManager *);0;TR;LoopInverter;0;0
operator=;operator=(class TR_LoopInverter &&);0;TR;LoopInverter;1;0
operator=;operator=(const class TR_LoopInverter &);0;TR;LoopInverter;1;0
TR_InductionVariableAnalysis;TR_InductionVariableAnalysis(class TR_InductionVariableAnalysis &&);1;TR;InductionVariableAnalysis;1;0
TR_InductionVariableAnalysis;TR_InductionVariableAnalysis(const class TR_InductionVariableAnalysis &);0;TR;InductionVariableAnalysis;1;0
TR_InductionVariableAnalysis;TR_InductionVariableAnalysis(TR::OptimizationManager *);0;TR;InductionVariableAnalysis;0;0
branchContainsInductionVariable;branchContainsInductionVariable(class TR_RegionStructure *,TR::Node *,TR_Array<class TR_BasicInductionVariable *> &);1;TR;InductionVariableAnalysis;0;0
branchContainsInductionVariable;branchContainsInductionVariable(TR::Node *,TR::SymbolReference *,int32_t *);0;TR;InductionVariableAnalysis;0;0
operator=;operator=(class TR_InductionVariableAnalysis &&);0;TR;InductionVariableAnalysis;1;0
operator=;operator=(const class TR_InductionVariableAnalysis &);0;TR;InductionVariableAnalysis;1;0
perform;perform(class TR_RegionStructure *);0;TR;InductionVariableAnalysis;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;SymbolReferenceTable;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;SymbolReferenceTable;0;0
VPIntConstraint;VPIntConstraint(int32_t);1;TR;VPIntConstraint;0;0
VPIntConstraint;VPIntConstraint(class TR::VPIntConstraint &&);0;TR;VPIntConstraint;1;0
getMaxNestingDepth;getMaxNestingDepth(int32_t *,int32_t *);1;TR;Structure;0;1
getMaxNestingDepth;getMaxNestingDepth();0;TR;Structure;0;0
TR_BasicInductionVariable;TR_BasicInductionVariable(class TR_BasicInductionVariable &&);1;TR;BasicInductionVariable;1;0
TR_BasicInductionVariable;TR_BasicInductionVariable(const class TR_BasicInductionVariable &);0;TR;BasicInductionVariable;1;0
TR_BasicInductionVariable;TR_BasicInductionVariable(TR::Compilation *,class TR_BasicInductionVariable *);0;TR;BasicInductionVariable;0;0
TR_BasicInductionVariable;TR_BasicInductionVariable(TR::Compilation *,class TR_RegionStructure *,TR::SymbolReference *);0;TR;BasicInductionVariable;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;BasicInductionVariable;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;BasicInductionVariable;0;0
operator delete;operator delete(void *,size_t);0;TR;BasicInductionVariable;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;BasicInductionVariable;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;BasicInductionVariable;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;BasicInductionVariable;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;BasicInductionVariable;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;BasicInductionVariable;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;BasicInductionVariable;0;0
operator new;operator new(size_t,TR::Region &);0;TR;BasicInductionVariable;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;BasicInductionVariable;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;BasicInductionVariable;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;BasicInductionVariable;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;BasicInductionVariable;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;BasicInductionVariable;0;0
operator=;operator=(const class TR_BasicInductionVariable &);1;TR;BasicInductionVariable;1;0
operator=;operator=(class TR_BasicInductionVariable &&);0;TR;BasicInductionVariable;1;0
operator=;operator=(class TR_DerivedInductionVariable &&);0;TR;DerivedInductionVariable;1;0
operator=;operator=(const class TR_DerivedInductionVariable &);0;TR;DerivedInductionVariable;1;0
TR_GeneralLoopUnroller;TR_GeneralLoopUnroller(class TR_GeneralLoopUnroller &&);1;TR;GeneralLoopUnroller;1;0
TR_GeneralLoopUnroller;TR_GeneralLoopUnroller(TR::OptimizationManager *);0;TR;GeneralLoopUnroller;0;0
TR_GeneralLoopUnroller;TR_GeneralLoopUnroller(const class TR_GeneralLoopUnroller &);0;TR;GeneralLoopUnroller;1;0
branchContainsInductionVariable;branchContainsInductionVariable(class TR_RegionStructure *,TR::Node *,_Bool);1;TR;GeneralLoopUnroller;0;0
branchContainsInductionVariable;branchContainsInductionVariable(TR::Node *,TR::SymbolReference *);0;TR;GeneralLoopUnroller;0;0
operator=;operator=(class TR_GeneralLoopUnroller &&);0;TR;GeneralLoopUnroller;1;0
operator=;operator=(const class TR_GeneralLoopUnroller &);0;TR;GeneralLoopUnroller;1;0
TR_IVTypeTransformer;TR_IVTypeTransformer(const class TR_IVTypeTransformer &);1;TR;IVTypeTransformer;1;0
TR_IVTypeTransformer;TR_IVTypeTransformer(class TR_IVTypeTransformer &&);0;TR;IVTypeTransformer;1;0
TR_IVTypeTransformer;TR_IVTypeTransformer(TR::OptimizationManager *);0;TR;IVTypeTransformer;0;0
operator=;operator=(class TR_IVTypeTransformer &&);0;TR;IVTypeTransformer;1;0
operator=;operator=(const class TR_IVTypeTransformer &);0;TR;IVTypeTransformer;1;0
TR_LoopStrider;TR_LoopStrider(const class TR_LoopStrider &);1;TR;LoopStrider;1;0
TR_LoopStrider;TR_LoopStrider(class TR_LoopStrider &&);0;TR;LoopStrider;1;0
TR_LoopStrider;TR_LoopStrider(TR::OptimizationManager *);0;TR;LoopStrider;0;0
foundLoad;foundLoad(TR::TreeTop *,int32_t,TR::Compilation *);1;TR;LoopStrider;0;0
foundLoad;foundLoad(TR::TreeTop *,TR::Node *,int32_t,vcount_t);0;TR;LoopStrider;0;0
getNewLoopIncrement;getNewLoopIncrement(TR::Node *,int32_t,int32_t);1;TR;LoopStrider;0;0
getNewLoopIncrement;getNewLoopIncrement(class TR_StoreTreeInfo *,int32_t);0;TR;LoopStrider;0;0
isStoreInRequiredForm;isStoreInRequiredForm(int32_t,class TR_Structure *);1;TR;LoopTransformer;0;1
isStoreInRequiredForm;isStoreInRequiredForm(TR::Node *,int32_t,class TR_Structure *);0;TR;LoopStrider;0;0
operator=;operator=(const class TR_LoopStrider &);0;TR;LoopStrider;1;0
operator=;operator=(class TR_LoopStrider &&);0;TR;LoopStrider;1;0
placeNewInductionVariableIncrementTree;placeNewInductionVariableIncrementTree(class TR_BlockStructure *,TR::SymbolReference *,TR::SymbolReference *,int32_t,TR::SymbolReferenceTable *,TR::Node *,TR::Node *,TR::TreeTop *,TR::Node *,_Bool);1;TR;LoopStrider;0;0
placeNewInductionVariableIncrementTree;placeNewInductionVariableIncrementTree(class TR_BlockStructure *,TR::SymbolReference *,TR::SymbolReference *,int32_t,TR::SymbolReferenceTable *,TR::Node *,int32_t);0;TR;LoopStrider;0;0
reassociateAndHoistComputations;reassociateAndHoistComputations(TR::Block *,class TR_Structure *);1;TR;LoopStrider;0;0
reassociateAndHoistComputations;reassociateAndHoistComputations(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t);0;TR;LoopStrider;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;Dominators;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;Dominators;0;0
operator=;operator=(class TR_PrimaryInductionVariable &&);0;TR;PrimaryInductionVariable;1;0
operator=;operator=(const class TR_PrimaryInductionVariable &);0;TR;PrimaryInductionVariable;1;0
TR_RegionStructure;TR_RegionStructure(const class TR_RegionStructure &);1;TR;RegionStructure;1;0
TR_GlobalRegisterAllocator;TR_GlobalRegisterAllocator(TR::OptimizationManager *);1;TR;GlobalRegisterAllocator;0;0
TR_GlobalRegisterAllocator;TR_GlobalRegisterAllocator(const class TR_GlobalRegisterAllocator &);0;TR;GlobalRegisterAllocator;1;0
TR_GlobalRegisterAllocator;TR_GlobalRegisterAllocator(class TR_GlobalRegisterAllocator &&);0;TR;GlobalRegisterAllocator;1;0
assignRegisters;assignRegisters(TR::Block *);1;TR;GlobalRegisterAllocator;0;0
assignRegisters;assignRegisters();0;TR;GlobalRegisterAllocator;0;0
isSymRefAvailable;isSymRefAvailable(TR::SymbolReference *);1;TR;GlobalRegisterAllocator;0;0
isSymRefAvailable;isSymRefAvailable(TR::SymbolReference *,List<TR::Block> *);0;TR;GlobalRegisterAllocator;0;0
operator=;operator=(const class TR_GlobalRegisterAllocator &);0;TR;GlobalRegisterAllocator;1;0
operator=;operator=(class TR_GlobalRegisterAllocator &&);0;TR;GlobalRegisterAllocator;1;0
resolveTypeMismatch;resolveTypeMismatch(TR::Node *,TR::Node *);1;TR;GlobalRegisterAllocator;0;0
resolveTypeMismatch;resolveTypeMismatch(TR::DataType,TR::Node *);0;TR;GlobalRegisterAllocator;0;0
resolveTypeMismatch;resolveTypeMismatch(TR::DataType,TR::Node *,TR::Node *);0;TR;GlobalRegisterAllocator;0;0
tagCandidates;tagCandidates(TR::Block *,_Bool);1;TR;GlobalRegisterAllocator;0;0
tagCandidates;tagCandidates(TR::Block *,uint32_t,_Bool);0;TR;GlobalRegisterAllocator;0;0
TR_LiveRangeSplitter;TR_LiveRangeSplitter(class TR_LiveRangeSplitter &&);1;TR;LiveRangeSplitter;1;0
TR_LiveRangeSplitter;TR_LiveRangeSplitter(const class TR_LiveRangeSplitter &);0;TR;LiveRangeSplitter;1;0
TR_LiveRangeSplitter;TR_LiveRangeSplitter(TR::OptimizationManager *);0;TR;LiveRangeSplitter;0;0
operator=;operator=(class TR_LiveRangeSplitter &&);0;TR;LiveRangeSplitter;1;0
operator=;operator=(const class TR_LiveRangeSplitter &);0;TR;LiveRangeSplitter;1;0
splitLiveRanges;splitLiveRanges();1;TR;LiveRangeSplitter;0;0
splitLiveRanges;splitLiveRanges(class TR_StructureSubGraphNode *);0;TR;LiveRangeSplitter;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;TR;LocalAnalysis;0;0
SuccessorIterator;SuccessorIterator(const class SuccessorIterator &);1;;SuccessorIterator;1;0
SuccessorIterator;SuccessorIterator(class SuccessorIterator &&);0;;SuccessorIterator;1;0
SuccessorIterator;SuccessorIterator();0;;SuccessorIterator;1;0
multipleJumpSuccessorIterator;multipleJumpSuccessorIterator(const class multipleJumpSuccessorIterator &);1;;multipleJumpSuccessorIterator;1;0
multipleJumpSuccessorIterator;multipleJumpSuccessorIterator(TR::Block *);0;;multipleJumpSuccessorIterator;0;0
multipleJumpSuccessorIterator;multipleJumpSuccessorIterator(class multipleJumpSuccessorIterator &&);0;;multipleJumpSuccessorIterator;1;0
operator delete;operator delete(void *,size_t);1;;multipleJumpSuccessorIterator;0;0
operator delete;operator delete(void *,TR::Region &);0;;multipleJumpSuccessorIterator;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;;multipleJumpSuccessorIterator;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;multipleJumpSuccessorIterator;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;multipleJumpSuccessorIterator;0;0
operator delete[];operator delete[](void *,TR::Region &);1;;multipleJumpSuccessorIterator;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;multipleJumpSuccessorIterator;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;multipleJumpSuccessorIterator;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;;multipleJumpSuccessorIterator;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;;multipleJumpSuccessorIterator;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;;multipleJumpSuccessorIterator;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;multipleJumpSuccessorIterator;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;;multipleJumpSuccessorIterator;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;;multipleJumpSuccessorIterator;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;;multipleJumpSuccessorIterator;0;0
operator new;operator new(size_t,TR::Region &);0;;multipleJumpSuccessorIterator;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;;multipleJumpSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;;multipleJumpSuccessorIterator;0;0
operator new[];operator new[](size_t,TR::Region &);0;;multipleJumpSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;multipleJumpSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;multipleJumpSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;;multipleJumpSuccessorIterator;0;0
operator=;operator=(class SuccessorIterator &&);1;;SuccessorIterator;1;0
operator=;operator=(const class SuccessorIterator &);0;;SuccessorIterator;1;0
operator=;operator=(class multipleJumpSuccessorIterator &&);0;;multipleJumpSuccessorIterator;1;0
operator=;operator=(const class multipleJumpSuccessorIterator &);0;;multipleJumpSuccessorIterator;1;0
operator delete;operator delete(void *,size_t);1;;switchSuccessorIterator;0;0
operator delete;operator delete(void *,TR::Region &);0;;switchSuccessorIterator;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;;switchSuccessorIterator;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;switchSuccessorIterator;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;switchSuccessorIterator;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;;switchSuccessorIterator;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;switchSuccessorIterator;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;;switchSuccessorIterator;0;0
operator delete[];operator delete[](void *,TR::Region &);0;;switchSuccessorIterator;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;;switchSuccessorIterator;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;;switchSuccessorIterator;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;switchSuccessorIterator;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;;switchSuccessorIterator;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;;switchSuccessorIterator;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;;switchSuccessorIterator;0;0
operator new;operator new(size_t,TR::Region &);0;;switchSuccessorIterator;0;0
operator new[];operator new[](size_t,TR::Region &);1;;switchSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;;switchSuccessorIterator;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;;switchSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;switchSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;switchSuccessorIterator;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;;switchSuccessorIterator;0;0
operator=;operator=(class switchSuccessorIterator &&);0;;switchSuccessorIterator;1;0
operator=;operator=(const class switchSuccessorIterator &);0;;switchSuccessorIterator;1;0
switchSuccessorIterator;switchSuccessorIterator(TR::Node *);1;;switchSuccessorIterator;0;0
switchSuccessorIterator;switchSuccessorIterator(class switchSuccessorIterator &&);0;;switchSuccessorIterator;1;0
switchSuccessorIterator;switchSuccessorIterator(const class switchSuccessorIterator &);0;;switchSuccessorIterator;1;0
OMR_InlinerPolicy;OMR_InlinerPolicy(const class OMR_InlinerPolicy &);0;;OMR_InlinerPolicy;1;0
getInitialBytecodeSize;getInitialBytecodeSize(class TR_ResolvedMethod *,TR::ResolvedMethodSymbol *,TR::Compilation *);1;;OMR_InlinerPolicy;0;1
getInitialBytecodeSize;getInitialBytecodeSize(TR::ResolvedMethodSymbol *,TR::Compilation *);0;;OMR_InlinerPolicy;0;0
OMR_InlinerHelper;OMR_InlinerHelper();1;;OMR_InlinerHelper;1;0
OMR_InlinerHelper;OMR_InlinerHelper(class OMR_InlinerHelper &&);0;;OMR_InlinerHelper;1;0
OMR_InlinerUtil;OMR_InlinerUtil(const class OMR_InlinerUtil &);1;;OMR_InlinerUtil;1;0
OMR_InlinerUtil;OMR_InlinerUtil(TR::Compilation *);0;;OMR_InlinerUtil;0;0
operator=;operator=(class OMR::ILOpCode &&);1;OMR;ILOpCode;1;0
operator=;operator=(const class OMR::ILOpCode &);0;OMR;ILOpCode;1;0
operator=;operator=(class TR::ILOpCode &&);0;TR;ILOpCode;1;0
operator=;operator=(const class TR::ILOpCode &);0;TR;ILOpCode;1;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(const class TR::IlGeneratorMethodDetails &);0;TR;IlGeneratorMethodDetails;1;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(class TR::IlGeneratorMethodDetails &&);0;TR;IlGeneratorMethodDetails;1;0
TR_DirectCallSite;TR_DirectCallSite(class TR_ResolvedMethod *,TR::TreeTop *,TR::Node *,TR::Node *,class TR_Method *,class TR_OpaqueClassBlock *,int32_t,int32_t,class TR_ResolvedMethod *,TR::ResolvedMethodSymbol *,_Bool,_Bool,TR_ByteCodeInfo &,TR::Compilation *,int32_t,_Bool);1;TR;DirectCallSite;0;0
TR_DirectCallSite;TR_DirectCallSite(class TR_DirectCallSite &&);0;TR;DirectCallSite;1;0
operator=;operator=(class TR_DirectCallSite &&);1;TR;DirectCallSite;1;0
operator=;operator=(const class TR_DirectCallSite &);0;TR;DirectCallSite;1;0
TR_CallStack;TR_CallStack(const class TR_CallStack &);1;TR;CallStack;1;0
TR_CallStack;TR_CallStack(TR::Compilation *,TR::ResolvedMethodSymbol *,class TR_ResolvedMethod *,class TR_CallStack *,int32_t,_Bool);0;TR;CallStack;0;0
makeTempsAvailable;makeTempsAvailable(List<TR::SymbolReference> &,List<TR::SymbolReference> &);1;TR;CallStack;0;0
makeTempsAvailable;makeTempsAvailable(List<TR::SymbolReference> &);0;TR;CallStack;0;0
TR_DumbInliner;TR_DumbInliner(class TR_DumbInliner &&);1;TR;DumbInliner;1;0
TR_DumbInliner;TR_DumbInliner(TR::Optimizer *,TR::Optimization *,uint32_t,uint32_t);0;TR;DumbInliner;0;0
TR_DumbInliner;TR_DumbInliner(const class TR_DumbInliner &);0;TR;DumbInliner;1;0
TR_InlineCall;TR_InlineCall(class TR_InlineCall &&);1;TR;InlineCall;1;0
TR_InlineCall;TR_InlineCall(const class TR_InlineCall &);0;TR;InlineCall;1;0
TR_InlineCall;TR_InlineCall(TR::Optimizer *,TR::Optimization *);0;TR;InlineCall;0;0
TR_InlinerBase;TR_InlinerBase(class TR_InlinerBase &&);1;TR;InlinerBase;1;0
TR_InlinerBase;TR_InlinerBase(const class TR_InlinerBase &);0;TR;InlinerBase;1;0
TR_InlinerBase;TR_InlinerBase(TR::Optimizer *,TR::Optimization *);0;TR;InlinerBase;0;0
TR_InlinerTracer;TR_InlinerTracer(const class TR_InlinerTracer &);1;TR;InlinerTracer;1;0
TR_InlinerTracer;TR_InlinerTracer(class TR_InlinerTracer &&);0;TR;InlinerTracer;1;0
TR_InlinerTracer;TR_InlinerTracer(TR::Compilation *,class TR_FrontEnd *,TR::Optimization *);0;TR;InlinerTracer;0;0
TR_LogTracer;TR_LogTracer(class TR_LogTracer &&);1;TR;LogTracer;1;0
TR_LogTracer;TR_LogTracer(const class TR_LogTracer &);0;TR;LogTracer;1;0
TR_LogTracer;TR_LogTracer(TR::Compilation *,TR::Optimization *);0;TR;LogTracer;0;0
TR_TrivialInliner;TR_TrivialInliner(class TR_TrivialInliner &&);1;TR;TrivialInliner;1;0
TR_TrivialInliner;TR_TrivialInliner(const class TR_TrivialInliner &);0;TR;TrivialInliner;1;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;CFG;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;CFG;0;0
TR_InductionVariableAnalysis;TR_InductionVariableAnalysis(const class TR_InductionVariableAnalysis &);1;TR;InductionVariableAnalysis;1;0
TR_InductionVariableAnalysis;TR_InductionVariableAnalysis(class TR_InductionVariableAnalysis &&);0;TR;InductionVariableAnalysis;1;0
BlockChecklist;BlockChecklist(const class TR::BlockChecklist &);1;TR;BlockChecklist;1;0
NodeIterator;NodeIterator(class TR::NodeIterator &&);1;TR;NodeIterator;1;0
NodeIterator;NodeIterator(const class TR::NodeIterator &);0;TR;NodeIterator;1;0
PostorderNodeIterator;PostorderNodeIterator(const class TR::PostorderNodeIterator &);1;TR;PostorderNodeIterator;1;0
PostorderNodeIterator;PostorderNodeIterator(class TR::PostorderNodeIterator &&);0;TR;PostorderNodeIterator;1;0
VPIntRange;VPIntRange(class TR::VPIntRange &&);1;TR;VPIntRange;1;0
VPIntRange;VPIntRange(const class TR::VPIntRange &);0;TR;VPIntRange;1;0
VPIntRange;VPIntRange(int32_t,int32_t);0;TR;VPIntRange;0;0
VPLongRange;VPLongRange(class TR::VPLongRange &&);1;TR;VPLongRange;1;0
VPLongRange;VPLongRange(const class TR::VPLongRange &);0;TR;VPLongRange;1;0
VPLongRange;VPLongRange(int64_t,int64_t);0;TR;VPLongRange;0;0
TR_DerivedInductionVariable;TR_DerivedInductionVariable(class TR_DerivedInductionVariable &&);1;TR;DerivedInductionVariable;1;0
TR_DerivedInductionVariable;TR_DerivedInductionVariable(const class TR_DerivedInductionVariable &);0;TR;DerivedInductionVariable;1;0
TR_DerivedInductionVariable;TR_DerivedInductionVariable(TR::Compilation *,class TR_BasicInductionVariable *,class TR_PrimaryInductionVariable *);0;TR;DerivedInductionVariable;0;0
TR_InductionVariable;TR_InductionVariable(class TR_InductionVariable &&);0;TR;InductionVariable;1;0
TR_InductionVariable;TR_InductionVariable(const class TR_InductionVariable &);0;TR;InductionVariable;1;0
foundLoad;foundLoad(TR::TreeTop *,TR::Node *,int32_t,vcount_t);1;TR;LoopStrider;0;0
foundLoad;foundLoad(TR::TreeTop *,int32_t,TR::Compilation *);0;TR;LoopStrider;0;0
reassociateAndHoistComputations;reassociateAndHoistComputations(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t);1;TR;LoopStrider;0;0
reassociateAndHoistComputations;reassociateAndHoistComputations(TR::Block *,class TR_Structure *);0;TR;LoopStrider;0;0
TR_PrimaryInductionVariable;TR_PrimaryInductionVariable(class TR_PrimaryInductionVariable &&);1;TR;PrimaryInductionVariable;1;0
TR_PrimaryInductionVariable;TR_PrimaryInductionVariable(class TR_BasicInductionVariable *,TR::Block *,TR::Node *,TR::ILOpCodes,TR::Compilation *,TR::Optimizer *,_Bool,_Bool);0;TR;PrimaryInductionVariable;0;0
TR_PrimaryInductionVariable;TR_PrimaryInductionVariable(const class TR_PrimaryInductionVariable &);0;TR;PrimaryInductionVariable;1;0
TR_IntersectionDFSetAnalysis;TR_IntersectionDFSetAnalysis(class TR_IntersectionDFSetAnalysis<class TR_BitVector *> &&);1;TR;IntersectionDFSetAnalysis;1;0
TR_IntersectionDFSetAnalysis;TR_IntersectionDFSetAnalysis(const class TR_IntersectionDFSetAnalysis<class TR_BitVector *> &);0;TR;IntersectionDFSetAnalysis;1;0
TR_IntersectionDFSetAnalysis;TR_IntersectionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;IntersectionDFSetAnalysis;0;0
compose;compose(class TR_BitVector *,class TR_BitVector *);0;TR;IntersectionDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_BitVector *);0;TR;IntersectionDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_BitVector *,class TR_BitVector *);0;TR;IntersectionDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_BitVector *);0;TR;IntersectionDFSetAnalysis;0;1
operator=;operator=(const class TR_IntersectionDFSetAnalysis<class TR_BitVector *> &);0;TR;IntersectionDFSetAnalysis;1;0
operator=;operator=(class TR_IntersectionDFSetAnalysis<class TR_BitVector *> &&);0;TR;IntersectionDFSetAnalysis;1;0
TR_Isolatedness;TR_Isolatedness(class TR_Isolatedness &&);1;TR;Isolatedness;1;0
TR_Isolatedness;TR_Isolatedness(const class TR_Isolatedness &);0;TR;Isolatedness;1;0
TR_Isolatedness;TR_Isolatedness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);0;TR;Isolatedness;0;0
TR_Latestness;TR_Latestness(class TR_Latestness &&);1;TR;Latestness;1;0
TR_Latestness;TR_Latestness(const class TR_Latestness &);0;TR;Latestness;1;0
TR_Latestness;TR_Latestness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);0;TR;Latestness;0;0
operator=;operator=(class TR_LiveVariableInformation &&);1;TR;LiveVariableInformation;1;0
operator=;operator=(const class TR_LiveVariableInformation &);0;TR;LiveVariableInformation;1;0
TR_LiveOnAllPaths;TR_LiveOnAllPaths(class TR_LiveOnAllPaths &&);1;TR;LiveOnAllPaths;1;0
TR_LiveOnAllPaths;TR_LiveOnAllPaths(const class TR_LiveOnAllPaths &);0;TR;LiveOnAllPaths;1;0
TR_LiveOnAllPaths;TR_LiveOnAllPaths(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_LiveVariableInformation *,_Bool,_Bool);0;TR;LiveOnAllPaths;0;0
TR_LiveVariableInformation;TR_LiveVariableInformation(class TR_LiveVariableInformation &&);1;TR;LiveVariableInformation;1;0
TR_LiveVariableInformation;TR_LiveVariableInformation(const class TR_LiveVariableInformation &);0;TR;LiveVariableInformation;1;0
TR_LiveVariableInformation;TR_LiveVariableInformation(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool,_Bool,_Bool,_Bool);0;TR;LiveVariableInformation;0;0
TR_OSRLiveVariableInformation;TR_OSRLiveVariableInformation(class TR_OSRLiveVariableInformation &&);1;TR;OSRLiveVariableInformation;1;0
TR_OSRLiveVariableInformation;TR_OSRLiveVariableInformation(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool,_Bool,_Bool,_Bool);0;TR;OSRLiveVariableInformation;0;0
TR_OSRLiveVariableInformation;TR_OSRLiveVariableInformation(const class TR_OSRLiveVariableInformation &);0;TR;OSRLiveVariableInformation;1;0
TR_HeapMemory;TR_HeapMemory(const class TR_HeapMemory &);1;TR;HeapMemory;1;0
TR_HeapMemory;TR_HeapMemory(class TR_Memory *);0;TR;HeapMemory;0;0
TR_LocalAnalysis;TR_LocalAnalysis(class TR_LocalAnalysis &&);1;TR;LocalAnalysis;1;0
TR_LocalAnalysis;TR_LocalAnalysis(const class TR_LocalAnalysis &);0;TR;LocalAnalysis;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;LocalAnalysis;0;0
TR_LocalAnticipatability;TR_LocalAnticipatability(class TR_LocalAnalysisInfo &,class TR_LocalTransparency *,_Bool);1;TR;LocalAnticipatability;0;0
TR_LocalAnticipatability;TR_LocalAnticipatability(class TR_LocalAnticipatability &&);0;TR;LocalAnticipatability;1;0
killDownwardExposedExprs;killDownwardExposedExprs(TR::Block *,ContainerType *,TR::Node *);1;TR;LocalAnticipatability;0;0
killDownwardExposedExprs;killDownwardExposedExprs(TR::Block *,TR::Node *);0;TR;LocalAnticipatability;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;LocalAnalysis;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;LocalAnalysis;0;0
TR_LocalLiveRangeReduction;TR_LocalLiveRangeReduction(class TR_LocalLiveRangeReduction &&);1;TR;LocalLiveRangeReduction;1;0
TR_LocalLiveRangeReduction;TR_LocalLiveRangeReduction(const class TR_LocalLiveRangeReduction &);0;TR;LocalLiveRangeReduction;1;0
TR_LocalLiveRangeReduction;TR_LocalLiveRangeReduction(TR::OptimizationManager *);0;TR;LocalLiveRangeReduction;0;0
operator=;operator=(const class TR_LocalLiveRangeReduction &);0;TR;LocalLiveRangeReduction;1;0
operator=;operator=(class TR_LocalLiveRangeReduction &&);0;TR;LocalLiveRangeReduction;1;0
TR_LocalReordering;TR_LocalReordering(class TR_LocalReordering &&);1;TR;LocalReordering;1;0
TR_LocalReordering;TR_LocalReordering(const class TR_LocalReordering &);0;TR;LocalReordering;1;0
TR_LocalReordering;TR_LocalReordering(TR::OptimizationManager *);0;TR;LocalReordering;0;0
operator=;operator=(class TR_LocalReordering &&);0;TR;LocalReordering;1;0
operator=;operator=(const class TR_LocalReordering &);0;TR;LocalReordering;1;0
getNewLoopIncrement;getNewLoopIncrement(class TR_StoreTreeInfo *,int32_t);1;TR;LoopStrider;0;0
getNewLoopIncrement;getNewLoopIncrement(TR::Node *,int32_t,int32_t);0;TR;LoopStrider;0;0
matches;matches(TR::Node *,TR::Node **,TR::Compilation *);1;TR;Pattern;0;0
matches;matches(TR::Node *,class TR_Unification &,TR::Compilation *);0;TR;Pattern;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Pattern;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Pattern;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;Pattern;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Pattern;0;0
operator=;operator=(class TR_Pattern &&);1;TR;Pattern;1;0
operator=;operator=(const class TR_Pattern &);0;TR;Pattern;1;0
TR_ArrayLoop;TR_ArrayLoop(TR::Compilation *,class TR_InductionVariable *,class TR_InductionVariable *);1;TR;ArrayLoop;0;0
TR_ArrayLoop;TR_ArrayLoop(TR::Compilation *,class TR_InductionVariable *);0;TR;ArrayLoop;0;0
TR_ArrayLoop;TR_ArrayLoop(class TR_ArrayLoop &&);0;TR;ArrayLoop;1;0
TR_ArrayLoop;TR_ArrayLoop(const class TR_ArrayLoop &);0;TR;ArrayLoop;1;0
TR_Arraycmp;TR_Arraycmp(class TR_Arraycmp &&);1;TR;Arraycmp;1;0
TR_Arraycmp;TR_Arraycmp(const class TR_Arraycmp &);0;TR;Arraycmp;1;0
TR_Arraycmp;TR_Arraycmp(TR::Compilation *,class TR_InductionVariable *);0;TR;Arraycmp;0;0
TR_Arraycopy;TR_Arraycopy(class TR_Arraycopy &&);1;TR;Arraycopy;1;0
TR_Arraycopy;TR_Arraycopy(TR::Compilation *,class TR_InductionVariable *);0;TR;Arraycopy;0;0
TR_Arraycopy;TR_Arraycopy(const class TR_Arraycopy &);0;TR;Arraycopy;1;0
TR_Arrayset;TR_Arrayset(class TR_Arrayset &&);1;TR;Arrayset;1;0
TR_Arrayset;TR_Arrayset(const class TR_Arrayset &);0;TR;Arrayset;1;0
TR_Arrayset;TR_Arrayset(TR::Compilation *,class TR_InductionVariable *);0;TR;Arrayset;0;0
TR_Arraytranslate;TR_Arraytranslate(const class TR_Arraytranslate &);1;TR;Arraytranslate;1;0
TR_Arraytranslate;TR_Arraytranslate(class TR_Arraytranslate &&);0;TR;Arraytranslate;1;0
TR_Arraytranslate;TR_Arraytranslate(TR::Compilation *,class TR_InductionVariable *,_Bool,_Bool);0;TR;Arraytranslate;0;0
TR_ArraytranslateAndTest;TR_ArraytranslateAndTest(class TR_ArraytranslateAndTest &&);1;TR;ArraytranslateAndTest;1;0
TR_ArraytranslateAndTest;TR_ArraytranslateAndTest(TR::Compilation *,class TR_InductionVariable *);0;TR;ArraytranslateAndTest;0;0
TR_ArraytranslateAndTest;TR_ArraytranslateAndTest(const class TR_ArraytranslateAndTest &);0;TR;ArraytranslateAndTest;1;0
TR_ByteToCharArraycopy;TR_ByteToCharArraycopy(const class TR_ByteToCharArraycopy &);1;TR;ByteToCharArraycopy;1;0
TR_ByteToCharArraycopy;TR_ByteToCharArraycopy(TR::Compilation *,class TR_InductionVariable *,class TR_InductionVariable *,_Bool);0;TR;ByteToCharArraycopy;0;0
TR_ByteToCharArraycopy;TR_ByteToCharArraycopy(class TR_ByteToCharArraycopy &&);0;TR;ByteToCharArraycopy;1;0
TR_CharToByteArraycopy;TR_CharToByteArraycopy(class TR_CharToByteArraycopy &&);1;TR;CharToByteArraycopy;1;0
TR_CharToByteArraycopy;TR_CharToByteArraycopy(const class TR_CharToByteArraycopy &);0;TR;CharToByteArraycopy;1;0
TR_CharToByteArraycopy;TR_CharToByteArraycopy(TR::Compilation *,class TR_InductionVariable *,class TR_InductionVariable *,_Bool);0;TR;CharToByteArraycopy;0;0
TR_AddressTree;TR_AddressTree(class TR_AddressTree &&);1;TR;AddressTree;1;0
TR_AddressTree;TR_AddressTree(const class TR_AddressTree &);0;TR;AddressTree;1;0
TR_AddressTree;TR_AddressTree(enum TR_AllocationKind,TR::Compilation *);0;TR;AddressTree;0;0
TR_LRAddressTree;TR_LRAddressTree(class TR_LRAddressTree &&);1;TR;LRAddressTree;1;0
TR_LRAddressTree;TR_LRAddressTree(const class TR_LRAddressTree &);0;TR;LRAddressTree;1;0
TR_LRAddressTree;TR_LRAddressTree(TR::Compilation *,class TR_InductionVariable *);0;TR;LRAddressTree;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;AddressTree;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;AddressTree;0;0
operator delete;operator delete(void *,size_t);0;TR;AddressTree;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;AddressTree;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;AddressTree;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;AddressTree;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;AddressTree;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;AddressTree;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;AddressTree;0;0
operator new;operator new(size_t,TR::Region &);0;TR;AddressTree;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;AddressTree;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;AddressTree;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;AddressTree;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;AddressTree;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;AddressTree;0;0
operator=;operator=(const class TR_AddressTree &);1;TR;AddressTree;1;0
operator=;operator=(class TR_AddressTree &&);0;TR;AddressTree;1;0
operator=;operator=(const class TR_LRAddressTree &);0;TR;LRAddressTree;1;0
operator=;operator=(class TR_LRAddressTree &&);0;TR;LRAddressTree;1;0
TR_RedundantInductionVarElimination;TR_RedundantInductionVarElimination(TR::OptimizationManager *);1;TR;RedundantInductionVarElimination;0;0
TR_RedundantInductionVarElimination;TR_RedundantInductionVarElimination(const class TR_RedundantInductionVarElimination &);0;TR;RedundantInductionVarElimination;1;0
collectSymbolsWrittenAndReadExactlyOnce;collectSymbolsWrittenAndReadExactlyOnce(class TR_Structure *,vcount_t);1;TR;LoopTransformer;0;0
collectSymbolsWrittenAndReadExactlyOnce;collectSymbolsWrittenAndReadExactlyOnce(class TR_Structure *,vcount_t,struct TR_LoopTransformer::updateInfo_tables &);0;TR;LoopTransformer;0;0
TR_LoopReducer;TR_LoopReducer(const class TR_LoopReducer &);1;TR;LoopReducer;1;0
TR_LoopReducer;TR_LoopReducer(class TR_LoopReducer &&);0;TR;LoopReducer;1;0
TR_LoopReducer;TR_LoopReducer(TR::OptimizationManager *);0;TR;LoopReducer;0;0
operator=;operator=(class TR_LoopReducer &&);0;TR;LoopReducer;1;0
operator=;operator=(const class TR_LoopReducer &);0;TR;LoopReducer;1;0
TR_RangeTranslateTable;TR_RangeTranslateTable(class TR_RangeTranslateTable &&);1;TR;RangeTranslateTable;1;0
TR_RangeTranslateTable;TR_RangeTranslateTable(const class TR_RangeTranslateTable &);0;TR;RangeTranslateTable;1;0
TR_RangeTranslateTable;TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint32_t,uint32_t,uint32_t,uint32_t,uint16_t);0;TR;RangeTranslateTable;0;0
TR_RangeTranslateTable;TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint32_t,uint32_t,uint16_t);0;TR;RangeTranslateTable;0;0
TR_RangeTranslateTable;TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint16_t,uint16_t,uint16_t,uint16_t,uint16_t);0;TR;RangeTranslateTable;0;0
TR_RangeTranslateTable;TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint16_t,uint16_t,uint16_t);0;TR;RangeTranslateTable;0;0
TR_TranslateTable;TR_TranslateTable(const class TR_TranslateTable &);1;TR;TranslateTable;1;0
TR_TranslateTable;TR_TranslateTable(TR::Compilation *);0;TR;TranslateTable;0;0
TR_TranslateTable;TR_TranslateTable(class TR_TranslateTable &&);0;TR;TranslateTable;1;0
createTable;createTable(uint16_t,uint16_t,uint16_t,uint16_t,uint8_t,uint8_t,uint16_t);1;TR;TranslateTable;0;0
createTable;createTable(uint32_t,uint32_t,uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);0;TR;TranslateTable;0;0
createTable;createTable(uint16_t,uint16_t,uint8_t,uint8_t,uint16_t);0;TR;TranslateTable;0;0
createTable;createTable(uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);0;TR;TranslateTable;0;0
matchTable;matchTable(uint8_t,uint8_t,void *);1;TR;TranslateTable;0;0
matchTable;matchTable(uint32_t,uint32_t,uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);0;TR;TranslateTable;0;0
operator delete;operator delete(void *,size_t);1;TR;TranslateTable;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;TranslateTable;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;TranslateTable;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;TranslateTable;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;TranslateTable;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;TranslateTable;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;TranslateTable;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;TranslateTable;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;TranslateTable;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;TranslateTable;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;TranslateTable;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;TranslateTable;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;TranslateTable;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;TranslateTable;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;TranslateTable;0;0
operator new;operator new(size_t,TR::Region &);0;TR;TranslateTable;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;TranslateTable;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;TranslateTable;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;TranslateTable;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;TranslateTable;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;TranslateTable;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;TranslateTable;0;0
TR_SetTranslateTable;TR_SetTranslateTable(TR::Compilation *,uint8_t,uint8_t,void *,int);1;TR;SetTranslateTable;0;0
TR_SetTranslateTable;TR_SetTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint16_t []);0;TR;SetTranslateTable;0;0
TR_SetTranslateTable;TR_SetTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint8_t []);0;TR;SetTranslateTable;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;CFG;0;0
TR_LoopReplicator;TR_LoopReplicator(class TR_LoopReplicator &&);1;TR;LoopReplicator;1;0
TR_LoopReplicator;TR_LoopReplicator(const class TR_LoopReplicator &);0;TR;LoopReplicator;1;0
TR_LoopReplicator;TR_LoopReplicator(TR::OptimizationManager *);0;TR;LoopReplicator;0;0
gatherRestOfLoop;gatherRestOfLoop(class TR_RegionStructure *,TR::Block *,TR_Queue<TR::Block> &);1;TR;LoopReplicator;0;0
gatherRestOfLoop;gatherRestOfLoop(class TR_RegionStructure *,TR_Queue<TR::Block> *);0;TR;LoopReplicator;0;0
heuristics;heuristics(struct TR_LoopReplicator::LoopInfo *);1;TR;LoopReplicator;0;0
heuristics;heuristics(struct TR_LoopReplicator::LoopInfo *,_Bool);0;TR;LoopReplicator;0;0
operator=;operator=(class TR_LoopReplicator &&);0;TR;LoopReplicator;1;0
operator=;operator=(const class TR_LoopReplicator &);0;TR;LoopReplicator;1;0
perform;perform(class TR_Structure *);0;TR;LoopReplicator;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Optimizer;0;0
TR_LoopSpecializer;TR_LoopSpecializer(const class TR_LoopSpecializer &);1;TR;LoopSpecializer;1;0
TR_LoopSpecializer;TR_LoopSpecializer(TR::OptimizationManager *);0;TR;LoopSpecializer;0;0
TR_LoopSpecializer;TR_LoopSpecializer(class TR_LoopSpecializer &&);0;TR;LoopSpecializer;1;0
TR_LoopVersioner;TR_LoopVersioner(const class TR_LoopVersioner &);1;TR;LoopVersioner;1;0
TR_LoopVersioner;TR_LoopVersioner(class TR_LoopVersioner &&);0;TR;LoopVersioner;1;0
TR_LoopVersioner;TR_LoopVersioner(TR::OptimizationManager *,_Bool,_Bool);0;TR;LoopVersioner;0;0
operator=;operator=(const class TR_LoopVersioner &);0;TR;LoopVersioner;1;0
operator=;operator=(class TR_LoopVersioner &&);0;TR;LoopVersioner;1;0
operator=;operator=(class TR_LoopSpecializer &&);0;TR;LoopSpecializer;1;0
operator=;operator=(const class TR_LoopSpecializer &);0;TR;LoopSpecializer;1;0
TR_RegionStructure;TR_RegionStructure(const class TR_RegionStructure &);0;TR;RegionStructure;1;0
LocalCSE;LocalCSE(class OMR::LocalCSE &&);1;OMR;LocalCSE;1;0
LocalCSE;LocalCSE(const class OMR::LocalCSE &);0;OMR;LocalCSE;1;0
LocalCSE;LocalCSE(TR::OptimizationManager *);0;OMR;LocalCSE;0;0
LocalCSE;LocalCSE(class TR::LocalCSE &&);0;TR;LocalCSE;1;0
LocalCSE;LocalCSE(const class TR::LocalCSE &);0;TR;LocalCSE;1;0
killAvailableExpressionsUsingAliases;killAvailableExpressionsUsingAliases(struct TR_NodeKillAliasSetInterface &);1;OMR;LocalCSE;0;0
killAvailableExpressionsUsingAliases;killAvailableExpressionsUsingAliases(class TR_BitVector &);0;OMR;LocalCSE;0;0
operator=;operator=(const class OMR::LocalCSE &);0;OMR;LocalCSE;1;0
operator=;operator=(class OMR::LocalCSE &&);0;OMR;LocalCSE;1;0
operator=;operator=(const class TR::LocalCSE &);0;TR;LocalCSE;1;0
operator=;operator=(class TR::LocalCSE &&);0;TR;LocalCSE;1;0
LocalDeadStoreElimination;LocalDeadStoreElimination(const class TR::LocalDeadStoreElimination &);1;TR;LocalDeadStoreElimination;1;0
LocalDeadStoreElimination;LocalDeadStoreElimination(TR::OptimizationManager *);0;TR;LocalDeadStoreElimination;0;0
LocalDeadStoreElimination;LocalDeadStoreElimination(class TR::LocalDeadStoreElimination &&);0;TR;LocalDeadStoreElimination;1;0
operator=;operator=(const class TR::LocalDeadStoreElimination &);0;TR;LocalDeadStoreElimination;1;0
operator=;operator=(class TR::LocalDeadStoreElimination &&);0;TR;LocalDeadStoreElimination;1;0
TR_ArraysetStoreElimination;TR_ArraysetStoreElimination(const class TR_ArraysetStoreElimination &);1;TR;ArraysetStoreElimination;1;0
TR_ArraysetStoreElimination;TR_ArraysetStoreElimination(class TR_ArraysetStoreElimination &&);0;TR;ArraysetStoreElimination;1;0
TR_ArraysetStoreElimination;TR_ArraysetStoreElimination(TR::OptimizationManager *);0;TR;ArraysetStoreElimination;0;0
operator=;operator=(class TR_ArraysetStoreElimination &&);0;TR;ArraysetStoreElimination;1;0
operator=;operator=(const class TR_ArraysetStoreElimination &);0;TR;ArraysetStoreElimination;1;0
AllBlockIterator;AllBlockIterator(class TR::AllBlockIterator &&);1;TR;AllBlockIterator;1;0
AllBlockIterator;AllBlockIterator(const class TR::AllBlockIterator &);0;TR;AllBlockIterator;1;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;SymbolReference;0;0
TR_BlockManipulator;TR_BlockManipulator(class TR_BlockManipulator &&);1;TR;BlockManipulator;1;0
TR_BlockManipulator;TR_BlockManipulator(const class TR_BlockManipulator &);0;TR;BlockManipulator;1;0
TR_BlockManipulator;TR_BlockManipulator(TR::OptimizationManager *);0;TR;BlockManipulator;0;0
TR_CleanseTrees;TR_CleanseTrees(class TR_CleanseTrees &&);1;TR;CleanseTrees;1;0
TR_CleanseTrees;TR_CleanseTrees(const class TR_CleanseTrees &);0;TR;CleanseTrees;1;0
TR_CleanseTrees;TR_CleanseTrees(TR::OptimizationManager *);0;TR;CleanseTrees;0;0
operator=;operator=(const class TR_BlockManipulator &);0;TR;BlockManipulator;1;0
operator=;operator=(class TR_BlockManipulator &&);0;TR;BlockManipulator;1;0
operator=;operator=(const class TR_CleanseTrees &);0;TR;CleanseTrees;1;0
operator=;operator=(class TR_CleanseTrees &&);0;TR;CleanseTrees;1;0
TR_BlockOrderingOptimization;TR_BlockOrderingOptimization(const class TR_BlockOrderingOptimization &);1;TR;BlockOrderingOptimization;1;0
TR_BlockOrderingOptimization;TR_BlockOrderingOptimization(class TR_BlockOrderingOptimization &&);0;TR;BlockOrderingOptimization;1;0
TR_BlockOrderingOptimization;TR_BlockOrderingOptimization(TR::OptimizationManager *);0;TR;BlockOrderingOptimization;0;0
TR_BlockShuffling;TR_BlockShuffling(class TR_BlockShuffling &&);1;TR;BlockShuffling;1;0
TR_BlockShuffling;TR_BlockShuffling(TR::OptimizationManager *);0;TR;BlockShuffling;0;0
TR_BlockShuffling;TR_BlockShuffling(const class TR_BlockShuffling &);0;TR;BlockShuffling;1;0
operator=;operator=(class TR_BlockOrderingOptimization &&);0;TR;BlockOrderingOptimization;1;0
operator=;operator=(const class TR_BlockOrderingOptimization &);0;TR;BlockOrderingOptimization;1;0
operator=;operator=(class TR_BlockShuffling &&);0;TR;BlockShuffling;1;0
operator=;operator=(const class TR_BlockShuffling &);0;TR;BlockShuffling;1;0
TR_BlockSplitter;TR_BlockSplitter(const class TR_BlockSplitter &);1;TR;BlockSplitter;1;0
TR_BlockSplitter;TR_BlockSplitter(class TR_BlockSplitter &&);0;TR;BlockSplitter;1;0
TR_BlockSplitter;TR_BlockSplitter(TR::OptimizationManager *);0;TR;BlockSplitter;0;0
operator=;operator=(class TR_BlockSplitter &&);0;TR;BlockSplitter;1;0
operator=;operator=(const class TR_BlockSplitter &);0;TR;BlockSplitter;1;0
TR_Array<T>;TR_Array<T>(class TR_Memory *,uint32_t,_Bool,enum TR_AllocationKind);1;TR;Array;0;0
TR_Array<T>;TR_Array<T>();0;TR;Array;0;0
TR_Array<T>;TR_Array<T>(class TR_Memory *,enum TR_AllocationKind,uint32_t,_Bool);0;TR;Array;0;0
TR_Array<T>;TR_Array<T>(class TR_PersistentMemory *,uint32_t,_Bool);0;TR;Array;0;0
TR_Array<T>;TR_Array<T>(const TR_Array<T> &);0;TR;Array;0;0
TR_BinaryHeap;TR_BinaryHeap(class TR_Memory *,uint32_t);1;TR_BlockSplitter;TR_BinaryHeap;0;0
TR_BinaryHeap;TR_BinaryHeap(const class TR_BlockSplitter::TR_BinaryHeap &);0;TR_BlockSplitter;TR_BinaryHeap;1;0
TR_BinaryHeap;TR_BinaryHeap(class TR_BlockSplitter::TR_BinaryHeap &&);0;TR_BlockSplitter;TR_BinaryHeap;1;0
add;add(T);1;TR;Array;0;0
add;add(class TR_BlockSplitter::TR_IndexedBinaryHeapElement *);0;TR_BlockSplitter;TR_BinaryHeap;0;0
init;init(class TR_Memory *,uint32_t,_Bool,enum TR_AllocationKind);1;TR;Array;0;0
init;init(class TR_Memory *,class TR_PersistentMemory *,uint32_t,_Bool,enum TR_AllocationKind);0;TR;Array;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;TR;Array;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;Array;0;0
operator delete;operator delete(void *,size_t);0;TR;Array;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;Array;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Array;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;Array;0;0
operator new;operator new(size_t,TR::Region &);1;TR;Array;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Array;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Array;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Array;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Array;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;Array;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Array;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Array;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Array;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;Array;0;0
operator=;operator=(const TR_Array<T> &);1;TR;Array;0;0
operator=;operator=(class TR_BlockSplitter::TR_BinaryHeap &&);0;TR_BlockSplitter;TR_BinaryHeap;1;0
remove;remove(uint32_t);1;TR;Array;0;0
remove;remove(class TR_BlockSplitter::TR_IndexedBinaryHeapElement *);0;TR_BlockSplitter;TR_BinaryHeap;0;0
TR_CheckcastAndProfiledGuardCoalescer;TR_CheckcastAndProfiledGuardCoalescer(TR::OptimizationManager *);1;TR;CheckcastAndProfiledGuardCoalescer;0;0
TR_CheckcastAndProfiledGuardCoalescer;TR_CheckcastAndProfiledGuardCoalescer(class TR_CheckcastAndProfiledGuardCoalescer &&);0;TR;CheckcastAndProfiledGuardCoalescer;1;0
TR_CheckcastAndProfiledGuardCoalescer;TR_CheckcastAndProfiledGuardCoalescer(const class TR_CheckcastAndProfiledGuardCoalescer &);0;TR;CheckcastAndProfiledGuardCoalescer;1;0
operator=;operator=(const class TR_CheckcastAndProfiledGuardCoalescer &);0;TR;CheckcastAndProfiledGuardCoalescer;1;0
operator=;operator=(class TR_CheckcastAndProfiledGuardCoalescer &&);0;TR;CheckcastAndProfiledGuardCoalescer;1;0
TR_ColdBlockMarker;TR_ColdBlockMarker(class TR_ColdBlockMarker &&);1;TR;ColdBlockMarker;1;0
TR_ColdBlockMarker;TR_ColdBlockMarker(TR::OptimizationManager *);0;TR;ColdBlockMarker;0;0
TR_ColdBlockMarker;TR_ColdBlockMarker(const class TR_ColdBlockMarker &);0;TR;ColdBlockMarker;1;0
TR_ColdBlockOutlining;TR_ColdBlockOutlining(const class TR_ColdBlockOutlining &);1;TR;ColdBlockOutlining;1;0
TR_ColdBlockOutlining;TR_ColdBlockOutlining(class TR_ColdBlockOutlining &&);0;TR;ColdBlockOutlining;1;0
TR_ColdBlockOutlining;TR_ColdBlockOutlining(TR::OptimizationManager *);0;TR;ColdBlockOutlining;0;0
operator=;operator=(class TR_ColdBlockMarker &&);0;TR;ColdBlockMarker;1;0
operator=;operator=(const class TR_ColdBlockMarker &);0;TR;ColdBlockMarker;1;0
operator=;operator=(const class TR_ColdBlockOutlining &);0;TR;ColdBlockOutlining;1;0
operator=;operator=(class TR_ColdBlockOutlining &&);0;TR;ColdBlockOutlining;1;0
TR_CompactNullChecks;TR_CompactNullChecks(class TR_CompactNullChecks &&);1;TR;CompactNullChecks;1;0
TR_CompactNullChecks;TR_CompactNullChecks(TR::OptimizationManager *);0;TR;CompactNullChecks;0;0
TR_CompactNullChecks;TR_CompactNullChecks(const class TR_CompactNullChecks &);0;TR;CompactNullChecks;1;0
operator=;operator=(class TR_CompactNullChecks &&);0;TR;CompactNullChecks;1;0
operator=;operator=(const class TR_CompactNullChecks &);0;TR;CompactNullChecks;1;0
TR_EliminateRedundantGotos;TR_EliminateRedundantGotos(const class TR_EliminateRedundantGotos &);1;TR;EliminateRedundantGotos;1;0
TR_EliminateRedundantGotos;TR_EliminateRedundantGotos(TR::OptimizationManager *);0;TR;EliminateRedundantGotos;0;0
TR_EliminateRedundantGotos;TR_EliminateRedundantGotos(class TR_EliminateRedundantGotos &&);0;TR;EliminateRedundantGotos;1;0
operator=;operator=(class TR_EliminateRedundantGotos &&);0;TR;EliminateRedundantGotos;1;0
operator=;operator=(const class TR_EliminateRedundantGotos &);0;TR;EliminateRedundantGotos;1;0
TR_ExtendBasicBlocks;TR_ExtendBasicBlocks(class TR_ExtendBasicBlocks &&);1;TR;ExtendBasicBlocks;1;0
TR_ExtendBasicBlocks;TR_ExtendBasicBlocks(TR::OptimizationManager *);0;TR;ExtendBasicBlocks;0;0
TR_ExtendBasicBlocks;TR_ExtendBasicBlocks(const class TR_ExtendBasicBlocks &);0;TR;ExtendBasicBlocks;1;0
operator=;operator=(const class TR_ExtendBasicBlocks &);0;TR;ExtendBasicBlocks;1;0
operator=;operator=(class TR_ExtendBasicBlocks &&);0;TR;ExtendBasicBlocks;1;0
TR_HoistBlocks;TR_HoistBlocks(class TR_HoistBlocks &&);1;TR;HoistBlocks;1;0
TR_HoistBlocks;TR_HoistBlocks(const class TR_HoistBlocks &);0;TR;HoistBlocks;1;0
TR_HoistBlocks;TR_HoistBlocks(TR::OptimizationManager *);0;TR;HoistBlocks;0;0
operator=;operator=(const class TR_HoistBlocks &);0;TR;HoistBlocks;1;0
operator=;operator=(class TR_HoistBlocks &&);0;TR;HoistBlocks;1;0
TR_InvariantArgumentPreexistence;TR_InvariantArgumentPreexistence(class TR_InvariantArgumentPreexistence &&);1;TR;InvariantArgumentPreexistence;1;0
TR_InvariantArgumentPreexistence;TR_InvariantArgumentPreexistence(const class TR_InvariantArgumentPreexistence &);0;TR;InvariantArgumentPreexistence;1;0
TR_InvariantArgumentPreexistence;TR_InvariantArgumentPreexistence(TR::OptimizationManager *);0;TR;InvariantArgumentPreexistence;0;0
operator=;operator=(class TR_InvariantArgumentPreexistence &&);0;TR;InvariantArgumentPreexistence;1;0
operator=;operator=(const class TR_InvariantArgumentPreexistence &);0;TR;InvariantArgumentPreexistence;1;0
TR_LongRegAllocation;TR_LongRegAllocation(class TR_LongRegAllocation &&);1;TR;LongRegAllocation;1;0
TR_LongRegAllocation;TR_LongRegAllocation(const class TR_LongRegAllocation &);0;TR;LongRegAllocation;1;0
TR_LongRegAllocation;TR_LongRegAllocation(TR::OptimizationManager *);0;TR;LongRegAllocation;0;0
TR_Rematerialization;TR_Rematerialization(class TR_Rematerialization &&);1;TR;Rematerialization;1;0
TR_Rematerialization;TR_Rematerialization(const class TR_Rematerialization &);0;TR;Rematerialization;1;0
TR_Rematerialization;TR_Rematerialization(TR::OptimizationManager *,_Bool);0;TR;Rematerialization;0;0
operator=;operator=(const class TR_Rematerialization &);0;TR;Rematerialization;1;0
operator=;operator=(class TR_Rematerialization &&);0;TR;Rematerialization;1;0
operator=;operator=(class TR_LongRegAllocation &&);0;TR;LongRegAllocation;1;0
operator=;operator=(const class TR_LongRegAllocation &);0;TR;LongRegAllocation;1;0
removeNodeFromList;removeNodeFromList(TR::Node *,List<TR::Node> *,List<List<TR::Node> > *,_Bool,List<TR::Node> *,List<TR::Node> *,const TR::SparseBitVector &);1;TR;Rematerialization;0;0
removeNodeFromList;removeNodeFromList(TR::Node *,List<TR::Node> *,List<List<TR::Node> > *,_Bool,List<TR::Node> *,List<TR::Node> *);0;TR;Rematerialization;0;0
TR_OrderBlocks;TR_OrderBlocks(class TR_OrderBlocks &&);1;TR;OrderBlocks;1;0
TR_OrderBlocks;TR_OrderBlocks(const class TR_OrderBlocks &);0;TR;OrderBlocks;1;0
TR_OrderBlocks;TR_OrderBlocks(TR::OptimizationManager *,_Bool);0;TR;OrderBlocks;0;0
operator=;operator=(const class TR_OrderBlocks &);0;TR;OrderBlocks;1;0
operator=;operator=(class TR_OrderBlocks &&);0;TR;OrderBlocks;1;0
TR_PeepHoleBasicBlocks;TR_PeepHoleBasicBlocks(class TR_PeepHoleBasicBlocks &&);1;TR;PeepHoleBasicBlocks;1;0
TR_PeepHoleBasicBlocks;TR_PeepHoleBasicBlocks(const class TR_PeepHoleBasicBlocks &);0;TR;PeepHoleBasicBlocks;1;0
TR_PeepHoleBasicBlocks;TR_PeepHoleBasicBlocks(TR::OptimizationManager *);0;TR;PeepHoleBasicBlocks;0;0
operator=;operator=(class TR_PeepHoleBasicBlocks &&);0;TR;PeepHoleBasicBlocks;1;0
operator=;operator=(const class TR_PeepHoleBasicBlocks &);0;TR;PeepHoleBasicBlocks;1;0
TR_ProfiledNodeVersioning;TR_ProfiledNodeVersioning(class TR_ProfiledNodeVersioning &&);1;TR;ProfiledNodeVersioning;1;0
TR_ProfiledNodeVersioning;TR_ProfiledNodeVersioning(TR::OptimizationManager *);0;TR;ProfiledNodeVersioning;0;0
TR_ProfiledNodeVersioning;TR_ProfiledNodeVersioning(const class TR_ProfiledNodeVersioning &);0;TR;ProfiledNodeVersioning;1;0
operator=;operator=(const class TR_ProfiledNodeVersioning &);0;TR;ProfiledNodeVersioning;1;0
operator=;operator=(class TR_ProfiledNodeVersioning &&);0;TR;ProfiledNodeVersioning;1;0
TR_SimplifyAnds;TR_SimplifyAnds(class TR_SimplifyAnds &&);1;TR;SimplifyAnds;1;0
TR_SimplifyAnds;TR_SimplifyAnds(TR::OptimizationManager *);0;TR;SimplifyAnds;0;0
TR_SimplifyAnds;TR_SimplifyAnds(const class TR_SimplifyAnds &);0;TR;SimplifyAnds;1;0
operator=;operator=(class TR_SimplifyAnds &&);0;TR;SimplifyAnds;1;0
operator=;operator=(const class TR_SimplifyAnds &);0;TR;SimplifyAnds;1;0
TR_TrivialBlockExtension;TR_TrivialBlockExtension(class TR_TrivialBlockExtension &&);1;TR;TrivialBlockExtension;1;0
TR_TrivialBlockExtension;TR_TrivialBlockExtension(const class TR_TrivialBlockExtension &);0;TR;TrivialBlockExtension;1;0
TR_TrivialBlockExtension;TR_TrivialBlockExtension(TR::OptimizationManager *);0;TR;TrivialBlockExtension;0;0
operator=;operator=(const class TR_TrivialBlockExtension &);0;TR;TrivialBlockExtension;1;0
operator=;operator=(class TR_TrivialBlockExtension &&);0;TR;TrivialBlockExtension;1;0
TR_TrivialDeadTreeRemoval;TR_TrivialDeadTreeRemoval(class TR_TrivialDeadTreeRemoval &&);1;TR;TrivialDeadTreeRemoval;1;0
TR_TrivialDeadTreeRemoval;TR_TrivialDeadTreeRemoval(const class TR_TrivialDeadTreeRemoval &);0;TR;TrivialDeadTreeRemoval;1;0
TR_TrivialDeadTreeRemoval;TR_TrivialDeadTreeRemoval(TR::OptimizationManager *);0;TR;TrivialDeadTreeRemoval;0;0
operator=;operator=(class TR_TrivialDeadTreeRemoval &&);0;TR;TrivialDeadTreeRemoval;1;0
operator=;operator=(const class TR_TrivialDeadTreeRemoval &);0;TR;TrivialDeadTreeRemoval;1;0
Simplifier;Simplifier(const class OMR::Simplifier &);1;OMR;Simplifier;1;0
Simplifier;Simplifier(TR::OptimizationManager *);0;OMR;Simplifier;0;0
Simplifier;Simplifier(class OMR::Simplifier &&);0;OMR;Simplifier;1;0
operator=;operator=(const class OMR::Simplifier &);0;OMR;Simplifier;1;0
operator=;operator=(class OMR::Simplifier &&);0;OMR;Simplifier;1;0
operator=;operator=(class TR::Simplifier &&);0;TR;Simplifier;1;0
operator=;operator=(const class TR::Simplifier &);0;TR;Simplifier;1;0
simplify;simplify(TR::Node *,TR::Block *);1;OMR;Simplifier;0;0
simplify;simplify(TR::TreeTop *,TR::Block *);0;OMR;Simplifier;0;0
simplify;simplify(TR::Block *);0;OMR;Simplifier;0;0
List<T>;List<T>(class TR_Memory *);1;;List;0;0
List<T>;List<T>(TR::Region &);0;;List;0;0
List<T>;List<T>();0;;List;0;0
add;add(List<T> &);1;;List;0;0
add;add(T *,List<T> &);0;;List;0;0
add;add(T *);0;;List;0;0
operator delete;operator delete(void *,TR::Region &);1;;ListBase;0;0
operator delete;operator delete(void *,size_t);0;;ListBase;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;ListBase;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;;ListBase;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;ListBase;0;0
operator delete[];operator delete[](void *,TR::Region &);1;;ListBase;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;;ListBase;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;ListBase;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;ListBase;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;;ListBase;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;;ListBase;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;;ListBase;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;;ListBase;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;ListBase;0;0
operator new;operator new(size_t,TR::Region &);0;;ListBase;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;;ListBase;0;0
operator new[];operator new[](size_t,TR::Region &);1;;ListBase;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;;ListBase;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;;ListBase;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;;ListBase;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;;ListBase;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;;ListBase;0;0
Optimization;Optimization(TR::OptimizationManager *);1;OMR;Optimization;0;0
Optimization;Optimization(const class OMR::Optimization &);0;OMR;Optimization;1;0
killAvailableExpressionsUsingAliases;killAvailableExpressionsUsingAliases(class TR_BitVector &);1;OMR;LocalCSE;0;0
killAvailableExpressionsUsingAliases;killAvailableExpressionsUsingAliases(struct TR_NodeKillAliasSetInterface &);0;OMR;LocalCSE;0;0
prepareToReplaceNode;prepareToReplaceNode(TR::Node *);1;OMR;Optimization;0;0
prepareToReplaceNode;prepareToReplaceNode(TR::Node *,TR::ILOpCodes);0;OMR;Optimization;0;0
RecognizedCallTransformer;RecognizedCallTransformer(class OMR::RecognizedCallTransformer &&);1;OMR;RecognizedCallTransformer;1;0
RecognizedCallTransformer;RecognizedCallTransformer(TR::OptimizationManager *);0;OMR;RecognizedCallTransformer;0;0
RecognizedCallTransformer;RecognizedCallTransformer(const class OMR::RecognizedCallTransformer &);0;OMR;RecognizedCallTransformer;1;0
operator=;operator=(const class OMR::RecognizedCallTransformer &);0;OMR;RecognizedCallTransformer;1;0
operator=;operator=(class OMR::RecognizedCallTransformer &&);0;OMR;RecognizedCallTransformer;1;0
operator=;operator=(class TR::RecognizedCallTransformer &&);0;TR;RecognizedCallTransformer;1;0
operator=;operator=(const class TR::RecognizedCallTransformer &);0;TR;RecognizedCallTransformer;1;0
simplify;simplify(TR::TreeTop *,TR::Block *);1;OMR;Simplifier;0;0
simplify;simplify(TR::Node *,TR::Block *);0;OMR;Simplifier;0;0
initialize;initialize(int32_t);1;TR;HedgeNode;0;0
initialize;initialize(int32_t,struct OMR::ValuePropagation::Relationship *,struct OMR::ValuePropagation::StoreRelationship *);0;OMR::ValuePropagation;ValueConstraint;0;0
operator delete;operator delete(void *,size_t);1;TR;HedgeNode;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeNode;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;HedgeNode;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;HedgeNode;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;HedgeNode;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeNode;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;HedgeNode;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;HedgeNode;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;HedgeNode;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;HedgeNode;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeNode;0;0
operator new;operator new(size_t,TR::Region &);0;TR;HedgeNode;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;HedgeNode;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;HedgeNode;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;HedgeNode;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeNode;0;0
ValueConstraintHandler;ValueConstraintHandler(const class OMR::ValuePropagation::ValueConstraintHandler &);1;OMR::ValuePropagation;ValueConstraintHandler;1;0
ValueConstraintHandler;ValueConstraintHandler(class OMR::ValuePropagation::ValueConstraintHandler &&);0;OMR::ValuePropagation;ValueConstraintHandler;1;0
copy;copy(T *);1;TR;HedgeTreeHandler;0;1
copy;copy(class OMR::ValuePropagation::ValueConstraint *);0;OMR::ValuePropagation;ValueConstraintHandler;0;1
findOrCreate;findOrCreate(int32_t,T *&,int32_t &);1;TR;HedgeTreeHandler;0;0
findOrCreate;findOrCreate(int32_t,TR_HedgeTree<T> &);0;TR;HedgeTreeHandler;0;0
free;free(T *);1;TR;HedgeTreeHandler;0;1
free;free(class OMR::ValuePropagation::ValueConstraint *);0;OMR::ValuePropagation;ValueConstraintHandler;0;1
operator delete;operator delete(void *,size_t);1;TR;HedgeTreeHandler;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;HedgeTreeHandler;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeTreeHandler;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;HedgeTreeHandler;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,TR::Region &);0;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;HedgeTreeHandler;0;0
operator=;operator=(class OMR::ValuePropagation::ValueConstraintHandler &&);1;OMR::ValuePropagation;ValueConstraintHandler;1;0
operator=;operator=(const class OMR::ValuePropagation::ValueConstraintHandler &);0;OMR::ValuePropagation;ValueConstraintHandler;1;0
remove;remove(int32_t,TR_HedgeTree<T> &);1;TR;HedgeTreeHandler;0;0
remove;remove(int32_t,T *&,int32_t &);0;TR;HedgeTreeHandler;0;0
ArraycopyTransformation;ArraycopyTransformation(class TR::ArraycopyTransformation &&);1;TR;ArraycopyTransformation;1;0
ArraycopyTransformation;ArraycopyTransformation(TR::OptimizationManager *);0;TR;ArraycopyTransformation;0;0
ArraycopyTransformation;ArraycopyTransformation(const class TR::ArraycopyTransformation &);0;TR;ArraycopyTransformation;1;0
createArrayNode;createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);1;TR;ArraycopyTransformation;0;0
createArrayNode;createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,_Bool);0;TR;ArraycopyTransformation;0;0
operator=;operator=(const class TR::ArraycopyTransformation &);0;TR;ArraycopyTransformation;1;0
operator=;operator=(class TR::ArraycopyTransformation &&);0;TR;ArraycopyTransformation;1;0
GlobalValuePropagation;GlobalValuePropagation(const class TR::GlobalValuePropagation &);1;TR;GlobalValuePropagation;1;0
GlobalValuePropagation;GlobalValuePropagation(TR::OptimizationManager *);0;TR;GlobalValuePropagation;0;0
GlobalValuePropagation;GlobalValuePropagation(class TR::GlobalValuePropagation &&);0;TR;GlobalValuePropagation;1;0
ValuePropagation;ValuePropagation(TR::OptimizationManager *);1;OMR;ValuePropagation;0;0
ValuePropagation;ValuePropagation(const class OMR::ValuePropagation &);0;OMR;ValuePropagation;1;0
ValuePropagation;ValuePropagation(class OMR::ValuePropagation &&);0;OMR;ValuePropagation;1;0
ValuePropagation;ValuePropagation(class TR::ValuePropagation &&);0;TR;ValuePropagation;1;0
ValuePropagation;ValuePropagation(const class TR::ValuePropagation &);0;TR;ValuePropagation;1;0
addGlobalConstraint;addGlobalConstraint(TR::Node *,TR::VPConstraint *,TR::Node *);1;OMR;ValuePropagation;0;0
addGlobalConstraint;addGlobalConstraint(TR::Node *,int32_t,TR::VPConstraint *,int32_t);0;OMR;ValuePropagation;0;0
findGlobalConstraint;findGlobalConstraint(int32_t,int32_t);1;OMR;ValuePropagation;0;0
findGlobalConstraint;findGlobalConstraint(int32_t);0;OMR;ValuePropagation;0;0
isUnreachablePath;isUnreachablePath(ValueConstraints &);1;OMR;ValuePropagation;0;0
isUnreachablePath;isUnreachablePath(struct OMR::ValuePropagation::EdgeConstraints *);0;OMR;ValuePropagation;0;0
operator=;operator=(const class OMR::ValuePropagation &);0;OMR;ValuePropagation;1;0
operator=;operator=(class OMR::ValuePropagation &&);0;OMR;ValuePropagation;1;0
operator=;operator=(class TR::ValuePropagation &&);0;TR;ValuePropagation;1;0
operator=;operator=(const class TR::ValuePropagation &);0;TR;ValuePropagation;1;0
operator=;operator=(const class TR::GlobalValuePropagation &);0;TR;GlobalValuePropagation;1;0
operator=;operator=(class TR::GlobalValuePropagation &&);0;TR;GlobalValuePropagation;1;0
removeConstraints;removeConstraints();1;OMR;ValuePropagation;0;0
removeConstraints;removeConstraints(int32_t,ValueConstraints *,_Bool);0;OMR;ValuePropagation;0;0
removeConstraints;removeConstraints(int32_t);0;OMR;ValuePropagation;0;0
removeConstraints;removeConstraints(int32_t,ValueConstraints *);0;OMR;ValuePropagation;0;0
removeNode;removeNode(TR::Node *,TR::TreeTop *);1;OMR;Optimization;0;0
removeNode;removeNode(TR::Node *,_Bool);0;OMR;ValuePropagation;0;0
setUnreachablePath;setUnreachablePath(ValueConstraints &);1;OMR;ValuePropagation;0;0
setUnreachablePath;setUnreachablePath();0;OMR;ValuePropagation;0;0
setUnreachablePath;setUnreachablePath(TR::CFGEdge *);0;OMR;ValuePropagation;0;0
LocalValuePropagation;LocalValuePropagation(class TR::LocalValuePropagation &&);1;TR;LocalValuePropagation;1;0
LocalValuePropagation;LocalValuePropagation(const class TR::LocalValuePropagation &);0;TR;LocalValuePropagation;1;0
LocalValuePropagation;LocalValuePropagation(TR::OptimizationManager *);0;TR;LocalValuePropagation;0;0
operator=;operator=(class TR::LocalValuePropagation &&);0;TR;LocalValuePropagation;1;0
operator=;operator=(const class TR::LocalValuePropagation &);0;TR;LocalValuePropagation;1;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::SymbolReference *);1;OMR;Node;0;0
OptimizationManager;OptimizationManager(const class TR::OptimizationManager &);0;TR;OptimizationManager;1;0
Optimizer;Optimizer(class OMR::Optimizer &&);1;OMR;Optimizer;1;0
Optimizer;Optimizer(class TR::Optimizer &&);0;TR;Optimizer;1;0
Optimizer;Optimizer(const class TR::Optimizer &);0;TR;Optimizer;1;0
RegDepCopyRemoval;RegDepCopyRemoval(const class TR::RegDepCopyRemoval &);1;TR;RegDepCopyRemoval;1;0
RegDepCopyRemoval;RegDepCopyRemoval(class TR::RegDepCopyRemoval &&);0;TR;RegDepCopyRemoval;1;0
RegDepCopyRemoval;RegDepCopyRemoval(TR::OptimizationManager *);0;TR;RegDepCopyRemoval;0;0
operator=;operator=(const class TR::RegDepCopyRemoval &);0;TR;RegDepCopyRemoval;1;0
operator=;operator=(class TR::RegDepCopyRemoval &&);0;TR;RegDepCopyRemoval;1;0
create;create(TR::Compilation *,TR::TreeTop *,TR::Node *);1;OMR;TreeTop;0;0
removeDeadTrees;removeDeadTrees(TR::Compilation *,TR::TreeTop *,TR::TreeTop *);1;OMR;TreeTop;0;0
removeDeadTrees;removeDeadTrees(TR::Compilation *,TR::TreeTop *[]);0;OMR;TreeTop;0;0
mustBeEqual;mustBeEqual();1;TR;VPConstraint;0;1
mustBeEqual;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);0;TR;VPConstraint;0;1
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
TR_Array<T>;TR_Array<T>(const TR_Array<T> &);1;TR;Array;0;0
TR_Array<T>;TR_Array<T>(class TR_Memory *,uint32_t,_Bool,enum TR_AllocationKind);0;TR;Array;0;0
TR_BinaryHeap;TR_BinaryHeap(class TR_BlockSplitter::TR_BinaryHeap &&);1;TR_BlockSplitter;TR_BinaryHeap;1;0
TR_BinaryHeap;TR_BinaryHeap(class TR_Memory *,uint32_t);0;TR_BlockSplitter;TR_BinaryHeap;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;Array;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Array;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;Array;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;Structure;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;Structure;0;0
TR_CheckcastAndProfiledGuardCoalescer;TR_CheckcastAndProfiledGuardCoalescer(class TR_CheckcastAndProfiledGuardCoalescer &&);1;TR;CheckcastAndProfiledGuardCoalescer;1;0
TR_CheckcastAndProfiledGuardCoalescer;TR_CheckcastAndProfiledGuardCoalescer(TR::OptimizationManager *);0;TR;CheckcastAndProfiledGuardCoalescer;0;0
createInterferenceBetween;createInterferenceBetween(class TR_BitVector *);1;TR;CompactLocals;0;0
createInterferenceBetween;createInterferenceBetween(class TR_BitVector *,class TR_BitVector *);0;TR;CompactLocals;0;0
TR_IsolatedStoreElimination;TR_IsolatedStoreElimination(class TR_IsolatedStoreElimination &&);1;TR;IsolatedStoreElimination;1;0
TR_IsolatedStoreElimination;TR_IsolatedStoreElimination(const class TR_IsolatedStoreElimination &);0;TR;IsolatedStoreElimination;1;0
TR_BasicInductionVariable;TR_BasicInductionVariable(const class TR_BasicInductionVariable &);1;TR;BasicInductionVariable;1;0
TR_BasicInductionVariable;TR_BasicInductionVariable(class TR_BasicInductionVariable &&);0;TR;BasicInductionVariable;1;0
operator=;operator=(class TR_BasicInductionVariable &&);1;TR;BasicInductionVariable;1;0
operator=;operator=(const class TR_BasicInductionVariable &);0;TR;BasicInductionVariable;1;0
TR_ExceptionCheckMotion;TR_ExceptionCheckMotion(class TR_ExceptionCheckMotion &&);1;TR;ExceptionCheckMotion;1;0
TR_ExceptionCheckMotion;TR_ExceptionCheckMotion(TR::Compilation *,TR::Optimizer *,class TR_PartialRedundancy *);0;TR;ExceptionCheckMotion;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_ExceptionCheckMotion::ExprDominanceInfo *,class TR_Structure *);1;TR;ExceptionCheckMotion;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_ExceptionCheckMotion::ExprDominanceInfo *,TR::Block *);0;TR;ExceptionCheckMotion;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_ExceptionCheckMotion::ExprDominanceInfo *,class TR_RegionStructure *);0;TR;ExceptionCheckMotion;0;0
operator=;operator=(const class TR_ExceptionCheckMotion &);0;TR;ExceptionCheckMotion;1;0
operator=;operator=(class TR_ExceptionCheckMotion &&);0;TR;ExceptionCheckMotion;1;0
findUseInRegion;findUseInRegion(TR::Node *,uint16_t,uint16_t);1;TR;ExpressionsSimplification;0;0
findUseInRegion;findUseInRegion(class TR_RegionStructure *,uint16_t,uint16_t);0;TR;ExpressionsSimplification;0;0
removeCandidate;removeCandidate(TR::Node *,TR::TreeTop *);1;TR;ExpressionsSimplification;0;0
removeCandidate;removeCandidate(class TR_RegionStructure *);0;TR;ExpressionsSimplification;0;0
detectWhileLoopsInSubnodesInOrder;detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);1;TR;LoopTransformer;0;0
detectWhileLoopsInSubnodesInOrder;detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,class TR_StructureSubGraphNode *,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);0;TR;LoopTransformer;0;0
branchContainsInductionVariable;branchContainsInductionVariable(TR::Node *,TR::SymbolReference *);1;TR;GeneralLoopUnroller;0;0
branchContainsInductionVariable;branchContainsInductionVariable(class TR_RegionStructure *,TR::Node *,_Bool);0;TR;GeneralLoopUnroller;0;0
TR_GeneralSinkStores;TR_GeneralSinkStores(class TR_GeneralSinkStores &&);1;TR;GeneralSinkStores;1;0
TR_GeneralSinkStores;TR_GeneralSinkStores(TR::OptimizationManager *);0;TR;GeneralSinkStores;0;0
TR_GeneralSinkStores;TR_GeneralSinkStores(const class TR_GeneralSinkStores &);0;TR;GeneralSinkStores;1;0
TR_SinkStores;TR_SinkStores(const class TR_SinkStores &);1;TR;SinkStores;1;0
TR_SinkStores;TR_SinkStores(class TR_SinkStores &&);0;TR;SinkStores;1;0
TR_SinkStores;TR_SinkStores(TR::OptimizationManager *);0;TR;SinkStores;0;0
operator=;operator=(class TR_SinkStores &&);0;TR;SinkStores;1;0
operator=;operator=(const class TR_SinkStores &);0;TR;SinkStores;1;0
operator=;operator=(class TR_GeneralSinkStores &&);0;TR;GeneralSinkStores;1;0
operator=;operator=(const class TR_GeneralSinkStores &);0;TR;GeneralSinkStores;1;0
TR_GlobalRegisterAllocator;TR_GlobalRegisterAllocator(const class TR_GlobalRegisterAllocator &);1;TR;GlobalRegisterAllocator;1;0
TR_GlobalRegisterAllocator;TR_GlobalRegisterAllocator(TR::OptimizationManager *);0;TR;GlobalRegisterAllocator;0;0
assignRegisters;assignRegisters();1;TR;GlobalRegisterAllocator;0;0
assignRegisters;assignRegisters(TR::Block *);0;TR;GlobalRegisterAllocator;0;0
resolveTypeMismatch;resolveTypeMismatch(TR::DataType,TR::Node *,TR::Node *);1;TR;GlobalRegisterAllocator;0;0
resolveTypeMismatch;resolveTypeMismatch(TR::Node *,TR::Node *);0;TR;GlobalRegisterAllocator;0;0
TR_HashValueNumberInfo;TR_HashValueNumberInfo(class TR_HashValueNumberInfo &);1;TR;HashValueNumberInfo;1;0
TR_HashValueNumberInfo;TR_HashValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);0;TR;HashValueNumberInfo;0;0
TR_IndexExprManipulator;TR_IndexExprManipulator(class TR_IndexExprManipulator &&);1;TR;IndexExprManipulator;1;0
TR_IndexExprManipulator;TR_IndexExprManipulator(TR::OptimizationManager *);0;TR;IndexExprManipulator;0;0
TR_IndexExprManipulator;TR_IndexExprManipulator(const class TR_IndexExprManipulator &);0;TR;IndexExprManipulator;1;0
operator=;operator=(const class TR_IndexExprManipulator &);0;TR;IndexExprManipulator;1;0
operator=;operator=(class TR_IndexExprManipulator &&);0;TR;IndexExprManipulator;1;0
rewriteIndexExpression;rewriteIndexExpression(class TR_Structure *);1;TR;IndexExprManipulator;0;0
rewriteIndexExpression;rewriteIndexExpression(class TR_PrimaryInductionVariable *,TR::Node *,TR::Node *,_Bool);0;TR;IndexExprManipulator;0;0
TR_InnerPreexistence;TR_InnerPreexistence(class TR_InnerPreexistence &&);1;TR;InnerPreexistence;1;0
TR_InnerPreexistence;TR_InnerPreexistence(const class TR_InnerPreexistence &);0;TR;InnerPreexistence;1;0
TR_InnerPreexistence;TR_InnerPreexistence(TR::OptimizationManager *);0;TR;InnerPreexistence;0;0
operator=;operator=(const class TR_InnerPreexistence &);0;TR;InnerPreexistence;1;0
operator=;operator=(class TR_InnerPreexistence &&);0;TR;InnerPreexistence;1;0
TR_InvariantArgumentPreexistence;TR_InvariantArgumentPreexistence(const class TR_InvariantArgumentPreexistence &);1;TR;InvariantArgumentPreexistence;1;0
TR_InvariantArgumentPreexistence;TR_InvariantArgumentPreexistence(class TR_InvariantArgumentPreexistence &&);0;TR;InvariantArgumentPreexistence;1;0
operator delete;operator delete(void *,size_t);1;TR;AddressTree;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;AddressTree;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;AddressTree;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;AddressTree;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;LocalAnalysis;0;0
TR_LoopReplicator;TR_LoopReplicator(const class TR_LoopReplicator &);1;TR;LoopReplicator;1;0
TR_LoopReplicator;TR_LoopReplicator(class TR_LoopReplicator &&);0;TR;LoopReplicator;1;0
gatherRestOfLoop;gatherRestOfLoop(class TR_RegionStructure *,TR_Queue<TR::Block> *);1;TR;LoopReplicator;0;0
gatherRestOfLoop;gatherRestOfLoop(class TR_RegionStructure *,TR::Block *,TR_Queue<TR::Block> &);0;TR;LoopReplicator;0;0
heuristics;heuristics(struct TR_LoopReplicator::LoopInfo *,_Bool);1;TR;LoopReplicator;0;0
heuristics;heuristics(struct TR_LoopReplicator::LoopInfo *);0;TR;LoopReplicator;0;0
TR_LoopSpecializer;TR_LoopSpecializer(class TR_LoopSpecializer &&);1;TR;LoopSpecializer;1;0
TR_LoopSpecializer;TR_LoopSpecializer(const class TR_LoopSpecializer &);0;TR;LoopSpecializer;1;0
TR_OSRDefAnalysis;TR_OSRDefAnalysis(const class TR_OSRDefAnalysis &);1;TR;OSRDefAnalysis;1;0
TR_OSRDefAnalysis;TR_OSRDefAnalysis(TR::OptimizationManager *);0;TR;OSRDefAnalysis;0;0
TR_OSRDefAnalysis;TR_OSRDefAnalysis(class TR_OSRDefAnalysis &&);0;TR;OSRDefAnalysis;1;0
operator=;operator=(const class TR_OSRDefAnalysis &);0;TR;OSRDefAnalysis;1;0
operator=;operator=(class TR_OSRDefAnalysis &&);0;TR;OSRDefAnalysis;1;0
TR_OSRDefInfo;TR_OSRDefInfo(TR::OptimizationManager *);1;TR;OSRDefInfo;0;0
TR_OSRDefInfo;TR_OSRDefInfo(class TR_OSRDefInfo &&);0;TR;OSRDefInfo;1;0
TR_UseDefInfo;TR_UseDefInfo(const class TR_UseDefInfo &);1;TR;UseDefInfo;1;0
TR_UseDefInfo;TR_UseDefInfo(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool,_Bool,_Bool,_Bool,_Bool,_Bool);0;TR;UseDefInfo;0;0
buildOSRDefs;buildOSRDefs(void *,class TR_UseDefInfo::AuxiliaryData &);1;TR;OSRDefInfo;0;0
buildOSRDefs;buildOSRDefs(TR::Node *,void *,class TR_OSRPoint *,class TR_OSRPoint *,TR::Node *,class TR_UseDefInfo::AuxiliaryData &);0;TR;OSRDefInfo;0;0
buildUseDefs;buildUseDefs(TR::Node *,void *,class TR_BitVector &,TR::Node *,class TR_UseDefInfo::AuxiliaryData &);1;TR;UseDefInfo;0;0
buildUseDefs;buildUseDefs(void *,class TR_UseDefInfo::AuxiliaryData &);0;TR;UseDefInfo;0;0
operator=;operator=(const class TR_UseDefInfo &);1;TR;UseDefInfo;1;0
operator=;operator=(const class TR_OSRDefInfo &);0;TR;OSRDefInfo;1;0
operator=;operator=(class TR_OSRDefInfo &&);0;TR;OSRDefInfo;1;0
TR_OSRExceptionEdgeRemoval;TR_OSRExceptionEdgeRemoval(class TR_OSRExceptionEdgeRemoval &&);1;TR;OSRExceptionEdgeRemoval;1;0
TR_OSRExceptionEdgeRemoval;TR_OSRExceptionEdgeRemoval(TR::OptimizationManager *);0;TR;OSRExceptionEdgeRemoval;0;0
TR_OSRExceptionEdgeRemoval;TR_OSRExceptionEdgeRemoval(const class TR_OSRExceptionEdgeRemoval &);0;TR;OSRExceptionEdgeRemoval;1;0
operator=;operator=(const class TR_OSRExceptionEdgeRemoval &);0;TR;OSRExceptionEdgeRemoval;1;0
operator=;operator=(class TR_OSRExceptionEdgeRemoval &&);0;TR;OSRExceptionEdgeRemoval;1;0
TR_OSRLiveRangeAnalysis;TR_OSRLiveRangeAnalysis(class TR_OSRLiveRangeAnalysis &&);1;TR;OSRLiveRangeAnalysis;1;0
TR_OSRLiveRangeAnalysis;TR_OSRLiveRangeAnalysis(const class TR_OSRLiveRangeAnalysis &);0;TR;OSRLiveRangeAnalysis;1;0
TR_OSRLiveRangeAnalysis;TR_OSRLiveRangeAnalysis(TR::OptimizationManager *);0;TR;OSRLiveRangeAnalysis;0;0
operator=;operator=(class TR_OSRLiveRangeAnalysis &&);0;TR;OSRLiveRangeAnalysis;1;0
operator=;operator=(const class TR_OSRLiveRangeAnalysis &);0;TR;OSRLiveRangeAnalysis;1;0
TR_PartialRedundancy;TR_PartialRedundancy(class TR_PartialRedundancy &&);1;TR;PartialRedundancy;1;0
TR_PartialRedundancy;TR_PartialRedundancy(TR::OptimizationManager *);0;TR;PartialRedundancy;0;0
TR_PartialRedundancy;TR_PartialRedundancy(const class TR_PartialRedundancy &);0;TR;PartialRedundancy;1;0
operator=;operator=(class TR_PartialRedundancy &&);0;TR;PartialRedundancy;1;0
operator=;operator=(const class TR_PartialRedundancy &);0;TR;PartialRedundancy;1;0
TR_PrefetchInsertion;TR_PrefetchInsertion(class TR_PrefetchInsertion &&);1;TR;PrefetchInsertion;1;0
TR_PrefetchInsertion;TR_PrefetchInsertion(const class TR_PrefetchInsertion &);0;TR;PrefetchInsertion;1;0
TR_PrefetchInsertion;TR_PrefetchInsertion(TR::OptimizationManager *);0;TR;PrefetchInsertion;0;0
operator=;operator=(class TR_PrefetchInsertion &&);0;TR;PrefetchInsertion;1;0
operator=;operator=(const class TR_PrefetchInsertion &);0;TR;PrefetchInsertion;1;0
TR_RedundantAsyncCheckRemoval;TR_RedundantAsyncCheckRemoval(const class TR_RedundantAsyncCheckRemoval &);1;TR;RedundantAsyncCheckRemoval;1;0
TR_RedundantAsyncCheckRemoval;TR_RedundantAsyncCheckRemoval(class TR_RedundantAsyncCheckRemoval &&);0;TR;RedundantAsyncCheckRemoval;1;0
TR_RedundantAsyncCheckRemoval;TR_RedundantAsyncCheckRemoval(TR::OptimizationManager *);0;TR;RedundantAsyncCheckRemoval;0;0
operator=;operator=(class TR_RedundantAsyncCheckRemoval &&);0;TR;RedundantAsyncCheckRemoval;1;0
operator=;operator=(const class TR_RedundantAsyncCheckRemoval &);0;TR;RedundantAsyncCheckRemoval;1;0
perform;perform(class TR_Structure *,_Bool);0;TR;RedundantAsyncCheckRemoval;0;0
analyzeNode;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,ContainerType *);0;TR;RedundantExpressionAdjustment;0;1
operator=;operator=(const class TR_RedundantExpressionAdjustment &);0;TR;RedundantExpressionAdjustment;1;0
operator=;operator=(class TR_RedundantExpressionAdjustment &&);0;TR;RedundantExpressionAdjustment;1;0
TR_ShrinkWrap;TR_ShrinkWrap(const class TR_ShrinkWrap &);1;TR;ShrinkWrap;1;0
TR_ShrinkWrap;TR_ShrinkWrap(class TR_ShrinkWrap &&);0;TR;ShrinkWrap;1;0
TR_ShrinkWrap;TR_ShrinkWrap(TR::OptimizationManager *);0;TR;ShrinkWrap;0;0
operator=;operator=(const class TR_ShrinkWrap &);0;TR;ShrinkWrap;1;0
operator=;operator=(class TR_ShrinkWrap &&);0;TR;ShrinkWrap;1;0
TR_StripMiner;TR_StripMiner(class TR_StripMiner &&);1;TR;StripMiner;1;0
TR_StripMiner;TR_StripMiner(const class TR_StripMiner &);0;TR;StripMiner;1;0
TR_StripMiner;TR_StripMiner(TR::OptimizationManager *);0;TR;StripMiner;0;0
operator=;operator=(class TR_StripMiner &&);0;TR;StripMiner;1;0
operator=;operator=(const class TR_StripMiner &);0;TR;StripMiner;1;0
TR_TrivialSinkStores;TR_TrivialSinkStores(class TR_TrivialSinkStores &&);1;TR;TrivialSinkStores;1;0
TR_TrivialSinkStores;TR_TrivialSinkStores(const class TR_TrivialSinkStores &);0;TR;TrivialSinkStores;1;0
TR_TrivialSinkStores;TR_TrivialSinkStores(TR::OptimizationManager *);0;TR;TrivialSinkStores;0;0
operator=;operator=(class TR_TrivialSinkStores &&);0;TR;TrivialSinkStores;1;0
operator=;operator=(const class TR_TrivialSinkStores &);0;TR;TrivialSinkStores;1;0
storeCanMoveThroughBlock;storeCanMoveThroughBlock(class TR_BitVector *,class TR_BitVector *,int32_t,class TR_BitVector *,class TR_BitVector *);1;TR;SinkStores;0;1
storeCanMoveThroughBlock;storeCanMoveThroughBlock(class TR_BitVector *,class TR_BitVector *,int32_t);0;TR;TrivialSinkStores;0;1
TR_VirtualGuardHeadMerger;TR_VirtualGuardHeadMerger(class TR_VirtualGuardHeadMerger &&);1;TR;VirtualGuardHeadMerger;1;0
TR_VirtualGuardHeadMerger;TR_VirtualGuardHeadMerger(TR::OptimizationManager *);0;TR;VirtualGuardHeadMerger;0;0
TR_VirtualGuardHeadMerger;TR_VirtualGuardHeadMerger(const class TR_VirtualGuardHeadMerger &);0;TR;VirtualGuardHeadMerger;1;0
operator=;operator=(const class TR_VirtualGuardHeadMerger &);0;TR;VirtualGuardHeadMerger;1;0
operator=;operator=(class TR_VirtualGuardHeadMerger &&);0;TR;VirtualGuardHeadMerger;1;0
TR_VirtualGuardTailSplitter;TR_VirtualGuardTailSplitter(class TR_VirtualGuardTailSplitter &&);1;TR;VirtualGuardTailSplitter;1;0
TR_VirtualGuardTailSplitter;TR_VirtualGuardTailSplitter(TR::OptimizationManager *);0;TR;VirtualGuardTailSplitter;0;0
TR_VirtualGuardTailSplitter;TR_VirtualGuardTailSplitter(const class TR_VirtualGuardTailSplitter &);0;TR;VirtualGuardTailSplitter;1;0
getGuard;getGuard(TR::Node *);1;TR;VirtualGuardTailSplitter;0;0
getGuard;getGuard(TR::Block *);0;TR;VirtualGuardTailSplitter;0;0
getGuard;getGuard(uint32_t);0;TR;VirtualGuardTailSplitter;0;0
isKill;isKill(TR::Node *);1;TR;VirtualGuardTailSplitter;0;0
isKill;isKill(TR::Block *);0;TR;VirtualGuardTailSplitter;0;0
operator=;operator=(class TR_VirtualGuardTailSplitter &&);0;TR;VirtualGuardTailSplitter;1;0
operator=;operator=(const class TR_VirtualGuardTailSplitter &);0;TR;VirtualGuardTailSplitter;1;0
TR_BlockOrderingOptimization;TR_BlockOrderingOptimization(class TR_BlockOrderingOptimization &&);1;TR;BlockOrderingOptimization;1;0
TR_BlockOrderingOptimization;TR_BlockOrderingOptimization(const class TR_BlockOrderingOptimization &);0;TR;BlockOrderingOptimization;1;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;CFG;0;0
TR_OrderBlocks;TR_OrderBlocks(const class TR_OrderBlocks &);1;TR;OrderBlocks;1;0
TR_OrderBlocks;TR_OrderBlocks(class TR_OrderBlocks &&);0;TR;OrderBlocks;1;0
TR_OSRDefInfo;TR_OSRDefInfo(const class TR_OSRDefInfo &);1;TR;OSRDefInfo;1;0
TR_OSRDefInfo;TR_OSRDefInfo(TR::OptimizationManager *);0;TR;OSRDefInfo;0;0
TR_BitVectorCursor;TR_BitVectorCursor(class TR_BitVectorCursor &&);1;TR;BitVectorCursor;1;0
TR_BitVectorCursor;TR_BitVectorCursor(const class TR_BitVectorCursor &);0;TR;BitVectorCursor;1;0
TR_ExceptionCheckMotion;TR_ExceptionCheckMotion(const class TR_ExceptionCheckMotion &);1;TR;ExceptionCheckMotion;1;0
TR_ExceptionCheckMotion;TR_ExceptionCheckMotion(class TR_ExceptionCheckMotion &&);0;TR;ExceptionCheckMotion;1;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_ExceptionCheckMotion::ExprDominanceInfo *,class TR_RegionStructure *);1;TR;ExceptionCheckMotion;0;0
initializeAnalysisInfo;initializeAnalysisInfo(struct TR_ExceptionCheckMotion::ExprDominanceInfo *,class TR_Structure *);0;TR;ExceptionCheckMotion;0;0
TR_Isolatedness;TR_Isolatedness(const class TR_Isolatedness &);1;TR;Isolatedness;1;0
TR_Isolatedness;TR_Isolatedness(class TR_Isolatedness &&);0;TR;Isolatedness;1;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;TR;LocalAnalysis;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Dominators;0;0
TR_RedundantExpressionAdjustment;TR_RedundantExpressionAdjustment(class TR_RedundantExpressionAdjustment &&);1;TR;RedundantExpressionAdjustment;1;0
TR_RedundantExpressionAdjustment;TR_RedundantExpressionAdjustment(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_ExceptionCheckMotion *);0;TR;RedundantExpressionAdjustment;0;0
TR_RedundantExpressionAdjustment;TR_RedundantExpressionAdjustment(const class TR_RedundantExpressionAdjustment &);0;TR;RedundantExpressionAdjustment;1;0
TR_IndirectCallSite;TR_IndirectCallSite(const class TR_IndirectCallSite &);1;TR;IndirectCallSite;1;0
TR_IndirectCallSite;TR_IndirectCallSite(class TR_IndirectCallSite &&);0;TR;IndirectCallSite;1;0
operator delete;operator delete(void *,TR::Region &);1;TR;InlinerTracer;0;0
operator delete;operator delete(void *,size_t);0;TR;InlinerTracer;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;InlinerTracer;0;0
TR_BackwardReachability;TR_BackwardReachability(class TR_BackwardReachability &&);1;TR;BackwardReachability;1;0
TR_BackwardReachability;TR_BackwardReachability(TR::Compilation *);0;TR;BackwardReachability;0;0
TR_BackwardReachability;TR_BackwardReachability(const class TR_BackwardReachability &);0;TR;BackwardReachability;1;0
TR_ReachabilityAnalysis;TR_ReachabilityAnalysis(class TR_ReachabilityAnalysis &&);1;TR;ReachabilityAnalysis;1;0
TR_ReachabilityAnalysis;TR_ReachabilityAnalysis(const class TR_ReachabilityAnalysis &);0;TR;ReachabilityAnalysis;1;0
TR_ReachabilityAnalysis;TR_ReachabilityAnalysis(TR::Compilation *);0;TR;ReachabilityAnalysis;0;0
operator=;operator=(const class TR_ReachabilityAnalysis &);1;TR;ReachabilityAnalysis;1;0
operator=;operator=(class TR_ReachabilityAnalysis &&);0;TR;ReachabilityAnalysis;1;0
operator=;operator=(const class TR_BackwardReachability &);0;TR;BackwardReachability;1;0
operator=;operator=(class TR_BackwardReachability &&);0;TR;BackwardReachability;1;0
operator=;operator=(const class TR_CanReachGivenBlocks &);0;TR;CanReachGivenBlocks;1;0
operator=;operator=(class TR_CanReachGivenBlocks &&);0;TR;CanReachGivenBlocks;1;0
TR_ForwardReachability;TR_ForwardReachability(class TR_ForwardReachability &&);1;TR;ForwardReachability;1;0
TR_ForwardReachability;TR_ForwardReachability(const class TR_ForwardReachability &);0;TR;ForwardReachability;1;0
TR_ForwardReachability;TR_ForwardReachability(TR::Compilation *);0;TR;ForwardReachability;0;0
operator=;operator=(const class TR_ForwardReachability &);0;TR;ForwardReachability;1;0
operator=;operator=(class TR_ForwardReachability &&);0;TR;ForwardReachability;1;0
operator=;operator=(class TR_CanBeReachedFromCatchBlock &&);0;TR;CanBeReachedFromCatchBlock;1;0
operator=;operator=(const class TR_CanBeReachedFromCatchBlock &);0;TR;CanBeReachedFromCatchBlock;1;0
TR_ForwardReachabilityWithoutExceptionEdges;TR_ForwardReachabilityWithoutExceptionEdges(class TR_ForwardReachabilityWithoutExceptionEdges &&);1;TR;ForwardReachabilityWithoutExceptionEdges;1;0
TR_ForwardReachabilityWithoutExceptionEdges;TR_ForwardReachabilityWithoutExceptionEdges(const class TR_ForwardReachabilityWithoutExceptionEdges &);0;TR;ForwardReachabilityWithoutExceptionEdges;1;0
TR_ForwardReachabilityWithoutExceptionEdges;TR_ForwardReachabilityWithoutExceptionEdges(TR::Compilation *);0;TR;ForwardReachabilityWithoutExceptionEdges;0;0
operator=;operator=(const class TR_ForwardReachabilityWithoutExceptionEdges &);0;TR;ForwardReachabilityWithoutExceptionEdges;1;0
operator=;operator=(class TR_ForwardReachabilityWithoutExceptionEdges &&);0;TR;ForwardReachabilityWithoutExceptionEdges;1;0
operator=;operator=(const class TR_CanBeReachedWithoutExceptionEdges &);0;TR;CanBeReachedWithoutExceptionEdges;1;0
operator=;operator=(class TR_CanBeReachedWithoutExceptionEdges &&);0;TR;CanBeReachedWithoutExceptionEdges;1;0
operator=;operator=(const class TR_CanReachNonColdBlocks &);0;TR;CanReachNonColdBlocks;1;0
operator=;operator=(class TR_CanReachNonColdBlocks &&);0;TR;CanReachNonColdBlocks;1;0
TR_ReachingDefinitions;TR_ReachingDefinitions(class TR_ReachingDefinitions &&);1;TR;ReachingDefinitions;1;0
TR_ReachingDefinitions;TR_ReachingDefinitions(const class TR_ReachingDefinitions &);0;TR;ReachingDefinitions;1;0
TR_ReachingDefinitions;TR_ReachingDefinitions(TR::Compilation *,TR::CFG *,TR::Optimizer *,class TR_UseDefInfo *,class TR_UseDefInfo::AuxiliaryData &,_Bool);0;TR;ReachingDefinitions;0;0
TR_RedundantAsyncCheckRemoval;TR_RedundantAsyncCheckRemoval(class TR_RedundantAsyncCheckRemoval &&);1;TR;RedundantAsyncCheckRemoval;1;0
TR_RedundantAsyncCheckRemoval;TR_RedundantAsyncCheckRemoval(const class TR_RedundantAsyncCheckRemoval &);0;TR;RedundantAsyncCheckRemoval;1;0
TR_RegisterAnticipatability;TR_RegisterAnticipatability(const class TR_RegisterAnticipatability &);1;TR;RegisterAnticipatability;1;0
TR_RegisterAnticipatability;TR_RegisterAnticipatability(class TR_RegisterAnticipatability &&);0;TR;RegisterAnticipatability;1;0
TR_RegisterAnticipatability;TR_RegisterAnticipatability(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_BitVector **,_Bool);0;TR;RegisterAnticipatability;0;0
TR_RegisterAvailability;TR_RegisterAvailability(class TR_RegisterAvailability &&);1;TR;RegisterAvailability;1;0
TR_RegisterAvailability;TR_RegisterAvailability(const class TR_RegisterAvailability &);0;TR;RegisterAvailability;1;0
TR_RegisterAvailability;TR_RegisterAvailability(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_BitVector **,_Bool);0;TR;RegisterAvailability;0;0
TR_RegisterCandidate;TR_RegisterCandidate(const class TR_RegisterCandidate &);1;TR;RegisterCandidate;1;0
TR_ShrinkWrap;TR_ShrinkWrap(TR::OptimizationManager *);1;TR;ShrinkWrap;0;0
TR_ShrinkWrap;TR_ShrinkWrap(const class TR_ShrinkWrap &);0;TR;ShrinkWrap;1;0
Simplifier;Simplifier(class OMR::Simplifier &&);1;OMR;Simplifier;1;0
Simplifier;Simplifier(const class OMR::Simplifier &);0;OMR;Simplifier;1;0
Simplifier;Simplifier(const class TR::Simplifier &);0;TR;Simplifier;1;0
Simplifier;Simplifier(class TR::Simplifier &&);0;TR;Simplifier;1;0
simplify;simplify(TR::Block *);1;OMR;Simplifier;0;0
addProjectSpecializedRelocation;addProjectSpecializedRelocation(TR::Instruction *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *);1;OMR;CodeGenerator;0;0
addProjectSpecializedRelocation;addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *);0;OMR;CodeGenerator;0;0
generateDebugCounter;generateDebugCounter(const char *,TR::Register *,TR::RegisterDependencyConditions &,int8_t,int32_t,TR::Instruction *);1;OMR;CodeGenerator;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;CodeGenerator;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;TransformUtil;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;TransformUtil;0;0
TR_InductionVariable;TR_InductionVariable(const class TR_InductionVariable &);1;TR;InductionVariable;1;0
TR_InductionVariable;TR_InductionVariable(TR::RegisterMappedSymbol *,TR::VPConstraint *,TR::VPConstraint *,TR::VPConstraint *,enum TR_YesNoMaybe);0;TR;InductionVariable;0;0
TR_TranslateTable;TR_TranslateTable(class TR_TranslateTable &&);1;TR;TranslateTable;1;0
TR_TranslateTable;TR_TranslateTable(const class TR_TranslateTable &);0;TR;TranslateTable;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;TranslateTable;0;0
operator delete;operator delete(void *,size_t);0;TR;TranslateTable;0;0
TR_SetTranslateTable;TR_SetTranslateTable(class TR_SetTranslateTable &&);1;TR;SetTranslateTable;1;0
TR_SetTranslateTable;TR_SetTranslateTable(TR::Compilation *,uint8_t,uint8_t,void *,int);0;TR;SetTranslateTable;0;0
TR_SetTranslateTable;TR_SetTranslateTable(const class TR_SetTranslateTable &);0;TR;SetTranslateTable;1;0
TR_UnionDFSetAnalysis;TR_UnionDFSetAnalysis(class TR_UnionDFSetAnalysis<class TR_SingleBitContainer *> &&);1;TR;UnionDFSetAnalysis;1;0
TR_UnionDFSetAnalysis;TR_UnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);0;TR;UnionDFSetAnalysis;0;0
TR_UnionDFSetAnalysis;TR_UnionDFSetAnalysis(const class TR_UnionDFSetAnalysis<class TR_BitVector *> &);0;TR;UnionDFSetAnalysis;1;0
TR_UnionDFSetAnalysis;TR_UnionDFSetAnalysis(const class TR_UnionDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;UnionDFSetAnalysis;1;0
TR_UnionDFSetAnalysis;TR_UnionDFSetAnalysis(class TR_UnionDFSetAnalysis<class TR_BitVector *> &&);0;TR;UnionDFSetAnalysis;1;0
compose;compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;UnionDFSetAnalysis;0;1
compose;compose(class TR_BitVector *,class TR_BitVector *);0;TR;UnionDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_SingleBitContainer *);0;TR;UnionDFSetAnalysis;0;1
initializeInfo;initializeInfo(class TR_BitVector *);0;TR;UnionDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_BitVector *,class TR_BitVector *);0;TR;UnionDFSetAnalysis;0;1
inverseCompose;inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);0;TR;UnionDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_SingleBitContainer *);0;TR;UnionDFSetAnalysis;0;1
inverseInitializeInfo;inverseInitializeInfo(class TR_BitVector *);0;TR;UnionDFSetAnalysis;0;1
operator=;operator=(const class TR_UnionDFSetAnalysis<class TR_SingleBitContainer *> &);0;TR;UnionDFSetAnalysis;1;0
operator=;operator=(class TR_UnionDFSetAnalysis<class TR_SingleBitContainer *> &&);0;TR;UnionDFSetAnalysis;1;0
operator=;operator=(class TR_UnionDFSetAnalysis<class TR_BitVector *> &&);0;TR;UnionDFSetAnalysis;1;0
operator=;operator=(const class TR_UnionDFSetAnalysis<class TR_BitVector *> &);0;TR;UnionDFSetAnalysis;1;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Optimizer;0;0
TR_ValueNumberInfo;TR_ValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);1;TR;ValueNumberInfo;0;0
TR_ValueNumberInfo;TR_ValueNumberInfo(class TR_ValueNumberInfo &);0;TR;ValueNumberInfo;1;0
addEdge;addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);1;OMR;CFG;0;0
addEdge;addEdge(TR::CFGEdge *);0;OMR;CFG;0;0
TR_HashValueNumberInfo;TR_HashValueNumberInfo(class TR_HashValueNumberInfo &);0;TR;HashValueNumberInfo;1;0
TR_Array<T>;TR_Array<T>(class TR_PersistentMemory *,uint32_t,_Bool);1;TR;Array;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;Array;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Array;0;0
allocateValueNumber;allocateValueNumber(TR::Node *,vcount_t);1;TR;ValueNumberInfo;0;1
allocateValueNumber;allocateValueNumber(TR::Node *);0;TR;ValueNumberInfo;0;1
TR_VirtualGuardHeadMerger;TR_VirtualGuardHeadMerger(const class TR_VirtualGuardHeadMerger &);1;TR;VirtualGuardHeadMerger;1;0
TR_VirtualGuardHeadMerger;TR_VirtualGuardHeadMerger(class TR_VirtualGuardHeadMerger &&);0;TR;VirtualGuardHeadMerger;1;0
rewriteIndexExpression;rewriteIndexExpression(class TR_PrimaryInductionVariable *,TR::Node *,TR::Node *,_Bool);1;TR;IndexExprManipulator;0;0
rewriteIndexExpression;rewriteIndexExpression(class TR_Structure *);0;TR;IndexExprManipulator;0;0
TR_OrderedBlockList;TR_OrderedBlockList(const class TR_OrderedBlockList &);1;TR;OrderedBlockList;1;0
TR_OrderedBlockList;TR_OrderedBlockList(class TR_OrderedBlockList &&);0;TR;OrderedBlockList;1;0
TR_OrderedBlockList;TR_OrderedBlockList(class TR_Memory *);0;TR;OrderedBlockList;0;0
add;add(T *,List<T> &);1;;List;0;0
add;add(List<T> &);0;;List;0;0
TR_BackwardUnionBitVectorAnalysis;TR_BackwardUnionBitVectorAnalysis(class TR_BackwardUnionBitVectorAnalysis &&);1;TR;BackwardUnionBitVectorAnalysis;1;0
TR_BackwardUnionBitVectorAnalysis;TR_BackwardUnionBitVectorAnalysis(const class TR_BackwardUnionBitVectorAnalysis &);0;TR;BackwardUnionBitVectorAnalysis;1;0
TR_GeneralSinkStores;TR_GeneralSinkStores(const class TR_GeneralSinkStores &);1;TR;GeneralSinkStores;1;0
TR_GeneralSinkStores;TR_GeneralSinkStores(class TR_GeneralSinkStores &&);0;TR;GeneralSinkStores;1;0
TR_LiveOnAllPaths;TR_LiveOnAllPaths(const class TR_LiveOnAllPaths &);1;TR;LiveOnAllPaths;1;0
TR_LiveOnAllPaths;TR_LiveOnAllPaths(class TR_LiveOnAllPaths &&);0;TR;LiveOnAllPaths;1;0
operator delete;operator delete(void *,size_t);1;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;LiveVariableInformation;0;0
operator new;operator new(size_t,TR::Region &);0;TR;LiveVariableInformation;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;LiveVariableInformation;0;0
TR_StripMiner;TR_StripMiner(const class TR_StripMiner &);1;TR;StripMiner;1;0
TR_StripMiner;TR_StripMiner(class TR_StripMiner &&);0;TR;StripMiner;1;0
ValuePropagation;ValuePropagation(class OMR::ValuePropagation &&);1;OMR;ValuePropagation;1;0
ValuePropagation;ValuePropagation(TR::OptimizationManager *);0;OMR;ValuePropagation;0;0
addGlobalConstraint;addGlobalConstraint(TR::Node *,int32_t,TR::VPConstraint *,int32_t);1;OMR;ValuePropagation;0;0
addGlobalConstraint;addGlobalConstraint(TR::Node *,TR::VPConstraint *,TR::Node *);0;OMR;ValuePropagation;0;0
removeConstraints;removeConstraints(int32_t);1;OMR;ValuePropagation;0;0
removeConstraints;removeConstraints();0;OMR;ValuePropagation;0;0
setUnreachablePath;setUnreachablePath(TR::CFGEdge *);1;OMR;ValuePropagation;0;0
setUnreachablePath;setUnreachablePath(ValueConstraints &);0;OMR;ValuePropagation;0;0
ValueConstraintHandler;ValueConstraintHandler(class OMR::ValuePropagation::ValueConstraintHandler &&);1;OMR::ValuePropagation;ValueConstraintHandler;1;0
ValueConstraintHandler;ValueConstraintHandler(const class OMR::ValuePropagation::ValueConstraintHandler &);0;OMR::ValuePropagation;ValueConstraintHandler;1;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;HedgeTreeHandler;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;TR;HedgeTreeHandler;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;HedgeTreeHandler;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::SymbolReference *);1;OMR;Node;0;0
operator=;operator=(const class TR_Method &);1;TR;Method;1;0
operator=;operator=(class TR_Method &&);0;TR;Method;1;0
VPArrayInfo;VPArrayInfo(const class TR::VPArrayInfo &);1;TR;VPArrayInfo;1;0
VPArrayInfo;VPArrayInfo(int32_t,int32_t,int32_t);0;TR;VPArrayInfo;0;0
VPArrayInfo;VPArrayInfo(class TR::VPArrayInfo &&);0;TR;VPArrayInfo;1;0
operator new[];operator new[](size_t,TR::Region &);1;TR;VPConstraint;0;0
print;print(TR::Compilation *,TR::FILE *);1;TR;VPConstraint;0;0
VPClass;VPClass(const class TR::VPClass &);1;TR;VPClass;1;0
VPClass;VPClass(TR::VPClassType *,TR::VPClassPresence *,TR::VPPreexistentObject *,TR::VPArrayInfo *,TR::VPObjectLocation *);0;TR;VPClass;0;0
VPClass;VPClass(class TR::VPClass &&);0;TR;VPClass;1;0
VPClassType;VPClassType(class TR::VPClassType &&);1;TR;VPClassType;1;0
VPClassType;VPClassType(int32_t);0;TR;VPClassType;0;0
VPEqual;VPEqual(class TR::VPEqual &&);1;TR;VPEqual;1;0
VPEqual;VPEqual(const class TR::VPEqual &);0;TR;VPEqual;1;0
VPEqual;VPEqual(int32_t);0;TR;VPEqual;0;0
VPGreaterThanOrEqual;VPGreaterThanOrEqual(class TR::VPGreaterThanOrEqual &&);1;TR;VPGreaterThanOrEqual;1;0
VPGreaterThanOrEqual;VPGreaterThanOrEqual(const class TR::VPGreaterThanOrEqual &);0;TR;VPGreaterThanOrEqual;1;0
VPGreaterThanOrEqual;VPGreaterThanOrEqual(int32_t);0;TR;VPGreaterThanOrEqual;0;0
VPIntConst;VPIntConst(class TR::VPIntConst &&);1;TR;VPIntConst;1;0
VPIntConst;VPIntConst(const class TR::VPIntConst &);0;TR;VPIntConst;1;0
VPIntConst;VPIntConst(int32_t);0;TR;VPIntConst;0;0
VPLessThanOrEqual;VPLessThanOrEqual(class TR::VPLessThanOrEqual &&);1;TR;VPLessThanOrEqual;1;0
VPLessThanOrEqual;VPLessThanOrEqual(const class TR::VPLessThanOrEqual &);0;TR;VPLessThanOrEqual;1;0
VPLessThanOrEqual;VPLessThanOrEqual(int32_t);0;TR;VPLessThanOrEqual;0;0
VPLongConst;VPLongConst(class TR::VPLongConst &&);1;TR;VPLongConst;1;0
VPLongConst;VPLongConst(const class TR::VPLongConst &);0;TR;VPLongConst;1;0
VPLongConst;VPLongConst(int64_t);0;TR;VPLongConst;0;0
VPMergedConstraints;VPMergedConstraints(class TR::VPMergedConstraints &&);1;TR;VPMergedConstraints;1;0
VPMergedConstraints;VPMergedConstraints(const class TR::VPMergedConstraints &);0;TR;VPMergedConstraints;1;0
VPMergedConstraints;VPMergedConstraints(ListElement<TR::VPConstraint> *,class TR_Memory *);0;TR;VPMergedConstraints;0;0
VPNotEqual;VPNotEqual(const class TR::VPNotEqual &);1;TR;VPNotEqual;1;0
VPNotEqual;VPNotEqual(class TR::VPNotEqual &&);0;TR;VPNotEqual;1;0
VPNotEqual;VPNotEqual(int32_t);0;TR;VPNotEqual;0;0
VPObjectLocation;VPObjectLocation(class TR::VPObjectLocation &&);1;TR;VPObjectLocation;1;0
VPObjectLocation;VPObjectLocation(const class TR::VPObjectLocation &);0;TR;VPObjectLocation;1;0
VPObjectLocation;VPObjectLocation(enum TR::VPObjectLocation::VPObjectLocationKind);0;TR;VPObjectLocation;0;0
VPPreexistentObject;VPPreexistentObject(class TR::VPPreexistentObject &&);1;TR;VPPreexistentObject;1;0
VPPreexistentObject;VPPreexistentObject(class TR_OpaqueClassBlock *);0;TR;VPPreexistentObject;0;0
VPPreexistentObject;VPPreexistentObject(const class TR::VPPreexistentObject &);0;TR;VPPreexistentObject;1;0
VPShortConst;VPShortConst(class TR::VPShortConst &&);1;TR;VPShortConst;1;0
VPShortConst;VPShortConst(const class TR::VPShortConst &);0;TR;VPShortConst;1;0
VPShortConst;VPShortConst(int16_t);0;TR;VPShortConst;0;0
VPShortRange;VPShortRange(class TR::VPShortRange &&);1;TR;VPShortRange;1;0
VPShortRange;VPShortRange(int16_t,int16_t);0;TR;VPShortRange;0;0
VPShortRange;VPShortRange(const class TR::VPShortRange &);0;TR;VPShortRange;1;0
VPSync;VPSync(class TR::VPSync &&);1;TR;VPSync;1;0
VPSync;VPSync(const class TR::VPSync &);0;TR;VPSync;1;0
VPSync;VPSync(enum TR_YesNoMaybe);0;TR;VPSync;0;0
VPUnresolvedClass;VPUnresolvedClass(class TR::VPUnresolvedClass &&);1;TR;VPUnresolvedClass;1;0
VPUnresolvedClass;VPUnresolvedClass(const class TR::VPUnresolvedClass &);0;TR;VPUnresolvedClass;1;0
VPUnresolvedClass;VPUnresolvedClass(const char *,int32_t,class TR_ResolvedMethod *);0;TR;VPUnresolvedClass;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;HedgeNode;0;0
operator delete;operator delete(void *,size_t);0;TR;HedgeNode;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;HedgeNode;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;TR;HedgeNode;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;HedgeNode;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;TR;HedgeNode;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;HedgeNode;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;VPConstraint;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;TR;VPConstraint;0;0
ArraycopyTransformation;ArraycopyTransformation(const class TR::ArraycopyTransformation &);1;TR;ArraycopyTransformation;1;0
ArraycopyTransformation;ArraycopyTransformation(class TR::ArraycopyTransformation &&);0;TR;ArraycopyTransformation;1;0
findGlobalConstraint;findGlobalConstraint(int32_t);1;OMR;ValuePropagation;0;0
findGlobalConstraint;findGlobalConstraint(int32_t,int32_t);0;OMR;ValuePropagation;0;0
VPShortRange;VPShortRange(int16_t,int16_t);1;TR;VPShortRange;0;0
VPShortRange;VPShortRange(class TR::VPShortRange &&);0;TR;VPShortRange;1;0
TR_CanReachGivenBlocks;TR_CanReachGivenBlocks(const class TR_CanReachGivenBlocks &);1;TR;CanReachGivenBlocks;1;0
TR_CanReachGivenBlocks;TR_CanReachGivenBlocks(TR::Compilation *,class TR_BitVector *);0;TR;CanReachGivenBlocks;0;0
TR_CanReachGivenBlocks;TR_CanReachGivenBlocks(class TR_CanReachGivenBlocks &&);0;TR;CanReachGivenBlocks;1;0
TR_CanBeReachedWithoutExceptionEdges;TR_CanBeReachedWithoutExceptionEdges(class TR_CanBeReachedWithoutExceptionEdges &&);1;TR;CanBeReachedWithoutExceptionEdges;1;0
TR_CanBeReachedWithoutExceptionEdges;TR_CanBeReachedWithoutExceptionEdges(const class TR_CanBeReachedWithoutExceptionEdges &);0;TR;CanBeReachedWithoutExceptionEdges;1;0
TR_CanBeReachedWithoutExceptionEdges;TR_CanBeReachedWithoutExceptionEdges(TR::Compilation *);0;TR;CanBeReachedWithoutExceptionEdges;0;0
TR_CanReachNonColdBlocks;TR_CanReachNonColdBlocks(class TR_CanReachNonColdBlocks &&);1;TR;CanReachNonColdBlocks;1;0
TR_CanReachNonColdBlocks;TR_CanReachNonColdBlocks(const class TR_CanReachNonColdBlocks &);0;TR;CanReachNonColdBlocks;1;0
TR_CanReachNonColdBlocks;TR_CanReachNonColdBlocks(TR::Compilation *);0;TR;CanReachNonColdBlocks;0;0
TR_ClassLoadCheck;TR_ClassLoadCheck(class TR_ClassLoadCheck &&);1;TR;ClassLoadCheck;1;0
TR_ClassLoadCheck;TR_ClassLoadCheck(const class TR_ClassLoadCheck &);0;TR;ClassLoadCheck;1;0
TR_ClassLoadCheck;TR_ClassLoadCheck(char *,int32_t);0;TR;ClassLoadCheck;0;0
ValueConstraint;ValueConstraint(class OMR::ValuePropagation::ValueConstraint &&);1;OMR::ValuePropagation;ValueConstraint;1;0
ValueConstraint;ValueConstraint(int32_t);0;OMR::ValuePropagation;ValueConstraint;0;0
ValueConstraint;ValueConstraint(const class OMR::ValuePropagation::ValueConstraint &);0;OMR::ValuePropagation;ValueConstraint;1;0
ValueConstraintHandler;ValueConstraintHandler();1;OMR::ValuePropagation;ValueConstraintHandler;1;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;VPConstraint;0;0
VPClassPresence;VPClassPresence(class TR::VPClassPresence &&);1;TR;VPClassPresence;1;0
VPClassPresence;VPClassPresence(const class TR::VPClassPresence &);0;TR;VPClassPresence;1;0
VPClassPresence;VPClassPresence();0;TR;VPClassPresence;0;0
VPNonNullObject;VPNonNullObject(class TR::VPNonNullObject &&);1;TR;VPNonNullObject;1;0
VPNonNullObject;VPNonNullObject(const class TR::VPNonNullObject &);0;TR;VPNonNullObject;1;0
VPNonNullObject;VPNonNullObject();0;TR;VPNonNullObject;1;0
VPNullObject;VPNullObject(const class TR::VPNullObject &);1;TR;VPNullObject;1;0
VPNullObject;VPNullObject();0;TR;VPNullObject;1;0
VPNullObject;VPNullObject(class TR::VPNullObject &&);0;TR;VPNullObject;1;0
VPUnreachablePath;VPUnreachablePath(const class TR::VPUnreachablePath &);1;TR;VPUnreachablePath;1;0
VPUnreachablePath;VPUnreachablePath(class TR::VPUnreachablePath &&);0;TR;VPUnreachablePath;1;0
VPUnreachablePath;VPUnreachablePath();0;TR;VPUnreachablePath;0;0
getAliasesAndUnionWith;getAliasesAndUnionWith(class TR_BitVector &);1;TR;AliasSetInterface;0;0
getAliasesAndUnionWith;getAliasesAndUnionWith(TR::SparseBitVector &);0;TR;AliasSetInterface;0;0
TR_Stats;TR_Stats(class TR_Stats &&);1;TR;Stats;1;0
TR_Stats;TR_Stats(const char *);0;TR;Stats;0;0
TR_Stats;TR_Stats(const class TR_Stats &);0;TR;Stats;1;0
TR_Stats;TR_Stats();0;TR;Stats;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;Stats;0;0
operator delete;operator delete(void *,size_t);0;TR;Stats;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Stats;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Stats;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Stats;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;Stats;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Stats;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Stats;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Stats;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Stats;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Stats;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Stats;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Stats;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Stats;0;0
operator new;operator new(size_t,TR::Region &);0;TR;Stats;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Stats;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;Stats;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Stats;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Stats;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Stats;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Stats;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Stats;0;0
report;report(FILE *);1;TR;Stats;0;0
report;report(char *);0;TR;Stats;0;0
update;update(double);1;TR;Stats;0;0
update;update(double,double);0;TR;StatsInterval;0;0
AheadOfTimeCompile;AheadOfTimeCompile(const class OMR::AheadOfTimeCompile &);1;OMR;AheadOfTimeCompile;1;0
AheadOfTimeCompile;AheadOfTimeCompile(class OMR::AheadOfTimeCompile &&);0;OMR;AheadOfTimeCompile;1;0
AheadOfTimeCompile;AheadOfTimeCompile(uint32_t *,TR::Compilation *);0;OMR;AheadOfTimeCompile;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;AheadOfTimeCompile;0;0
operator delete;operator delete(void *,size_t);0;OMR;AheadOfTimeCompile;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;AheadOfTimeCompile;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;AheadOfTimeCompile;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;AheadOfTimeCompile;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator=;operator=(class OMR::AheadOfTimeCompile &&);1;OMR;AheadOfTimeCompile;1;0
operator=;operator=(const class OMR::AheadOfTimeCompile &);0;OMR;AheadOfTimeCompile;1;0
operator=;operator=(class TR::AheadOfTimeCompile &&);0;TR;AheadOfTimeCompile;1;0
operator=;operator=(const class TR::AheadOfTimeCompile &);0;TR;AheadOfTimeCompile;1;0
BeforeBinaryEncodingExternalRelocation;BeforeBinaryEncodingExternalRelocation();1;TR;BeforeBinaryEncodingExternalRelocation;0;0
BeforeBinaryEncodingExternalRelocation;BeforeBinaryEncodingExternalRelocation(TR::Instruction *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);0;TR;BeforeBinaryEncodingExternalRelocation;0;0
BeforeBinaryEncodingExternalRelocation;BeforeBinaryEncodingExternalRelocation(TR::Instruction *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);0;TR;BeforeBinaryEncodingExternalRelocation;0;0
ExternalRelocation;ExternalRelocation(class TR::ExternalRelocation &&);1;TR;ExternalRelocation;1;0
ExternalRelocation;ExternalRelocation(const class TR::ExternalRelocation &);0;TR;ExternalRelocation;1;0
ExternalRelocation;ExternalRelocation();0;TR;ExternalRelocation;0;0
ExternalRelocation;ExternalRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);0;TR;ExternalRelocation;0;0
ExternalRelocation;ExternalRelocation(uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);0;TR;ExternalRelocation;0;0
Relocation;Relocation(class TR::Relocation &&);1;TR;Relocation;1;0
Relocation;Relocation();0;TR;Relocation;0;0
Relocation;Relocation(const class TR::Relocation &);0;TR;Relocation;1;0
Relocation;Relocation(uint8_t *);0;TR;Relocation;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;Relocation;0;0
operator delete;operator delete(void *,size_t);0;TR;Relocation;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Relocation;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
operator delete[];operator delete[](void *,TR::Region &);1;TR;Relocation;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;TR;Relocation;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Relocation;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;TR;Relocation;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;TR;Relocation;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;Relocation;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Relocation;0;0
operator new;operator new(size_t,TR::Region &);0;TR;Relocation;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;Relocation;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;Relocation;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;TR;Relocation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;Relocation;0;0
operator=;operator=(const class TR::Relocation &);1;TR;Relocation;1;0
operator=;operator=(class TR::Relocation &&);0;TR;Relocation;1;0
operator=;operator=(const class TR::ExternalRelocation &);0;TR;ExternalRelocation;1;0
operator=;operator=(class TR::ExternalRelocation &&);0;TR;ExternalRelocation;1;0
operator=;operator=(const class TR::BeforeBinaryEncodingExternalRelocation &);0;TR;BeforeBinaryEncodingExternalRelocation;1;0
operator=;operator=(class TR::BeforeBinaryEncodingExternalRelocation &&);0;TR;BeforeBinaryEncodingExternalRelocation;1;0
setLinkage;setLinkage(TR::Linkage *);1;OMR;CodeGenerator;0;0
setLinkage;setLinkage(enum TR_LinkageConventions,TR::Linkage *);0;OMR;CodeGenerator;0;0
traceRegAssigned;traceRegAssigned(TR::Register *,TR::Register *,TR_RegisterAssignmentFlags);1;OMR;CodeGenerator;0;0
traceRegAssigned;traceRegAssigned(TR::Register *,TR::Register *);0;OMR;CodeGenerator;0;0
operator=;operator=(const class TR::ExternalOrderedPair32BitRelocation &);0;TR;ExternalOrderedPair32BitRelocation;1;0
operator=;operator=(class TR::ExternalOrderedPair32BitRelocation &&);0;TR;ExternalOrderedPair32BitRelocation;1;0
operator=;operator=(class TR::InstructionAbsoluteRelocation &&);0;TR;InstructionAbsoluteRelocation;1;0
operator=;operator=(const class TR::InstructionAbsoluteRelocation &);0;TR;InstructionAbsoluteRelocation;1;0
IteratedExternalRelocation;IteratedExternalRelocation();1;TR;IteratedExternalRelocation;0;0
IteratedExternalRelocation;IteratedExternalRelocation(uint8_t *,TR_ExternalRelocationTargetKind,flags8_t,TR::CodeGenerator *);0;TR;IteratedExternalRelocation;0;0
IteratedExternalRelocation;IteratedExternalRelocation(uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,flags8_t,TR::CodeGenerator *);0;TR;IteratedExternalRelocation;0;0
LabelAbsoluteRelocation;LabelAbsoluteRelocation();1;TR;LabelAbsoluteRelocation;0;0
LabelAbsoluteRelocation;LabelAbsoluteRelocation(uint8_t *,TR::LabelSymbol *);0;TR;LabelAbsoluteRelocation;0;0
LabelRelocation;LabelRelocation(class TR::LabelRelocation &&);1;TR;LabelRelocation;1;0
LabelRelocation;LabelRelocation(const class TR::LabelRelocation &);0;TR;LabelRelocation;1;0
LabelRelocation;LabelRelocation();0;TR;LabelRelocation;0;0
LabelRelocation;LabelRelocation(uint8_t *,TR::LabelSymbol *);0;TR;LabelRelocation;0;0
operator=;operator=(class TR::LabelRelocation &&);0;TR;LabelRelocation;1;0
operator=;operator=(const class TR::LabelRelocation &);0;TR;LabelRelocation;1;0
operator=;operator=(class TR::LabelAbsoluteRelocation &&);0;TR;LabelAbsoluteRelocation;1;0
operator=;operator=(const class TR::LabelAbsoluteRelocation &);0;TR;LabelAbsoluteRelocation;1;0
LabelRelative12BitRelocation;LabelRelative12BitRelocation();1;TR;LabelRelative12BitRelocation;0;0
LabelRelative12BitRelocation;LabelRelative12BitRelocation(uint8_t *,TR::LabelSymbol *,_Bool);0;TR;LabelRelative12BitRelocation;0;0
operator=;operator=(class TR::LabelRelative12BitRelocation &&);0;TR;LabelRelative12BitRelocation;1;0
operator=;operator=(const class TR::LabelRelative12BitRelocation &);0;TR;LabelRelative12BitRelocation;1;0
LabelRelative16BitRelocation;LabelRelative16BitRelocation(uint8_t *,TR::LabelSymbol *,int8_t,_Bool);1;TR;LabelRelative16BitRelocation;0;0
LabelRelative16BitRelocation;LabelRelative16BitRelocation(uint8_t *,TR::LabelSymbol *);0;TR;LabelRelative16BitRelocation;0;0
LabelRelative16BitRelocation;LabelRelative16BitRelocation();0;TR;LabelRelative16BitRelocation;0;0
operator=;operator=(class TR::LabelRelative16BitRelocation &&);0;TR;LabelRelative16BitRelocation;1;0
operator=;operator=(const class TR::LabelRelative16BitRelocation &);0;TR;LabelRelative16BitRelocation;1;0
LabelRelative24BitRelocation;LabelRelative24BitRelocation();1;TR;LabelRelative24BitRelocation;0;0
LabelRelative24BitRelocation;LabelRelative24BitRelocation(uint8_t *,TR::LabelSymbol *);0;TR;LabelRelative24BitRelocation;0;0
operator=;operator=(class TR::LabelRelative24BitRelocation &&);0;TR;LabelRelative24BitRelocation;1;0
operator=;operator=(const class TR::LabelRelative24BitRelocation &);0;TR;LabelRelative24BitRelocation;1;0
LabelRelative32BitRelocation;LabelRelative32BitRelocation();1;TR;LabelRelative32BitRelocation;0;0
LabelRelative32BitRelocation;LabelRelative32BitRelocation(uint8_t *,TR::LabelSymbol *);0;TR;LabelRelative32BitRelocation;0;0
operator=;operator=(class TR::LabelRelative32BitRelocation &&);0;TR;LabelRelative32BitRelocation;1;0
operator=;operator=(const class TR::LabelRelative32BitRelocation &);0;TR;LabelRelative32BitRelocation;1;0
LabelRelative8BitRelocation;LabelRelative8BitRelocation();1;TR;LabelRelative8BitRelocation;0;0
LabelRelative8BitRelocation;LabelRelative8BitRelocation(uint8_t *,TR::LabelSymbol *);0;TR;LabelRelative8BitRelocation;0;0
operator=;operator=(class TR::LabelRelative8BitRelocation &&);0;TR;LabelRelative8BitRelocation;1;0
operator=;operator=(const class TR::LabelRelative8BitRelocation &);0;TR;LabelRelative8BitRelocation;1;0
LabelTable32BitRelocation;LabelTable32BitRelocation();1;TR;LabelTable32BitRelocation;0;0
LabelTable32BitRelocation;LabelTable32BitRelocation(uint8_t *,TR::LabelSymbol *);0;TR;LabelTable32BitRelocation;0;0
operator=;operator=(class TR::LabelTable32BitRelocation &&);0;TR;LabelTable32BitRelocation;1;0
operator=;operator=(const class TR::LabelTable32BitRelocation &);0;TR;LabelTable32BitRelocation;1;0
LoadLabelRelative16BitRelocation;LoadLabelRelative16BitRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);1;TR;LoadLabelRelative16BitRelocation;0;0
LoadLabelRelative16BitRelocation;LoadLabelRelative16BitRelocation();0;TR;LoadLabelRelative16BitRelocation;0;0
operator=;operator=(const class TR::LoadLabelRelative16BitRelocation &);0;TR;LoadLabelRelative16BitRelocation;1;0
operator=;operator=(class TR::LoadLabelRelative16BitRelocation &&);0;TR;LoadLabelRelative16BitRelocation;1;0
LoadLabelRelative32BitRelocation;LoadLabelRelative32BitRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);1;TR;LoadLabelRelative32BitRelocation;0;0
LoadLabelRelative32BitRelocation;LoadLabelRelative32BitRelocation();0;TR;LoadLabelRelative32BitRelocation;0;0
operator=;operator=(class TR::LoadLabelRelative32BitRelocation &&);0;TR;LoadLabelRelative32BitRelocation;1;0
operator=;operator=(const class TR::LoadLabelRelative32BitRelocation &);0;TR;LoadLabelRelative32BitRelocation;1;0
LoadLabelRelative64BitRelocation;LoadLabelRelative64BitRelocation();1;TR;LoadLabelRelative64BitRelocation;0;0
LoadLabelRelative64BitRelocation;LoadLabelRelative64BitRelocation(TR::Instruction *,TR::LabelSymbol *);0;TR;LoadLabelRelative64BitRelocation;0;0
operator=;operator=(const class TR::LoadLabelRelative64BitRelocation &);0;TR;LoadLabelRelative64BitRelocation;1;0
operator=;operator=(class TR::LoadLabelRelative64BitRelocation &&);0;TR;LoadLabelRelative64BitRelocation;1;0
Linkage;Linkage(class OMR::Linkage &&);1;OMR;Linkage;1;0
Linkage;Linkage(const class OMR::Linkage &);0;OMR;Linkage;1;0
loadArguments;loadArguments(TR::Instruction *,TR::ResolvedMethodSymbol *);1;OMR::X86;Linkage;0;0
loadArguments;loadArguments(TR::Node *,uint8_t *,_Bool,int32_t *,_Bool);0;OMR::X86;Linkage;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Linkage;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;Linkage;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Linkage;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;Linkage;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;Linkage;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;Linkage;0;0
operator=;operator=(const class OMR::Linkage &);1;OMR;Linkage;1;0
operator=;operator=(class OMR::Linkage &&);0;OMR;Linkage;1;0
GCStackAtlas;GCStackAtlas(class TR::GCStackAtlas &&);0;TR;GCStackAtlas;1;0
GCStackAtlas;GCStackAtlas(const class TR::GCStackAtlas &);0;TR;GCStackAtlas;1;0
operator=;operator=(const class TR_BitVectorIterator &);1;TR;BitVectorIterator;1;0
operator=;operator=(class TR_BitVectorIterator &&);0;TR;BitVectorIterator;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;GCRegisterMap;0;0
operator delete;operator delete(void *,size_t);0;OMR;GCRegisterMap;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;GCRegisterMap;0;0
operator=;operator=(const class OMR::CFG &);1;OMR;CFG;1;0
operator=;operator=(class OMR::CFG &&);0;OMR;CFG;1;0
CodeGenerator;CodeGenerator(const class OMR::CodeGenerator &);1;OMR;CodeGenerator;1;0
CodeGenerator;CodeGenerator(class OMR::CodeGenerator &&);0;OMR;CodeGenerator;1;0
apply16BitLabelRelativeRelocation;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,int8_t,_Bool);1;OMR;CodeGenerator;0;0
apply16BitLabelRelativeRelocation;apply16BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);0;OMR;CodeGenerator;0;0
estimateRegisterPressure;estimateRegisterPressure(TR::Node *,int32_t &,int32_t &,int32_t,class TR_BitVector *,_Bool,vcount_t,TR::SymbolReference *,_Bool &,_Bool,_Bool &);1;OMR;CodeGenerator;0;0
estimateRegisterPressure;estimateRegisterPressure(TR::Block *,vcount_t,int32_t,int32_t,_Bool &,int32_t,class TR_BitVector *,TR::SymbolReference *,_Bool);0;OMR;CodeGenerator;0;0
generateDebugCounterBump;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &);1;OMR;CodeGenerator;0;0
getSupportsConstantOffsetInAddressing;getSupportsConstantOffsetInAddressing(int64_t);1;OMR;CodeGenerator;0;0
getSupportsConstantOffsetInAddressing;getSupportsConstantOffsetInAddressing();0;OMR;CodeGenerator;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;GCStackAtlas;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;GCStackAtlas;0;0
findOrCreateSymRefWithKnownObject;findOrCreateSymRefWithKnownObject(TR::SymbolReference *,uintptrj_t *,_Bool);1;OMR;SymbolReferenceTable;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;Symbol;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Linkage;0;0
setParameterLinkageRegisterIndex;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);1;OMR;Linkage;0;1
setParameterLinkageRegisterIndex;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &);0;OMR;Linkage;0;1
storeArguments;storeArguments(TR::Instruction *,TR::ResolvedMethodSymbol *);1;OMR::X86;Linkage;0;0
storeArguments;storeArguments(TR::Node *,uint8_t *,_Bool,int32_t *);0;OMR::X86;Linkage;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;Instruction;0;0
operator=;operator=(class OMR::Instruction &&);1;OMR;Instruction;1;0
operator=;operator=(const class OMR::Instruction &);0;OMR;Instruction;1;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;CodeGenerator;0;0
Instruction;Instruction();1;OMR;Instruction;0;0
Instruction;Instruction(class OMR::Instruction &&);0;OMR;Instruction;1;0
operator delete;operator delete(void *,TR::Region &);1;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;GCRegisterMap;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;GCRegisterMap;0;0
LabelSymbol;LabelSymbol(const class OMR::LabelSymbol &);1;OMR;LabelSymbol;1;0
operator delete;operator delete(void *,size_t);1;OMR;AheadOfTimeCompile;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;AheadOfTimeCompile;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;AheadOfTimeCompile;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;AheadOfTimeCompile;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;AheadOfTimeCompile;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;AheadOfTimeCompile;0;0
operator delete;operator delete(void *,size_t);1;TR;Relocation;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;Relocation;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;TR;Relocation;0;0
operator new[];operator new[](size_t,TR::Region &);0;TR;Relocation;0;0
ExternalOrderedPair32BitRelocation;ExternalOrderedPair32BitRelocation(class TR::ExternalOrderedPair32BitRelocation &&);1;TR;ExternalOrderedPair32BitRelocation;1;0
ExternalOrderedPair32BitRelocation;ExternalOrderedPair32BitRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);0;TR;ExternalOrderedPair32BitRelocation;0;0
ExternalOrderedPair32BitRelocation;ExternalOrderedPair32BitRelocation(const class TR::ExternalOrderedPair32BitRelocation &);0;TR;ExternalOrderedPair32BitRelocation;1;0
IteratedExternalRelocation;IteratedExternalRelocation(const class TR::IteratedExternalRelocation &);1;TR;IteratedExternalRelocation;1;0
IteratedExternalRelocation;IteratedExternalRelocation();0;TR;IteratedExternalRelocation;0;0
IteratedExternalRelocation;IteratedExternalRelocation(class TR::IteratedExternalRelocation &&);0;TR;IteratedExternalRelocation;1;0
LabelRelocation;LabelRelocation(const class TR::LabelRelocation &);1;TR;LabelRelocation;1;0
LabelRelocation;LabelRelocation(class TR::LabelRelocation &&);0;TR;LabelRelocation;1;0
LoadLabelRelative16BitRelocation;LoadLabelRelative16BitRelocation();1;TR;LoadLabelRelative16BitRelocation;0;0
LoadLabelRelative16BitRelocation;LoadLabelRelative16BitRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);0;TR;LoadLabelRelative16BitRelocation;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
RegisterDependencyConditions;RegisterDependencyConditions(const class OMR::RegisterDependencyConditions &);1;OMR;RegisterDependencyConditions;1;0
RegisterDependencyConditions;RegisterDependencyConditions(class OMR::RegisterDependencyConditions &&);0;OMR;RegisterDependencyConditions;1;0
RegisterDependencyConditions;RegisterDependencyConditions();0;OMR;RegisterDependencyConditions;0;0
RegisterDependencyConditions;RegisterDependencyConditions(const class OMR::X86::RegisterDependencyConditions &);0;OMR::X86;RegisterDependencyConditions;1;0
RegisterDependencyConditions;RegisterDependencyConditions(class OMR::X86::RegisterDependencyConditions &&);0;OMR::X86;RegisterDependencyConditions;1;0
RegisterDependencyConditions;RegisterDependencyConditions(class TR_X86RegisterDependencyIndex,class TR_X86RegisterDependencyIndex,class TR_Memory *);0;OMR::X86;RegisterDependencyConditions;0;0
RegisterDependencyConditions;RegisterDependencyConditions(TR::Node *,TR::CodeGenerator *,class TR_X86RegisterDependencyIndex,List<TR::Register> *);0;OMR::X86;RegisterDependencyConditions;0;0
findPostCondition;findPostCondition(TR::class RealRegister::RegNum);1;OMR::X86;RegisterDependencyConditions;0;0
findPostCondition;findPostCondition(TR::Register *);0;OMR::X86;RegisterDependencyConditions;0;0
findPreCondition;findPreCondition(TR::class RealRegister::RegNum);1;OMR::X86;RegisterDependencyConditions;0;0
findPreCondition;findPreCondition(TR::Register *);0;OMR::X86;RegisterDependencyConditions;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;RegisterDependencyConditions;0;0
operator delete;operator delete(void *,size_t);0;OMR;RegisterDependencyConditions;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;RegisterDependencyConditions;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;RegisterDependencyConditions;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;RegisterDependencyConditions;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;RegisterDependencyConditions;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;RegisterDependencyConditions;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;RegisterDependencyConditions;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;RegisterDependencyConditions;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;AliasBuilder;0;0
operator delete;operator delete(void *,TR::Region &);1;TR;ScratchRegisterManager;0;0
operator delete;operator delete(void *,size_t);0;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;TR;ScratchRegisterManager;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,TR::Region &);1;TR;ScratchRegisterManager;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;TR;ScratchRegisterManager;0;0
Snippet;Snippet(const class TR::Snippet &);0;TR;Snippet;1;0
Snippet;Snippet(class TR::Snippet &&);0;TR;Snippet;1;0
UnresolvedDataSnippet;UnresolvedDataSnippet(class OMR::UnresolvedDataSnippet &&);1;OMR;UnresolvedDataSnippet;1;0
UnresolvedDataSnippet;UnresolvedDataSnippet(const class OMR::UnresolvedDataSnippet &);0;OMR;UnresolvedDataSnippet;1;0
UnresolvedDataSnippet;UnresolvedDataSnippet(TR::CodeGenerator *,TR::Node *,TR::SymbolReference *,_Bool,_Bool);0;OMR;UnresolvedDataSnippet;0;0
UnresolvedDataSnippet;UnresolvedDataSnippet(const class TR::UnresolvedDataSnippet &);0;TR;UnresolvedDataSnippet;1;0
UnresolvedDataSnippet;UnresolvedDataSnippet(class TR::UnresolvedDataSnippet &&);0;TR;UnresolvedDataSnippet;1;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;Snippet;0;0
operator=;operator=(class OMR::UnresolvedDataSnippet &&);0;OMR;UnresolvedDataSnippet;1;0
operator=;operator=(const class OMR::UnresolvedDataSnippet &);0;OMR;UnresolvedDataSnippet;1;0
operator=;operator=(const class TR::UnresolvedDataSnippet &);0;TR;UnresolvedDataSnippet;1;0
operator=;operator=(class TR::UnresolvedDataSnippet &&);0;TR;UnresolvedDataSnippet;1;0
RegisterPair;RegisterPair(class TR::RegisterPair &&);0;TR;RegisterPair;1;0
RegisterPair;RegisterPair(const class TR::RegisterPair &);0;TR;RegisterPair;1;0
Machine;Machine(class TR::Machine &&);0;TR;Machine;1;0
Machine;Machine(const class TR::Machine &);0;TR;Machine;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Relocation;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;TR;Relocation;0;0
operator delete[];operator delete[](void *,TR::Region &);0;TR;Relocation;0;0
operator=;operator=(class TR::Relocation &&);1;TR;Relocation;1;0
operator=;operator=(const class TR::Relocation &);0;TR;Relocation;1;0
IteratedExternalRelocation;IteratedExternalRelocation(uint8_t *,TR_ExternalRelocationTargetKind,flags8_t,TR::CodeGenerator *);1;TR;IteratedExternalRelocation;0;0
AheadOfTimeCompile;AheadOfTimeCompile(uint32_t *,TR::Compilation *);1;OMR;AheadOfTimeCompile;0;0
AheadOfTimeCompile;AheadOfTimeCompile(const class OMR::AheadOfTimeCompile &);0;OMR;AheadOfTimeCompile;1;0
operator=;operator=(const class OMR::CodeGenPhase &);1;OMR;CodeGenPhase;1;0
operator=;operator=(class OMR::CodeGenPhase &&);0;OMR;CodeGenPhase;1;0
MemoryReference;MemoryReference(class OMR::MemoryReference &&);1;OMR;MemoryReference;1;0
MemoryReference;MemoryReference();0;OMR;MemoryReference;0;0
MemoryReference;MemoryReference(const class OMR::MemoryReference &);0;OMR;MemoryReference;1;0
MemoryReference;MemoryReference(const class OMR::X86::MemoryReference &);0;OMR::X86;MemoryReference;1;0
MemoryReference;MemoryReference(TR::MemoryReference &,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(intptrj_t,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::SymbolReference *,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(class OMR::X86::MemoryReference &&);0;OMR::X86;MemoryReference;1;0
MemoryReference;MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *);0;OMR::X86;MemoryReference;0;0
MemoryReference;MemoryReference(const class OMR::X86::AMD64::MemoryReference &);0;OMR::X86::AMD64;MemoryReference;1;0
MemoryReference;MemoryReference(TR::SymbolReference *,TR::CodeGenerator *,class TR_ScratchRegisterManager *);0;OMR::X86::AMD64;MemoryReference;0;0
MemoryReference;MemoryReference(class OMR::X86::AMD64::MemoryReference &&);0;OMR::X86::AMD64;MemoryReference;1;0
MemoryReference;MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *);0;OMR::X86::AMD64;MemoryReference;0;0
MemoryReference;MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_ScratchRegisterManager *);0;OMR::X86::AMD64;MemoryReference;0;0
MemoryReference;MemoryReference(intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *);0;OMR::X86::AMD64;MemoryReference;0;0
MemoryReference;MemoryReference(class TR::MemoryReference &,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *);0;TR;MemoryReference;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;MemoryReference;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator delete;operator delete(void *,size_t);0;OMR;MemoryReference;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;MemoryReference;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;MemoryReference;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;MemoryReference;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;MemoryReference;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;MemoryReference;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;MemoryReference;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;MemoryReference;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;MemoryReference;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;MemoryReference;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;MemoryReference;0;0
operator=;operator=(class OMR::MemoryReference &&);1;OMR;MemoryReference;1;0
operator=;operator=(const class OMR::MemoryReference &);0;OMR;MemoryReference;1;0
operator=;operator=(class OMR::X86::MemoryReference &&);0;OMR::X86;MemoryReference;1;0
operator=;operator=(const class OMR::X86::MemoryReference &);0;OMR::X86;MemoryReference;1;0
operator=;operator=(const class OMR::X86::AMD64::MemoryReference &);0;OMR::X86::AMD64;MemoryReference;1;0
operator=;operator=(class OMR::X86::AMD64::MemoryReference &&);0;OMR::X86::AMD64;MemoryReference;1;0
operator=;operator=(const class TR::MemoryReference &);0;TR;MemoryReference;1;0
operator=;operator=(class TR::MemoryReference &&);0;TR;MemoryReference;1;0
operator=;operator=(class TR::IA32DataSnippet &&);0;TR;IA32DataSnippet;1;0
operator=;operator=(const class TR::IA32DataSnippet &);0;TR;IA32DataSnippet;1;0
operator=;operator=(class TR::IA32ConstantDataSnippet &&);0;TR;IA32ConstantDataSnippet;1;0
operator=;operator=(const class TR::IA32ConstantDataSnippet &);0;TR;IA32ConstantDataSnippet;1;0
Register;Register(enum TR_RegisterKinds,uint16_t);1;OMR;Register;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Machine;0;0
RealRegister;RealRegister(const class OMR::RealRegister &);1;OMR;RealRegister;1;0
RealRegister;RealRegister(class OMR::RealRegister &&);0;OMR;RealRegister;1;0
Register;Register(uint32_t);1;OMR;Register;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Register;0;0
fpMapToStackRelativeRegister;fpMapToStackRelativeRegister(TR::Register *);1;OMR::X86;Machine;0;0
fpMapToStackRelativeRegister;fpMapToStackRelativeRegister(int32_t);0;OMR::X86;Machine;0;0
UnresolvedDataSnippet;UnresolvedDataSnippet(const class OMR::UnresolvedDataSnippet &);1;OMR;UnresolvedDataSnippet;1;0
UnresolvedDataSnippet;UnresolvedDataSnippet(class OMR::UnresolvedDataSnippet &&);0;OMR;UnresolvedDataSnippet;1;0
operator delete;operator delete(void *,size_t);1;OMR;MemoryReference;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;MemoryReference;0;0
operator=;operator=(const class OMR::MemoryReference &);1;OMR;MemoryReference;1;0
operator=;operator=(class OMR::MemoryReference &&);0;OMR;MemoryReference;1;0
RegisterDependencyConditions;RegisterDependencyConditions(class OMR::RegisterDependencyConditions &&);1;OMR;RegisterDependencyConditions;1;0
RegisterDependencyConditions;RegisterDependencyConditions(const class OMR::RegisterDependencyConditions &);0;OMR;RegisterDependencyConditions;1;0
operator delete;operator delete(void *,size_t);1;OMR;RegisterDependencyConditions;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;RegisterDependencyConditions;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(const class TR::AMD64Imm64Instruction &);1;TR;AMD64Imm64Instruction;1;0
AMD64Imm64Instruction;AMD64Imm64Instruction(TR::RegisterDependencyConditions *,uint64_t,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(class TR::AMD64Imm64Instruction &&);0;TR;AMD64Imm64Instruction;1;0
AMD64Imm64Instruction;AMD64Imm64Instruction(TR::RegisterDependencyConditions *,uint64_t,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(TR::Instruction *,enum TR_X86OpCodes,uint64_t,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(uint64_t,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(TR::Instruction *,enum TR_X86OpCodes,uint64_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(uint64_t,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(enum TR_X86OpCodes,TR::Node *,uint64_t,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64Instruction;AMD64Imm64Instruction(enum TR_X86OpCodes,TR::Node *,uint64_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;AMD64Imm64Instruction;0;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(enum TR_X86OpCodes,TR::Node *,uint64_t,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);1;TR;AMD64Imm64SymInstruction;0;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(TR::Instruction *,enum TR_X86OpCodes,uint64_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;AMD64Imm64SymInstruction;0;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(enum TR_X86OpCodes,TR::Node *,uint64_t,TR::SymbolReference *,TR::CodeGenerator *,uint8_t *);0;TR;AMD64Imm64SymInstruction;0;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(enum TR_X86OpCodes,TR::Node *,uint64_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;AMD64Imm64SymInstruction;0;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(TR::Instruction *,enum TR_X86OpCodes,uint64_t,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;AMD64Imm64SymInstruction;0;0
operator=;operator=(class TR::AMD64Imm64Instruction &&);0;TR;AMD64Imm64Instruction;1;0
operator=;operator=(const class TR::AMD64Imm64Instruction &);0;TR;AMD64Imm64Instruction;1;0
operator=;operator=(class TR::AMD64Imm64SymInstruction &&);0;TR;AMD64Imm64SymInstruction;1;0
operator=;operator=(const class TR::AMD64Imm64SymInstruction &);0;TR;AMD64Imm64SymInstruction;1;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,uint64_t,TR::CodeGenerator *,int32_t);1;TR;AMD64RegImm64Instruction;0;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(uint64_t,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,int32_t);0;TR;AMD64RegImm64Instruction;0;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,uint64_t,TR::CodeGenerator *,int32_t);0;TR;AMD64RegImm64Instruction;0;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(uint64_t,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,int32_t);0;TR;AMD64RegImm64Instruction;0;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,uint64_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *,int32_t);0;TR;AMD64RegImm64Instruction;0;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,uint64_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *,int32_t);0;TR;AMD64RegImm64Instruction;0;0
AMD64RegImm64SymInstruction;AMD64RegImm64SymInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,uint64_t,TR::SymbolReference *,TR::CodeGenerator *);1;TR;AMD64RegImm64SymInstruction;0;0
AMD64RegImm64SymInstruction;AMD64RegImm64SymInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,uint64_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;AMD64RegImm64SymInstruction;0;0
X86RegInstruction;X86RegInstruction(class TR::X86RegInstruction &&);1;TR;X86RegInstruction;1;0
X86RegInstruction;X86RegInstruction(const class TR::X86RegInstruction &);0;TR;X86RegInstruction;1;0
X86RegInstruction;X86RegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
X86RegInstruction;X86RegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
X86RegInstruction;X86RegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
X86RegInstruction;X86RegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
X86RegInstruction;X86RegInstruction(TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
X86RegInstruction;X86RegInstruction(TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
X86RegInstruction;X86RegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
X86RegInstruction;X86RegInstruction(TR::RegisterDependencyConditions *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86RegInstruction;0;0
operator=;operator=(class TR::X86RegInstruction &&);0;TR;X86RegInstruction;1;0
operator=;operator=(const class TR::X86RegInstruction &);0;TR;X86RegInstruction;1;0
operator=;operator=(const class TR::AMD64RegImm64Instruction &);0;TR;AMD64RegImm64Instruction;1;0
operator=;operator=(class TR::AMD64RegImm64Instruction &&);0;TR;AMD64RegImm64Instruction;1;0
operator=;operator=(const class TR::AMD64RegImm64SymInstruction &);0;TR;AMD64RegImm64SymInstruction;1;0
operator=;operator=(class TR::AMD64RegImm64SymInstruction &&);0;TR;AMD64RegImm64SymInstruction;1;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Instruction *,uint8_t,uint8_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);1;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Instruction *,uint8_t,uint8_t,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Node *,uint8_t,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Instruction *,uint8_t,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Node *,uint8_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Node *,uint8_t,uint8_t,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Node *,uint8_t,uint8_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Instruction *,uint8_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
operator=;operator=(class TR::X86AlignmentInstruction &&);0;TR;X86AlignmentInstruction;1;0
operator=;operator=(const class TR::X86AlignmentInstruction &);0;TR;X86AlignmentInstruction;1;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(TR::Instruction *,const struct TR_AtomicRegion *,uint8_t,uint8_t,TR::CodeGenerator *);1;TR;X86BoundaryAvoidanceInstruction;0;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(int32_t,const struct TR_AtomicRegion *,uint8_t,uint8_t,TR::Instruction *,TR::CodeGenerator *);0;TR;X86BoundaryAvoidanceInstruction;0;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(const struct TR_AtomicRegion *,uint8_t,uint8_t,TR::Instruction *,TR::CodeGenerator *);0;TR;X86BoundaryAvoidanceInstruction;0;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(class TR::X86BoundaryAvoidanceInstruction &&);0;TR;X86BoundaryAvoidanceInstruction;1;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(const class TR::X86BoundaryAvoidanceInstruction &);0;TR;X86BoundaryAvoidanceInstruction;1;0
X86PatchableCodeAlignmentInstruction;X86PatchableCodeAlignmentInstruction(const struct TR_AtomicRegion *,TR::Instruction *,TR::CodeGenerator *);1;TR;X86PatchableCodeAlignmentInstruction;0;0
X86PatchableCodeAlignmentInstruction;X86PatchableCodeAlignmentInstruction(TR::Instruction *,const struct TR_AtomicRegion *,TR::CodeGenerator *);0;TR;X86PatchableCodeAlignmentInstruction;0;0
X86PatchableCodeAlignmentInstruction;X86PatchableCodeAlignmentInstruction(const struct TR_AtomicRegion *,TR::Instruction *,int32_t,TR::CodeGenerator *);0;TR;X86PatchableCodeAlignmentInstruction;0;0
operator=;operator=(class TR::X86BoundaryAvoidanceInstruction &&);0;TR;X86BoundaryAvoidanceInstruction;1;0
operator=;operator=(const class TR::X86BoundaryAvoidanceInstruction &);0;TR;X86BoundaryAvoidanceInstruction;1;0
operator=;operator=(class TR::X86PatchableCodeAlignmentInstruction &&);0;TR;X86PatchableCodeAlignmentInstruction;1;0
operator=;operator=(const class TR::X86PatchableCodeAlignmentInstruction &);0;TR;X86PatchableCodeAlignmentInstruction;1;0
X86CallMemInstruction;X86CallMemInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::CodeGenerator *);1;TR;X86CallMemInstruction;0;0
X86CallMemInstruction;X86CallMemInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86CallMemInstruction;0;0
X86CallMemInstruction;X86CallMemInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86CallMemInstruction;0;0
X86MemInstruction;X86MemInstruction(class TR::X86MemInstruction &&);1;TR;X86MemInstruction;1;0
X86MemInstruction;X86MemInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
X86MemInstruction;X86MemInstruction(const class TR::X86MemInstruction &);0;TR;X86MemInstruction;1;0
X86MemInstruction;X86MemInstruction(TR::RegisterDependencyConditions *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
X86MemInstruction;X86MemInstruction(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
X86MemInstruction;X86MemInstruction(TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
X86MemInstruction;X86MemInstruction(TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
X86MemInstruction;X86MemInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
X86MemInstruction;X86MemInstruction(TR::RegisterDependencyConditions *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
X86MemInstruction;X86MemInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::CodeGenerator *,TR::Register *);0;TR;X86MemInstruction;0;0
operator=;operator=(class TR::X86MemInstruction &&);0;TR;X86MemInstruction;1;0
operator=;operator=(const class TR::X86MemInstruction &);0;TR;X86MemInstruction;1;0
operator=;operator=(class TR::X86CallMemInstruction &&);0;TR;X86CallMemInstruction;1;0
operator=;operator=(const class TR::X86CallMemInstruction &);0;TR;X86CallMemInstruction;1;0
X86FPArithmeticRegRegInstruction;X86FPArithmeticRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPArithmeticRegRegInstruction;0;0
X86FPArithmeticRegRegInstruction;X86FPArithmeticRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPArithmeticRegRegInstruction;0;0
X86FPRegRegInstruction;X86FPRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPRegRegInstruction;0;0
X86FPRegRegInstruction;X86FPRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPRegRegInstruction;0;0
X86FPRegRegInstruction;X86FPRegRegInstruction(TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86FPRegRegInstruction;0;0
X86FPRegRegInstruction;X86FPRegRegInstruction(TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86FPRegRegInstruction;0;0
X86FPRegRegInstruction;X86FPRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86FPRegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(class TR::X86RegRegInstruction &&);1;TR;X86RegRegInstruction;1;0
X86RegRegInstruction;X86RegRegInstruction(const class TR::X86RegRegInstruction &);0;TR;X86RegRegInstruction;1;0
X86RegRegInstruction;X86RegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86RegRegInstruction;0;0
operator=;operator=(class TR::X86RegRegInstruction &&);0;TR;X86RegRegInstruction;1;0
operator=;operator=(const class TR::X86RegRegInstruction &);0;TR;X86RegRegInstruction;1;0
operator=;operator=(const class TR::X86FPRegRegInstruction &);0;TR;X86FPRegRegInstruction;1;0
operator=;operator=(class TR::X86FPRegRegInstruction &&);0;TR;X86FPRegRegInstruction;1;0
operator=;operator=(const class TR::X86FPArithmeticRegRegInstruction &);0;TR;X86FPArithmeticRegRegInstruction;1;0
operator=;operator=(class TR::X86FPArithmeticRegRegInstruction &&);0;TR;X86FPArithmeticRegRegInstruction;1;0
X86FPCompareEvalInstruction;X86FPCompareEvalInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPCompareEvalInstruction;0;0
X86FPCompareEvalInstruction;X86FPCompareEvalInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86FPCompareEvalInstruction;0;0
operator=;operator=(const class TR::X86FPCompareEvalInstruction &);0;TR;X86FPCompareEvalInstruction;1;0
operator=;operator=(class TR::X86FPCompareEvalInstruction &&);0;TR;X86FPCompareEvalInstruction;1;0
X86FPCompareRegRegInstruction;X86FPCompareRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPCompareRegRegInstruction;0;0
X86FPCompareRegRegInstruction;X86FPCompareRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPCompareRegRegInstruction;0;0
operator=;operator=(class TR::X86FPCompareRegRegInstruction &&);0;TR;X86FPCompareRegRegInstruction;1;0
operator=;operator=(const class TR::X86FPCompareRegRegInstruction &);0;TR;X86FPCompareRegRegInstruction;1;0
X86FPMemRegInstruction;X86FPMemRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPMemRegInstruction;0;0
X86FPMemRegInstruction;X86FPMemRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPMemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(class TR::X86MemRegInstruction &&);1;TR;X86MemRegInstruction;1;0
X86MemRegInstruction;X86MemRegInstruction(const class TR::X86MemRegInstruction &);0;TR;X86MemRegInstruction;1;0
X86MemRegInstruction;X86MemRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::Register *,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(TR::Register *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(TR::Register *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
X86MemRegInstruction;X86MemRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,TR::CodeGenerator *);0;TR;X86MemRegInstruction;0;0
operator=;operator=(const class TR::X86MemRegInstruction &);0;TR;X86MemRegInstruction;1;0
operator=;operator=(class TR::X86MemRegInstruction &&);0;TR;X86MemRegInstruction;1;0
operator=;operator=(const class TR::X86FPMemRegInstruction &);0;TR;X86FPMemRegInstruction;1;0
operator=;operator=(class TR::X86FPMemRegInstruction &&);0;TR;X86FPMemRegInstruction;1;0
X86FPRegInstruction;X86FPRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPRegInstruction;0;0
X86FPRegInstruction;X86FPRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::CodeGenerator *);0;TR;X86FPRegInstruction;0;0
operator=;operator=(const class TR::X86FPRegInstruction &);0;TR;X86FPRegInstruction;1;0
operator=;operator=(class TR::X86FPRegInstruction &&);0;TR;X86FPRegInstruction;1;0
X86FPRegMemInstruction;X86FPRegMemInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);1;TR;X86FPRegMemInstruction;0;0
X86FPRegMemInstruction;X86FPRegMemInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);0;TR;X86FPRegMemInstruction;0;0
X86RegMemInstruction;X86RegMemInstruction(class TR::X86RegMemInstruction &&);1;TR;X86RegMemInstruction;1;0
X86RegMemInstruction;X86RegMemInstruction(const class TR::X86RegMemInstruction &);0;TR;X86RegMemInstruction;1;0
X86RegMemInstruction;X86RegMemInstruction(TR::MemoryReference *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86RegMemInstruction;0;0
X86RegMemInstruction;X86RegMemInstruction(TR::MemoryReference *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86RegMemInstruction;0;0
X86RegMemInstruction;X86RegMemInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegMemInstruction;0;0
X86RegMemInstruction;X86RegMemInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);0;TR;X86RegMemInstruction;0;0
X86RegMemInstruction;X86RegMemInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegMemInstruction;0;0
X86RegMemInstruction;X86RegMemInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);0;TR;X86RegMemInstruction;0;0
operator=;operator=(const class TR::X86RegMemInstruction &);0;TR;X86RegMemInstruction;1;0
operator=;operator=(class TR::X86RegMemInstruction &&);0;TR;X86RegMemInstruction;1;0
operator=;operator=(class TR::X86FPRegMemInstruction &&);0;TR;X86FPRegMemInstruction;1;0
operator=;operator=(const class TR::X86FPRegMemInstruction &);0;TR;X86FPRegMemInstruction;1;0
X86FPRemainderRegRegInstruction;X86FPRemainderRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPRemainderRegRegInstruction;0;0
X86FPRemainderRegRegInstruction;X86FPRemainderRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86FPRemainderRegRegInstruction;0;0
X86FPRemainderRegRegInstruction;X86FPRemainderRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPRemainderRegRegInstruction;0;0
X86FPST0ST1RegRegInstruction;X86FPST0ST1RegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPST0ST1RegRegInstruction;0;0
X86FPST0ST1RegRegInstruction;X86FPST0ST1RegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPST0ST1RegRegInstruction;0;0
X86FPST0ST1RegRegInstruction;X86FPST0ST1RegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86FPST0ST1RegRegInstruction;0;0
operator=;operator=(class TR::X86FPST0ST1RegRegInstruction &&);0;TR;X86FPST0ST1RegRegInstruction;1;0
operator=;operator=(const class TR::X86FPST0ST1RegRegInstruction &);0;TR;X86FPST0ST1RegRegInstruction;1;0
operator=;operator=(const class TR::X86FPRemainderRegRegInstruction &);0;TR;X86FPRemainderRegRegInstruction;1;0
operator=;operator=(class TR::X86FPRemainderRegRegInstruction &&);0;TR;X86FPRemainderRegRegInstruction;1;0
X86FPST0STiRegRegInstruction;X86FPST0STiRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPST0STiRegRegInstruction;0;0
X86FPST0STiRegRegInstruction;X86FPST0STiRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPST0STiRegRegInstruction;0;0
operator=;operator=(class TR::X86FPST0STiRegRegInstruction &&);0;TR;X86FPST0STiRegRegInstruction;1;0
operator=;operator=(const class TR::X86FPST0STiRegRegInstruction &);0;TR;X86FPST0STiRegRegInstruction;1;0
X86FPSTiST0RegRegInstruction;X86FPSTiST0RegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *,_Bool);1;TR;X86FPSTiST0RegRegInstruction;0;0
X86FPSTiST0RegRegInstruction;X86FPSTiST0RegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *,_Bool);0;TR;X86FPSTiST0RegRegInstruction;0;0
operator=;operator=(const class TR::X86FPSTiST0RegRegInstruction &);0;TR;X86FPSTiST0RegRegInstruction;1;0
operator=;operator=(class TR::X86FPSTiST0RegRegInstruction &&);0;TR;X86FPSTiST0RegRegInstruction;1;0
X86FenceInstruction;X86FenceInstruction(enum TR_X86OpCodes,TR::Node *,TR::Node *,TR::CodeGenerator *);1;TR;X86FenceInstruction;0;0
X86FenceInstruction;X86FenceInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Node *,TR::CodeGenerator *);0;TR;X86FenceInstruction;0;0
operator=;operator=(class TR::X86FenceInstruction &&);0;TR;X86FenceInstruction;1;0
operator=;operator=(const class TR::X86FenceInstruction &);0;TR;X86FenceInstruction;1;0
X86ImmInstruction;X86ImmInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *,int32_t);1;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(enum TR_X86OpCodes,TR::Node *,int32_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(int32_t,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(enum TR_X86OpCodes,TR::Node *,int32_t,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(int32_t,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(TR::RegisterDependencyConditions *,int32_t,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmInstruction;X86ImmInstruction(TR::RegisterDependencyConditions *,int32_t,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmSnippetInstruction;X86ImmSnippetInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::UnresolvedDataSnippet *,TR::CodeGenerator *);1;TR;X86ImmSnippetInstruction;0;0
X86ImmSnippetInstruction;X86ImmSnippetInstruction(enum TR_X86OpCodes,TR::Node *,int32_t,TR::UnresolvedDataSnippet *,TR::CodeGenerator *);0;TR;X86ImmSnippetInstruction;0;0
operator=;operator=(class TR::X86ImmInstruction &&);0;TR;X86ImmInstruction;1;0
operator=;operator=(const class TR::X86ImmInstruction &);0;TR;X86ImmInstruction;1;0
operator=;operator=(class TR::X86ImmSnippetInstruction &&);0;TR;X86ImmSnippetInstruction;1;0
operator=;operator=(const class TR::X86ImmSnippetInstruction &);0;TR;X86ImmSnippetInstruction;1;0
X86ImmSymInstruction;X86ImmSymInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);1;TR;X86ImmSymInstruction;0;0
X86ImmSymInstruction;X86ImmSymInstruction(enum TR_X86OpCodes,TR::Node *,int32_t,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86ImmSymInstruction;0;0
X86ImmSymInstruction;X86ImmSymInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;X86ImmSymInstruction;0;0
X86ImmSymInstruction;X86ImmSymInstruction(enum TR_X86OpCodes,TR::Node *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;X86ImmSymInstruction;0;0
operator=;operator=(const class TR::X86ImmSymInstruction &);0;TR;X86ImmSymInstruction;1;0
operator=;operator=(class TR::X86ImmSymInstruction &&);0;TR;X86ImmSymInstruction;1;0
X86LabelInstruction;X86LabelInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,_Bool);1;TR;X86LabelInstruction;0;0
X86LabelInstruction;X86LabelInstruction(enum TR_X86OpCodes,TR::Node *,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,_Bool);0;TR;X86LabelInstruction;0;0
X86LabelInstruction;X86LabelInstruction(TR::LabelSymbol *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,_Bool);0;TR;X86LabelInstruction;0;0
X86LabelInstruction;X86LabelInstruction(TR::LabelSymbol *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,_Bool);0;TR;X86LabelInstruction;0;0
X86LabelInstruction;X86LabelInstruction(enum TR_X86OpCodes,TR::Node *,TR::LabelSymbol *,TR::CodeGenerator *,_Bool);0;TR;X86LabelInstruction;0;0
X86LabelInstruction;X86LabelInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::LabelSymbol *,TR::CodeGenerator *,_Bool);0;TR;X86LabelInstruction;0;0
operator=;operator=(class TR::X86LabelInstruction &&);0;TR;X86LabelInstruction;1;0
operator=;operator=(const class TR::X86LabelInstruction &);0;TR;X86LabelInstruction;1;0
X86MemImmInstruction;X86MemImmInstruction(int32_t,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,int32_t);1;TR;X86MemImmInstruction;0;0
X86MemImmInstruction;X86MemImmInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,int32_t,TR::CodeGenerator *,int32_t);0;TR;X86MemImmInstruction;0;0
X86MemImmInstruction;X86MemImmInstruction(int32_t,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,int32_t);0;TR;X86MemImmInstruction;0;0
X86MemImmInstruction;X86MemImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,int32_t,TR::CodeGenerator *,int32_t);0;TR;X86MemImmInstruction;0;0
X86MemImmSymInstruction;X86MemImmSymInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);1;TR;X86MemImmSymInstruction;0;0
X86MemImmSymInstruction;X86MemImmSymInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;X86MemImmSymInstruction;0;0
operator=;operator=(const class TR::X86MemImmInstruction &);0;TR;X86MemImmInstruction;1;0
operator=;operator=(class TR::X86MemImmInstruction &&);0;TR;X86MemImmInstruction;1;0
operator=;operator=(const class TR::X86MemImmSymInstruction &);0;TR;X86MemImmSymInstruction;1;0
operator=;operator=(class TR::X86MemImmSymInstruction &&);0;TR;X86MemImmSymInstruction;1;0
X86MemRegImmInstruction;X86MemRegImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,int32_t,TR::CodeGenerator *);1;TR;X86MemRegImmInstruction;0;0
X86MemRegImmInstruction;X86MemRegImmInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::Register *,int32_t,TR::CodeGenerator *);0;TR;X86MemRegImmInstruction;0;0
operator=;operator=(class TR::X86MemRegImmInstruction &&);0;TR;X86MemRegImmInstruction;1;0
operator=;operator=(const class TR::X86MemRegImmInstruction &);0;TR;X86MemRegImmInstruction;1;0
X86MemRegRegInstruction;X86MemRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86MemRegRegInstruction;0;0
X86MemRegRegInstruction;X86MemRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86MemRegRegInstruction;0;0
X86MemRegRegInstruction;X86MemRegRegInstruction(TR::Register *,TR::Register *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86MemRegRegInstruction;0;0
X86MemRegRegInstruction;X86MemRegRegInstruction(TR::Register *,TR::Register *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86MemRegRegInstruction;0;0
X86MemRegRegInstruction;X86MemRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86MemRegRegInstruction;0;0
X86MemRegRegInstruction;X86MemRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86MemRegRegInstruction;0;0
operator=;operator=(class TR::X86MemRegRegInstruction &&);0;TR;X86MemRegRegInstruction;1;0
operator=;operator=(const class TR::X86MemRegRegInstruction &);0;TR;X86MemRegRegInstruction;1;0
X86MemTableInstruction;X86MemTableInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,ncount_t,TR::CodeGenerator *);1;TR;X86MemTableInstruction;0;0
X86MemTableInstruction;X86MemTableInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,ncount_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86MemTableInstruction;0;0
operator=;operator=(class TR::X86MemTableInstruction &&);0;TR;X86MemTableInstruction;1;0
operator=;operator=(const class TR::X86MemTableInstruction &);0;TR;X86MemTableInstruction;1;0
X86PaddingInstruction;X86PaddingInstruction(class TR::X86PaddingInstruction &&);1;TR;X86PaddingInstruction;1;0
X86PaddingInstruction;X86PaddingInstruction(TR::Instruction *,uint8_t,TR::CodeGenerator *);0;TR;X86PaddingInstruction;0;0
X86PaddingInstruction;X86PaddingInstruction(TR::Instruction *,uint8_t,enum TR_PaddingProperties,TR::CodeGenerator *);0;TR;X86PaddingInstruction;0;0
X86PaddingInstruction;X86PaddingInstruction(const class TR::X86PaddingInstruction &);0;TR;X86PaddingInstruction;1;0
X86PaddingInstruction;X86PaddingInstruction(uint8_t,TR::Node *,TR::CodeGenerator *);0;TR;X86PaddingInstruction;0;0
X86PaddingInstruction;X86PaddingInstruction(uint8_t,enum TR_PaddingProperties,TR::Node *,TR::CodeGenerator *);0;TR;X86PaddingInstruction;0;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(TR::Instruction *,uint8_t,enum TR_PaddingProperties,TR::CodeGenerator *);1;TR;X86PaddingSnippetInstruction;0;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(TR::Instruction *,uint8_t,TR::CodeGenerator *);0;TR;X86PaddingSnippetInstruction;0;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(uint8_t,enum TR_PaddingProperties,TR::Node *,TR::CodeGenerator *);0;TR;X86PaddingSnippetInstruction;0;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(uint8_t,TR::Node *,TR::CodeGenerator *);0;TR;X86PaddingSnippetInstruction;0;0
operator=;operator=(class TR::X86PaddingInstruction &&);0;TR;X86PaddingInstruction;1;0
operator=;operator=(const class TR::X86PaddingInstruction &);0;TR;X86PaddingInstruction;1;0
operator=;operator=(const class TR::X86PaddingSnippetInstruction &);0;TR;X86PaddingSnippetInstruction;1;0
operator=;operator=(class TR::X86PaddingSnippetInstruction &&);0;TR;X86PaddingSnippetInstruction;1;0
X86RegImmInstruction;X86RegImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,int32_t,TR::CodeGenerator *,int32_t);1;TR;X86RegImmInstruction;0;0
X86RegImmInstruction;X86RegImmInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,int32_t,TR::CodeGenerator *,int32_t);0;TR;X86RegImmInstruction;0;0
X86RegImmInstruction;X86RegImmInstruction(int32_t,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,int32_t);0;TR;X86RegImmInstruction;0;0
X86RegImmInstruction;X86RegImmInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,int32_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *,int32_t);0;TR;X86RegImmInstruction;0;0
X86RegImmInstruction;X86RegImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,int32_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *,int32_t);0;TR;X86RegImmInstruction;0;0
X86RegImmInstruction;X86RegImmInstruction(int32_t,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,int32_t);0;TR;X86RegImmInstruction;0;0
X86RegImmSymInstruction;X86RegImmSymInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);1;TR;X86RegImmSymInstruction;0;0
X86RegImmSymInstruction;X86RegImmSymInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;X86RegImmSymInstruction;0;0
operator=;operator=(class TR::X86RegImmInstruction &&);0;TR;X86RegImmInstruction;1;0
operator=;operator=(const class TR::X86RegImmInstruction &);0;TR;X86RegImmInstruction;1;0
operator=;operator=(class TR::X86RegImmSymInstruction &&);0;TR;X86RegImmSymInstruction;1;0
operator=;operator=(const class TR::X86RegImmSymInstruction &);0;TR;X86RegImmSymInstruction;1;0
X86RegMemImmInstruction;X86RegMemImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::MemoryReference *,int32_t,TR::CodeGenerator *);1;TR;X86RegMemImmInstruction;0;0
X86RegMemImmInstruction;X86RegMemImmInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::MemoryReference *,int32_t,TR::CodeGenerator *);0;TR;X86RegMemImmInstruction;0;0
operator=;operator=(class TR::X86RegMemImmInstruction &&);0;TR;X86RegMemImmInstruction;1;0
operator=;operator=(const class TR::X86RegMemImmInstruction &);0;TR;X86RegMemImmInstruction;1;0
X86RegRegImmInstruction;X86RegRegImmInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *);1;TR;X86RegRegImmInstruction;0;0
X86RegRegImmInstruction;X86RegRegImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *);0;TR;X86RegRegImmInstruction;0;0
operator=;operator=(class TR::X86RegRegImmInstruction &&);0;TR;X86RegRegImmInstruction;1;0
operator=;operator=(const class TR::X86RegRegImmInstruction &);0;TR;X86RegRegImmInstruction;1;0
X86RegRegRegInstruction;X86RegRegRegInstruction(TR::Register *,TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);1;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(TR::Register *,TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
operator=;operator=(class TR::X86RegRegRegInstruction &&);0;TR;X86RegRegRegInstruction;1;0
operator=;operator=(const class TR::X86RegRegRegInstruction &);0;TR;X86RegRegRegInstruction;1;0
X86VFPCallCleanupInstruction;X86VFPCallCleanupInstruction(int32_t,TR::Node *,TR::CodeGenerator *);1;TR;X86VFPCallCleanupInstruction;0;0
X86VFPCallCleanupInstruction;X86VFPCallCleanupInstruction(TR::Instruction *,int32_t,TR::CodeGenerator *);0;TR;X86VFPCallCleanupInstruction;0;0
operator=;operator=(class TR::X86VFPCallCleanupInstruction &&);0;TR;X86VFPCallCleanupInstruction;1;0
operator=;operator=(const class TR::X86VFPCallCleanupInstruction &);0;TR;X86VFPCallCleanupInstruction;1;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(TR::RealRegister *,TR::Node *,TR::CodeGenerator *);1;TR;X86VFPDedicateInstruction;0;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(class TR::X86VFPDedicateInstruction &&);0;TR;X86VFPDedicateInstruction;1;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(TR::Instruction *,TR::RealRegister *,TR::CodeGenerator *);0;TR;X86VFPDedicateInstruction;0;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(TR::Instruction *,TR::RealRegister *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86VFPDedicateInstruction;0;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(TR::RealRegister *,TR::Node *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86VFPDedicateInstruction;0;0
operator=;operator=(const class TR::X86VFPDedicateInstruction &);0;TR;X86VFPDedicateInstruction;1;0
operator=;operator=(class TR::X86VFPDedicateInstruction &&);0;TR;X86VFPDedicateInstruction;1;0
X86VFPReleaseInstruction;X86VFPReleaseInstruction(TR::X86VFPDedicateInstruction *,TR::Node *,TR::CodeGenerator *);1;TR;X86VFPReleaseInstruction;0;0
X86VFPReleaseInstruction;X86VFPReleaseInstruction(TR::Instruction *,TR::X86VFPDedicateInstruction *,TR::CodeGenerator *);0;TR;X86VFPReleaseInstruction;0;0
operator=;operator=(const class TR::X86VFPReleaseInstruction &);0;TR;X86VFPReleaseInstruction;1;0
operator=;operator=(class TR::X86VFPReleaseInstruction &&);0;TR;X86VFPReleaseInstruction;1;0
X86VFPRestoreInstruction;X86VFPRestoreInstruction(TR::X86VFPSaveInstruction *,TR::Node *,TR::CodeGenerator *);1;TR;X86VFPRestoreInstruction;0;0
X86VFPRestoreInstruction;X86VFPRestoreInstruction(TR::Instruction *,TR::X86VFPSaveInstruction *,TR::CodeGenerator *);0;TR;X86VFPRestoreInstruction;0;0
operator=;operator=(class TR::X86VFPRestoreInstruction &&);0;TR;X86VFPRestoreInstruction;1;0
operator=;operator=(const class TR::X86VFPRestoreInstruction &);0;TR;X86VFPRestoreInstruction;1;0
X86VFPSaveInstruction;X86VFPSaveInstruction(TR::Instruction *,TR::CodeGenerator *);1;TR;X86VFPSaveInstruction;0;0
X86VFPSaveInstruction;X86VFPSaveInstruction(TR::Node *,TR::CodeGenerator *);0;TR;X86VFPSaveInstruction;0;0
X86VFPSaveInstruction;X86VFPSaveInstruction(class TR::X86VFPSaveInstruction &&);0;TR;X86VFPSaveInstruction;1;0
operator=;operator=(const class TR::X86VFPSaveInstruction &);0;TR;X86VFPSaveInstruction;1;0
operator=;operator=(class TR::X86VFPSaveInstruction &&);0;TR;X86VFPSaveInstruction;1;0
TR_Analyser;TR_Analyser(class TR_Analyser &&);1;TR;Analyser;1;0
TR_Analyser;TR_Analyser(const class TR_Analyser &);0;TR;Analyser;1;0
TR_Analyser;TR_Analyser();0;TR;Analyser;0;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(class TR::X86BoundaryAvoidanceInstruction &&);1;TR;X86BoundaryAvoidanceInstruction;1;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(TR::Instruction *,const struct TR_AtomicRegion *,uint8_t,uint8_t,TR::CodeGenerator *);0;TR;X86BoundaryAvoidanceInstruction;0;0
X86DivideCheckSnippet;X86DivideCheckSnippet(class TR::X86DivideCheckSnippet &&);1;TR;X86DivideCheckSnippet;1;0
X86DivideCheckSnippet;X86DivideCheckSnippet(const class TR::X86DivideCheckSnippet &);0;TR;X86DivideCheckSnippet;1;0
X86DivideCheckSnippet;X86DivideCheckSnippet(TR::LabelSymbol *,TR::LabelSymbol *,TR::LabelSymbol *,TR::ILOpCode &,TR::DataType,TR::X86RegRegInstruction *,TR::CodeGenerator *);0;TR;X86DivideCheckSnippet;0;0
X86RestartSnippet;X86RestartSnippet(class TR::X86RestartSnippet &&);1;TR;X86RestartSnippet;1;0
X86RestartSnippet;X86RestartSnippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,TR::LabelSymbol *,_Bool);0;TR;X86RestartSnippet;0;0
X86RestartSnippet;X86RestartSnippet(const class TR::X86RestartSnippet &);0;TR;X86RestartSnippet;1;0
estimateRestartJumpLength;estimateRestartJumpLength(enum TR_X86OpCodes,int32_t);1;TR;X86RestartSnippet;0;0
estimateRestartJumpLength;estimateRestartJumpLength(int32_t);0;TR;X86RestartSnippet;0;0
estimateRestartJumpLength;estimateRestartJumpLength(int32_t,TR::LabelSymbol *);0;TR;X86RestartSnippet;0;0
estimateRestartJumpLength;estimateRestartJumpLength(enum TR_X86OpCodes,int32_t,TR::LabelSymbol *);0;TR;X86RestartSnippet;0;0
genRestartJump;genRestartJump(enum TR_X86OpCodes,uint8_t *,TR::LabelSymbol *);1;TR;X86RestartSnippet;0;0
genRestartJump;genRestartJump(uint8_t *,TR::LabelSymbol *);0;TR;X86RestartSnippet;0;0
genRestartJump;genRestartJump(uint8_t *);0;TR;X86RestartSnippet;0;0
operator=;operator=(class TR::X86RestartSnippet &&);0;TR;X86RestartSnippet;1;0
operator=;operator=(const class TR::X86RestartSnippet &);0;TR;X86RestartSnippet;1;0
operator=;operator=(class TR::X86DivideCheckSnippet &&);0;TR;X86DivideCheckSnippet;1;0
operator=;operator=(const class TR::X86DivideCheckSnippet &);0;TR;X86DivideCheckSnippet;1;0
X86LabelInstruction;X86LabelInstruction(enum TR_X86OpCodes,TR::Node *,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,_Bool);1;TR;X86LabelInstruction;0;0
X86LabelInstruction;X86LabelInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,_Bool);0;TR;X86LabelInstruction;0;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(uint8_t,enum TR_PaddingProperties,TR::Node *,TR::CodeGenerator *);1;TR;X86PaddingSnippetInstruction;0;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(TR::Instruction *,uint8_t,enum TR_PaddingProperties,TR::CodeGenerator *);0;TR;X86PaddingSnippetInstruction;0;0
TR_Analyser;TR_Analyser();1;TR;Analyser;0;0
TR_Analyser;TR_Analyser(class TR_Analyser &&);0;TR;Analyser;1;0
TR_X86BinaryCommutativeAnalyser;TR_X86BinaryCommutativeAnalyser(class TR_X86BinaryCommutativeAnalyser &&);1;TR;X86BinaryCommutativeAnalyser;1;0
TR_X86BinaryCommutativeAnalyser;TR_X86BinaryCommutativeAnalyser(const class TR_X86BinaryCommutativeAnalyser &);0;TR;X86BinaryCommutativeAnalyser;1;0
TR_X86BinaryCommutativeAnalyser;TR_X86BinaryCommutativeAnalyser(TR::CodeGenerator *);0;TR;X86BinaryCommutativeAnalyser;0;0
Estimator;Estimator(class TR_X86OpCode::Estimator &&);1;TR_X86OpCode;Estimator;1;0
Estimator;Estimator(const class TR_X86OpCode::Estimator &);0;TR_X86OpCode;Estimator;1;0
Estimator;Estimator(cursor_t);0;TR_X86OpCode;Estimator;0;0
Writer;Writer(class TR_X86OpCode::Writer &&);1;TR_X86OpCode;Writer;1;0
Writer;Writer(const class TR_X86OpCode::Writer &);0;TR_X86OpCode;Writer;1;0
Writer;Writer(cursor_t);0;TR_X86OpCode;Writer;0;0
TR_X86SubtractAnalyser;TR_X86SubtractAnalyser(class TR_X86SubtractAnalyser &&);1;TR;X86SubtractAnalyser;1;0
TR_X86SubtractAnalyser;TR_X86SubtractAnalyser(TR::CodeGenerator *);0;TR;X86SubtractAnalyser;0;0
TR_X86SubtractAnalyser;TR_X86SubtractAnalyser(const class TR_X86SubtractAnalyser &);0;TR;X86SubtractAnalyser;1;0
Linkage;Linkage();1;OMR;Linkage;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;Linkage;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Linkage;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;Linkage;0;0
X86BoundaryAvoidanceInstruction;X86BoundaryAvoidanceInstruction(const class TR::X86BoundaryAvoidanceInstruction &);1;TR;X86BoundaryAvoidanceInstruction;1;0
X86PaddingInstruction;X86PaddingInstruction(TR::Instruction *,uint8_t,TR::CodeGenerator *);1;TR;X86PaddingInstruction;0;0
X86PaddingInstruction;X86PaddingInstruction(class TR::X86PaddingInstruction &&);0;TR;X86PaddingInstruction;1;0
integerCompareAnalyser;integerCompareAnalyser(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes);1;TR;X86CompareAnalyser;0;0
integerCompareAnalyser;integerCompareAnalyser(TR::Node *,TR::Node *,TR::Node *,_Bool,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes);0;TR;X86CompareAnalyser;0;0
Cursor;Cursor(const class CS2::ABitVector::Cursor &);1;CS2::ABitVector;Cursor;0;0
Cursor;Cursor(const ABitVector<Allocator> &);0;CS2::ABitVector;Cursor;0;0
IA32ConstantDataSnippet;IA32ConstantDataSnippet(class TR::IA32ConstantDataSnippet &&);1;TR;IA32ConstantDataSnippet;1;0
IA32ConstantDataSnippet;IA32ConstantDataSnippet(const class TR::IA32ConstantDataSnippet &);0;TR;IA32ConstantDataSnippet;1;0
IA32ConstantDataSnippet;IA32ConstantDataSnippet(TR::CodeGenerator *,TR::Node *,void *,uint8_t);0;TR;IA32ConstantDataSnippet;0;0
IA32DataSnippet;IA32DataSnippet(class TR::IA32DataSnippet &&);1;TR;IA32DataSnippet;1;0
IA32DataSnippet;IA32DataSnippet(TR::CodeGenerator *,TR::Node *,void *,uint8_t);0;TR;IA32DataSnippet;0;0
IA32DataSnippet;IA32DataSnippet(const class TR::IA32DataSnippet &);0;TR;IA32DataSnippet;1;0
Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);1;OMR;Snippet;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Snippet;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;Linkage;0;0
IteratedExternalRelocation;IteratedExternalRelocation(uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,flags8_t,TR::CodeGenerator *);1;TR;IteratedExternalRelocation;0;0
LabelAbsoluteRelocation;LabelAbsoluteRelocation(class TR::LabelAbsoluteRelocation &&);1;TR;LabelAbsoluteRelocation;1;0
LabelAbsoluteRelocation;LabelAbsoluteRelocation(const class TR::LabelAbsoluteRelocation &);0;TR;LabelAbsoluteRelocation;1;0
LabelAbsoluteRelocation;LabelAbsoluteRelocation();0;TR;LabelAbsoluteRelocation;0;0
X86PaddingInstruction;X86PaddingInstruction(TR::Instruction *,uint8_t,enum TR_PaddingProperties,TR::CodeGenerator *);1;TR;X86PaddingInstruction;0;0
TR_X86CompareAnalyser;TR_X86CompareAnalyser(const class TR_X86CompareAnalyser &);1;TR;X86CompareAnalyser;1;0
TR_X86CompareAnalyser;TR_X86CompareAnalyser(TR::CodeGenerator *);0;TR;X86CompareAnalyser;0;0
TR_X86CompareAnalyser;TR_X86CompareAnalyser(class TR_X86CompareAnalyser &&);0;TR;X86CompareAnalyser;1;0
integerCompareAnalyser;integerCompareAnalyser(TR::Node *,TR::Node *,TR::Node *,_Bool,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes);1;TR;X86CompareAnalyser;0;0
integerCompareAnalyser;integerCompareAnalyser(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes);0;TR;X86CompareAnalyser;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;RegisterDependencyConditions;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;RegisterDependencyConditions;0;0
TR_X86FPCompareAnalyser;TR_X86FPCompareAnalyser(const class TR_X86FPCompareAnalyser &);1;TR;X86FPCompareAnalyser;1;0
TR_X86FPCompareAnalyser;TR_X86FPCompareAnalyser(TR::CodeGenerator *);0;TR;X86FPCompareAnalyser;0;0
TR_X86FPCompareAnalyser;TR_X86FPCompareAnalyser(class TR_X86FPCompareAnalyser &&);0;TR;X86FPCompareAnalyser;1;0
operator=;operator=(const class TR_X86FPCompareAnalyser &);1;TR;X86FPCompareAnalyser;1;0
operator=;operator=(class TR_X86FPCompareAnalyser &&);0;TR;X86FPCompareAnalyser;1;0
operator=;operator=(class TR_IA32XMMCompareAnalyser &&);0;TR;IA32XMMCompareAnalyser;1;0
operator=;operator=(const class TR_IA32XMMCompareAnalyser &);0;TR;IA32XMMCompareAnalyser;1;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;CodeGenerator;0;0
X86FPConversionSnippet;X86FPConversionSnippet(const class TR::X86FPConversionSnippet &);1;TR;X86FPConversionSnippet;1;0
X86FPConversionSnippet;X86FPConversionSnippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,TR::LabelSymbol *,TR::SymbolReference *);0;TR;X86FPConversionSnippet;0;0
X86FPConversionSnippet;X86FPConversionSnippet(class TR::X86FPConversionSnippet &&);0;TR;X86FPConversionSnippet;1;0
X86FPConvertToIntSnippet;X86FPConvertToIntSnippet(const class TR::X86FPConvertToIntSnippet &);1;TR;X86FPConvertToIntSnippet;1;0
X86FPConvertToIntSnippet;X86FPConvertToIntSnippet(class TR::X86FPConvertToIntSnippet &&);0;TR;X86FPConvertToIntSnippet;1;0
X86FPConvertToIntSnippet;X86FPConvertToIntSnippet(TR::LabelSymbol *,TR::LabelSymbol *,TR::SymbolReference *,TR::X86RegInstruction *,TR::CodeGenerator *);0;TR;X86FPConvertToIntSnippet;0;0
X86RestartSnippet;X86RestartSnippet(const class TR::X86RestartSnippet &);1;TR;X86RestartSnippet;1;0
X86RestartSnippet;X86RestartSnippet(class TR::X86RestartSnippet &&);0;TR;X86RestartSnippet;1;0
operator=;operator=(class TR::X86FPConversionSnippet &&);0;TR;X86FPConversionSnippet;1;0
operator=;operator=(const class TR::X86FPConversionSnippet &);0;TR;X86FPConversionSnippet;1;0
operator=;operator=(class TR::X86FPConvertToIntSnippet &&);0;TR;X86FPConvertToIntSnippet;1;0
operator=;operator=(const class TR::X86FPConvertToIntSnippet &);0;TR;X86FPConvertToIntSnippet;1;0
X86FPConvertToLongSnippet;X86FPConvertToLongSnippet(class TR::X86FPConvertToLongSnippet &&);1;TR;X86FPConvertToLongSnippet;1;0
X86FPConvertToLongSnippet;X86FPConvertToLongSnippet(const class TR::X86FPConvertToLongSnippet &);0;TR;X86FPConvertToLongSnippet;1;0
X86FPConvertToLongSnippet;X86FPConvertToLongSnippet(TR::LabelSymbol *,TR::LabelSymbol *,TR::SymbolReference *,TR::X86FPST0STiRegRegInstruction *,TR::X86RegMemInstruction *,TR::X86RegMemInstruction *,TR::CodeGenerator *);0;TR;X86FPConvertToLongSnippet;0;0
operator=;operator=(class TR::X86FPConvertToLongSnippet &&);0;TR;X86FPConvertToLongSnippet;1;0
operator=;operator=(const class TR::X86FPConvertToLongSnippet &);0;TR;X86FPConvertToLongSnippet;1;0
TR_IA32XMMCompareAnalyser;TR_IA32XMMCompareAnalyser(class TR_IA32XMMCompareAnalyser &&);1;TR;IA32XMMCompareAnalyser;1;0
TR_IA32XMMCompareAnalyser;TR_IA32XMMCompareAnalyser(const class TR_IA32XMMCompareAnalyser &);0;TR;IA32XMMCompareAnalyser;1;0
TR_IA32XMMCompareAnalyser;TR_IA32XMMCompareAnalyser(TR::CodeGenerator *);0;TR;IA32XMMCompareAnalyser;0;0
X86HelperCallSnippet;X86HelperCallSnippet(const class TR::X86HelperCallSnippet &);1;TR;X86HelperCallSnippet;1;0
X86HelperCallSnippet;X86HelperCallSnippet(TR::CodeGenerator *,TR::LabelSymbol *,TR::LabelSymbol *,TR::Node *,int32_t);0;TR;X86HelperCallSnippet;0;0
X86HelperCallSnippet;X86HelperCallSnippet(class TR::X86HelperCallSnippet &&);0;TR;X86HelperCallSnippet;1;0
X86HelperCallSnippet;X86HelperCallSnippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,TR::LabelSymbol *,TR::SymbolReference *,int32_t);0;TR;X86HelperCallSnippet;0;0
operator=;operator=(const class TR::X86HelperCallSnippet &);0;TR;X86HelperCallSnippet;1;0
operator=;operator=(class TR::X86HelperCallSnippet &&);0;TR;X86HelperCallSnippet;1;0
operator=;operator=(const class TR::X86CheckAsyncMessagesSnippet &);0;TR;X86CheckAsyncMessagesSnippet;1;0
operator=;operator=(class TR::X86CheckAsyncMessagesSnippet &&);0;TR;X86CheckAsyncMessagesSnippet;1;0
MemoryReference;MemoryReference(class TR::MemoryReference &&);0;TR;MemoryReference;1;0
MemoryReference;MemoryReference(const class TR::MemoryReference &);0;TR;MemoryReference;1;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;RegisterDependencyConditions;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;Relocation;0;0
LabelRelative32BitRelocation;LabelRelative32BitRelocation(class TR::LabelRelative32BitRelocation &&);1;TR;LabelRelative32BitRelocation;1;0
LabelRelative32BitRelocation;LabelRelative32BitRelocation(const class TR::LabelRelative32BitRelocation &);0;TR;LabelRelative32BitRelocation;1;0
LabelRelative32BitRelocation;LabelRelative32BitRelocation();0;TR;LabelRelative32BitRelocation;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;GCRegisterMap;0;0
X86LabelInstruction;X86LabelInstruction(class TR::X86LabelInstruction &&);1;TR;X86LabelInstruction;1;0
X86LabelInstruction;X86LabelInstruction(const class TR::X86LabelInstruction &);0;TR;X86LabelInstruction;1;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;RegisterDependencyConditions;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;RegisterDependencyConditions;0;0
TR_Analyser;TR_Analyser(const class TR_Analyser &);1;TR;Analyser;1;0
genRestartJump;genRestartJump(uint8_t *,TR::LabelSymbol *);1;TR;X86RestartSnippet;0;0
genRestartJump;genRestartJump(enum TR_X86OpCodes,uint8_t *,TR::LabelSymbol *);0;TR;X86RestartSnippet;0;0
operator delete;operator delete(void *,TR::Region &);1;OMR;MemoryReference;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;MemoryReference;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;MemoryReference;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;MemoryReference;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;MemoryReference;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;CodeGenerator;0;0
LabelRelative12BitRelocation;LabelRelative12BitRelocation(uint8_t *,TR::LabelSymbol *,_Bool);1;TR;LabelRelative12BitRelocation;0;0
LabelRelative12BitRelocation;LabelRelative12BitRelocation();0;TR;LabelRelative12BitRelocation;0;0
LabelRelative32BitRelocation;LabelRelative32BitRelocation(const class TR::LabelRelative32BitRelocation &);1;TR;LabelRelative32BitRelocation;1;0
LabelRelative32BitRelocation;LabelRelative32BitRelocation(class TR::LabelRelative32BitRelocation &&);0;TR;LabelRelative32BitRelocation;1;0
LabelRelative8BitRelocation;LabelRelative8BitRelocation(const class TR::LabelRelative8BitRelocation &);1;TR;LabelRelative8BitRelocation;1;0
LabelRelative8BitRelocation;LabelRelative8BitRelocation();0;TR;LabelRelative8BitRelocation;0;0
LabelRelative8BitRelocation;LabelRelative8BitRelocation(class TR::LabelRelative8BitRelocation &&);0;TR;LabelRelative8BitRelocation;1;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(class TR::AMD64Imm64SymInstruction &&);1;TR;AMD64Imm64SymInstruction;1;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(const class TR::AMD64Imm64SymInstruction &);0;TR;AMD64Imm64SymInstruction;1;0
AMD64Imm64SymInstruction;AMD64Imm64SymInstruction(enum TR_X86OpCodes,TR::Node *,uint64_t,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;AMD64Imm64SymInstruction;0;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(class TR::AMD64RegImm64Instruction &&);1;TR;AMD64RegImm64Instruction;1;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(const class TR::AMD64RegImm64Instruction &);0;TR;AMD64RegImm64Instruction;1;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,uint64_t,TR::CodeGenerator *,int32_t);0;TR;AMD64RegImm64Instruction;0;0
AMD64RegImm64SymInstruction;AMD64RegImm64SymInstruction(class TR::AMD64RegImm64SymInstruction &&);1;TR;AMD64RegImm64SymInstruction;1;0
AMD64RegImm64SymInstruction;AMD64RegImm64SymInstruction(const class TR::AMD64RegImm64SymInstruction &);0;TR;AMD64RegImm64SymInstruction;1;0
AMD64RegImm64SymInstruction;AMD64RegImm64SymInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,uint64_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;AMD64RegImm64SymInstruction;0;0
X86RegInstruction;X86RegInstruction(const class TR::X86RegInstruction &);1;TR;X86RegInstruction;1;0
X86RegInstruction;X86RegInstruction(class TR::X86RegInstruction &&);0;TR;X86RegInstruction;1;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;TR;Relocation;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;TR;Relocation;0;0
X86AlignmentInstruction;X86AlignmentInstruction(const class TR::X86AlignmentInstruction &);1;TR;X86AlignmentInstruction;1;0
X86AlignmentInstruction;X86AlignmentInstruction(TR::Instruction *,uint8_t,uint8_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86AlignmentInstruction;0;0
X86AlignmentInstruction;X86AlignmentInstruction(class TR::X86AlignmentInstruction &&);0;TR;X86AlignmentInstruction;1;0
X86PatchableCodeAlignmentInstruction;X86PatchableCodeAlignmentInstruction(class TR::X86PatchableCodeAlignmentInstruction &&);1;TR;X86PatchableCodeAlignmentInstruction;1;0
X86PatchableCodeAlignmentInstruction;X86PatchableCodeAlignmentInstruction(const class TR::X86PatchableCodeAlignmentInstruction &);0;TR;X86PatchableCodeAlignmentInstruction;1;0
X86PatchableCodeAlignmentInstruction;X86PatchableCodeAlignmentInstruction(const struct TR_AtomicRegion *,TR::Instruction *,TR::CodeGenerator *);0;TR;X86PatchableCodeAlignmentInstruction;0;0
X86CallMemInstruction;X86CallMemInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);1;TR;X86CallMemInstruction;0;0
X86CallMemInstruction;X86CallMemInstruction(class TR::X86CallMemInstruction &&);0;TR;X86CallMemInstruction;1;0
X86CallMemInstruction;X86CallMemInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,TR::CodeGenerator *);0;TR;X86CallMemInstruction;0;0
X86CallMemInstruction;X86CallMemInstruction(const class TR::X86CallMemInstruction &);0;TR;X86CallMemInstruction;1;0
X86FPArithmeticRegRegInstruction;X86FPArithmeticRegRegInstruction(class TR::X86FPArithmeticRegRegInstruction &&);1;TR;X86FPArithmeticRegRegInstruction;1;0
X86FPArithmeticRegRegInstruction;X86FPArithmeticRegRegInstruction(const class TR::X86FPArithmeticRegRegInstruction &);0;TR;X86FPArithmeticRegRegInstruction;1;0
X86FPArithmeticRegRegInstruction;X86FPArithmeticRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPArithmeticRegRegInstruction;0;0
X86FPRegRegInstruction;X86FPRegRegInstruction(class TR::X86FPRegRegInstruction &&);1;TR;X86FPRegRegInstruction;1;0
X86FPRegRegInstruction;X86FPRegRegInstruction(const class TR::X86FPRegRegInstruction &);0;TR;X86FPRegRegInstruction;1;0
X86FPRegRegInstruction;X86FPRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPRegRegInstruction;0;0
X86RegRegInstruction;X86RegRegInstruction(const class TR::X86RegRegInstruction &);1;TR;X86RegRegInstruction;1;0
X86RegRegInstruction;X86RegRegInstruction(class TR::X86RegRegInstruction &&);0;TR;X86RegRegInstruction;1;0
X86FPCompareEvalInstruction;X86FPCompareEvalInstruction(class TR::X86FPCompareEvalInstruction &&);1;TR;X86FPCompareEvalInstruction;1;0
X86FPCompareEvalInstruction;X86FPCompareEvalInstruction(const class TR::X86FPCompareEvalInstruction &);0;TR;X86FPCompareEvalInstruction;1;0
X86FPCompareEvalInstruction;X86FPCompareEvalInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPCompareEvalInstruction;0;0
X86FPCompareRegRegInstruction;X86FPCompareRegRegInstruction(class TR::X86FPCompareRegRegInstruction &&);1;TR;X86FPCompareRegRegInstruction;1;0
X86FPCompareRegRegInstruction;X86FPCompareRegRegInstruction(const class TR::X86FPCompareRegRegInstruction &);0;TR;X86FPCompareRegRegInstruction;1;0
X86FPCompareRegRegInstruction;X86FPCompareRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPCompareRegRegInstruction;0;0
X86FPMemRegInstruction;X86FPMemRegInstruction(class TR::X86FPMemRegInstruction &&);1;TR;X86FPMemRegInstruction;1;0
X86FPMemRegInstruction;X86FPMemRegInstruction(const class TR::X86FPMemRegInstruction &);0;TR;X86FPMemRegInstruction;1;0
X86FPMemRegInstruction;X86FPMemRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPMemRegInstruction;0;0
X86FPRegInstruction;X86FPRegInstruction(class TR::X86FPRegInstruction &&);1;TR;X86FPRegInstruction;1;0
X86FPRegInstruction;X86FPRegInstruction(const class TR::X86FPRegInstruction &);0;TR;X86FPRegInstruction;1;0
X86FPRegInstruction;X86FPRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPRegInstruction;0;0
X86FPRegMemInstruction;X86FPRegMemInstruction(const class TR::X86FPRegMemInstruction &);1;TR;X86FPRegMemInstruction;1;0
X86FPRegMemInstruction;X86FPRegMemInstruction(class TR::X86FPRegMemInstruction &&);0;TR;X86FPRegMemInstruction;1;0
X86FPRegMemInstruction;X86FPRegMemInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);0;TR;X86FPRegMemInstruction;0;0
X86RegMemInstruction;X86RegMemInstruction(const class TR::X86RegMemInstruction &);1;TR;X86RegMemInstruction;1;0
X86RegMemInstruction;X86RegMemInstruction(class TR::X86RegMemInstruction &&);0;TR;X86RegMemInstruction;1;0
X86FPRemainderRegRegInstruction;X86FPRemainderRegRegInstruction(class TR::X86FPRemainderRegRegInstruction &&);1;TR;X86FPRemainderRegRegInstruction;1;0
X86FPRemainderRegRegInstruction;X86FPRemainderRegRegInstruction(const class TR::X86FPRemainderRegRegInstruction &);0;TR;X86FPRemainderRegRegInstruction;1;0
X86FPRemainderRegRegInstruction;X86FPRemainderRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPRemainderRegRegInstruction;0;0
X86FPST0ST1RegRegInstruction;X86FPST0ST1RegRegInstruction(const class TR::X86FPST0ST1RegRegInstruction &);1;TR;X86FPST0ST1RegRegInstruction;1;0
X86FPST0ST1RegRegInstruction;X86FPST0ST1RegRegInstruction(class TR::X86FPST0ST1RegRegInstruction &&);0;TR;X86FPST0ST1RegRegInstruction;1;0
X86FPST0ST1RegRegInstruction;X86FPST0ST1RegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPST0ST1RegRegInstruction;0;0
X86FPST0STiRegRegInstruction;X86FPST0STiRegRegInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::Register *,TR::CodeGenerator *);1;TR;X86FPST0STiRegRegInstruction;0;0
X86FPST0STiRegRegInstruction;X86FPST0STiRegRegInstruction(class TR::X86FPST0STiRegRegInstruction &&);0;TR;X86FPST0STiRegRegInstruction;1;0
X86FPST0STiRegRegInstruction;X86FPST0STiRegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);0;TR;X86FPST0STiRegRegInstruction;0;0
X86FPST0STiRegRegInstruction;X86FPST0STiRegRegInstruction(const class TR::X86FPST0STiRegRegInstruction &);0;TR;X86FPST0STiRegRegInstruction;1;0
X86FPSTiST0RegRegInstruction;X86FPSTiST0RegRegInstruction(class TR::X86FPSTiST0RegRegInstruction &&);1;TR;X86FPSTiST0RegRegInstruction;1;0
X86FPSTiST0RegRegInstruction;X86FPSTiST0RegRegInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *,_Bool);0;TR;X86FPSTiST0RegRegInstruction;0;0
X86FPSTiST0RegRegInstruction;X86FPSTiST0RegRegInstruction(const class TR::X86FPSTiST0RegRegInstruction &);0;TR;X86FPSTiST0RegRegInstruction;1;0
X86FenceInstruction;X86FenceInstruction(const class TR::X86FenceInstruction &);1;TR;X86FenceInstruction;1;0
X86FenceInstruction;X86FenceInstruction(enum TR_X86OpCodes,TR::Node *,TR::Node *,TR::CodeGenerator *);0;TR;X86FenceInstruction;0;0
X86FenceInstruction;X86FenceInstruction(class TR::X86FenceInstruction &&);0;TR;X86FenceInstruction;1;0
X86ImmInstruction;X86ImmInstruction(class TR::X86ImmInstruction &&);1;TR;X86ImmInstruction;1;0
X86ImmInstruction;X86ImmInstruction(const class TR::X86ImmInstruction &);0;TR;X86ImmInstruction;1;0
X86ImmInstruction;X86ImmInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *,int32_t);0;TR;X86ImmInstruction;0;0
X86ImmSnippetInstruction;X86ImmSnippetInstruction(const class TR::X86ImmSnippetInstruction &);1;TR;X86ImmSnippetInstruction;1;0
X86ImmSnippetInstruction;X86ImmSnippetInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::UnresolvedDataSnippet *,TR::CodeGenerator *);0;TR;X86ImmSnippetInstruction;0;0
X86ImmSnippetInstruction;X86ImmSnippetInstruction(class TR::X86ImmSnippetInstruction &&);0;TR;X86ImmSnippetInstruction;1;0
X86ImmSymInstruction;X86ImmSymInstruction(class TR::X86ImmSymInstruction &&);1;TR;X86ImmSymInstruction;1;0
X86ImmSymInstruction;X86ImmSymInstruction(TR::Instruction *,enum TR_X86OpCodes,int32_t,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);0;TR;X86ImmSymInstruction;0;0
X86ImmSymInstruction;X86ImmSymInstruction(const class TR::X86ImmSymInstruction &);0;TR;X86ImmSymInstruction;1;0
X86MemImmInstruction;X86MemImmInstruction(const class TR::X86MemImmInstruction &);1;TR;X86MemImmInstruction;1;0
X86MemImmInstruction;X86MemImmInstruction(int32_t,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,int32_t);0;TR;X86MemImmInstruction;0;0
X86MemImmInstruction;X86MemImmInstruction(class TR::X86MemImmInstruction &&);0;TR;X86MemImmInstruction;1;0
X86MemImmSymInstruction;X86MemImmSymInstruction(const class TR::X86MemImmSymInstruction &);1;TR;X86MemImmSymInstruction;1;0
X86MemImmSymInstruction;X86MemImmSymInstruction(class TR::X86MemImmSymInstruction &&);0;TR;X86MemImmSymInstruction;1;0
X86MemImmSymInstruction;X86MemImmSymInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;X86MemImmSymInstruction;0;0
X86MemRegImmInstruction;X86MemRegImmInstruction(class TR::X86MemRegImmInstruction &&);1;TR;X86MemRegImmInstruction;1;0
X86MemRegImmInstruction;X86MemRegImmInstruction(const class TR::X86MemRegImmInstruction &);0;TR;X86MemRegImmInstruction;1;0
X86MemRegImmInstruction;X86MemRegImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::MemoryReference *,TR::Register *,int32_t,TR::CodeGenerator *);0;TR;X86MemRegImmInstruction;0;0
X86MemRegRegInstruction;X86MemRegRegInstruction(class TR::X86MemRegRegInstruction &&);0;TR;X86MemRegRegInstruction;1;0
X86MemRegRegInstruction;X86MemRegRegInstruction(const class TR::X86MemRegRegInstruction &);0;TR;X86MemRegRegInstruction;1;0
X86MemTableInstruction;X86MemTableInstruction(class TR::X86MemTableInstruction &&);1;TR;X86MemTableInstruction;1;0
X86MemTableInstruction;X86MemTableInstruction(const class TR::X86MemTableInstruction &);0;TR;X86MemTableInstruction;1;0
X86MemTableInstruction;X86MemTableInstruction(enum TR_X86OpCodes,TR::Node *,TR::MemoryReference *,ncount_t,TR::CodeGenerator *);0;TR;X86MemTableInstruction;0;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(class TR::X86PaddingSnippetInstruction &&);1;TR;X86PaddingSnippetInstruction;1;0
X86PaddingSnippetInstruction;X86PaddingSnippetInstruction(const class TR::X86PaddingSnippetInstruction &);0;TR;X86PaddingSnippetInstruction;1;0
X86RegImmInstruction;X86RegImmInstruction(class TR::X86RegImmInstruction &&);1;TR;X86RegImmInstruction;1;0
X86RegImmInstruction;X86RegImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,int32_t,TR::CodeGenerator *,int32_t);0;TR;X86RegImmInstruction;0;0
X86RegImmInstruction;X86RegImmInstruction(const class TR::X86RegImmInstruction &);0;TR;X86RegImmInstruction;1;0
X86RegImmSymInstruction;X86RegImmSymInstruction(const class TR::X86RegImmSymInstruction &);1;TR;X86RegImmSymInstruction;1;0
X86RegImmSymInstruction;X86RegImmSymInstruction(class TR::X86RegImmSymInstruction &&);0;TR;X86RegImmSymInstruction;1;0
X86RegImmSymInstruction;X86RegImmSymInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);0;TR;X86RegImmSymInstruction;0;0
X86RegMemImmInstruction;X86RegMemImmInstruction(class TR::X86RegMemImmInstruction &&);1;TR;X86RegMemImmInstruction;1;0
X86RegMemImmInstruction;X86RegMemImmInstruction(const class TR::X86RegMemImmInstruction &);0;TR;X86RegMemImmInstruction;1;0
X86RegMemImmInstruction;X86RegMemImmInstruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,TR::MemoryReference *,int32_t,TR::CodeGenerator *);0;TR;X86RegMemImmInstruction;0;0
X86RegRegImmInstruction;X86RegRegImmInstruction(const class TR::X86RegRegImmInstruction &);1;TR;X86RegRegImmInstruction;1;0
X86RegRegImmInstruction;X86RegRegImmInstruction(class TR::X86RegRegImmInstruction &&);0;TR;X86RegRegImmInstruction;1;0
X86RegRegImmInstruction;X86RegRegImmInstruction(enum TR_X86OpCodes,TR::Node *,TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *);0;TR;X86RegRegImmInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(class TR::X86RegRegRegInstruction &&);1;TR;X86RegRegRegInstruction;1;0
X86RegRegRegInstruction;X86RegRegRegInstruction(TR::Register *,TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);0;TR;X86RegRegRegInstruction;0;0
X86RegRegRegInstruction;X86RegRegRegInstruction(const class TR::X86RegRegRegInstruction &);0;TR;X86RegRegRegInstruction;1;0
X86VFPCallCleanupInstruction;X86VFPCallCleanupInstruction(class TR::X86VFPCallCleanupInstruction &&);1;TR;X86VFPCallCleanupInstruction;1;0
X86VFPCallCleanupInstruction;X86VFPCallCleanupInstruction(int32_t,TR::Node *,TR::CodeGenerator *);0;TR;X86VFPCallCleanupInstruction;0;0
X86VFPCallCleanupInstruction;X86VFPCallCleanupInstruction(const class TR::X86VFPCallCleanupInstruction &);0;TR;X86VFPCallCleanupInstruction;1;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(const class TR::X86VFPDedicateInstruction &);1;TR;X86VFPDedicateInstruction;1;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(TR::RealRegister *,TR::Node *,TR::CodeGenerator *);0;TR;X86VFPDedicateInstruction;0;0
X86VFPReleaseInstruction;X86VFPReleaseInstruction(class TR::X86VFPReleaseInstruction &&);1;TR;X86VFPReleaseInstruction;1;0
X86VFPReleaseInstruction;X86VFPReleaseInstruction(const class TR::X86VFPReleaseInstruction &);0;TR;X86VFPReleaseInstruction;1;0
X86VFPReleaseInstruction;X86VFPReleaseInstruction(TR::X86VFPDedicateInstruction *,TR::Node *,TR::CodeGenerator *);0;TR;X86VFPReleaseInstruction;0;0
X86VFPRestoreInstruction;X86VFPRestoreInstruction(class TR::X86VFPRestoreInstruction &&);1;TR;X86VFPRestoreInstruction;1;0
X86VFPRestoreInstruction;X86VFPRestoreInstruction(const class TR::X86VFPRestoreInstruction &);0;TR;X86VFPRestoreInstruction;1;0
X86VFPRestoreInstruction;X86VFPRestoreInstruction(TR::X86VFPSaveInstruction *,TR::Node *,TR::CodeGenerator *);0;TR;X86VFPRestoreInstruction;0;0
X86VFPSaveInstruction;X86VFPSaveInstruction(const class TR::X86VFPSaveInstruction &);1;TR;X86VFPSaveInstruction;1;0
X86VFPSaveInstruction;X86VFPSaveInstruction(TR::Instruction *,TR::CodeGenerator *);0;TR;X86VFPSaveInstruction;0;0
TR_X86FPStackRegister;TR_X86FPStackRegister(const class TR_X86FPStackRegister &);1;TR;X86FPStackRegister;1;0
TR_X86FPStackRegister;TR_X86FPStackRegister(class TR_X86FPStackRegister &&);0;TR;X86FPStackRegister;1;0
TR_X86FPStackRegister;TR_X86FPStackRegister(RegState,TR_X86FPStackRegisters,TR::class RealRegister::RegNum,TR::CodeGenerator *);0;TR;X86FPStackRegister;0;0
AMD64RegImm64Instruction;AMD64RegImm64Instruction(TR::Instruction *,enum TR_X86OpCodes,TR::Register *,uint64_t,TR::CodeGenerator *,int32_t);1;TR;AMD64RegImm64Instruction;0;0
X86FPRegRegInstruction;X86FPRegRegInstruction(TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);1;TR;X86FPRegRegInstruction;0;0
X86VFPDedicateInstruction;X86VFPDedicateInstruction(class TR::X86VFPDedicateInstruction &&);1;TR;X86VFPDedicateInstruction;1;0
X86VFPReleaseInstruction;X86VFPReleaseInstruction(TR::Instruction *,TR::X86VFPDedicateInstruction *,TR::CodeGenerator *);1;TR;X86VFPReleaseInstruction;0;0
X86VFPRestoreInstruction;X86VFPRestoreInstruction(TR::Instruction *,TR::X86VFPSaveInstruction *,TR::CodeGenerator *);1;TR;X86VFPRestoreInstruction;0;0
layoutParm;layoutParm(TR::Node *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &);1;TR;X86SystemLinkage;0;1
layoutParm;layoutParm(TR::ParameterSymbol *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &);0;TR;X86SystemLinkage;0;1
mapIncomingParms;mapIncomingParms(TR::ResolvedMethodSymbol *);1;OMR::X86;Linkage;0;1
mapIncomingParms;mapIncomingParms(TR::ResolvedMethodSymbol *,uint32_t &);0;TR;X86SystemLinkage;0;1
operator=;operator=(const class TR::X86SystemLinkage &);0;TR;X86SystemLinkage;1;0
operator=;operator=(class TR::X86SystemLinkage &&);0;TR;X86SystemLinkage;1;0
createStore;createStore(TR::SymbolReference *,TR::Node *,TR::ILOpCodes);1;OMR;Node;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
operator=;operator=(class TR_IGBase &&);1;TR;IGBase;1;0
operator=;operator=(const class TR_IGBase &);0;TR;IGBase;1;0
RegisterDependencyConditions;RegisterDependencyConditions(class TR::RegisterDependencyConditions &&);0;TR;RegisterDependencyConditions;1;0
RegisterDependencyConditions;RegisterDependencyConditions(const class TR::RegisterDependencyConditions &);0;TR;RegisterDependencyConditions;1;0
Linkage;Linkage(class TR::Linkage &&);0;TR;Linkage;1;0
Linkage;Linkage(const class TR::Linkage &);0;TR;Linkage;1;0
X86SystemLinkage;X86SystemLinkage(class TR::X86SystemLinkage &&);1;TR;X86SystemLinkage;1;0
X86SystemLinkage;X86SystemLinkage(const class TR::X86SystemLinkage &);0;TR;X86SystemLinkage;1;0
X86SystemLinkage;X86SystemLinkage(TR::CodeGenerator *);0;TR;X86SystemLinkage;0;0
RegisterDependencyConditions;RegisterDependencyConditions();1;OMR;RegisterDependencyConditions;0;0
AMD64ABILinkage;AMD64ABILinkage(class TR::AMD64ABILinkage &&);1;TR;AMD64ABILinkage;1;0
AMD64ABILinkage;AMD64ABILinkage(const class TR::AMD64ABILinkage &);0;TR;AMD64ABILinkage;1;0
AMD64ABILinkage;AMD64ABILinkage(TR::CodeGenerator *);0;TR;AMD64ABILinkage;0;0
AMD64SystemLinkage;AMD64SystemLinkage(class TR::AMD64SystemLinkage &&);1;TR;AMD64SystemLinkage;1;0
AMD64SystemLinkage;AMD64SystemLinkage(const class TR::AMD64SystemLinkage &);0;TR;AMD64SystemLinkage;1;0
AMD64SystemLinkage;AMD64SystemLinkage(TR::CodeGenerator *);0;TR;AMD64SystemLinkage;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;Linkage;0;0
operator=;operator=(const class TR::AMD64SystemLinkage &);0;TR;AMD64SystemLinkage;1;0
operator=;operator=(class TR::AMD64SystemLinkage &&);0;TR;AMD64SystemLinkage;1;0
operator=;operator=(class TR::AMD64ABILinkage &&);0;TR;AMD64ABILinkage;1;0
operator=;operator=(const class TR::AMD64ABILinkage &);0;TR;AMD64ABILinkage;1;0
AMD64Win64FastCallLinkage;AMD64Win64FastCallLinkage(class TR::AMD64Win64FastCallLinkage &&);1;TR;AMD64Win64FastCallLinkage;1;0
AMD64Win64FastCallLinkage;AMD64Win64FastCallLinkage(const class TR::AMD64Win64FastCallLinkage &);0;TR;AMD64Win64FastCallLinkage;1;0
AMD64Win64FastCallLinkage;AMD64Win64FastCallLinkage(TR::CodeGenerator *);0;TR;AMD64Win64FastCallLinkage;0;0
operator=;operator=(const class TR::AMD64Win64FastCallLinkage &);0;TR;AMD64Win64FastCallLinkage;1;0
operator=;operator=(class TR::AMD64Win64FastCallLinkage &&);0;TR;AMD64Win64FastCallLinkage;1;0
IA32DataSnippet;IA32DataSnippet(const class TR::IA32DataSnippet &);1;TR;IA32DataSnippet;1;0
IA32DataSnippet;IA32DataSnippet(class TR::IA32DataSnippet &&);0;TR;IA32DataSnippet;1;0
operator delete;operator delete(void *,TR::Region &);1;OMR;Recompilation;0;0
operator delete;operator delete(void *,size_t);0;OMR;Recompilation;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Recompilation;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);1;OMR;Recompilation;0;0
TR_X86FPStackIterator;TR_X86FPStackIterator(class TR_X86FPStackIterator &&);1;TR;X86FPStackIterator;1;0
TR_X86FPStackIterator;TR_X86FPStackIterator(const class TR_X86FPStackIterator &);0;TR;X86FPStackIterator;1;0
TR_X86FPStackIterator;TR_X86FPStackIterator(TR::Machine *,enum TR_RegisterKinds);0;TR;X86FPStackIterator;0;0
X86ImmSymInstruction;X86ImmSymInstruction(enum TR_X86OpCodes,TR::Node *,int32_t,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);1;TR;X86ImmSymInstruction;0;0
TR_X86ScratchRegisterManager;TR_X86ScratchRegisterManager(class TR_X86ScratchRegisterManager &&);1;TR;X86ScratchRegisterManager;1;0
TR_X86ScratchRegisterManager;TR_X86ScratchRegisterManager(const class TR_X86ScratchRegisterManager &);0;TR;X86ScratchRegisterManager;1;0
TR_X86ScratchRegisterManager;TR_X86ScratchRegisterManager(int32_t,TR::CodeGenerator *);0;TR;X86ScratchRegisterManager;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;Register;0;0
AMD64SystemLinkage;AMD64SystemLinkage(TR::CodeGenerator *);1;TR;AMD64SystemLinkage;0;0
AMD64SystemLinkage;AMD64SystemLinkage(class TR::AMD64SystemLinkage &&);0;TR;AMD64SystemLinkage;1;0
Compilation;Compilation(const class OMR::Compilation &);1;OMR;Compilation;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;TR;DebugCounter;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;TR;DebugCounter;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;TR;DebugCounter;0;0
prependDebugCounterBump;prependDebugCounterBump(TR::Compilation *,TR::TreeTop *,class TR::DebugCounterBase *,TR::Node *);1;TR;DebugCounter;0;0
prependDebugCounterBump;prependDebugCounterBump(TR::Compilation *,TR::TreeTop *,class TR::DebugCounterBase *,int32_t);0;TR;DebugCounter;0;0
operator new;operator new(size_t,TR::IlGeneratorMethodDetails &);1;OMR;IlGeneratorMethodDetails;0;0
operator new;operator new(size_t,TR::IlGeneratorMethodDetails *);0;OMR;IlGeneratorMethodDetails;0;0
IlType;IlType(const class OMR::IlType &);1;OMR;IlType;1;0
IlType;IlType(const char *);0;OMR;IlType;0;0
IlType;IlType();0;OMR;IlType;0;0
IlType;IlType(class TR::IlType &&);0;TR;IlType;1;0
operator delete;operator delete(void *,size_t);1;OMR;IlType;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;IlType;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlType;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlType;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlType;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;IlType;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlType;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlType;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlType;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;IlType;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;IlType;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlType;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;IlType;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;IlType;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlType;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;IlType;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;IlType;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;IlType;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;IlType;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlType;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlType;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlType;0;0
operator=;operator=(const class OMR::IlType &);1;OMR;IlType;1;0
operator=;operator=(class TR::IlType &&);0;TR;IlType;1;0
operator=;operator=(const class TR::IlType &);0;TR;IlType;1;0
IlValue;IlValue(class OMR::IlValue &&);1;OMR;IlValue;1;0
IlValue;IlValue(TR::Node *,TR::TreeTop *,TR::Block *,TR::MethodBuilder *);0;OMR;IlValue;0;0
IlValue;IlValue(const class OMR::IlValue &);0;OMR;IlValue;1;0
operator delete;operator delete(void *,size_t);1;OMR;IlValue;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlValue;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;IlValue;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;IlValue;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlValue;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;IlValue;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;IlValue;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;IlValue;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;IlValue;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlValue;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;IlValue;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;IlValue;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlValue;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;IlValue;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlValue;0;0
KnownObjectTable;KnownObjectTable(const class OMR::KnownObjectTable &);1;OMR;KnownObjectTable;1;0
KnownObjectTable;KnownObjectTable(class OMR::KnownObjectTable &&);0;OMR;KnownObjectTable;1;0
AbsDiffIfThenElseMethod;AbsDiffIfThenElseMethod(class TestCompiler::AbsDiffIfThenElseMethod &&);1;TestCompiler;AbsDiffIfThenElseMethod;1;0
AbsDiffIfThenElseMethod;AbsDiffIfThenElseMethod(const class TestCompiler::AbsDiffIfThenElseMethod &);0;TestCompiler;AbsDiffIfThenElseMethod;1;0
AbsDiffIfThenElseMethod;AbsDiffIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;AbsDiffIfThenElseMethod;0;0
AppendBuilder;AppendBuilder(TR::IlBuilder *);1;OMR;IlBuilder;0;0
AppendBuilder;AppendBuilder(TR::BytecodeBuilder *);0;OMR;MethodBuilder;0;0
Call;Call(const char *,int32_t);1;OMR;IlBuilder;0;0
Call;Call(const char *,int32_t,TR::IlValue **);0;OMR;IlBuilder;0;0
ComputedCall;ComputedCall(const char *,int32_t);1;OMR;IlBuilder;0;0
ComputedCall;ComputedCall(const char *,int32_t,TR::IlValue **);0;OMR;IlBuilder;0;0
Const;Const(const void *const);1;OMR;IlBuilder;0;0
Const;Const(double);0;OMR;IlBuilder;0;0
Const;Const(float);0;OMR;IlBuilder;0;0
Const;Const(int64_t);0;OMR;IlBuilder;0;0
Const;Const(int32_t);0;OMR;IlBuilder;0;0
Const;Const(int16_t);0;OMR;IlBuilder;0;0
Const;Const(int8_t);0;OMR;IlBuilder;0;0
DefineFunction;DefineFunction(const char *const,const char *const,const char *const,void *,TR::IlType *,int32_t);1;OMR;MethodBuilder;0;0
DefineFunction;DefineFunction(const char *const,const char *const,const char *const,void *,TR::IlType *,int32_t,TR::IlType **);0;OMR;MethodBuilder;0;0
DefineLine;DefineLine(int);1;OMR;MethodBuilder;0;0
DefineLine;DefineLine(const char *);0;OMR;MethodBuilder;0;0
Goto;Goto(TR::IlBuilder **);1;OMR;IlBuilder;0;0
Goto;Goto(TR::IlBuilder *);0;OMR;IlBuilder;0;0
IfCmpEqual;IfCmpEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpEqual;IfCmpEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpEqualZero;IfCmpEqualZero(TR::IlBuilder **,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpEqualZero;IfCmpEqualZero(TR::IlBuilder *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpGreaterOrEqual;IfCmpGreaterOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpGreaterOrEqual;IfCmpGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpGreaterThan;IfCmpGreaterThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpGreaterThan;IfCmpGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpLessOrEqual;IfCmpLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpLessOrEqual;IfCmpLessOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpLessThan;IfCmpLessThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpLessThan;IfCmpLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpNotEqual;IfCmpNotEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpNotEqual;IfCmpNotEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpNotEqualZero;IfCmpNotEqualZero(TR::IlBuilder *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpNotEqualZero;IfCmpNotEqualZero(TR::IlBuilder **,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterOrEqual;IfCmpUnsignedGreaterOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterOrEqual;IfCmpUnsignedGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterThan;IfCmpUnsignedGreaterThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterThan;IfCmpUnsignedGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedLessOrEqual;IfCmpUnsignedLessOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedLessOrEqual;IfCmpUnsignedLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedLessThan;IfCmpUnsignedLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedLessThan;IfCmpUnsignedLessThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IlBuilder;IlBuilder(const class OMR::IlBuilder &);1;OMR;IlBuilder;1;0
IlBuilder;IlBuilder(TR::IlBuilder *);0;OMR;IlBuilder;0;0
IlBuilder;IlBuilder(TR::MethodBuilder *,TR::TypeDictionary *);0;OMR;IlBuilder;0;0
IlBuilder;IlBuilder(class TestCompiler::IlBuilder &&);0;TestCompiler;IlBuilder;1;0
IlBuilder;IlBuilder(class TestCompiler::TestDriver *,TR::MethodBuilder *,TR::TypeDictionary *);0;TestCompiler;IlBuilder;0;0
IlBuilder;IlBuilder(const class TestCompiler::IlBuilder &);0;TestCompiler;IlBuilder;1;0
IlBuilder;IlBuilder(TR::MethodBuilder *,class TR::TypeDictionary *);0;TR;IlBuilder;0;0
IlBuilder;IlBuilder(TestCompiler::TestDriver *,TR::MethodBuilder *,TR::TypeDictionary *);0;TR;IlBuilder;0;0
IlInjector;IlInjector(TR::TypeDictionary *);1;OMR;IlInjector;0;0
IlInjector;IlInjector(const class OMR::IlInjector &);0;OMR;IlInjector;1;0
IlInjector;IlInjector(TR::IlInjector *);0;OMR;IlInjector;0;0
IlInjector;IlInjector(const class TestCompiler::IlInjector &);0;TestCompiler;IlInjector;1;0
IlInjector;IlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *);0;TestCompiler;IlInjector;0;0
IlInjector;IlInjector(TR::ResolvedMethod *,TR::TypeDictionary *,class TestCompiler::TestDriver *);0;TestCompiler;IlInjector;0;0
IlInjector;IlInjector(class TestCompiler::IlInjector &&);0;TestCompiler;IlInjector;1;0
IlInjector;IlInjector(class TR::IlInjector &&);0;TR;IlInjector;1;0
IlInjector;IlInjector(TR::ResolvedMethod *,TR::TypeDictionary *,TestCompiler::TestDriver *);0;TR;IlInjector;0;0
IlInjector;IlInjector(TR::TypeDictionary *,TestCompiler::TestDriver *);0;TR;IlInjector;0;0
IlInjector;IlInjector(const class TR::IlInjector &);0;TR;IlInjector;1;0
MethodBuilder;MethodBuilder(const class OMR::MethodBuilder &);1;OMR;MethodBuilder;0;0
MethodBuilder;MethodBuilder(TR::TypeDictionary *,OMR::VirtualMachineState *);0;OMR;MethodBuilder;0;0
MethodBuilder;MethodBuilder(class TestCompiler::MethodBuilder &&);0;TestCompiler;MethodBuilder;1;0
MethodBuilder;MethodBuilder(TR::TypeDictionary *);0;TestCompiler;MethodBuilder;0;0
MethodBuilder;MethodBuilder(TR::TypeDictionary *,class TestCompiler::TestDriver *);0;TestCompiler;MethodBuilder;0;0
MethodBuilder;MethodBuilder(const class TestCompiler::MethodBuilder &);0;TestCompiler;MethodBuilder;1;0
MethodBuilder;MethodBuilder(class TR::MethodBuilder &&);0;TR;MethodBuilder;1;0
MethodBuilder;MethodBuilder(const class TR::MethodBuilder &);0;TR;MethodBuilder;1;0
MethodBuilder;MethodBuilder(TR::TypeDictionary *,TestCompiler::TestDriver *);0;TR;MethodBuilder;0;0
Return;Return();1;OMR;IlBuilder;0;0
Return;Return(TR::IlValue *);0;OMR;IlBuilder;0;0
ShiftL;ShiftL(TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
ShiftL;ShiftL(TR::IlValue *,int8_t);0;OMR;IlBuilder;0;0
ShiftR;ShiftR(TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
ShiftR;ShiftR(TR::IlValue *,int8_t);0;OMR;IlBuilder;0;0
Switch;Switch(const char *,TR::IlBuilder **,uint32_t);1;OMR;IlBuilder;0;0
Switch;Switch(const char *,TR::IlBuilder **,uint32_t,int32_t *,TR::IlBuilder **,_Bool *);0;OMR;IlBuilder;0;0
UnsignedShiftR;UnsignedShiftR(TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
UnsignedShiftR;UnsignedShiftR(TR::IlValue *,int8_t);0;OMR;IlBuilder;0;0
connectTrees;connectTrees();1;OMR;IlBuilder;0;1
connectTrees;connectTrees(uint32_t *);0;OMR;IlBuilder;0;1
getSignature;getSignature(TR::IlType **);1;OMR;MethodBuilder;0;0
getSignature;getSignature(int32_t,TR::IlType **);0;OMR;MethodBuilder;0;0
ifjump;ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,int32_t);1;OMR;IlInjector;0;0
ifjump;ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Block *);0;OMR;IlInjector;0;0
newValue;newValue(TR::IlType *,TR::Node *);1;OMR;IlBuilder;0;0
newValue;newValue(TR::DataType,TR::Node *);0;OMR;IlBuilder;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;IlInjector;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlInjector;0;0
operator delete;operator delete(void *,size_t);0;OMR;IlInjector;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;IlInjector;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;IlInjector;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;IlInjector;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;IlInjector;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlInjector;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;IlInjector;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;IlInjector;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;IlInjector;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;IlInjector;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;IlInjector;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;IlInjector;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;IlInjector;0;0
operator=;operator=(const class TR_IlGenerator &);1;TR;IlGenerator;1;0
operator=;operator=(const class OMR::IlInjector &);0;OMR;IlInjector;1;0
operator=;operator=(const class TestCompiler::IlInjector &);0;TestCompiler;IlInjector;1;0
operator=;operator=(class TestCompiler::IlInjector &&);0;TestCompiler;IlInjector;1;0
operator=;operator=(class TR::IlInjector &&);0;TR;IlInjector;1;0
operator=;operator=(const class TR::IlInjector &);0;TR;IlInjector;1;0
operator=;operator=(const class OMR::IlBuilder &);0;OMR;IlBuilder;1;0
operator=;operator=(class TestCompiler::IlBuilder &&);0;TestCompiler;IlBuilder;1;0
operator=;operator=(const class TestCompiler::IlBuilder &);0;TestCompiler;IlBuilder;1;0
operator=;operator=(class TR::IlBuilder &&);0;TR;IlBuilder;1;0
operator=;operator=(const class TR::IlBuilder &);0;TR;IlBuilder;1;0
setMethodAndTest;setMethodAndTest(TR::IlInjector *);1;TestCompiler;IlInjector;0;0
setMethodAndTest;setMethodAndTest(TR::ResolvedMethod *,class TestCompiler::TestDriver *);0;TestCompiler;IlInjector;0;0
zero;zero(TR::DataType);1;OMR;IlBuilder;0;0
zero;zero(TR::IlType *);0;OMR;IlBuilder;0;0
remove;remove(class TR::NodeChecklist &);1;TR;NodeChecklist;0;0
remove;remove(TR::Node *);0;TR;NodeChecklist;0;0
TR_ResolvedMethod;TR_ResolvedMethod(const class TR_ResolvedMethod &);1;TR;ResolvedMethod;1;0
TR_ResolvedMethod;TR_ResolvedMethod();0;TR;ResolvedMethod;1;0
Method;Method(const class TestCompiler::Method &);1;TestCompiler;Method;1;0
Method;Method(class TestCompiler::Method &&);0;TestCompiler;Method;1;0
CloseStruct;CloseStruct(const char *);1;OMR;TypeDictionary;0;0
CloseStruct;CloseStruct(const char *,size_t);0;OMR;TypeDictionary;0;0
DefineField;DefineField(const char *,const char *,TR::IlType *);1;OMR;TypeDictionary;0;0
DefineField;DefineField(const char *,const char *,TR::IlType *,size_t);0;OMR;TypeDictionary;0;0
PointerTo;PointerTo(TR::DataType);1;OMR;TypeDictionary;0;0
PointerTo;PointerTo(TR::IlType *);0;OMR;TypeDictionary;0;0
PointerTo;PointerTo(const char *);0;OMR;TypeDictionary;0;0
TypeDictionary;TypeDictionary();1;OMR;TypeDictionary;0;0
TypeDictionary;TypeDictionary(const class OMR::TypeDictionary &);0;OMR;TypeDictionary;0;0
TypeDictionary;TypeDictionary(class TR::TypeDictionary &&);0;TR;TypeDictionary;1;0
TypeDictionary;TypeDictionary(const class TR::TypeDictionary &);0;TR;TypeDictionary;1;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;TypeDictionary;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;TypeDictionary;0;0
operator delete;operator delete(void *,size_t);0;OMR;TypeDictionary;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;TypeDictionary;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;TypeDictionary;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;TypeDictionary;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;OMR;TypeDictionary;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;TypeDictionary;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;TypeDictionary;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;TypeDictionary;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;TypeDictionary;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;TypeDictionary;0;0
BasicForLoopDownMethod;BasicForLoopDownMethod(class TestCompiler::BasicForLoopDownMethod &&);1;TestCompiler;BasicForLoopDownMethod;1;0
BasicForLoopDownMethod;BasicForLoopDownMethod(const class TestCompiler::BasicForLoopDownMethod &);0;TestCompiler;BasicForLoopDownMethod;1;0
BasicForLoopDownMethod;BasicForLoopDownMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;BasicForLoopDownMethod;0;0
BasicForLoopUpMethod;BasicForLoopUpMethod(class TestCompiler::BasicForLoopUpMethod &&);1;TestCompiler;BasicForLoopUpMethod;1;0
BasicForLoopUpMethod;BasicForLoopUpMethod(const class TestCompiler::BasicForLoopUpMethod &);0;TestCompiler;BasicForLoopUpMethod;1;0
BasicForLoopUpMethod;BasicForLoopUpMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;BasicForLoopUpMethod;0;0
BinaryOpIlInjector;BinaryOpIlInjector(const class TestCompiler::BinaryOpIlInjector &);1;TestCompiler;BinaryOpIlInjector;1;0
BinaryOpIlInjector;BinaryOpIlInjector(class TestCompiler::BinaryOpIlInjector &&);0;TestCompiler;BinaryOpIlInjector;1;0
BinaryOpIlInjector;BinaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;BinaryOpIlInjector;0;0
IndirectStoreIlInjector;IndirectStoreIlInjector(class TestCompiler::IndirectStoreIlInjector &&);1;TestCompiler;IndirectStoreIlInjector;1;0
IndirectStoreIlInjector;IndirectStoreIlInjector(const class TestCompiler::IndirectStoreIlInjector &);0;TestCompiler;IndirectStoreIlInjector;1;0
IndirectStoreIlInjector;IndirectStoreIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;IndirectStoreIlInjector;0;0
OpIlInjector;OpIlInjector(const class TestCompiler::OpIlInjector &);1;TestCompiler;OpIlInjector;1;0
OpIlInjector;OpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;OpIlInjector;0;0
OpIlInjector;OpIlInjector(class TestCompiler::OpIlInjector &&);0;TestCompiler;OpIlInjector;1;0
operator=;operator=(class TestCompiler::OpIlInjector &&);0;TestCompiler;OpIlInjector;1;0
operator=;operator=(const class TestCompiler::OpIlInjector &);0;TestCompiler;OpIlInjector;1;0
operator=;operator=(class TestCompiler::BinaryOpIlInjector &&);0;TestCompiler;BinaryOpIlInjector;1;0
operator=;operator=(const class TestCompiler::BinaryOpIlInjector &);0;TestCompiler;BinaryOpIlInjector;1;0
operator=;operator=(class TestCompiler::IndirectStoreIlInjector &&);0;TestCompiler;IndirectStoreIlInjector;1;0
operator=;operator=(const class TestCompiler::IndirectStoreIlInjector &);0;TestCompiler;IndirectStoreIlInjector;1;0
BuilderTest;BuilderTest(class TestCompiler::BuilderTest &&);1;TestCompiler;BuilderTest;1;0
BuilderTest;BuilderTest(const class TestCompiler::BuilderTest &);0;TestCompiler;BuilderTest;1;0
BuilderTest;BuilderTest();0;TestCompiler;BuilderTest;1;0
TestDriver;TestDriver(const class TestCompiler::TestDriver &);1;TestCompiler;TestDriver;1;0
TestDriver;TestDriver();0;TestCompiler;TestDriver;1;0
TestDriver;TestDriver(class TestCompiler::TestDriver &&);0;TestCompiler;TestDriver;1;0
operator=;operator=(class TestCompiler::TestDriver &&);1;TestCompiler;TestDriver;1;0
operator=;operator=(const class TestCompiler::TestDriver &);0;TestCompiler;TestDriver;1;0
operator=;operator=(class TestCompiler::BuilderTest &&);0;TestCompiler;BuilderTest;1;0
operator=;operator=(const class TestCompiler::BuilderTest &);0;TestCompiler;BuilderTest;1;0
CallIlInjector;CallIlInjector(class TestCompiler::CallIlInjector &&);1;TestCompiler;CallIlInjector;1;0
CallIlInjector;CallIlInjector(const class TestCompiler::CallIlInjector &);0;TestCompiler;CallIlInjector;1;0
CallIlInjector;CallIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;CallIlInjector;0;0
UnaryOpIlInjector;UnaryOpIlInjector(class TestCompiler::UnaryOpIlInjector &&);1;TestCompiler;UnaryOpIlInjector;1;0
UnaryOpIlInjector;UnaryOpIlInjector(const class TestCompiler::UnaryOpIlInjector &);0;TestCompiler;UnaryOpIlInjector;1;0
UnaryOpIlInjector;UnaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;UnaryOpIlInjector;0;0
operator=;operator=(class TestCompiler::UnaryOpIlInjector &&);0;TestCompiler;UnaryOpIlInjector;1;0
operator=;operator=(const class TestCompiler::UnaryOpIlInjector &);0;TestCompiler;UnaryOpIlInjector;1;0
operator=;operator=(class TestCompiler::CallIlInjector &&);0;TestCompiler;CallIlInjector;1;0
operator=;operator=(const class TestCompiler::CallIlInjector &);0;TestCompiler;CallIlInjector;1;0
ChildlessUnaryOpIlInjector;ChildlessUnaryOpIlInjector(class TestCompiler::ChildlessUnaryOpIlInjector &&);1;TestCompiler;ChildlessUnaryOpIlInjector;1;0
ChildlessUnaryOpIlInjector;ChildlessUnaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;ChildlessUnaryOpIlInjector;0;0
ChildlessUnaryOpIlInjector;ChildlessUnaryOpIlInjector(const class TestCompiler::ChildlessUnaryOpIlInjector &);0;TestCompiler;ChildlessUnaryOpIlInjector;1;0
operator=;operator=(const class TestCompiler::ChildlessUnaryOpIlInjector &);0;TestCompiler;ChildlessUnaryOpIlInjector;1;0
operator=;operator=(class TestCompiler::ChildlessUnaryOpIlInjector &&);0;TestCompiler;ChildlessUnaryOpIlInjector;1;0
CmpBranchOpIlInjector;CmpBranchOpIlInjector(const class TestCompiler::CmpBranchOpIlInjector &);1;TestCompiler;CmpBranchOpIlInjector;1;0
CmpBranchOpIlInjector;CmpBranchOpIlInjector(class TestCompiler::CmpBranchOpIlInjector &&);0;TestCompiler;CmpBranchOpIlInjector;1;0
CmpBranchOpIlInjector;CmpBranchOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;CmpBranchOpIlInjector;0;0
operator=;operator=(const class TestCompiler::CmpBranchOpIlInjector &);0;TestCompiler;CmpBranchOpIlInjector;1;0
operator=;operator=(class TestCompiler::CmpBranchOpIlInjector &&);0;TestCompiler;CmpBranchOpIlInjector;1;0
DoWhileFibonnaciMethod;DoWhileFibonnaciMethod(class TestCompiler::DoWhileFibonnaciMethod &&);1;TestCompiler;DoWhileFibonnaciMethod;1;0
DoWhileFibonnaciMethod;DoWhileFibonnaciMethod(const class TestCompiler::DoWhileFibonnaciMethod &);0;TestCompiler;DoWhileFibonnaciMethod;1;0
DoWhileFibonnaciMethod;DoWhileFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;DoWhileFibonnaciMethod;0;0
DoWhileIfThenElseMethod;DoWhileIfThenElseMethod(class TestCompiler::DoWhileIfThenElseMethod &&);1;TestCompiler;DoWhileIfThenElseMethod;1;0
DoWhileIfThenElseMethod;DoWhileIfThenElseMethod(const class TestCompiler::DoWhileIfThenElseMethod &);0;TestCompiler;DoWhileIfThenElseMethod;1;0
DoWhileIfThenElseMethod;DoWhileIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;DoWhileIfThenElseMethod;0;0
DoWhileWithBreakAndContinueMethod;DoWhileWithBreakAndContinueMethod(class TestCompiler::DoWhileWithBreakAndContinueMethod &&);1;TestCompiler;DoWhileWithBreakAndContinueMethod;1;0
DoWhileWithBreakAndContinueMethod;DoWhileWithBreakAndContinueMethod(const class TestCompiler::DoWhileWithBreakAndContinueMethod &);0;TestCompiler;DoWhileWithBreakAndContinueMethod;1;0
DoWhileWithBreakAndContinueMethod;DoWhileWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;DoWhileWithBreakAndContinueMethod;0;0
DoWhileWithBreakMethod;DoWhileWithBreakMethod(class TestCompiler::DoWhileWithBreakMethod &&);1;TestCompiler;DoWhileWithBreakMethod;1;0
DoWhileWithBreakMethod;DoWhileWithBreakMethod(const class TestCompiler::DoWhileWithBreakMethod &);0;TestCompiler;DoWhileWithBreakMethod;1;0
DoWhileWithBreakMethod;DoWhileWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;DoWhileWithBreakMethod;0;0
DoWhileWithContinueMethod;DoWhileWithContinueMethod(class TestCompiler::DoWhileWithContinueMethod &&);1;TestCompiler;DoWhileWithContinueMethod;1;0
DoWhileWithContinueMethod;DoWhileWithContinueMethod(const class TestCompiler::DoWhileWithContinueMethod &);0;TestCompiler;DoWhileWithContinueMethod;1;0
DoWhileWithContinueMethod;DoWhileWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;DoWhileWithContinueMethod;0;0
ForLoopBreakAndContinueMethod;ForLoopBreakAndContinueMethod(class TestCompiler::ForLoopBreakAndContinueMethod &&);1;TestCompiler;ForLoopBreakAndContinueMethod;1;0
ForLoopBreakAndContinueMethod;ForLoopBreakAndContinueMethod(const class TestCompiler::ForLoopBreakAndContinueMethod &);0;TestCompiler;ForLoopBreakAndContinueMethod;1;0
ForLoopBreakAndContinueMethod;ForLoopBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;ForLoopBreakAndContinueMethod;0;0
ForLoopBreakMethod;ForLoopBreakMethod(const class TestCompiler::ForLoopBreakMethod &);1;TestCompiler;ForLoopBreakMethod;1;0
ForLoopBreakMethod;ForLoopBreakMethod(class TestCompiler::ForLoopBreakMethod &&);0;TestCompiler;ForLoopBreakMethod;1;0
ForLoopBreakMethod;ForLoopBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;ForLoopBreakMethod;0;0
ForLoopContinueMethod;ForLoopContinueMethod(class TestCompiler::ForLoopContinueMethod &&);1;TestCompiler;ForLoopContinueMethod;1;0
ForLoopContinueMethod;ForLoopContinueMethod(const class TestCompiler::ForLoopContinueMethod &);0;TestCompiler;ForLoopContinueMethod;1;0
ForLoopContinueMethod;ForLoopContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;ForLoopContinueMethod;0;0
ForLoopUPIfThenElseMethod;ForLoopUPIfThenElseMethod(class TestCompiler::ForLoopUPIfThenElseMethod &&);1;TestCompiler;ForLoopUPIfThenElseMethod;1;0
ForLoopUPIfThenElseMethod;ForLoopUPIfThenElseMethod(const class TestCompiler::ForLoopUPIfThenElseMethod &);0;TestCompiler;ForLoopUPIfThenElseMethod;1;0
ForLoopUPIfThenElseMethod;ForLoopUPIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;ForLoopUPIfThenElseMethod;0;0
IfThenElseLoopMethod;IfThenElseLoopMethod(class TestCompiler::IfThenElseLoopMethod &&);1;TestCompiler;IfThenElseLoopMethod;1;0
IfThenElseLoopMethod;IfThenElseLoopMethod(const class TestCompiler::IfThenElseLoopMethod &);0;TestCompiler;IfThenElseLoopMethod;1;0
IfThenElseLoopMethod;IfThenElseLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;IfThenElseLoopMethod;0;0
IndirectLoadIlInjector;IndirectLoadIlInjector(class TestCompiler::IndirectLoadIlInjector &&);1;TestCompiler;IndirectLoadIlInjector;1;0
IndirectLoadIlInjector;IndirectLoadIlInjector(const class TestCompiler::IndirectLoadIlInjector &);0;TestCompiler;IndirectLoadIlInjector;1;0
IndirectLoadIlInjector;IndirectLoadIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;IndirectLoadIlInjector;0;0
operator=;operator=(class TestCompiler::IndirectLoadIlInjector &&);0;TestCompiler;IndirectLoadIlInjector;1;0
operator=;operator=(const class TestCompiler::IndirectLoadIlInjector &);0;TestCompiler;IndirectLoadIlInjector;1;0
IterativeFibonnaciMethod;IterativeFibonnaciMethod(class TestCompiler::IterativeFibonnaciMethod &&);1;TestCompiler;IterativeFibonnaciMethod;1;0
IterativeFibonnaciMethod;IterativeFibonnaciMethod(const class TestCompiler::IterativeFibonnaciMethod &);0;TestCompiler;IterativeFibonnaciMethod;1;0
IterativeFibonnaciMethod;IterativeFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;IterativeFibonnaciMethod;0;0
MaxIfThenMethod;MaxIfThenMethod(class TestCompiler::MaxIfThenMethod &&);1;TestCompiler;MaxIfThenMethod;1;0
MaxIfThenMethod;MaxIfThenMethod(const class TestCompiler::MaxIfThenMethod &);0;TestCompiler;MaxIfThenMethod;1;0
MaxIfThenMethod;MaxIfThenMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;MaxIfThenMethod;0;0
byteswap;byteswap(int64_t);1;TestCompiler;OpCodesTest;0;0
byteswap;byteswap(int32_t);0;TestCompiler;OpCodesTest;0;0
byteswap;byteswap(uint32_t);0;TestCompiler;OpCodesTest;0;0
byteswap;byteswap(uint16_t);0;TestCompiler;OpCodesTest;0;0
byteswap;byteswap(uint64_t);0;TestCompiler;OpCodesTest;0;0
byteswap;byteswap(int16_t);0;TestCompiler;OpCodesTest;0;0
operator=;operator=(class TestCompiler::OpCodesTest &&);0;TestCompiler;OpCodesTest;1;0
operator=;operator=(const class TestCompiler::OpCodesTest &);0;TestCompiler;OpCodesTest;1;0
RecursiveFibonnaciMethod;RecursiveFibonnaciMethod(const class TestCompiler::RecursiveFibonnaciMethod &);1;TestCompiler;RecursiveFibonnaciMethod;1;0
RecursiveFibonnaciMethod;RecursiveFibonnaciMethod(class TestCompiler::RecursiveFibonnaciMethod &&);0;TestCompiler;RecursiveFibonnaciMethod;1;0
RecursiveFibonnaciMethod;RecursiveFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;RecursiveFibonnaciMethod;0;0
ShootoutNestedLoopMethod;ShootoutNestedLoopMethod(class TestCompiler::ShootoutNestedLoopMethod &&);1;TestCompiler;ShootoutNestedLoopMethod;1;0
ShootoutNestedLoopMethod;ShootoutNestedLoopMethod(const class TestCompiler::ShootoutNestedLoopMethod &);0;TestCompiler;ShootoutNestedLoopMethod;1;0
ShootoutNestedLoopMethod;ShootoutNestedLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;ShootoutNestedLoopMethod;0;0
StoreOpIlInjector;StoreOpIlInjector(const class TestCompiler::StoreOpIlInjector &);1;TestCompiler;StoreOpIlInjector;1;0
StoreOpIlInjector;StoreOpIlInjector(class TestCompiler::StoreOpIlInjector &&);0;TestCompiler;StoreOpIlInjector;1;0
StoreOpIlInjector;StoreOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;StoreOpIlInjector;0;0
operator=;operator=(class TestCompiler::StoreOpIlInjector &&);0;TestCompiler;StoreOpIlInjector;1;0
operator=;operator=(const class TestCompiler::StoreOpIlInjector &);0;TestCompiler;StoreOpIlInjector;1;0
TernaryOpIlInjector;TernaryOpIlInjector(class TestCompiler::TernaryOpIlInjector &&);1;TestCompiler;TernaryOpIlInjector;1;0
TernaryOpIlInjector;TernaryOpIlInjector(const class TestCompiler::TernaryOpIlInjector &);0;TestCompiler;TernaryOpIlInjector;1;0
TernaryOpIlInjector;TernaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);0;TestCompiler;TernaryOpIlInjector;0;0
operator=;operator=(class TestCompiler::TernaryOpIlInjector &&);0;TestCompiler;TernaryOpIlInjector;1;0
operator=;operator=(const class TestCompiler::TernaryOpIlInjector &);0;TestCompiler;TernaryOpIlInjector;1;0
WhileDoFibonnaciMethod;WhileDoFibonnaciMethod(class TestCompiler::WhileDoFibonnaciMethod &&);1;TestCompiler;WhileDoFibonnaciMethod;1;0
WhileDoFibonnaciMethod;WhileDoFibonnaciMethod(const class TestCompiler::WhileDoFibonnaciMethod &);0;TestCompiler;WhileDoFibonnaciMethod;1;0
WhileDoFibonnaciMethod;WhileDoFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;WhileDoFibonnaciMethod;0;0
WhileDoIfThenElseMethod;WhileDoIfThenElseMethod(const class TestCompiler::WhileDoIfThenElseMethod &);1;TestCompiler;WhileDoIfThenElseMethod;1;0
WhileDoIfThenElseMethod;WhileDoIfThenElseMethod(class TestCompiler::WhileDoIfThenElseMethod &&);0;TestCompiler;WhileDoIfThenElseMethod;1;0
WhileDoIfThenElseMethod;WhileDoIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;WhileDoIfThenElseMethod;0;0
WhileDoWithBreakAndContinueMethod;WhileDoWithBreakAndContinueMethod(class TestCompiler::WhileDoWithBreakAndContinueMethod &&);1;TestCompiler;WhileDoWithBreakAndContinueMethod;1;0
WhileDoWithBreakAndContinueMethod;WhileDoWithBreakAndContinueMethod(const class TestCompiler::WhileDoWithBreakAndContinueMethod &);0;TestCompiler;WhileDoWithBreakAndContinueMethod;1;0
WhileDoWithBreakAndContinueMethod;WhileDoWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;WhileDoWithBreakAndContinueMethod;0;0
WhileDoWithBreakMethod;WhileDoWithBreakMethod(class TestCompiler::WhileDoWithBreakMethod &&);1;TestCompiler;WhileDoWithBreakMethod;1;0
WhileDoWithBreakMethod;WhileDoWithBreakMethod(const class TestCompiler::WhileDoWithBreakMethod &);0;TestCompiler;WhileDoWithBreakMethod;1;0
WhileDoWithBreakMethod;WhileDoWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;WhileDoWithBreakMethod;0;0
WhileDoWithContinueMethod;WhileDoWithContinueMethod(class TestCompiler::WhileDoWithContinueMethod &&);1;TestCompiler;WhileDoWithContinueMethod;1;0
WhileDoWithContinueMethod;WhileDoWithContinueMethod(const class TestCompiler::WhileDoWithContinueMethod &);0;TestCompiler;WhileDoWithContinueMethod;1;0
WhileDoWithContinueMethod;WhileDoWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);0;TestCompiler;WhileDoWithContinueMethod;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;TR;CFGNode;0;0
operator delete;operator delete(void *,TR::Region &);0;TR;CFGNode;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;TR;CFGNode;0;0
operator new;operator new(size_t,TR::Region &);0;TR;CFGNode;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Compilation;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;Compilation;0;0
Const;Const(float);1;OMR;IlBuilder;0;0
Const;Const(const void *const);0;OMR;IlBuilder;0;0
IfCmpGreaterOrEqual;IfCmpGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpGreaterOrEqual;IfCmpGreaterOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpGreaterThan;IfCmpGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpGreaterThan;IfCmpGreaterThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterThan;IfCmpUnsignedGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterThan;IfCmpUnsignedGreaterThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
UnsignedShiftR;UnsignedShiftR(TR::IlValue *,int8_t);1;OMR;IlBuilder;0;0
UnsignedShiftR;UnsignedShiftR(TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
ResolvedMethod;ResolvedMethod(class TR::ResolvedMethod &&);0;TR;ResolvedMethod;1;0
ResolvedMethod;ResolvedMethod(const class TR::ResolvedMethod &);0;TR;ResolvedMethod;1;0
Method;Method();1;TestCompiler;Method;0;0
operator=;operator=(const class OMR::TypeDictionary &);1;OMR;TypeDictionary;1;0
operator=;operator=(class TR::TypeDictionary &&);0;TR;TypeDictionary;1;0
BarIlInjector;BarIlInjector(class TestCompiler::BarIlInjector &&);1;TestCompiler;BarIlInjector;1;0
BarIlInjector;BarIlInjector(const class TestCompiler::BarIlInjector &);0;TestCompiler;BarIlInjector;1;0
BarIlInjector;BarIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *);0;TestCompiler;BarIlInjector;0;0
operator=;operator=(const class TestCompiler::BarIlInjector &);0;TestCompiler;BarIlInjector;1;0
operator=;operator=(class TestCompiler::BarIlInjector &&);0;TestCompiler;BarIlInjector;1;0
OpIlInjector;OpIlInjector(class TestCompiler::OpIlInjector &&);1;TestCompiler;OpIlInjector;1;0
OpIlInjector;OpIlInjector(const class TestCompiler::OpIlInjector &);0;TestCompiler;OpIlInjector;1;0
FooBarTest;FooBarTest();1;TestCompiler;FooBarTest;1;0
FooBarTest;FooBarTest(const class TestCompiler::FooBarTest &);0;TestCompiler;FooBarTest;1;0
FooBarTest;FooBarTest(class TestCompiler::FooBarTest &&);0;TestCompiler;FooBarTest;1;0
operator=;operator=(class TestCompiler::FooBarTest &&);0;TestCompiler;FooBarTest;1;0
operator=;operator=(const class TestCompiler::FooBarTest &);0;TestCompiler;FooBarTest;1;0
FooIlInjector;FooIlInjector(const class TestCompiler::FooIlInjector &);1;TestCompiler;FooIlInjector;1;0
FooIlInjector;FooIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *);0;TestCompiler;FooIlInjector;0;0
FooIlInjector;FooIlInjector(class TestCompiler::FooIlInjector &&);0;TestCompiler;FooIlInjector;1;0
operator=;operator=(const class TestCompiler::FooIlInjector &);0;TestCompiler;FooIlInjector;1;0
operator=;operator=(class TestCompiler::FooIlInjector &&);0;TestCompiler;FooIlInjector;1;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Register;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;Register;0;0
Compilation;Compilation(const class OMR::Compilation &);0;OMR;Compilation;1;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;Compilation;0;0
IlInjector;IlInjector(const class OMR::IlInjector &);1;OMR;IlInjector;1;0
IlInjector;IlInjector(TR::TypeDictionary *);0;OMR;IlInjector;0;0
setMethodAndTest;setMethodAndTest(TR::ResolvedMethod *,class TestCompiler::TestDriver *);1;TestCompiler;IlInjector;0;0
setMethodAndTest;setMethodAndTest(TR::IlInjector *);0;TestCompiler;IlInjector;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;IlValue;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;IlValue;0;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;IlValue;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;IlValue;0;0
TR_MemoryBase;TR_MemoryBase(const class TR_MemoryBase &);1;TR;MemoryBase;0;0
TR_MemoryBase;TR_MemoryBase(void *);0;TR;MemoryBase;0;0
OpCodesTest;OpCodesTest(class TestCompiler::OpCodesTest &&);1;TestCompiler;OpCodesTest;1;0
OpCodesTest;OpCodesTest();0;TestCompiler;OpCodesTest;1;0
OpCodesTest;OpCodesTest(const class TestCompiler::OpCodesTest &);0;TestCompiler;OpCodesTest;1;0
ifjump;ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Block *);1;OMR;IlInjector;0;0
ifjump;ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,int32_t);0;OMR;IlInjector;0;0
OpCodesTest;OpCodesTest();1;TestCompiler;OpCodesTest;1;0
OpCodesTest;OpCodesTest(class TestCompiler::OpCodesTest &&);0;TestCompiler;OpCodesTest;1;0
TestDriver;TestDriver(class TestCompiler::TestDriver &&);1;TestCompiler;TestDriver;1;0
TestDriver;TestDriver(const class TestCompiler::TestDriver &);0;TestCompiler;TestDriver;1;0
byteswap;byteswap(int32_t);1;TestCompiler;OpCodesTest;0;0
byteswap;byteswap(int64_t);0;TestCompiler;OpCodesTest;0;0
operator=;operator=(const class TestCompiler::TestDriver &);1;TestCompiler;TestDriver;1;0
operator=;operator=(class TestCompiler::TestDriver &&);0;TestCompiler;TestDriver;1;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;Compilation;0;0
operator=;operator=(class TestCompiler::PPCOpCodesTest &&);0;TestCompiler;PPCOpCodesTest;1;0
operator=;operator=(const class TestCompiler::PPCOpCodesTest &);0;TestCompiler;PPCOpCodesTest;1;0
Qux2IlInjector;Qux2IlInjector(class TestCompiler::Qux2IlInjector &&);1;TestCompiler;Qux2IlInjector;1;0
Qux2IlInjector;Qux2IlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *);0;TestCompiler;Qux2IlInjector;0;0
Qux2IlInjector;Qux2IlInjector(const class TestCompiler::Qux2IlInjector &);0;TestCompiler;Qux2IlInjector;1;0
operator=;operator=(class TestCompiler::Qux2IlInjector &&);0;TestCompiler;Qux2IlInjector;1;0
operator=;operator=(const class TestCompiler::Qux2IlInjector &);0;TestCompiler;Qux2IlInjector;1;0
Qux2Test;Qux2Test(const class TestCompiler::Qux2Test &);1;TestCompiler;Qux2Test;1;0
Qux2Test;Qux2Test(class TestCompiler::Qux2Test &&);0;TestCompiler;Qux2Test;1;0
Qux2Test;Qux2Test();0;TestCompiler;Qux2Test;1;0
operator=;operator=(const class TestCompiler::Qux2Test &);0;TestCompiler;Qux2Test;1;0
operator=;operator=(class TestCompiler::Qux2Test &&);0;TestCompiler;Qux2Test;1;0
ReversePostorderSnapshotBlockIterator;ReversePostorderSnapshotBlockIterator(TR::Block *,TR::Compilation *,const char *);1;TR;ReversePostorderSnapshotBlockIterator;0;0
OptTestDriver;OptTestDriver(const class TestCompiler::OptTestDriver &);1;TestCompiler;OptTestDriver;1;0
OptTestDriver;OptTestDriver();0;TestCompiler;OptTestDriver;1;0
TestDriver;TestDriver();1;TestCompiler;TestDriver;1;0
operator=;operator=(class TestCompiler::SimplifierFoldAndIlInjector &&);0;TestCompiler;SimplifierFoldAndIlInjector;1;0
operator=;operator=(const class TestCompiler::SimplifierFoldAndIlInjector &);0;TestCompiler;SimplifierFoldAndIlInjector;1;0
IlVerifier;IlVerifier(class TR::IlVerifier &&);1;TR;IlVerifier;1;0
IlVerifier;IlVerifier();0;TR;IlVerifier;1;0
IlVerifier;IlVerifier(const class TR::IlVerifier &);0;TR;IlVerifier;1;0
SimplifierFoldAndIlVerifier;SimplifierFoldAndIlVerifier(const class TestCompiler::SimplifierFoldAndIlVerifier &);1;TestCompiler;SimplifierFoldAndIlVerifier;1;0
SimplifierFoldAndIlVerifier;SimplifierFoldAndIlVerifier();0;TestCompiler;SimplifierFoldAndIlVerifier;1;0
SimplifierFoldAndIlVerifier;SimplifierFoldAndIlVerifier(class TestCompiler::SimplifierFoldAndIlVerifier &&);0;TestCompiler;SimplifierFoldAndIlVerifier;1;0
operator=;operator=(const class TR::IlVerifier &);1;TR;IlVerifier;1;0
operator=;operator=(class TR::IlVerifier &&);0;TR;IlVerifier;1;0
operator=;operator=(const class TestCompiler::SimplifierFoldAndIlVerifier &);0;TestCompiler;SimplifierFoldAndIlVerifier;1;0
operator=;operator=(class TestCompiler::SimplifierFoldAndIlVerifier &&);0;TestCompiler;SimplifierFoldAndIlVerifier;1;0
operator=;operator=(const class TestCompiler::S390OpCodesTest &);0;TestCompiler;S390OpCodesTest;1;0
operator=;operator=(class TestCompiler::S390OpCodesTest &&);0;TestCompiler;S390OpCodesTest;1;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;IlInjector;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;IlInjector;0;0
NoCodegenVerifier;NoCodegenVerifier(class TR::NoCodegenVerifier &&);1;TR;NoCodegenVerifier;1;0
NoCodegenVerifier;NoCodegenVerifier(TR::IlVerifier *);0;TR;NoCodegenVerifier;0;0
NoCodegenVerifier;NoCodegenVerifier(const class TR::NoCodegenVerifier &);0;TR;NoCodegenVerifier;1;0
operator=;operator=(class TR::NoCodegenVerifier &&);0;TR;NoCodegenVerifier;1;0
operator=;operator=(const class TR::NoCodegenVerifier &);0;TR;NoCodegenVerifier;1;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;Optimizer;0;0
getSignature;getSignature(int32_t,TR::IlType **);1;OMR;MethodBuilder;0;0
getSignature;getSignature(TR::IlType **);0;OMR;MethodBuilder;0;0
operator=;operator=(const class OMR::MethodBuilder &);0;OMR;MethodBuilder;1;0
operator=;operator=(class TestCompiler::MethodBuilder &&);0;TestCompiler;MethodBuilder;1;0
operator=;operator=(const class TestCompiler::MethodBuilder &);0;TestCompiler;MethodBuilder;1;0
operator=;operator=(const class TR::MethodBuilder &);0;TR;MethodBuilder;1;0
operator=;operator=(class TR::MethodBuilder &&);0;TR;MethodBuilder;1;0
X86OpCodesTest;X86OpCodesTest();1;TestCompiler;X86OpCodesTest;1;0
X86OpCodesTest;X86OpCodesTest(const class TestCompiler::X86OpCodesTest &);0;TestCompiler;X86OpCodesTest;1;0
X86OpCodesTest;X86OpCodesTest(class TestCompiler::X86OpCodesTest &&);0;TestCompiler;X86OpCodesTest;1;0
operator=;operator=(class TestCompiler::X86OpCodesTest &&);0;TestCompiler;X86OpCodesTest;1;0
operator=;operator=(const class TestCompiler::X86OpCodesTest &);0;TestCompiler;X86OpCodesTest;1;0
CodeCache;CodeCache(const class OMR::CodeCache &);1;OMR;CodeCache;1;0
CodeCache;CodeCache(class OMR::CodeCache &&);0;OMR;CodeCache;1;0
CodeCache;CodeCache();0;OMR;CodeCache;0;0
CodeCacheBase;CodeCacheBase(class OMR::CodeCacheBase &&);1;OMR;CodeCacheBase;1;0
CodeCacheBase;CodeCacheBase();0;OMR;CodeCacheBase;1;0
CodeCacheBase;CodeCacheBase(const class OMR::CodeCacheBase &);0;OMR;CodeCacheBase;1;0
findTrampoline;findTrampoline(class TR_OpaqueMethodBlock *);1;OMR;CodeCache;0;0
findTrampoline;findTrampoline(int32_t);0;OMR;CodeCache;0;0
CacheCriticalSection;CacheCriticalSection(class OMR::CodeCache::CacheCriticalSection &&);1;OMR::CodeCache;CacheCriticalSection;1;0
CacheCriticalSection;CacheCriticalSection(TR::CodeCache *);0;OMR::CodeCache;CacheCriticalSection;0;0
CriticalSection;CriticalSection(const class OMR::CriticalSection &);1;OMR;CriticalSection;0;0
CriticalSection;CriticalSection(TR::Monitor *);0;OMR;CriticalSection;0;0
operator=;operator=(class OMR::CriticalSection);1;OMR;CriticalSection;0;0
operator=;operator=(class OMR::CodeCache::CacheCriticalSection &&);0;OMR::CodeCache;CacheCriticalSection;1;0
CacheListCriticalSection;CacheListCriticalSection(class OMR::CodeCacheManager::CacheListCriticalSection &&);1;OMR::CodeCacheManager;CacheListCriticalSection;1;0
CacheListCriticalSection;CacheListCriticalSection(TR::CodeCacheManager *);0;OMR::CodeCacheManager;CacheListCriticalSection;0;0
operator=;operator=(class OMR::CodeCacheManager::CacheListCriticalSection &&);0;OMR::CodeCacheManager;CacheListCriticalSection;1;0
RepositoryMonitorCriticalSection;RepositoryMonitorCriticalSection(class OMR::CodeCacheManager::RepositoryMonitorCriticalSection &&);1;OMR::CodeCacheManager;RepositoryMonitorCriticalSection;1;0
RepositoryMonitorCriticalSection;RepositoryMonitorCriticalSection(TR::CodeCacheManager *);0;OMR::CodeCacheManager;RepositoryMonitorCriticalSection;0;0
operator=;operator=(class OMR::CodeCacheManager::RepositoryMonitorCriticalSection &&);0;OMR::CodeCacheManager;RepositoryMonitorCriticalSection;1;0
CodeCacheConfig;CodeCacheConfig(class OMR::CodeCacheConfig &&);1;OMR;CodeCacheConfig;1;0
CodeCacheConfig;CodeCacheConfig();0;OMR;CodeCacheConfig;0;0
CodeCacheConfig;CodeCacheConfig(const class OMR::CodeCacheConfig &);0;OMR;CodeCacheConfig;1;0
CodeCacheConfig;CodeCacheConfig(const class TR::CodeCacheConfig &);0;TR;CodeCacheConfig;1;0
CodeCacheConfig;CodeCacheConfig(class TR::CodeCacheConfig &&);0;TR;CodeCacheConfig;1;0
operator=;operator=(class OMR::CodeCacheConfig &&);1;OMR;CodeCacheConfig;1;0
operator=;operator=(const class OMR::CodeCacheConfig &);0;OMR;CodeCacheConfig;1;0
operator=;operator=(class TR::CodeCacheConfig &&);0;TR;CodeCacheConfig;1;0
operator=;operator=(const class TR::CodeCacheConfig &);0;TR;CodeCacheConfig;1;0
CodeCacheManager;CodeCacheManager(const class OMR::CodeCacheManager &);1;OMR;CodeCacheManager;1;0
CodeCacheManager;CodeCacheManager(class OMR::CodeCacheManager &&);0;OMR;CodeCacheManager;1;0
CodeCacheManager;CodeCacheManager(TR::RawAllocator);0;OMR;CodeCacheManager;0;0
CodeCacheManager;CodeCacheManager(class TestCompiler::CodeCacheManager &&);0;TestCompiler;CodeCacheManager;1;0
CodeCacheManager;CodeCacheManager(const class TestCompiler::CodeCacheManager &);0;TestCompiler;CodeCacheManager;1;0
CodeCacheManager;CodeCacheManager(class TR::CodeCacheManager &&);0;TR;CodeCacheManager;1;0
CodeCacheManager;CodeCacheManager(const class TR::CodeCacheManager &);0;TR;CodeCacheManager;1;0
FECommon;FECommon(const class TR::FECommon &);1;TR;FECommon;1;0
FECommon;FECommon();0;TR;FECommon;0;0
FECommon;FECommon(class TR::FECommon &&);0;TR;FECommon;1;0
FrontEnd;FrontEnd(const class TestCompiler::FrontEnd &);1;TestCompiler;FrontEnd;1;0
FrontEnd;FrontEnd();0;TestCompiler;FrontEnd;0;0
FrontEnd;FrontEnd(class TestCompiler::FrontEnd &&);0;TestCompiler;FrontEnd;1;0
FrontEnd;FrontEnd(class TR::FrontEnd &&);0;TR;FrontEnd;1;0
TR_FrontEnd;TR_FrontEnd(const class TR_FrontEnd &);1;TR;FrontEnd;1;0
operator=;operator=(class TR::FECommon &&);0;TR;FECommon;1;0
operator=;operator=(const class TR::FECommon &);0;TR;FECommon;1;0
operator=;operator=(const class TestCompiler::FrontEnd &);0;TestCompiler;FrontEnd;1;0
operator=;operator=(class TestCompiler::FrontEnd &&);0;TestCompiler;FrontEnd;1;0
operator=;operator=(const class TR::FrontEnd &);0;TR;FrontEnd;1;0
operator=;operator=(class TR::FrontEnd &&);0;TR;FrontEnd;1;0
JitConfig;JitConfig();1;TR;JitConfig;0;0
JitConfig;JitConfig(const class TR::JitConfig &);0;TR;JitConfig;1;0
JitConfig;JitConfig(class TR::JitConfig &&);0;TR;JitConfig;1;0
CodeCache;CodeCache(class OMR::CodeCache &&);1;OMR;CodeCache;1;0
CodeCache;CodeCache(const class OMR::CodeCache &);0;OMR;CodeCache;1;0
CodeCacheBase;CodeCacheBase(const class OMR::CodeCacheBase &);1;OMR;CodeCacheBase;1;0
CodeCacheBase;CodeCacheBase(class OMR::CodeCacheBase &&);0;OMR;CodeCacheBase;1;0
operator=;operator=(const class OMR::CodeCacheConfig &);1;OMR;CodeCacheConfig;1;0
operator=;operator=(class OMR::CodeCacheConfig &&);0;OMR;CodeCacheConfig;1;0
JitConfig;JitConfig(class TR::JitConfig &&);1;TR;JitConfig;1;0
JitConfig;JitConfig();0;TR;JitConfig;0;0
CompilationStrategy;CompilationStrategy(const class TR::CompilationStrategy &);1;TR;CompilationStrategy;1;0
CompilationStrategy;CompilationStrategy(class TR::CompilationStrategy &&);0;TR;CompilationStrategy;1;0
CompilationStrategy;CompilationStrategy();0;TR;CompilationStrategy;1;0
DefaultCompilationStrategy;DefaultCompilationStrategy(const class TR::DefaultCompilationStrategy &);1;TR;DefaultCompilationStrategy;1;0
DefaultCompilationStrategy;DefaultCompilationStrategy(class TR::DefaultCompilationStrategy &&);0;TR;DefaultCompilationStrategy;1;0
DefaultCompilationStrategy;DefaultCompilationStrategy();0;TR;DefaultCompilationStrategy;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);1;TR;DefaultCompilationStrategy;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;TR;DefaultCompilationStrategy;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;TR;DefaultCompilationStrategy;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;TR;DefaultCompilationStrategy;0;0
operator=;operator=(const class TR::CompilationStrategy &);1;TR;CompilationStrategy;1;0
operator=;operator=(class TR::CompilationStrategy &&);0;TR;CompilationStrategy;1;0
operator=;operator=(class TR::DefaultCompilationStrategy &&);0;TR;DefaultCompilationStrategy;1;0
operator=;operator=(const class TR::DefaultCompilationStrategy &);0;TR;DefaultCompilationStrategy;1;0
Compilation;Compilation(class TR::Compilation &);0;TR;Compilation;1;0
dumpMethodTrees;dumpMethodTrees(char *,const char *,TR::ResolvedMethodSymbol *);1;OMR;Compilation;0;0
dumpMethodTrees;dumpMethodTrees(char *,TR::ResolvedMethodSymbol *);0;OMR;Compilation;0;0
CompileIlGenRequest;CompileIlGenRequest(const class TR::CompileIlGenRequest &);1;TR;CompileIlGenRequest;1;0
CompileIlGenRequest;CompileIlGenRequest(TR::IlGeneratorMethodDetails &);0;TR;CompileIlGenRequest;0;0
CompileIlGenRequest;CompileIlGenRequest(class TR::CompileIlGenRequest &&);0;TR;CompileIlGenRequest;1;0
DebugSegmentProvider;DebugSegmentProvider(const class TR::DebugSegmentProvider &);1;TR;DebugSegmentProvider;1;0
DebugSegmentProvider;DebugSegmentProvider(size_t,TR::RawAllocator);0;TR;DebugSegmentProvider;0;0
operator=;operator=(const class TR::DebugSegmentProvider &);0;TR;DebugSegmentProvider;1;0
FrontEnd;FrontEnd();1;TestCompiler;FrontEnd;0;0
FrontEnd;FrontEnd(const class TestCompiler::FrontEnd &);0;TestCompiler;FrontEnd;1;0
BytecodeBuilder;BytecodeBuilder(const class OMR::BytecodeBuilder &);1;OMR;BytecodeBuilder;1;0
BytecodeBuilder;BytecodeBuilder(class OMR::BytecodeBuilder &&);0;OMR;BytecodeBuilder;1;0
BytecodeBuilder;BytecodeBuilder(TR::MethodBuilder *,int32_t,char *);0;OMR;BytecodeBuilder;0;0
Call;Call(const char *,int32_t,TR::IlValue **);1;OMR;IlBuilder;0;0
Call;Call(const char *,int32_t);0;OMR;IlBuilder;0;0
Const;Const(double);1;OMR;IlBuilder;0;0
Goto;Goto(TR::IlBuilder *);1;OMR;IlBuilder;0;0
Goto;Goto(TR::IlBuilder **);0;OMR;IlBuilder;0;0
Goto;Goto(TR::BytecodeBuilder **);0;OMR;BytecodeBuilder;0;0
Goto;Goto(TR::BytecodeBuilder *);0;OMR;BytecodeBuilder;0;0
IfCmpEqual;IfCmpEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpEqual;IfCmpEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpEqual;IfCmpEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpEqual;IfCmpEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpEqualZero;IfCmpEqualZero(TR::BytecodeBuilder **,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpEqualZero;IfCmpEqualZero(TR::BytecodeBuilder *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpGreaterOrEqual;IfCmpGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpGreaterOrEqual;IfCmpGreaterOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpGreaterThan;IfCmpGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpGreaterThan;IfCmpGreaterThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpLessOrEqual;IfCmpLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpLessOrEqual;IfCmpLessOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpLessThan;IfCmpLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpLessThan;IfCmpLessThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpNotEqual;IfCmpNotEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpNotEqual;IfCmpNotEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpNotEqual;IfCmpNotEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpNotEqual;IfCmpNotEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpNotEqualZero;IfCmpNotEqualZero(TR::IlBuilder **,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpNotEqualZero;IfCmpNotEqualZero(TR::IlBuilder *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpNotEqualZero;IfCmpNotEqualZero(TR::BytecodeBuilder *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpNotEqualZero;IfCmpNotEqualZero(TR::BytecodeBuilder **,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedGreaterOrEqual;IfCmpUnsignedGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterOrEqual;IfCmpUnsignedGreaterOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedGreaterOrEqual;IfCmpUnsignedGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedGreaterOrEqual;IfCmpUnsignedGreaterOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedGreaterThan;IfCmpUnsignedGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedGreaterThan;IfCmpUnsignedGreaterThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedLessOrEqual;IfCmpUnsignedLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedLessOrEqual;IfCmpUnsignedLessOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedLessOrEqual;IfCmpUnsignedLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedLessOrEqual;IfCmpUnsignedLessOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedLessThan;IfCmpUnsignedLessThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpUnsignedLessThan;IfCmpUnsignedLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpUnsignedLessThan;IfCmpUnsignedLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IfCmpUnsignedLessThan;IfCmpUnsignedLessThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;BytecodeBuilder;0;0
IlBuilder;IlBuilder(TR::IlBuilder *);1;OMR;IlBuilder;0;0
IlBuilder;IlBuilder(const class OMR::IlBuilder &);0;OMR;IlBuilder;1;0
IlBuilder;IlBuilder(class TR::IlBuilder &&);0;TR;IlBuilder;1;0
IlBuilder;IlBuilder(const class TR::IlBuilder &);0;TR;IlBuilder;1;0
Return;Return(TR::IlValue *);1;OMR;IlBuilder;0;0
Return;Return();0;OMR;IlBuilder;0;0
ShiftR;ShiftR(TR::IlValue *,int8_t);1;OMR;IlBuilder;0;0
ShiftR;ShiftR(TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
Switch;Switch(const char *,TR::IlBuilder **,uint32_t,int32_t *,TR::IlBuilder **,_Bool *);1;OMR;IlBuilder;0;0
Switch;Switch(const char *,TR::IlBuilder **,uint32_t);0;OMR;IlBuilder;0;0
newValue;newValue(TR::DataType,TR::Node *);1;OMR;IlBuilder;0;0
newValue;newValue(TR::IlType *,TR::Node *);0;OMR;IlBuilder;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;BytecodeBuilder;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;BytecodeBuilder;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;BytecodeBuilder;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;BytecodeBuilder;0;0
operator delete;operator delete(void *,size_t);0;OMR;BytecodeBuilder;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;BytecodeBuilder;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;BytecodeBuilder;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;BytecodeBuilder;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;BytecodeBuilder;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;BytecodeBuilder;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;BytecodeBuilder;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;BytecodeBuilder;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;BytecodeBuilder;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;BytecodeBuilder;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;BytecodeBuilder;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;BytecodeBuilder;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;BytecodeBuilder;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;BytecodeBuilder;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;BytecodeBuilder;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;BytecodeBuilder;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;BytecodeBuilder;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;BytecodeBuilder;0;0
operator=;operator=(class OMR::BytecodeBuilder &&);0;OMR;BytecodeBuilder;1;0
operator=;operator=(const class OMR::BytecodeBuilder &);0;OMR;BytecodeBuilder;1;0
operator=;operator=(const class TR::BytecodeBuilder &);0;TR;BytecodeBuilder;1;0
operator=;operator=(class TR::BytecodeBuilder &&);0;TR;BytecodeBuilder;1;0
Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);1;OMR;Snippet;0;0
IlValue;IlValue(class TR::IlValue &&);0;TR;IlValue;1;0
IlValue;IlValue(const class TR::IlValue &);0;TR;IlValue;1;0
DefineFunction;DefineFunction(const char *const,const char *const,const char *const,void *,TR::IlType *,int32_t,TR::IlType **);1;OMR;MethodBuilder;0;0
DefineFunction;DefineFunction(const char *const,const char *const,const char *const,void *,TR::IlType *,int32_t);0;OMR;MethodBuilder;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;MethodBuilder;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MethodBuilder;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;MethodBuilder;0;0
operator delete;operator delete(void *,size_t);0;OMR;MethodBuilder;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;MethodBuilder;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;MethodBuilder;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;MethodBuilder;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MethodBuilder;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;MethodBuilder;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;MethodBuilder;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;MethodBuilder;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;MethodBuilder;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;MethodBuilder;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;MethodBuilder;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);0;OMR;MethodBuilder;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MethodBuilder;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;MethodBuilder;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;MethodBuilder;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;MethodBuilder;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;MethodBuilder;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;MethodBuilder;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;MethodBuilder;0;0
recreateWithoutProperties;recreateWithoutProperties(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
IlValue;IlValue(const class OMR::IlValue &);1;OMR;IlValue;1;0
IlValue;IlValue(class OMR::IlValue &&);0;OMR;IlValue;1;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);1;OMR;IlValue;0;0
IfCmpLessOrEqual;IfCmpLessOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpLessOrEqual;IfCmpLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
IfCmpLessThan;IfCmpLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpLessThan;IfCmpLessThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
ShiftL;ShiftL(TR::IlValue *,int8_t);1;OMR;IlBuilder;0;0
ShiftL;ShiftL(TR::IlValue *,TR::IlValue *);0;OMR;IlBuilder;0;0
TR_IlGenerator;TR_IlGenerator(const class TR_IlGenerator &);1;TR;IlGenerator;1;0
TR_IlGenerator;TR_IlGenerator();0;TR;IlGenerator;1;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;IlInjector;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlInjector;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;IlInjector;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlInjector;0;0
BytecodeBuilder;BytecodeBuilder(class TR::BytecodeBuilder &&);0;TR;BytecodeBuilder;1;0
BytecodeBuilder;BytecodeBuilder(const class TR::BytecodeBuilder &);0;TR;BytecodeBuilder;1;0
IfCmpEqualZero;IfCmpEqualZero(TR::IlBuilder *,TR::IlValue *);1;OMR;IlBuilder;0;0
IfCmpEqualZero;IfCmpEqualZero(TR::IlBuilder **,TR::IlValue *);0;OMR;IlBuilder;0;0
connectTrees;connectTrees(uint32_t *);1;OMR;IlBuilder;0;1
connectTrees;connectTrees();0;OMR;IlBuilder;0;1
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);1;OMR;Instruction;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);1;OMR;IlType;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;IlType;0;0
CloseStruct;CloseStruct(const char *,size_t);1;OMR;TypeDictionary;0;0
CloseStruct;CloseStruct(const char *);0;OMR;TypeDictionary;0;0
DefineField;DefineField(const char *,const char *,TR::IlType *,size_t);1;OMR;TypeDictionary;0;0
DefineField;DefineField(const char *,const char *,TR::IlType *);0;OMR;TypeDictionary;0;0
PointerTo;PointerTo(TR::IlType *);1;OMR;TypeDictionary;0;0
PointerTo;PointerTo(TR::DataType);0;OMR;TypeDictionary;0;0
TypeDictionary;TypeDictionary(const class OMR::TypeDictionary &);1;OMR;TypeDictionary;0;0
TypeDictionary;TypeDictionary();0;OMR;TypeDictionary;0;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;TypeDictionary;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;TypeDictionary;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);1;OMR;TypeDictionary;0;0
operator delete[];operator delete[](void *,TR::Region &);0;OMR;TypeDictionary;0;0
operator new;operator new(size_t,TR::Region &);1;OMR;TypeDictionary;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);1;OMR;TypeDictionary;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;TypeDictionary;0;0
TR_FrontEnd;TR_FrontEnd(const class TR_FrontEnd &);0;TR;FrontEnd;1;0
operator new[];operator new[](size_t,TR::Region &);1;OMR;IlType;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;IlType;0;0
JitConfig;JitConfig(const class TR::JitConfig &);1;TR;JitConfig;1;0
IlType;IlType(const class TR::IlType &);0;TR;IlType;1;0
PointerType;PointerType(TR::IlType *);1;OMR;PointerType;0;0
PointerType;PointerType(class OMR::PointerType &&);0;OMR;PointerType;1;0
PointerType;PointerType(const class OMR::PointerType &);0;OMR;PointerType;1;0
operator=;operator=(const class OMR::PointerType &);0;OMR;PointerType;1;0
operator=;operator=(class OMR::PointerType &&);0;OMR;PointerType;1;0
PrimitiveType;PrimitiveType(const class OMR::PrimitiveType &);1;OMR;PrimitiveType;1;0
PrimitiveType;PrimitiveType(const char *,TR::DataType);0;OMR;PrimitiveType;0;0
operator=;operator=(const class OMR::PrimitiveType &);0;OMR;PrimitiveType;1;0
AddField;AddField(const char *,TR::IlType *);1;OMR;StructType;0;0
AddField;AddField(const char *,TR::IlType *,size_t);0;OMR;StructType;0;0
Close;Close();1;OMR;StructType;0;0
Close;Close(size_t);0;OMR;StructType;0;0
StructType;StructType(const char *);1;OMR;StructType;0;0
StructType;StructType(const class OMR::StructType &);0;OMR;StructType;1;0
operator=;operator=(const class OMR::StructType &);0;OMR;StructType;1;0
UnionType;UnionType(const class OMR::UnionType &);1;OMR;UnionType;1;0
UnionType;UnionType(const char *,class TR_Memory *);0;OMR;UnionType;0;0
operator=;operator=(const class OMR::UnionType &);0;OMR;UnionType;1;0
CacheCriticalSection;CacheCriticalSection(const class OMR::CodeCache::CacheCriticalSection &);1;OMR::CodeCache;CacheCriticalSection;1;0
CacheCriticalSection;CacheCriticalSection(class OMR::CodeCache::CacheCriticalSection &&);0;OMR::CodeCache;CacheCriticalSection;1;0
CodeCacheMemorySegment;CodeCacheMemorySegment(const class OMR::CodeCacheMemorySegment &);1;OMR;CodeCacheMemorySegment;1;0
CodeCacheMemorySegment;CodeCacheMemorySegment();0;OMR;CodeCacheMemorySegment;0;0
CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,uint8_t *);0;OMR;CodeCacheMemorySegment;0;0
CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,size_t);0;OMR;CodeCacheMemorySegment;0;0
CodeCacheMemorySegment;CodeCacheMemorySegment(class OMR::CodeCacheMemorySegment &&);0;OMR;CodeCacheMemorySegment;1;0
CodeCache;CodeCache(class TR::CodeCache &&);0;TR;CodeCache;1;0
CodeCache;CodeCache(const class TR::CodeCache &);0;TR;CodeCache;1;0
findTrampoline;findTrampoline(int32_t);1;OMR;CodeCache;0;0
findTrampoline;findTrampoline(class TR_OpaqueMethodBlock *);0;OMR;CodeCache;0;0
CacheListCriticalSection;CacheListCriticalSection(const class OMR::CodeCacheManager::CacheListCriticalSection &);1;OMR::CodeCacheManager;CacheListCriticalSection;1;0
CacheListCriticalSection;CacheListCriticalSection(class OMR::CodeCacheManager::CacheListCriticalSection &&);0;OMR::CodeCacheManager;CacheListCriticalSection;1;0
RepositoryMonitorCriticalSection;RepositoryMonitorCriticalSection(const class OMR::CodeCacheManager::RepositoryMonitorCriticalSection &);1;OMR::CodeCacheManager;RepositoryMonitorCriticalSection;1;0
RepositoryMonitorCriticalSection;RepositoryMonitorCriticalSection(class OMR::CodeCacheManager::RepositoryMonitorCriticalSection &&);0;OMR::CodeCacheManager;RepositoryMonitorCriticalSection;1;0
ELFRelocationResolver;ELFRelocationResolver(class OMR::ELFRelocationResolver &&);1;OMR;ELFRelocationResolver;1;0
ELFRelocationResolver;ELFRelocationResolver(const class OMR::ELFRelocationResolver &);0;OMR;ELFRelocationResolver;1;0
ELFRelocationResolver;ELFRelocationResolver(class OMR::X86::AMD64::ELFRelocationResolver &&);0;OMR::X86::AMD64;ELFRelocationResolver;1;0
ELFRelocationResolver;ELFRelocationResolver(const class OMR::X86::AMD64::ELFRelocationResolver &);0;OMR::X86::AMD64;ELFRelocationResolver;1;0
ELFRelocationResolver;ELFRelocationResolver(class TR::ELFRelocationResolver &&);0;TR;ELFRelocationResolver;1;0
ELFRelocationResolver;ELFRelocationResolver(const class TR::ELFRelocationResolver &);0;TR;ELFRelocationResolver;1;0
CodeCacheManager;CodeCacheManager(class OMR::CodeCacheManager &&);1;OMR;CodeCacheManager;1;0
CodeCacheManager;CodeCacheManager(const class OMR::CodeCacheManager &);0;OMR;CodeCacheManager;1;0
CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,size_t);1;OMR;CodeCacheMemorySegment;0;0
CodeCacheMemorySegment;CodeCacheMemorySegment(const class OMR::CodeCacheMemorySegment &);0;OMR;CodeCacheMemorySegment;1;0
CodeCacheMemorySegment;CodeCacheMemorySegment(class TR::CodeCacheMemorySegment &&);0;TR;CodeCacheMemorySegment;1;0
CodeCacheMemorySegment;CodeCacheMemorySegment(const class TR::CodeCacheMemorySegment &);0;TR;CodeCacheMemorySegment;1;0
CodeCacheMemorySegment;CodeCacheMemorySegment(class OMR::CodeCacheMemorySegment &&);1;OMR;CodeCacheMemorySegment;1;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails();1;OMR;IlGeneratorMethodDetails;0;0
IlGeneratorMethodDetails;IlGeneratorMethodDetails(const class OMR::IlGeneratorMethodDetails &);0;OMR;IlGeneratorMethodDetails;1;0
CompilerEnv;CompilerEnv(const class TR::CompilerEnv &);0;TR;CompilerEnv;1;0
operator delete;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;IlBuilder;0;0
operator delete;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlBuilder;0;0
operator delete;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlBuilder;0;0
operator delete;operator delete(void *,TR::Region &);0;OMR;IlBuilder;0;0
operator delete;operator delete(void *,size_t);0;OMR;IlBuilder;0;0
operator delete[];operator delete[](void *,TR::Region &);1;OMR;IlBuilder;0;0
operator delete[];operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlBuilder;0;0
operator delete[];operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlBuilder;0;0
operator delete[];operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlBuilder;0;0
operator new;operator new(size_t,class TR_PersistentMemory *);1;OMR;IlBuilder;0;0
operator new;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);0;OMR;IlBuilder;0;0
operator new;operator new(size_t,TR::Internal::PersistentNewType);0;OMR;IlBuilder;0;0
operator new;operator new(size_t,TR::Region &);0;OMR;IlBuilder;0;0
operator new;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlBuilder;0;0
operator new;operator new(size_t,TR_ArenaAllocator *);0;OMR;IlBuilder;0;0
operator new;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlBuilder;0;0
operator new[];operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);1;OMR;IlBuilder;0;0
operator new[];operator new[](size_t,class TR_PersistentMemory *);0;OMR;IlBuilder;0;0
operator new[];operator new[](size_t,TR::Region &);0;OMR;IlBuilder;0;0
operator new[];operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);0;OMR;IlBuilder;0;0
operator new[];operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);0;OMR;IlBuilder;0;0
operator new[];operator new[](size_t,TR::Internal::PersistentNewType);0;OMR;IlBuilder;0;0
create;create(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);1;OMR;Node;0;0
DebugEnv;DebugEnv(class OMR::DebugEnv &&);1;OMR;DebugEnv;1;0
