CallerFunc;FunctionSignature;Receiver
CS2::Timer::Start();Start();CS2::BSDTimer
CS2::Timer::Stop();Stop();CS2::BSDTimer
CS2::Timer::Reset();Reset();CS2::BSDTimer
OMR::PersistentInfo::getNextPseudoRandomNumber(int32_t);advanceCurPseudoRandomNumbersListElem();OMR::PersistentInfo
TR_PersistentMemory::freePersistentMemory(void *);deallocate(void *,const size_t);OMR::PersistentAllocator
TRPersistentMemoryAllocator::deallocate(void *,size_t,const char *,int);freePersistentMemory(void *);TR_PersistentMemory
TRPersistentMemoryAllocator::reallocate(size_t,void *,size_t,const char *,int);deallocate(void *,size_t,const char *,int);TRPersistentMemoryAllocator
TR_Array::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Array::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Array::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Array::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PersistentArray::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PersistentArray::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PersistentArray::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PersistentArray::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ArrayIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ArrayIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ArrayIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ArrayIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRSlotSharingInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRSlotSharingInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRSlotSharingInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRSlotSharingInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRCompilationData::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRCompilationData::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRCompilationData::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRCompilationData::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRCompilationData::addSlotSharingInfo(const TR_ByteCodeInfo &,int32_t,int32_t,int32_t,int32_t,_Bool);addSlotSharingInfo(int32_t,int32_t,int32_t,int32_t,int32_t,_Bool);TR_OSRMethodData
TR_OSRCompilationData::addInstruction(TR::Instruction *);addInstruction(int32_t,TR_ByteCodeInfo);TR_OSRCompilationData
TR_OSRCompilationData::setOSRMethodDataArraySize(int);setSize(uint32_t);TR_Array
TR_OSRCompilationData::buildFinalMap(int32_t,DefiningMap *,DefiningMap *,DefiningMaps &,DefiningMaps &);buildFinalMap(int32_t,DefiningMap *,DefiningMap *,DefiningMaps &,DefiningMaps &);TR_OSRCompilationData
TR_OSRMethodData::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRMethodData::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRMethodData::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRMethodData::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRMethodData::findOrCreateOSRCodeBlock(TR::Node *);createOSRBlocks(TR::Node *);TR_OSRMethodData
TR_OSRMethodData::findOrCreateOSRCatchBlock(TR::Node *);createOSRBlocks(TR::Node *);TR_OSRMethodData
TR_OSRMethodData::setNumOfSymsThatShareSlot(int32_t);updateNumOfSymsThatShareSlot(int32_t);TR_OSRCompilationData
TR_OSRMethodData::addSlotSharingInfo(int32_t,int32_t,int32_t,int32_t,int32_t,_Bool);addSlotInfo(int32_t,int32_t,int32_t,int32_t,_Bool);TR_OSRSlotSharingInfo
TR_OSRMethodData::addLiveRangeInfo(int32_t,class TR_BitVector *);Add(const int &,class TR_BitVector *const &);CS2::HashTable
TR_OSRMethodData::addPendingPushLivenessInfo(int32_t,class TR_BitVector *);Add(const int &,class TR_BitVector *const &);CS2::HashTable
TR_OSRMethodData::buildDefiningMapForBlock(TR::Block *,DefiningMap *);buildDefiningMap(TR::Block *,DefiningMap *,DefiningMap *);TR_OSRMethodData
TR_OSRMethodData::buildDefiningMapForOSRCodeBlockAndPrepareForOSRCall(TR::Block *,DefiningMap *,DefiningMap *);buildDefiningMap(TR::Block *,DefiningMap *,DefiningMap *);TR_OSRMethodData
TR_OSRMethodData::createOSRBlocks(TR::Node *);setIsCold(_Bool);OMR::Block
TR_OSRMethodData::createOSRBlocks(TR::Node *);setIsOSRCodeBlock();OMR::Block
TR_OSRMethodData::createOSRBlocks(TR::Node *);setDoNotProfile();OMR::Block
TR_OSRMethodData::createOSRBlocks(TR::Node *);setIsOSRCatchBlock();OMR::Block
TR_OSRMethodData::createOSRBlocks(TR::Node *);setHandlerInfoWithOutBCInfo(uint32_t,uint8_t,uint16_t,class TR_ResolvedMethod *,TR::Compilation *);OMR::Block
TR_OSRMethodData::createOSRBlocks(TR::Node *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_OSRMethodData::createOSRBlocks(TR::Node *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_OSRMethodData::createOSRBlocks(TR::Node *);insertTreeTopsBeforeMe(TR::TreeTop *,TR::TreeTop *);OMR::TreeTop
TR_OSRPoint::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRPoint::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRPoint::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRPoint::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListElement::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListElement::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListElement::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListElement::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListBase::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListBase::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListBase::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListBase::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
List::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
List::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
List::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
List::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListAppender::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListAppender::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListAppender::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListAppender::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_TwoListIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_TwoListIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_TwoListIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_TwoListIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListHeadAndTail::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListHeadAndTail::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
ListHeadAndTail::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
ListHeadAndTail::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RandomGenerator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RandomGenerator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RandomGenerator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RandomGenerator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RandomGenerator::TR_RandomGenerator(class TR_RandomGenerator *);setSeed(uint32_t);TR_RandomGenerator
TR_RandomGenerator::TR_RandomGenerator(int32_t);setSeed(uint32_t);TR_RandomGenerator
TR_RandomGenerator::TR_RandomGenerator(uint32_t);setSeed(uint32_t);TR_RandomGenerator
TR_BitContainer::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BitContainer::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BitContainer::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BitContainer::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_SingleBitContainer::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_SingleBitContainer::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_SingleBitContainer::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_SingleBitContainer::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BitVector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BitVector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BitVector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BitVector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BitVector::setSize(int64_t);setChunkSize(int32_t);TR_BitVector
TR_BitVector::init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);setChunkSize(int32_t);TR_BitVector
TR_BitVector::init(int64_t,TR::Region &,enum TR_BitVectorGrowable);setChunkSize(int32_t);TR_BitVector
TR_BitVector::operator&=(class TR_BitVector &);resetLowAndHighChunks(int32_t,int32_t);TR_BitVector
TR_BitVector::operator-=(class TR_BitVector &);resetLowAndHighChunks(int32_t,int32_t);TR_BitVector
TR_BitVector::resetAll(int64_t,int64_t);resetLowAndHighChunks(int32_t,int32_t);TR_BitVector
TR_BitVector::pack();setChunkSize(int32_t);TR_BitVector
TR_BitVectorIterator::TR_BitVectorIterator(class TR_BitVector &,int32_t);setBitVector(class TR_BitVector &,int32_t);TR_BitVectorIterator
TR_BitVectorIterator::setBitVector(class TR_BitVector &,int32_t);reset();TR_BitVectorIterator
TR_BitVectorIterator::getFirstElement();reset();TR_BitVectorIterator
TR_BitVectorIterator::reset();getNextBit();TR_BitVectorIterator
TR_BitVectorIterator::getNextElement();getNextBit();TR_BitVectorIterator
TR_BitVectorCursor::TR_BitVectorCursor(class TR_BitVector &);SetToFirstOne();TR_BitVectorCursor
TR_BitVectorCursor::SetToFirstOne();reset();TR_BitVectorIterator
TR_BitVectorCursor::SetToFirstOne();SetToNextOne();TR_BitVectorCursor
TR_BitContainerIterator::TR_BitContainerIterator(class TR_BitContainer &);setBitContainer(class TR_BitContainer &);TR_BitContainerIterator
TR_BitMatrix::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BitMatrix::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BitMatrix::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BitMatrix::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BitMatrix::set(int32_t,int32_t);set(int64_t);TR_BitVector
TR_BitMatrix::reset(int32_t,int32_t);reset(int64_t,_Bool);TR_BitVector
OMR::SnippetGCMap::setGCSafePoint();set(unsigned char);OMR::FlagsTemplate
OMR::SnippetGCMap::resetGCSafePoint();reset(unsigned char);OMR::FlagsTemplate
OMR::Snippet::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Snippet::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Snippet::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Snippet::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Snippet::setNeedsExceptionTableEntry();set(unsigned int);OMR::FlagsTemplate
OMR::Snippet::resetNeedsExceptionTableEntry();reset(unsigned int);OMR::FlagsTemplate
TR_Link::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Link::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Link::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Link::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LinkHead::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LinkHead::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LinkHead::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LinkHead::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Pair::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Pair::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Pair::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Pair::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PrefetchInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrefetchInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrefetchInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PrefetchInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::ILOpCode::convertScalarToVector(TR::ILOpCodes);setOpCodeValue(TR::ILOpCodes);OMR::ILOpCode
TR_StorageInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_StorageInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_StorageInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_StorageInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::NodeExtension::operator delete(void *,size_t,TR_NodeExtAllocator &);deallocate(void *,size_t,const char *);CS2::arena_allocator
TR::NodeExtension::freeExtension(size_t);deallocate(void *,size_t,const char *);CS2::arena_allocator
TR_NodeMappings::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeMappings::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeMappings::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeMappings::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeMappings::clear();setFirst(struct TR_NodeMappings::Mapper *);TR_LinkHead0
TR_NodeMappings::add(TR::Node *,TR::Node *,class TR_Memory *);add(struct TR_NodeMappings::Mapper *);TR_LinkHead0
TR_ParentOfChildNode::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ParentOfChildNode::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ParentOfChildNode::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ParentOfChildNode::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Node::isLegalCallToCreate(TR::ILOpCodes);setOpCodeValue(TR::ILOpCodes);OMR::ILOpCode
OMR::Node::setConstValue(int64_t);freeExtensionIfExists();OMR::Node
OMR::Node::setLongInt(int64_t);freeExtensionIfExists();OMR::Node
OMR::Node::setUnsignedLongInt(uint64_t);freeExtensionIfExists();OMR::Node
OMR::Node::setInt(int32_t);freeExtensionIfExists();OMR::Node
OMR::Node::setUnsignedInt(uint32_t);freeExtensionIfExists();OMR::Node
OMR::Node::setShortInt(int16_t);freeExtensionIfExists();OMR::Node
OMR::Node::setUnsignedShortInt(uint16_t);freeExtensionIfExists();OMR::Node
OMR::Node::setByte(int8_t);freeExtensionIfExists();OMR::Node
OMR::Node::setUnsignedByte(uint8_t);freeExtensionIfExists();OMR::Node
OMR::Node::setFloat(float);freeExtensionIfExists();OMR::Node
OMR::Node::setFloatBits(uint32_t);freeExtensionIfExists();OMR::Node
OMR::Node::setDouble(double);freeExtensionIfExists();OMR::Node
OMR::Node::setAddress(uint64_t);freeExtensionIfExists();OMR::Node
OMR::Node::setIsHPREligible();set(unsigned int);OMR::FlagsTemplate
OMR::Node::resetIsHPREligible();reset(unsigned int);OMR::FlagsTemplate
OMR::Node::setIsPowerOfTwo(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setReferenceIsNonNull(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setIsLoadAndTest(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setHasNodeExtension(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::ChildIterator::operator++();stepForward();OMR::Node::ChildIterator
TR_InlineBlock::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InlineBlock::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InlineBlock::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InlineBlock::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InlineBlocks::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InlineBlocks::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InlineBlocks::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InlineBlocks::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_MethodParameterIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_MethodParameterIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_MethodParameterIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_MethodParameterIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Method::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Method::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Method::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Method::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::Method::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::Method::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::Method::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::Method::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::ResolvedMethod::ResolvedMethod(const char *,const char *,char *,int32_t,TR::IlType **,TR::IlType *,void *,TR::IlInjector *);computeSignatureChars();TestCompiler::ResolvedMethod
OMR::TreeTop::insertAfter(TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
OMR::TreeTop::insertBefore(TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
OMR::TreeTop::unlink(_Bool);setNextTreeTop(TR::TreeTop *);OMR::TreeTop
OMR::TreeTop::unlink(_Bool);setPrevTreeTop(TR::TreeTop *);OMR::TreeTop
OMR::TreeTop::insertNewTreeTop(TR::TreeTop *,TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
OMR::Optimizer::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Optimizer::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Optimizer::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Optimizer::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Optimizer::prepareForTreeRemoval(TR::TreeTop *);prepareForNodeRemoval(TR::Node *,_Bool);OMR::Optimizer
TR_OptimizationPlan::init(enum TR_Hotness);setOptLevel(enum TR_Hotness);TR_OptimizationPlan
TR_OptimizationPlan::init(enum TR_Hotness);clear();OMR::FlagsTemplate
TR_OptimizationPlan::init(enum TR_Hotness);setUseSampling(_Bool);TR_OptimizationPlan
TR_OptimizationPlan::init(enum TR_Hotness);setInUse(_Bool);TR_OptimizationPlan
TR_OptimizationPlan::setInsertInstrumentation(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setUseSampling(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setOptLevelDowngraded(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setDowngradedDueToSamplingJProfiling(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setLogCompilation(TR::FILE *);set(unsigned int);OMR::FlagsTemplate
TR_OptimizationPlan::setAddToUpgradeQueue();set(unsigned int);OMR::FlagsTemplate
TR_OptimizationPlan::resetAddToUpgradeQueue();set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setInUse(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setDisableCHOpts(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setDisableGCR(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setIsUpgradeRecompilation(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setIsExplicitCompilation(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setReduceMaxPeekedBytecode(uint32_t);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
TR_OptimizationPlan::setDoNotSwitchToProfiling(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setIsStackAllocated();set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setIsAotLoad(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setDontFailOnPurpose(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setRelaxedCompilationLimits(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setInducedByDLT(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setIsGPUCompilation(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setIsGPUParallelStream(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_OptimizationPlan::setIsGPUCompileCPUCode(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR::SimpleRegex::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::SimpleRegex::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::SimpleRegex::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::SimpleRegex::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::OptionSet::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::OptionSet::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::OptionSet::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::OptionSet::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::OptionSet::OptionSet(char *);init(char *);TR::OptionSet
OMR::Machine::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Machine::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Machine::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Machine::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Register::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Register::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Register::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Register::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Register::setFlags(uint32_t);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::Register::setPlaceholderReg();set(unsigned int);OMR::FlagsTemplate
OMR::Register::resetPlaceholderReg();reset(unsigned int);OMR::FlagsTemplate
OMR::Register::setContainsCollectedReference();set(unsigned int);OMR::FlagsTemplate
OMR::Register::setIsLive();set(unsigned int);OMR::FlagsTemplate
OMR::Register::resetIsLive();reset(unsigned int);OMR::FlagsTemplate
OMR::Register::setIsSinglePrecision(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Register::setIsUpperHalfDead(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::X86::Register::resetNeedsPrecisionAdjustment();reset(unsigned int);OMR::FlagsTemplate
OMR::X86::Register::setMayNeedPrecisionAdjustment();set(unsigned int);OMR::FlagsTemplate
OMR::X86::Register::setIsDiscardable();set(unsigned int);OMR::FlagsTemplate
OMR::X86::Register::resetIsDiscardable();reset(unsigned int);OMR::FlagsTemplate
OMR::X86::Register::setNeedsLazyClobbering(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::X86::Register::setUpperBitsAreZero(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::X86::Register::setIsSpilledToSecondHalf(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::RealRegister::setIsFreeOnExit(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
OMR::RealRegister::setIsAssignedOnce(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
OMR::RealRegister::setIsAssignedMoreThanOnce(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
OMR::RealRegister::setIsSpillExtendedOutOfLoop(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
TR_RegisterAssignerState::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RegisterAssignerState::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RegisterAssignerState::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RegisterAssignerState::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_VirtualGuard::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_VirtualGuard::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_VirtualGuard::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_VirtualGuard::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::CFGEdge::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::CFGEdge::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::CFGEdge::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::CFGEdge::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::CFGEdge::setCreatedByTailRecursionElimination(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR::CFGEdge::setMustRestoreVMThreadRegister(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR::CFGNode::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::CFGNode::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::CFGNode::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::CFGNode::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::CFGNode::addSuccessor(class TR::CFGEdge *);push_front(const value_type &);TR::forward_list
TR::CFGNode::addSuccessor(class TR::CFGEdge *,enum TR_AllocationKind);push_front(const value_type &);TR::forward_list
TR::CFGNode::addPredecessor(class TR::CFGEdge *);push_front(const value_type &);TR::forward_list
TR::CFGNode::addPredecessor(class TR::CFGEdge *,enum TR_AllocationKind);push_front(const value_type &);TR::forward_list
TR::CFGNode::addExceptionSuccessor(class TR::CFGEdge *);push_front(const value_type &);TR::forward_list
TR::CFGNode::addExceptionSuccessor(class TR::CFGEdge *,enum TR_AllocationKind);push_front(const value_type &);TR::forward_list
TR::CFGNode::addExceptionPredecessor(class TR::CFGEdge *);push_front(const value_type &);TR::forward_list
TR::CFGNode::addExceptionPredecessor(class TR::CFGEdge *,enum TR_AllocationKind);push_front(const value_type &);TR::forward_list
TR::CFGNode::removeSuccessor(class TR::CFGEdge *);remove(const value_type &);TR::forward_list
TR::CFGNode::removePredecessor(class TR::CFGEdge *);remove(const value_type &);TR::forward_list
TR::CFGNode::removeExceptionSuccessor(class TR::CFGEdge *);remove(const value_type &);TR::forward_list
TR::CFGNode::removeExceptionPredecessor(class TR::CFGEdge *);remove(const value_type &);TR::forward_list
TR_RematerializationInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RematerializationInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RematerializationInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RematerializationInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RematerializationInfo::TR_RematerializationInfo(TR::Instruction *,enum TR_RematerializableTypes,TR::SymbolReference *);setRematerializableFromAddress();TR_RematerializationInfo
TR_RematerializationInfo::TR_RematerializationInfo(TR::Instruction *,enum TR_RematerializableTypes,intptrj_t);setRematerializableFromConstant();TR_RematerializationInfo
TR_RematerializationInfo::TR_RematerializationInfo(TR::Instruction *,enum TR_RematerializableTypes,TR::SymbolReference *,TR::Register *);setRematerializableFromMemory();TR_RematerializationInfo
TR_RematerializationInfo::TR_RematerializationInfo(TR::Instruction *,enum TR_RematerializableTypes,TR::Register *,TR::Node *);setRematerializableFromSpillReg();TR_RematerializationInfo
TR_RematerializationInfo::setRematerializableFromAddress();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::setRematerializableFromConstant();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::setRematerializableFromMemory();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::setRematerializableFromSpillReg();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::setIndirect();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::setStore();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::setActive();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::resetActive();reset(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::setRematerialized();set(unsigned short);OMR::FlagsTemplate
TR_RematerializationInfo::resetRematerialized();reset(unsigned short);OMR::FlagsTemplate
TR_Debug::startTracingRegisterAssignment();startTracingRegisterAssignment(const char *,enum TR_RegisterKinds);TR_Debug
TR::DebugCounter::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::DebugCounter::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::DebugCounter::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::DebugCounter::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::DebugCounter::increment(int64_t);accumulate(int64_t);TR::DebugCounter
TR::DebugCounter::accumulate();accumulate(int64_t);TR::DebugCounter
TR::DebugCounterAggregation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::DebugCounterAggregation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::DebugCounterAggregation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::DebugCounterAggregation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::DebugCounterGroup::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::DebugCounterGroup::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::DebugCounterGroup::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::DebugCounterGroup::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Options::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Options::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Options::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Options::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Options::addOptionSet(TR::OptionSet *);setNext(class TR::OptionSet *);TR::OptionSet
OMR::Options::setSamplingJProfilingOption(enum TR_SamplingJProfilingFlags);set(enum TR_SamplingJProfilingFlags);OMR::Options::OptionFlagArray
OMR::Options::resetSamplingJProfilingOption(enum TR_SamplingJProfilingFlags);reset(enum TR_SamplingJProfilingFlags);OMR::Options::OptionFlagArray
OMR::Options::setVerboseOption(enum TR_VerboseFlags);set(enum TR_VerboseFlags);OMR::Options::OptionFlagArray
OMR::Options::setVerboseOptions(uint64_t);maskWord(int,uint64_t);OMR::Options::OptionFlagArray
OMR::Options::resetVerboseOption(enum TR_VerboseFlags);reset(enum TR_VerboseFlags);OMR::Options::OptionFlagArray
TR_MCTLogs::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_MCTLogs::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_MCTLogs::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_MCTLogs::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Symbol::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Symbol::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Symbol::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Symbol::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Symbol::setFlagValue(uint32_t,_Bool);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::Symbol::setIsLabel();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::Symbol::setIsInGlobalRegister(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Symbol::setConst();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setVolatile();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::resetVolatile();reset(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setInitializedReference();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setUninitializedReference();reset(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setClassObject();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setNotCollected();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setFinal();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setInternalPointer();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setPrivate();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setAddressOfClassObject();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setSlotSharedByRefAndNonRef(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Symbol::setHoldsMonitoredObject();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setSpillTempAuto();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setLocalObject();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setBehaveLikeNonTemp();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setPinningArrayPointer();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setAutoAddressTaken();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setAutoMarkerSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setVariableSizeSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setThisTempForObjectCtor();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setParmHasToBeOnStack();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setReferencedParameter();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::resetReferencedParameter();reset(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setReinstatedReceiver();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setConstString();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setAddressIsCPIndexOfStatic(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Symbol::setCompiledMethod();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setStartPC();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setCountForRecompile();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setRecompilationCounter();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setGCRPatchPoint();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setArrayShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setArrayletShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setPythonLocalVariableShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setGlobalFragmentShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setMemoryTypeShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setOrdered();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setPythonConstantShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setPythonNameShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setStartOfColdInstructionStream();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setStartInternalControlFlow();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setEndInternalControlFlow();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setInternalControlFlowMerge();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setEndOfColdInstructionStream();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setNonLinear();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setGlobalLabel();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::Symbol::setRelativeLabel();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setConstMethodType();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setConstMethodHandle();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setCallSiteTableEntry();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setHasAddrTaken();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setMethodTypeTableEntry();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setNotDataAddress();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setUnsafeShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setNamedShadowSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setImmutableField();set(unsigned int);OMR::FlagsTemplate
OMR::Symbol::setIsPendingPush();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setVirtual();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setInterface();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setStatic();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setSpecial();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setHelper();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setMethodKind(int32_t);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setPreservesAllRegisters();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setSystemLinkageDispatch();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setInterpreted(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::MethodSymbol::setSynchronised();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setUnsynchronised();reset(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setEHAware();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setNonReturning();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setJNI();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setVMInternalNative(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::MethodSymbol::setJITInternalNative(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::MethodSymbol::setIsInlinedByCG();set(unsigned int);OMR::FlagsTemplate
OMR::MethodSymbol::setHasVeryRefinedAliasSets(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::MethodSymbol::setTreatAsAlwaysExpandBIF(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setParameterList();makeParameterList(TR::ResolvedMethodSymbol *);TR_ResolvedMethod
OMR::ResolvedMethodSymbol::setMayHaveLongOps(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setMayHaveLoops(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setMayHaveNestedLoops(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setMayHaveInlineableCall(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setMayContainMonitors(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasNews(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasDememoizationOpportunities(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setMayHaveIndirectCalls(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasThisCalls(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasMethodHandleInvokes(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasCheckCasts(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasInstanceOfs(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasBranches(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setCanDirectNativeCall(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setCanReplaceWithHWInstr(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasSnapshots(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setHasUnkilledTemps(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setIsSideEffectFree(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Compilation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Compilation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Compilation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Compilation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Compilation::setOption(enum TR_CompilationOptions);setOption(uint32_t,_Bool);OMR::Options
OMR::Compilation::setOutFile(TR::FILE *);setLogFile(TR::FILE *);OMR::Options
OMR::Compilation::setHasNativeCall();set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setSyncsMarked();set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setLoopTransferDone();set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setHasMethodOverrideAssumptions(_Bool);set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setHasClassExtendAssumptions(_Bool);set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setHasUnsafeSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setSlotsSharedByRefAndNonRef(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Compilation::setHasClassUnloadAssumptions(_Bool);set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setHasClassRedefinitionAssumptions(_Bool);set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setHasClassPreInitializeAssumptions(_Bool);set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setUsesBlockFrequencyInGRA();set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setHasMethodHandleInvoke();set(unsigned int);OMR::FlagsTemplate
OMR::Compilation::setHasColdBlocks();set(unsigned int);OMR::FlagsTemplate
TR_HashTabIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HashTabIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HashTabIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HashTabIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HashTab::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HashTab::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HashTab::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HashTab::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HashTab::TR_HashTab(class TR_Memory *,enum TR_AllocationKind,uint32_t,_Bool);init(uint32_t,_Bool);TR_HashTab
TR_HashTab::TR_HashTableEntry::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HashTab::TR_HashTableEntry::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HashTab::TR_HashTableEntry::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HashTab::TR_HashTableEntry::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CFG::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::CFG::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::CFG::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CFG::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CFG::setStartAndEnd(TR::CFGNode *,TR::CFGNode *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
OMR::CFG::setStartAndEnd(TR::CFGNode *,TR::CFGNode *);setStart(TR::CFGNode *);OMR::CFG
OMR::CFG::setStartAndEnd(TR::CFGNode *,TR::CFGNode *);setEnd(TR::CFGNode *);OMR::CFG
TR_OrderedExceptionHandlerIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OrderedExceptionHandlerIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OrderedExceptionHandlerIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OrderedExceptionHandlerIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Block::setIsCold(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setDoNotProfile();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setSpecializedDesyncCatchBlock();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setFirstBlockInLoop();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setBranchesBackwards();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setIsSynchronizedHandler();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setHasBeenVisited(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsPRECandidate(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsAdded();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setIsOSRInduceBlock();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setIsOSRCodeBlock();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setIsOSRCatchBlock();set(unsigned int);OMR::FlagsTemplate
OMR::Block::setIsCreatedAtCodeGen(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setHasCalls(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setHasCallToSuperCold(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsSpecialized(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setAsLoopInvariantBlock(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setCreatedByVersioning(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsEntryOfShortRunningLoop();set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setWasHeaderOfCanonicalizedLoop(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsUnsanitizeable(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setContainsCall(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setRestartBlock(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setPartialInlineBlock(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsEndBlock(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsDifficultBlock(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::TR_CatchBlockExtension::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Block::TR_CatchBlockExtension::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Block::TR_CatchBlockExtension::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Block::TR_CatchBlockExtension::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BlockCloner::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockCloner::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockCloner::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BlockCloner::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ExtendedBlockSuccessorIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ExtendedBlockSuccessorIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ExtendedBlockSuccessorIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ExtendedBlockSuccessorIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Dominators::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Dominators::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Dominators::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Dominators::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PostDominators::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PostDominators::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PostDominators::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PostDominators::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ClobberEvalData::setPair();set(unsigned char);OMR::FlagsTemplate
TR_ClobberEvalData::setClobberLowWord();set(unsigned char);OMR::FlagsTemplate
TR_ClobberEvalData::setClobberHighWord();set(unsigned char);OMR::FlagsTemplate
OMR::CodeGenerator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::CodeGenerator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::CodeGenerator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CodeGenerator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CodeGenerator::setGRACompleted();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsProfiledInlining();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setIsLeafMethod();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::resetIsLeafMethod();reset(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setRegisterAssignmentFlag(enum TR_RegisterAssignmentFlagBits);set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::resetRegisterAssignmentFlag(enum TR_RegisterAssignmentFlagBits);set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::clearRegisterAssignmentFlags();clear();OMR::FlagsTemplate
OMR::CodeGenerator::setUseNonLinearRegisterAssigner();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::lockFreeSpillList();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::unlockFreeSpillList();reset(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setEnableRegisterUsageTracking();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::resetEnableRegisterUsageTracking();reset(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setHasCCInfo(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setHasCCOverflow(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setHasCCSigned(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setHasCCZero(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setHasCCCarry(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setHasCCCompare(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setRequiresCarry(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setComputesCarry(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setAlwaysUseTrampolines();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setShouldBuildStructure();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setEnableRefinedAliasSets();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setMappingAutomatics();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsDirectJNICalls();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsGlRegDeps();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsVectorRegisters();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsGlRegDepOnFirstBlock();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setDisableLongGRA();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setDisableFpGRA();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsVMThreadGRA();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::resetSupportsVMThreadGRA();reset(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setUsesRegisterMaps();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsDivCheck();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsPrimitiveArrayCopy();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsReferenceArrayCopy();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsEfficientNarrowIntComputation();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsEfficientNarrowUnsignedIntComputation();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayTranslateAndTest();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsReverseLoadAndStore();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayTranslateTRxx();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayTranslateTRTO255();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayTranslateTRTO();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayTranslateTROTNoBreak();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayTranslateTROT();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsZonedDFPConversions();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsIntDFPConversions();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsFastPackedDFPConversions();set(unsigned short);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArraySet();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayCmp();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsArrayCmpSign();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsSearchCharString();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsTranslateAndTestCharString();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsTestCharComparisonControl();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setMethodContainsBinaryCodedDecimal();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setAccessStaticsIndirectly(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsBigDecimalLongLookasideVersioning();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsBDLLHardwareOverflowCheck();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsDoubleWordCAS();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsDoubleWordSet();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsTMDoubleWordCASORSet();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsTMHashMapAndLinkedQueue();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsAtomicLoadAndAdd();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsTM();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsLM();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsAutoSIMD();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setRemoveRegisterHogsInLowerTreesWalk();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::resetRemoveRegisterHogsInLowerTreesWalk();reset(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setJNILinkageCalleeCleanup();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setHasResumableTrapHandler();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setPerformsChecksExplicitly();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSpillsFPRegistersAcrossCalls();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsJavaFloatSemantics();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsInliningOfTypeCoersionMethods();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsPartialInlineOfMethodHooks();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsMergedAllocations();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsInlinedAtomicLongVolatiles();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setInlinedGetCurrentThreadMethod();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setConsiderAllAutosAsTacticalGlobalRegisterCandidates();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsScaledIndexAddressing();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsConstantOffsetInAddressing();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsCompactedLocals();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsFastCTM();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsCurrentTimeMaxPrecision();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsAlignedAccessOnly();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setUsesRegisterPairsForLongs();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsIDivAndIRemWithThreeChildren();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsLDivAndLRemWithThreeChildren();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsLoweringConstIDiv();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsLoweringConstLDiv();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsLoweringConstLDivPower2();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsVirtualGuardNOPing();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsNewInstanceImplOpt();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setHasDoubleWordAlignedStack();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsReadOnlyLocks();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsPostProcessArrayCopy();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setOptimizationPhaseIsComplete();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsBCDToDFPReduction();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsTestUnderMask();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsRuntimeInstrumentation();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setMethodModifiedByRA();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::resetMethodModifiedByRA();reset(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setEnforceStoreOrder();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setDisableNullCheckOfArrayLength();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsShrinkWrapping();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setShrinkWrappingDone();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setUsesLoadStoreMultiple();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setSupportsStackAllocationOfArraylets();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setExpandExponentiation();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setMultiplyIsDestructive();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::setTrackingInMemoryKilledLoads();set(unsigned int);OMR::FlagsTemplate
OMR::CodeGenerator::resetTrackingInMemoryKilledLoads();reset(unsigned int);OMR::FlagsTemplate
OMR::RegisterIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::RegisterIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::RegisterIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::RegisterIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ManagedScratchRegister::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ManagedScratchRegister::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ManagedScratchRegister::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ManagedScratchRegister::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ScratchRegisterManager::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ScratchRegisterManager::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ScratchRegisterManager::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ScratchRegisterManager::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::AliasBuilder::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::AliasBuilder::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::AliasBuilder::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::AliasBuilder::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::SymbolReferenceTable::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::SymbolReferenceTable::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::SymbolReferenceTable::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::SymbolReferenceTable::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::SymbolReferenceTable::setNumSymRefs(int32_t);setSize(uint32_t);TR_Array
OMR::SymbolReferenceTable::clearAvailableAutos();init();List
OMR::SymbolReference::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::SymbolReference::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::SymbolReference::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::SymbolReference::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::SymbolReference::setUnresolved();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setCanGCandReturn();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setCanGCandExcept();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setReallySharesSymbol();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setStackAllocatedArrayAccess();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setSideEffectInfo();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setLiteralPoolAddress();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setFromLiteralPool();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setOverriddenBitAddress();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setInitMethod();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setIsTempVariableSizeSymRef();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setIsAdjunct();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setIsDual();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setHasTemporaryNegativeOffset();set(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::resetHasTemporaryNegativeOffset();reset(unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::setHoldsMonitoredObjectForSyncMethod();set(unsigned int);OMR::FlagsTemplate
OMR::Instruction::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Instruction::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Instruction::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Instruction::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Instruction::setOpCodeValue(TR::class InstOpCode::Mnemonic);setMnemonic(enum TR::InstOpCode::Mnemonic);TR::InstOpCode
TR::Instruction::Instruction(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);setOpCodeValue(enum TR_X86OpCodes);OMR::X86::Instruction
TR::Instruction::Instruction(TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);initialize(TR::CodeGenerator *,TR::RegisterDependencyConditions *,enum TR_X86OpCodes,_Bool);OMR::X86::Instruction
TR::Instruction::Instruction(enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);setOpCodeValue(enum TR_X86OpCodes);OMR::X86::Instruction
TR::Instruction::Instruction(enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);initialize(TR::CodeGenerator *,TR::RegisterDependencyConditions *,enum TR_X86OpCodes,_Bool);OMR::X86::Instruction
TR::Instruction::Instruction(TR::RegisterDependencyConditions *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);setOpCodeValue(enum TR_X86OpCodes);OMR::X86::Instruction
TR::Instruction::Instruction(TR::RegisterDependencyConditions *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::X86::Instruction
TR::Instruction::Instruction(TR::RegisterDependencyConditions *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);initialize(TR::CodeGenerator *,TR::RegisterDependencyConditions *,enum TR_X86OpCodes,_Bool);OMR::X86::Instruction
TR::Instruction::Instruction(TR::RegisterDependencyConditions *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);setOpCodeValue(enum TR_X86OpCodes);OMR::X86::Instruction
TR::Instruction::Instruction(TR::RegisterDependencyConditions *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::X86::Instruction
TR::Instruction::Instruction(TR::RegisterDependencyConditions *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);initialize(TR::CodeGenerator *,TR::RegisterDependencyConditions *,enum TR_X86OpCodes,_Bool);OMR::X86::Instruction
OMR::StaticSymbol::StaticSymbol(TR::DataType);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::StaticSymbol::StaticSymbol(TR::DataType,void *);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::StaticSymbol::StaticSymbol(TR::DataType,uint32_t);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::StaticSymbol::setUpDLPFlags(int32_t);set(unsigned int);OMR::FlagsTemplate
OMR::StaticSymbol::makeNamed(const char *);set(unsigned int);OMR::FlagsTemplate
TR_OutlinedInstructions::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OutlinedInstructions::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OutlinedInstructions::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OutlinedInstructions::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::GCRegisterMap::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::GCRegisterMap::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::GCRegisterMap::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::GCRegisterMap::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InternalPointerPair::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InternalPointerPair::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InternalPointerPair::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InternalPointerPair::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InternalPointerMap::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InternalPointerMap::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InternalPointerMap::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InternalPointerMap::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InternalPointerMap::clone();setNumDistinctPinningArrays(int32_t);TR_InternalPointerMap
TR_InternalPointerMap::addInternalPointerPair(class TR_InternalPointerPair *);add(class TR_InternalPointerPair *);List
TR_InternalPointerMap::addInternalPointerPair(TR::AutomaticSymbol *,int32_t);addInternalPointerPair(class TR_InternalPointerPair *);TR_InternalPointerMap
TR_InternalPointerMap::addInternalPointerPair(TR::AutomaticSymbol *,TR::AutomaticSymbol *);addInternalPointerPair(class TR_InternalPointerPair *);TR_InternalPointerMap
TR_GCStackMap::TR_GCStackMap(uint32_t);clearBits();TR_GCStackMap
TR_GCStackMap::TR_GCStackMap(uint32_t);setZeroByteCodeIndex();TR_ByteCodeInfo
TR_GCStackMap::TR_GCStackMap(uint32_t);setInvalidCallerIndex();TR_ByteCodeInfo
TR_GCStackMap::TR_GCStackMap(uint32_t);setDoNotProfile(_Bool);TR_ByteCodeInfo
TR_GCStackMap::setRegisterBits(uint32_t);setRegisterBits(uint32_t);OMR::GCRegisterMap
TR_GCStackMap::resetRegistersBits(uint32_t);resetRegisterBits(uint32_t);OMR::GCRegisterMap
TR_GCStackMap::clearRegisterMap();empty();OMR::GCRegisterMap
TR_GCStackMap::maskRegisters(uint32_t);maskRegisters(uint32_t);OMR::GCRegisterMap
TR_GCStackMap::maskRegistersWithInfoBits(uint32_t,uint32_t);maskRegistersWithInfoBits(uint32_t,uint32_t);OMR::GCRegisterMap
TR_GCStackMap::setInfoBits(uint32_t);setInfoBits(uint32_t);OMR::GCRegisterMap
TR_GCStackMap::setHighWordRegisterBits(uint32_t);setHighWordRegisterBits(uint32_t);OMR::GCRegisterMap
TR_GCStackMap::resetHighWordRegistersBits(uint32_t);resetHighWordRegisterBits(uint32_t);OMR::GCRegisterMap
TR_GCStackMap::clearHighWordRegisterMap();emptyHPR();OMR::GCRegisterMap
TR_GCStackMap::setRegisterSaveDescription(uint32_t);setRegisterSaveDescription(uint32_t);OMR::GCRegisterMap
TR_GCStackMap::clone(class TR_Memory *);setByteCodeInfo(TR_ByteCodeInfo);TR_GCStackMap
TR_GCStackMap::clone(class TR_Memory *);copy(class TR_GCStackMap *);TR_GCStackMap
TR_GCStackMap::clone(class TR_Memory *);setRegisterBits(uint32_t);TR_GCStackMap
TR_GCStackMap::clone(class TR_Memory *);setHighWordRegisterBits(uint32_t);TR_GCStackMap
TR_GCStackAllocMap::TR_GCStackAllocMap(uint32_t);clearBits();TR_GCStackAllocMap
OMR::GCStackAtlas::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::GCStackAtlas::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::GCStackAtlas::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::GCStackAtlas::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::GCStackAtlas::removePinningArrayPtrForInternalPtrReg(TR::AutomaticSymbol *);remove(class TR::AutomaticSymbol *);List
TR::ClobberingInstruction::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::ClobberingInstruction::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::ClobberingInstruction::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::ClobberingInstruction::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::CodeGenerator::setEnableBetterSpillPlacements();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::resetEnableBetterSpillPlacements();reset(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setEnableRematerialisation();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::resetEnableRematerialisation();reset(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setEnableSinglePrecisionMethods();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setEnableRegisterWeights();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setEnableRegisterInterferences();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setEnableRegisterAssociations();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setUseSSEForSinglePrecision();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setUseSSEForDoublePrecision();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setUseGPRsForWin32CTMConversion();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setUseLongDivideHelperForWin32CTMConversion();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setTargetSupportsSoftwarePrefetches();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setEnableTLHPrefetching();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setGenerateMasmListingSyntax();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setEnableImplicitDivideCheck();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setMapAutosTo8ByteSlots();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setMethodEnterExitTracingEnabled();set(unsigned int);OMR::FlagsTemplate
OMR::X86::CodeGenerator::setPushPreservedRegisters();set(unsigned int);OMR::FlagsTemplate
TR::DataType::operator=(class TR::DataType &&);operator=(class OMR::DataType &&);OMR::DataType
TR_ResolvedMethod::makeParameterList(TR::ResolvedMethodSymbol *);setTempIndex(int32_t,class TR_FrontEnd *);OMR::ResolvedMethodSymbol
TR_ResolvedMethod::makeParameterList(TR::ResolvedMethodSymbol *);setFirstJitTempIndex(int32_t);OMR::ResolvedMethodSymbol
TR_VirtualGuard::TR_VirtualGuard(enum TR_VirtualGuardTestType,enum TR_VirtualGuardKind,TR::Compilation *,TR::Node *,TR::Node *,int16_t,int32_t,class TR_OpaqueClassBlock *);addVirtualGuard(class TR_VirtualGuard *);OMR::Compilation
TR_VirtualGuard::TR_VirtualGuard(enum TR_VirtualGuardTestType,enum TR_VirtualGuardKind,TR::Compilation *,TR::Node *,TR::Node *,int32_t);addVirtualGuard(class TR_VirtualGuard *);OMR::Compilation
TR_VirtualGuard::createVftGuard(enum TR_VirtualGuardKind,TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,class TR_OpaqueClassBlock *);setIsClassPointerConstant(_Bool);OMR::Node
TR_VirtualGuard::createVftGuard(enum TR_VirtualGuardKind,TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,class TR_OpaqueClassBlock *);setInlinedSiteIndex(int16_t);OMR::Node
TR_VirtualGuard::createVftGuard(enum TR_VirtualGuardKind,TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,class TR_OpaqueClassBlock *);setByteCodeIndex(uint32_t);OMR::Node
TR_VirtualGuard::createMutableCallSiteTargetGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,uintptrj_t *,TR::class KnownObjectTable::Index);setSideEffectInfo();OMR::SymbolReference
TR_VirtualGuard::createMutableCallSiteTargetGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,uintptrj_t *,TR::class KnownObjectTable::Index);getAndDecChild(int32_t);OMR::Node
TR_VirtualGuard::createMutableCallSiteTargetGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,uintptrj_t *,TR::class KnownObjectTable::Index);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_VirtualGuard::createMutableCallSiteTargetGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,uintptrj_t *,TR::class KnownObjectTable::Index);dontGenerateChildrenCode();TR_VirtualGuard
TR_VirtualGuard::createDummyOrSideEffectGuard(TR::Compilation *,TR::Node *,TR::TreeTop *);setSideEffectInfo();OMR::SymbolReference
TR_VirtualGuard::createSideEffectGuard(TR::Compilation *,TR::Node *,TR::TreeTop *);dontGenerateChildrenCode();TR_VirtualGuard
TR_VirtualGuard::createAOTInliningGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,enum TR_VirtualGuardKind);dontGenerateChildrenCode();TR_VirtualGuard
TR_VirtualGuard::createAOTInliningGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,enum TR_VirtualGuardKind);setCannotBeRemoved();TR_VirtualGuard
TR_VirtualGuard::createAOTGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,enum TR_VirtualGuardKind);dontGenerateChildrenCode();TR_VirtualGuard
TR_VirtualGuard::createAOTGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,enum TR_VirtualGuardKind);setCannotBeRemoved();TR_VirtualGuard
TR_VirtualGuard::createDummyGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *);dontGenerateChildrenCode();TR_VirtualGuard
TR_VirtualGuard::createOSRGuard(TR::Compilation *,TR::TreeTop *);setSideEffectInfo();OMR::SymbolReference
TR_VirtualGuard::createOSRGuard(TR::Compilation *,TR::TreeTop *);dontGenerateChildrenCode();TR_VirtualGuard
TR_VirtualGuard::createHCRGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *);setSideEffectInfo();OMR::SymbolReference
TR_VirtualGuard::createHCRGuard(TR::Compilation *,int16_t,TR::Node *,TR::TreeTop *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *);dontGenerateChildrenCode();TR_VirtualGuard
TR_VirtualGuard::addInnerAssumption(class TR_InnerAssumption *);add(class TR_InnerAssumption *);List
TR_VirtualGuard::addInnerAssumption(TR::Compilation *,int32_t,class TR_VirtualGuard *);addInnerAssumption(class TR_InnerAssumption *);TR_VirtualGuard
TR_PrexArgument::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrexArgument::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrexArgument::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PrexArgument::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PrexArgInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrexArgInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrexArgInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PrexArgInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InnerAssumption::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InnerAssumption::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InnerAssumption::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InnerAssumption::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Options::setForAllMethods(enum TR_CompilationOptions);setOption(uint32_t,_Bool);OMR::Options
OMR::Options::disableForAllMethods(OMR::Optimizations);setDisabled(OMR::Optimizations,_Bool);OMR::Options
OMR::Options::setQuickStart();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::setConservativeQuickStart();setQuickStart();OMR::Options
OMR::Options::setConservativeQuickStart();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::setAggressiveQuickStart();setQuickStart();OMR::Options
OMR::Options::setAggressiveQuickStart();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::setGlobalAggressiveAOT();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::setGlobalAggressiveAOT();setLocalAggressiveAOT();OMR::Options
OMR::Options::setLocalAggressiveAOT();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::setConservativeDefaultBehavior();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::disableCHOpts();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::jitPreProcess();setOption(uint32_t,_Bool);OMR::Options
OMR::Options::fePreProcess(void *);setNumberOfProcessors(uint32_t);OMR::Environment
OMR::Options::fePreProcess(void *);setSMP(_Bool);OMR::Environment
OMR::Options::jitLatePostProcess(TR::OptionSet *,void *);setOption(uint32_t,_Bool);OMR::Options
OMR::Options::setLogForCompilationThread(int32_t,TR::Options *);acquireLogMonitor();TR_FrontEnd
OMR::Options::setLogForCompilationThread(int32_t,TR::Options *);releaseLogMonitor();TR_FrontEnd
OMR::Options::closeLogsForOtherCompilationThreads(class TR_FrontEnd *);acquireLogMonitor();TR_FrontEnd
OMR::Options::closeLogsForOtherCompilationThreads(class TR_FrontEnd *);releaseLogMonitor();TR_FrontEnd
OMR::Options::configureOptReporting(char *,void *,TR::OptionTable *);setOption(uint32_t,_Bool);OMR::Options
OMR::Options::breakOnLoad(char *,void *,TR::OptionTable *);breakPoint();OMR::DebugEnv
OMR::Options::setMoreAggressiveInlining();setOption(uint32_t,_Bool);OMR::Options
OMR::Recompilation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Recompilation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Recompilation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Recompilation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OptimizationPlan::freeEntirePool();enter();OMR::Monitor
TR_OptimizationPlan::freeEntirePool();exit();OMR::Monitor
TR_OptimizationPlan::operator new(size_t);enter();OMR::Monitor
TR_SingleTimer::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_SingleTimer::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_SingleTimer::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_SingleTimer::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::Checklist::~Checklist();release(class TR_BitVector *);BitVectorPool
TR::NodeChecklist::add(TR::Node *);set(int64_t);TR_BitVector
TR::NodeChecklist::remove(TR::Node *);reset(int64_t,_Bool);TR_BitVector
TR::BlockChecklist::add(TR::Block *);set(int64_t);TR_BitVector
TR::BlockChecklist::remove(TR::Block *);reset(int64_t,_Bool);TR_BitVector
TR_HashTab::growAndRehash(uint32_t);init(uint32_t,_Bool);TR_HashTab
TR_IGNode::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IGNode::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IGNode::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IGNode::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IGNode::setIsRemovedFromIG();set(unsigned char);OMR::FlagsTemplate
TR_IGNode::resetIsRemovedFromIG();reset(unsigned char);OMR::FlagsTemplate
TR_IGBase::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IGBase::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IGBase::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IGBase::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IGNode::decWorkingDegreeOfNeighbours();setWorkingDegree(IGNodeDegree);TR_IGNode
TR::TreeTopIteratorImpl::operator++();stepForward();TR::TreeTopIteratorImpl
TR::TreeTopIteratorImpl::operator--();stepBackward();TR::TreeTopIteratorImpl
TR::TreeTopIterator::TreeTopIterator(TR::TreeTop *,TR::Compilation *,const char *);logCurrentLocation();TR::TreeTopIteratorImpl
TR::TreeTopIterator::stepForward();stepForward();TR::TreeTopIteratorImpl
TR::TreeTopIterator::stepForward();logCurrentLocation();TR::TreeTopIteratorImpl
TR::TreeTopIterator::stepBackward();stepBackward();TR::TreeTopIteratorImpl
TR::TreeTopIterator::stepBackward();logCurrentLocation();TR::TreeTopIteratorImpl
TR::PreorderNodeIterator::push(TR::Node *);push(struct TR::NodeIterator::WalkState);TR_Stack
TR::PreorderNodeIterator::push(TR::Node *);add(TR::Node *);TR::NodeChecklist
TR::PreorderNodeIterator::push(TR::Node *);logCurrentLocation();TR::NodeIterator
TR::PreorderNodeIterator::PreorderNodeIterator(TR::TreeTop *,TR::Compilation *,const char *);push(TR::Node *);TR::PreorderNodeIterator
TR::PreorderNodeIterator::stepForward();pop();TR_Stack
TR::PreorderNodeIterator::operator++();stepForward();TR::PreorderNodeIterator
TR::PostorderNodeIterator::push(TR::Node *);push(struct TR::NodeIterator::WalkState);TR_Stack
TR::PostorderNodeIterator::push(TR::Node *);add(TR::Node *);TR::NodeChecklist
TR::PostorderNodeIterator::descend();logCurrentLocation();TR::NodeIterator
TR::PostorderNodeIterator::PostorderNodeIterator(TR::TreeTop *,TR::Compilation *,const char *);push(TR::Node *);TR::PostorderNodeIterator
TR::PostorderNodeIterator::PostorderNodeIterator(TR::TreeTop *,TR::Compilation *,const char *);descend();TR::PostorderNodeIterator
TR::PostorderNodeIterator::stepForward();pop();TR_Stack
TR::PostorderNodeIterator::stepForward();push(TR::Node *);TR::PostorderNodeIterator
TR::PostorderNodeIterator::stepForward();descend();TR::PostorderNodeIterator
TR::PostorderNodeIterator::operator++();stepForward();TR::PostorderNodeIterator
TR::PreorderNodeOccurrenceIterator::push(TR::Node *);push(struct TR::NodeIterator::WalkState);TR_Stack
TR::PreorderNodeOccurrenceIterator::push(TR::Node *);add(TR::Node *);TR::NodeChecklist
TR::PreorderNodeOccurrenceIterator::push(TR::Node *);logCurrentLocation();TR::NodeOccurrenceIterator
TR::PreorderNodeOccurrenceIterator::PreorderNodeOccurrenceIterator(TR::TreeTop *,TR::Compilation *,const char *);logCurrentLocation();TR::NodeOccurrenceIterator
TR::PreorderNodeOccurrenceIterator::operator++();stepForward();TR::PreorderNodeOccurrenceIterator
TR::PostorderNodeOccurrenceIterator::pushLeftmost(TR::Node *);logCurrentLocation();TR::NodeOccurrenceIterator
TR::PostorderNodeOccurrenceIterator::PostorderNodeOccurrenceIterator(TR::TreeTop *,TR::Compilation *,const char *);pushLeftmost(TR::Node *);TR::PostorderNodeOccurrenceIterator
TR::PostorderNodeOccurrenceIterator::operator++();stepForward();TR::PostorderNodeOccurrenceIterator
TR::ReversePostorderSnapshotBlockIterator::takeSnapshot(TR::Block *);visit(TR::Block *,TR::BlockChecklist &);TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::visit(TR::Block *,TR::BlockChecklist &);add(TR::Block *);TR::BlockChecklist
TR::ReversePostorderSnapshotBlockIterator::ReversePostorderSnapshotBlockIterator(TR::Block *,TR::Compilation *,const char *);takeSnapshot(TR::Block *);TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::ReversePostorderSnapshotBlockIterator(TR::Block *,TR::Compilation *,const char *);logCurrentLocation();TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::ReversePostorderSnapshotBlockIterator(TR::CFG *,TR::Compilation *,const char *);takeSnapshot(TR::Block *);TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::ReversePostorderSnapshotBlockIterator(TR::CFG *,TR::Compilation *,const char *);logCurrentLocation();TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::stepForward();logCurrentLocation();TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::stepBackward();logCurrentLocation();TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::operator++();stepForward();TR::ReversePostorderSnapshotBlockIterator
TR::ReversePostorderSnapshotBlockIterator::operator--();stepBackward();TR::ReversePostorderSnapshotBlockIterator
TR::AllBlockIterator::AllBlockIterator(TR::CFG *,TR::Compilation *,const char *);add(TR::Block *);TR::BlockChecklist
TR::AllBlockIterator::AllBlockIterator(TR::CFG *,TR::Compilation *,const char *);logCurrentLocation();TR::AllBlockIterator
TR::AllBlockIterator::operator++();stepForward();TR::AllBlockIterator
TR::TreeTopOrderExtendedBlockIterator::TreeTopOrderExtendedBlockIterator(TR::Compilation *,const char *);logCurrentLocation();TR::TreeTopOrderExtendedBlockIterator
TR::OptimizationData::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR::OptimizationPolicy::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR::OptimizationUtil::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
OMR::OptimizationManager::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
OMR::OptimizationManager::setFlags(flags32_t);set(FlagsTemplate<unsigned int>);OMR::FlagsTemplate
OMR::OptimizationManager::setRequiresStructure(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setRequiresGlobalsUseDefInfo(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setPrefersGlobalsUseDefInfo(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setRequiresLocalsUseDefInfo(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setDoesNotRequireLoadsAsDefsInUseDefs(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setRequiresGlobalsValueNumbering(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setPrefersGlobalsValueNumbering(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setStronglyPrefersGlobalsValueNumbering(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setRequiresLocalsValueNumbering(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setRequiresAccurateNodeCount(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setVerifyTrees(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setVerifyBlocks(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setCheckTheCFG(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setCheckStructure(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setDumpStructure(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setAlteredCode(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setCanAddSymbolReference(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setDoesNotRequireAliasSets(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setPerformOnlyOnEnabledBlocks(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setSupportsIlGenOptLevel(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setLastRun(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setCannotOmitTrivialDefs(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setMaintainsUseDefInfo(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::OptimizationManager::setDoNotSetFrequencies(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Optimization::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR::LiveNodeWindow::add(TR::Node *);set(int64_t);TR_BitVector
TR::LiveNodeWindow::Iterator::Iterator(class TR::LiveNodeWindow &);stepForward();TR::LiveNodeWindow::Iterator
TR::LiveNodeWindow::Iterator::operator++();stepForward();TR::LiveNodeWindow::Iterator
TR::SoundnessRule::validate(TR::ResolvedMethodSymbol *);checkSoundnessCondition(TR::TreeTop *,_Bool,const char *);TR::SoundnessRule
TR::SoundnessRule::checkNodeSoundness(TR::TreeTop *,TR::Node *,TR::NodeChecklist &,TR::NodeChecklist &);add(TR::Node *);TR::NodeChecklist
TR::SoundnessRule::checkNodeSoundness(TR::TreeTop *,TR::Node *,TR::NodeChecklist &,TR::NodeChecklist &);checkSoundnessCondition(TR::TreeTop *,_Bool,const char *);TR::SoundnessRule
TR::SoundnessRule::checkNodeSoundness(TR::TreeTop *,TR::Node *,TR::NodeChecklist &,TR::NodeChecklist &);remove(TR::Node *);TR::NodeChecklist
TR::ValidateNodeRefCountWithinBlock::validate(TR::TreeTop *,TR::TreeTop *);empty();TR_BitVector
TR_InterferenceGraph::simplify();SetAll(BitIndex);CS2::ABitVector
TR_InterferenceGraph::simplify();GrowTo(BitIndex,_Bool,_Bool);CS2::ABitVector
TR_InterferenceGraph::select();GrowTo(BitIndex,_Bool,_Bool);CS2::ABitVector
TR_InterferenceGraph::select();setNumberOfColoursUsedToColour(IGNodeColour);TR_IGBase
TR_InterferenceGraph::partitionNodesIntoDegreeSets(CS2::ABitVector<TR::Allocator> &,CS2::ABitVector<TR::Allocator> &,CS2::ABitVector<TR::Allocator> &);Clear();CS2::ABitVector
TR_InterferenceGraph::partitionNodesIntoDegreeSets(CS2::ABitVector<TR::Allocator> &,CS2::ABitVector<TR::Allocator> &,CS2::ABitVector<TR::Allocator> &);GrowTo(BitIndex,_Bool,_Bool);CS2::ABitVector
TR_InterferenceGraph::TR_InterferenceGraph(TR::Compilation *,int32_t);setInterferenceMatrix(class TR_BitVector *);TR_IGBase
TR_InterferenceGraph::add(void *,_Bool);addIGNodeToEntityHash(class TR_IGNode *);TR_InterferenceGraph
TR_InterferenceGraph::add(void *,_Bool);setIndex(IGNodeIndex);TR_IGNode
TR_InterferenceGraph::add(void *,_Bool);incNumNodes();TR_IGBase
TR_InterferenceGraph::addInterferenceBetween(void *,void *);addInterferenceBetween(class TR_IGNode *,class TR_IGNode *);TR_InterferenceGraph
TR_InterferenceGraph::removeAllInterferences(void *);setDegree(IGNodeDegree);TR_IGNode
TR_InterferenceGraph::removeAllInterferences(void *);deleteAll();List
TR_InterferenceGraph::removeInterferenceBetween(void *,void *);removeInterferenceBetween(class TR_IGNode *,class TR_IGNode *);TR_InterferenceGraph
TR_InterferenceGraph::removeInterferenceBetween(class TR_IGNode *,class TR_IGNode *);remove(class TR_IGNode *);List
TR_InterferenceGraph::removeInterferenceBetween(class TR_IGNode *,class TR_IGNode *);decDegree();TR_IGNode
TR_InterferenceGraph::removeInterferenceBetween(class TR_IGNode *,class TR_IGNode *);reset(int64_t,_Bool);TR_BitVector
TR_InterferenceGraph::virtualRemoveEntityFromIG(void *);decWorkingDegreeOfNeighbours();TR_IGNode
TR_InterferenceGraph::virtualRemoveEntityFromIG(void *);setIsRemovedFromIG();TR_IGNode
TR_InterferenceGraph::virtualRemoveEntityFromIG(void *);setWorkingDegree(IGNodeDegree);TR_IGNode
TR_InterferenceGraph::virtualRemoveNodeFromIG(class TR_IGNode *);decWorkingDegreeOfNeighbours();TR_IGNode
TR_InterferenceGraph::virtualRemoveNodeFromIG(class TR_IGNode *);setIsRemovedFromIG();TR_IGNode
TR_InterferenceGraph::virtualRemoveNodeFromIG(class TR_IGNode *);setWorkingDegree(IGNodeDegree);TR_IGNode
TR_InterferenceGraph::doColouring(IGNodeColour);setNumColours(IGNodeColour);TR_IGBase
OMR::Monitor::~Monitor();destroy();OMR::Monitor
OMR::Monitor::create(char *);init(char *);OMR::Monitor
OMR::Monitor::operator delete(void *);deallocate(void *,const size_t);OMR::PersistentAllocator
TR_AddressTree::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_AddressTree::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_AddressTree::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_AddressTree::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_AddressTree::findComplexAddressGenerationTree(TR::Node *,vcount_t,TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_Pattern::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Pattern::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Pattern::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Pattern::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PatternBuilder::commutativeOrNot(TR::ILOpCodes,class TR_Pattern *,class TR_Pattern *,class TR_Pattern *);setOpCodeValue(TR::ILOpCodes);OMR::ILOpCode
TR::CFGEdge::createEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);addSuccessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::createEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);addPredecessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);addExceptionSuccessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,class TR_Memory *,enum TR_AllocationKind);addExceptionPredecessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::createEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);addSuccessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::createEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);addPredecessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);addExceptionSuccessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::createExceptionEdge(class TR::CFGNode *,class TR::CFGNode *,TR::Region &);addExceptionPredecessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::setFrom(class TR::CFGNode *);addSuccessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::setTo(class TR::CFGNode *);addPredecessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::setExceptionFrom(class TR::CFGNode *);addExceptionSuccessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::setExceptionTo(class TR::CFGNode *);addExceptionPredecessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::setFromTo(class TR::CFGNode *,class TR::CFGNode *);setFrom(TR::CFGNode *);TR::CFGEdge
TR::CFGEdge::setFromTo(class TR::CFGNode *,class TR::CFGNode *);setTo(TR::CFGNode *);TR::CFGEdge
TR::CFGEdge::setExceptionFromTo(class TR::CFGNode *,class TR::CFGNode *);addExceptionSuccessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::setExceptionFromTo(class TR::CFGNode *,class TR::CFGNode *);addExceptionPredecessor(class TR::CFGEdge *);TR::CFGNode
TR::CFGEdge::normalizeFrequency(int32_t);setFrequency(int32_t);TR::CFGEdge
TR::CFGNode::moveSuccessors(class TR::CFGNode *);clear();TR::forward_list
TR::CFGNode::movePredecessors(class TR::CFGNode *);clear();TR::forward_list
TR::CFGNode::normalizeFrequency(int32_t);normalizeFrequency(int32_t,int32_t);TR::CFGNode
TR::CFGNode::normalizeFrequency(int32_t,int32_t);setFrequency(int32_t);TR::CFGNode
TR::CFGNode::denormalizeFrequency(int32_t);setFrequency(int32_t);TR::CFGNode
OMR::CFG::invalidateStructure();setStructure(class TR_Structure *);OMR::CFG
OMR::CFG::invalidateStructure();~Region();TR::Region
OMR::CFG::addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);add(class TR::CFGNode *);TR_LinkHead1
OMR::CFG::addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);setNumber(int32_t);TR::CFGNode
OMR::CFG::addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);addEdge(TR::CFGEdge *);OMR::CFG
OMR::CFG::join(TR::Block *,TR::Block *);addSuccessorEdges(TR::Block *);OMR::CFG
OMR::CFG::insertBefore(TR::Block *,TR::Block *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
OMR::CFG::insertBefore(TR::Block *,TR::Block *);join(TR::Block *,TR::Block *);OMR::CFG
OMR::CFG::removeUnreachableBlocks();findReachableBlocks(class TR_BitVector *);OMR::CFG
OMR::CFG::resetFrequencies();setAll(int64_t);TR_BitVector
OMR::CFG::removeNode(TR::CFGNode *);remove(class TR::CFGNode *);TR_LinkHead1
OMR::CFG::removeNode(TR::CFGNode *);removeFromCFG(TR::Compilation *);TR::CFGNode
OMR::CFG::removeNode(TR::CFGNode *);removeNode();TR::CFGNode
OMR::CFG::findReachableBlocks(class TR_BitVector *);push(class TR::CFGNode *);TR_Stack
OMR::CFG::createTraversalOrder(_Bool,enum TR_AllocationKind,class TR_BitVector *);getFirst();TR_CFGIterator
OMR::CFG::createTraversalOrder(_Bool,enum TR_AllocationKind,class TR_BitVector *);push(class TR::CFGNode *);TR_Stack
OMR::CFG::createTraversalOrder(_Bool,enum TR_AllocationKind,class TR_BitVector *);set(int64_t);TR_BitVector
OMR::CFG::createTraversalOrder(_Bool,enum TR_AllocationKind,class TR_BitVector *);push(class TR_CFGIterator *);TR_Stack
OMR::CFG::clone();setStructure(class TR_Structure *);OMR::CFG
OMR::CFG::clone();join(TR::TreeTop *);OMR::TreeTop
OMR::CFG::propagateColdInfo(_Bool);createTraversalOrder(_Bool,enum TR_AllocationKind,class TR_BitVector *);OMR::CFG
OMR::CFG::processAcyclicRegion(class TR_RegionStructure *);walkStructure(class TR_RegionStructure *);OMR::CFG
OMR::CFG::processNaturalLoop(class TR_RegionStructure *);walkStructure(class TR_RegionStructure *);OMR::CFG
OMR::CFG::walkStructure(class TR_RegionStructure *);add(class TR::CFGNode *);TR_ScratchList
OMR::CFG::computeEntryFactorsAcyclic(class TR_RegionStructure *);setFrequencyEntryFactor(float);TR_RegionStructure
OMR::CFG::computeEntryFactorsLoop(class TR_RegionStructure *);setFrequencyEntryFactor(float);TR_RegionStructure
OMR::CFG::normalizeFrequencies(class TR_BitVector *);normalizeNodeFrequencies(class TR_BitVector *,TR_Array<TR::CFGEdge *> *);OMR::CFG
OMR::CFG::normalizeFrequencies(class TR_BitVector *);normalizeEdgeFrequencies(TR_Array<TR::CFGEdge *> *);OMR::CFG
TR::VPConstraint::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::VPConstraint::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::VPConstraint::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::VPConstraint::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::VPMergedConstraints::VPMergedConstraints(ListElement<TR::VPConstraint> *,class TR_Memory *);setListHead(ListElement<class TR::VPConstraint> *);List
TR_Structure::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Structure::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Structure::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Structure::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_StructureSubGraphNode::TR_StructureSubGraphNode(class TR_Structure *);setSubGraphNode(class TR_StructureSubGraphNode *);TR_Structure
TR_BlockStructure::setAsLoopInvariantBlock(_Bool);setAsLoopInvariantBlock(_Bool);OMR::Block
TR_BlockStructure::setCreatedByVersioning(_Bool);setCreatedByVersioning(_Bool);OMR::Block
TR_BlockStructure::setIsEntryOfShortRunningLoop();setIsEntryOfShortRunningLoop();OMR::Block
TR_BlockStructure::setWasHeaderOfCanonicalizedLoop(_Bool);setWasHeaderOfCanonicalizedLoop(_Bool);OMR::Block
TR_InductionVariable::TR_InductionVariable(TR::RegisterMappedSymbol *,TR::VPConstraint *,TR::VPConstraint *,TR::VPConstraint *,enum TR_YesNoMaybe);setEntry(TR::VPConstraint *);TR_InductionVariable
TR_InductionVariable::TR_InductionVariable(TR::RegisterMappedSymbol *,TR::VPConstraint *,TR::VPConstraint *,TR::VPConstraint *,enum TR_YesNoMaybe);setExit(TR::VPConstraint *);TR_InductionVariable
TR_InductionVariable::TR_InductionVariable(TR::RegisterMappedSymbol *,TR::VPConstraint *,TR::VPConstraint *,TR::VPConstraint *,enum TR_YesNoMaybe);setIncr(TR::VPConstraint *);TR_InductionVariable
TR_RegionStructure::setEntry(class TR_StructureSubGraphNode *);setParent(class TR_RegionStructure *);TR_Structure
TR_RegionStructure::setContainsInternalCycles(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
TR_RegionStructure::addInductionVariable(class TR_InductionVariable *);add(class TR_InductionVariable *);TR_LinkHead0
TR_RegionStructure::addAfterInductionVariable(class TR_InductionVariable *,class TR_InductionVariable *);insertAfter(class TR_InductionVariable *,class TR_InductionVariable *);TR_LinkHead0
TR_RegionStructure::clearInductionVariables();setFirst(class TR_InductionVariable *);TR_LinkHead0
TR_RegionStructure::addInductionVariable(class TR_BasicInductionVariable *);add(class TR_BasicInductionVariable *);List
TR_RegionStructure::setAsCanonicalizedLoop(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
TR_RegionStructure::setAsInvertible(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
TR_RegionStructure::setExprInvariant(TR::Node *);set(int64_t);TR_BitVector
TR_RegionStructure::resetExprInvariant(TR::Node *);reset(int64_t,_Bool);TR_BitVector
TR_RegionStructure::addExitEdge(TR::CFGEdge *);add(class TR::CFGEdge *);List
TR_RegionAnalysis::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RegionAnalysis::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RegionAnalysis::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RegionAnalysis::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::SimpleRegex::print(_Bool);print();TR::SimpleRegex::Regex
TR::CompileIlGenRequest::print(class TR_FrontEnd *,TR::FILE *,const char *);print(class TR_FrontEnd *,TR::FILE *);TestCompiler::IlGeneratorMethodDetails
TR::InliningIlGenRequest::getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);setCallerMethod(TR::ResolvedMethodSymbol *);TR_IlGenerator
TR::InliningIlGenRequest::print(class TR_FrontEnd *,TR::FILE *,const char *);print(class TR_FrontEnd *,TR::FILE *);TestCompiler::IlGeneratorMethodDetails
TR::PartialInliningIlGenRequest::getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);setCallerMethod(TR::ResolvedMethodSymbol *);TR_IlGenerator
TR::PartialInliningIlGenRequest::print(class TR_FrontEnd *,TR::FILE *,const char *);print(class TR_FrontEnd *,TR::FILE *);TestCompiler::IlGeneratorMethodDetails
OMR::Symbol::Symbol(TR::DataType);setDataType(TR::DataType);OMR::Symbol
OMR::Symbol::Symbol(TR::DataType,uint32_t);setDataType(TR::DataType);OMR::Symbol
OMR::Symbol::setDataType(TR::DataType);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::Block::Block(class TR_Memory *);setFrequency(int32_t);TR::CFGNode
OMR::Block::Block(class TR_Memory *);setUnrollFactor(int);OMR::Block
OMR::Block::Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *);setFrequency(int32_t);TR::CFGNode
OMR::Block::Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *);setUnrollFactor(int);OMR::Block
OMR::Block::Block(TR::Block &,TR::TreeTop *,TR::TreeTop *);setFrequency(int32_t);TR::CFGNode
OMR::Block::Block(TR::Block &,TR::TreeTop *,TR::TreeTop *);set(unsigned int);OMR::FlagsTemplate
OMR::Block::createEmptyBlock(TR::Node *,TR::Compilation *,int32_t,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
OMR::Block::createEmptyBlock(TR::Node *,TR::Compilation *,int32_t,TR::Block *);setFrequency(int32_t);TR::CFGNode
OMR::Block::breakFallThrough(TR::Compilation *,TR::Block *,TR::Block *);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::Block::breakFallThrough(TR::Compilation *,TR::Block *,TR::Block *);append(TR::TreeTop *);OMR::Block
OMR::Block::insertBlockAsFallThrough(TR::Compilation *,TR::Block *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);setStructure(class TR_Structure *);OMR::CFG
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);setCurrentBlock(TR::Block *);OMR::Compilation
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);inheritBlockInfo(TR::Block *,_Bool);OMR::Block
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);setExit(TR::TreeTop *);OMR::Block
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);join(TR::TreeTop *);OMR::TreeTop
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);setBlock(TR::Block *);OMR::Node
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);moveSuccessors(class TR::CFGNode *);TR::CFGNode
OMR::Block::split(TR::TreeTop *,TR::CFG *,_Bool,_Bool,TR::ResolvedMethodSymbol *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::Block::createConditionalSideExitBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
OMR::Block::createConditionalSideExitBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);append(TR::TreeTop *);OMR::Block
OMR::Block::createConditionalSideExitBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::Block::createConditionalSideExitBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);addEdge(TR::CFGEdge *);OMR::CFG
OMR::Block::createConditionalSideExitBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);copyExceptionSuccessors(TR::CFGNode *,TR::CFGNode *,_Bool (*)(TR::CFGEdge *));OMR::CFG
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);setStructure(class TR_Structure *);OMR::CFG
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);append(TR::TreeTop *);OMR::Block
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);removeAllChildren();OMR::Node
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);join(TR::TreeTop *);OMR::TreeTop
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);addEdge(TR::CFGEdge *);OMR::CFG
OMR::Block::createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);copyExceptionSuccessors(TR::CFGNode *,TR::CFGNode *,_Bool (*)(TR::CFGEdge *));OMR::CFG
OMR::Block::removeBranch(TR::Compilation *);removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
OMR::Block::takeGlRegDeps(TR::Compilation *,TR::Node *);setNumChildren(uint16_t);OMR::Node
OMR::Block::takeGlRegDeps(TR::Compilation *,TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::Block::takeGlRegDeps(TR::Compilation *,TR::Node *);setChild(int32_t,TR::Node *);OMR::Node
OMR::Block::inheritBlockInfo(TR::Block *,_Bool);setIsCold(_Bool);OMR::Block
OMR::Block::inheritBlockInfo(TR::Block *,_Bool);setIsSuperCold(_Bool);OMR::Block
OMR::Block::inheritBlockInfo(TR::Block *,_Bool);setIsSpecialized(_Bool);OMR::Block
OMR::Block::changeBranchDestination(TR::TreeTop *,TR::CFG *);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::Block::changeBranchDestination(TR::TreeTop *,TR::CFG *);removeEdge(TR::CFGEdge *);OMR::CFG
OMR::Block::collectReferencedAutoSymRefsIn(TR::Compilation *,TR::Node *,class TR_BitVector *,vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Block::setByteCodeIndex(int32_t,TR::Compilation *);setByteCodeIndex(uint32_t);OMR::Node
OMR::Block::addExceptionRangeForSnippet(uint32_t,uint32_t);add(struct OMR::Block::InstructionBoundaries *);TR_LinkHead0
OMR::Block::setHandlerInfo(uint32_t,uint8_t,uint16_t,class TR_ResolvedMethod *,TR::Compilation *);ensureCatchBlockExtensionExists(TR::Compilation *);OMR::Block
OMR::Block::setHandlerInfoWithOutBCInfo(uint32_t,uint8_t,uint16_t,class TR_ResolvedMethod *,TR::Compilation *);ensureCatchBlockExtensionExists(TR::Compilation *);OMR::Block
OMR::Block::setExceptionClassName(char *,int32_t,TR::Compilation *);ensureCatchBlockExtensionExists(TR::Compilation *);OMR::Block
OMR::Block::setIsExtensionOfPreviousBlock(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::setIsSuperCold(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Block::uncommonNodesBetweenBlocks(TR::Compilation *,TR::Block *,TR::ResolvedMethodSymbol *);findAndReplaceReferences(TR::TreeTop *,TR::Block *,TR::Block *);TR_HandleInjectedBasicBlock
OMR::Block::splitBlockAndAddConditional(TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);setStructure(class TR_Structure *);OMR::CFG
OMR::Block::splitBlockAndAddConditional(TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);append(TR::TreeTop *);OMR::Block
OMR::Block::splitBlockAndAddConditional(TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);removeAllChildren();OMR::Node
OMR::Block::splitBlockAndAddConditional(TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool);join(TR::TreeTop *);OMR::TreeTop
TR_BlockCloner::cloneBlocks(TR::Block *,TR::Block *);set(struct BlockMapper *,struct BlockMapper *);TR_LinkHeadAndTail
TR_ExtendedBlockSuccessorIterator::getFirst();setCurrentBlock(TR::Block *);TR_ExtendedBlockSuccessorIterator
TR_DirectCallSite::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DirectCallSite::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DirectCallSite::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DirectCallSite::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IndirectCallSite::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IndirectCallSite::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IndirectCallSite::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IndirectCallSite::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_FunctionPointerCallSite::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_FunctionPointerCallSite::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_FunctionPointerCallSite::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_FunctionPointerCallSite::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InlinerTracer::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InlinerTracer::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InlinerTracer::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InlinerTracer::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InnerPreexistenceInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InnerPreexistenceInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InnerPreexistenceInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InnerPreexistenceInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InlinerBase::setInlineVirtuals(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_InlinerBase::setInlineSynchronized(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_InlinerBase::setFirstPass(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_ParameterToArgumentMapper::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ParameterToArgumentMapper::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ParameterToArgumentMapper::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ParameterToArgumentMapper::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RegisterCandidate::addAllBlocks();setAllBlocks(_Bool);TR_RegisterCandidate
TR_RegisterCandidate::addStore(TR::TreeTop *);add(class TR::TreeTop *);List
TR_RegisterCandidate::setExtendedLiveRange(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::setValueModified(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::setHighWordZero(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::setLiveAcrossExceptionEdge(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::setDontAssignVMThreadRegister(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::setAllBlocks(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::setIs8BitGlobalGPR(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::setInitialBlocksWeightComputed(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_RegisterCandidate::BlockInfo::setNumberOfLoadsAndStores(uint32_t,uint32_t);set(int64_t);TR_BitVector
TR_RegisterCandidate::BlockInfo::incNumberOfLoadsAndStores(uint32_t,uint32_t);set(int64_t);TR_BitVector
TR_RegisterCandidate::BlockInfo::removeBlock(uint32_t);reset(int64_t,_Bool);TR_BitVector
TR_RegisterCandidates::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RegisterCandidates::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RegisterCandidates::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RegisterCandidates::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RegisterCandidates::releaseCandidates();~Region();TR::Region
TR_GlobalRegister::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_GlobalRegister::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_GlobalRegister::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_GlobalRegister::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::TransformUtil::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::TransformUtil::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::TransformUtil::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::TransformUtil::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::SymbolReferenceTable::SymbolReferenceTable(size_t,TR::Compilation *);setSize(uint32_t);TR_Array
OMR::SymbolReferenceTable::createRuntimeHelper(enum TR_RuntimeHelper,_Bool,_Bool,_Bool);setHelper();OMR::MethodSymbol
OMR::SymbolReferenceTable::createRuntimeHelper(enum TR_RuntimeHelper,_Bool,_Bool,_Bool);setMethodAddress(void *);OMR::MethodSymbol
OMR::SymbolReferenceTable::createParameterSymbol(TR::ResolvedMethodSymbol *,int32_t,TR::DataType);setParmSymRef(int32_t,TR::SymbolReference *);OMR::ResolvedMethodSymbol
OMR::SymbolReferenceTable::createParameterSymbol(TR::ResolvedMethodSymbol *,int32_t,TR::DataType);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::findOrCreateAutoSymbol(TR::ResolvedMethodSymbol *,int32_t,TR::DataType,_Bool,_Bool,_Bool,_Bool,size_t);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::findOrCreatePendingPushTemporary(TR::ResolvedMethodSymbol *,int32_t,TR::DataType,size_t);setIsPendingPush();OMR::Symbol
OMR::SymbolReferenceTable::createLocalPrimArray(int32_t,TR::ResolvedMethodSymbol *,int32_t);setBehaveLikeNonTemp();OMR::Symbol
OMR::SymbolReferenceTable::createLocalPrimArray(int32_t,TR::ResolvedMethodSymbol *,int32_t);setNotCollected();OMR::Symbol
OMR::SymbolReferenceTable::createLocalPrimArray(int32_t,TR::ResolvedMethodSymbol *,int32_t);addAutomatic(TR::AutomaticSymbol *);OMR::ResolvedMethodSymbol
OMR::SymbolReferenceTable::createLocalPrimArray(int32_t,TR::ResolvedMethodSymbol *,int32_t);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::methodSymRefFromName(TR::ResolvedMethodSymbol *,char *,char *,char *,TR::class MethodSymbol::Kinds,int32_t);setCPIndex(int32_t);OMR::SymbolReference
OMR::SymbolReferenceTable::methodSymRefFromName(TR::ResolvedMethodSymbol *,char *,char *,char *,TR::class MethodSymbol::Kinds,int32_t);Add(const struct CS2::CompoundHashKey<class mcount_t, const char *> &,class TR::SymbolReference *const &);CS2::HashTable
OMR::SymbolReferenceTable::createSymbolReference(TR::Symbol *,intptrj_t);setSymbol(TR::Symbol *);OMR::SymbolReference
OMR::SymbolReferenceTable::createKnownStaticDataSymbolRef(void *,TR::DataType);setStaticAddress(void *);OMR::StaticSymbol
OMR::SymbolReferenceTable::createKnownStaticDataSymbolRef(void *,TR::DataType);setNotCollected();OMR::Symbol
OMR::SymbolReferenceTable::createKnownStaticDataSymbolRef(void *,TR::DataType,TR::class KnownObjectTable::Index);setStaticAddress(void *);OMR::StaticSymbol
OMR::SymbolReferenceTable::createKnownStaticDataSymbolRef(void *,TR::DataType,TR::class KnownObjectTable::Index);setNotCollected();OMR::Symbol
OMR::SymbolReferenceTable::findOrCreateMethodSymbol(class mcount_t,int32_t,class TR_ResolvedMethod *,TR::class MethodSymbol::Kinds,_Bool);setMethodKind(int32_t);OMR::MethodSymbol
OMR::SymbolReferenceTable::findOrCreateMethodSymbol(class mcount_t,int32_t,class TR_ResolvedMethod *,TR::class MethodSymbol::Kinds,_Bool);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::findOrCreateMethodSymbol(class mcount_t,int32_t,class TR_ResolvedMethod *,TR::class MethodSymbol::Kinds,_Bool);setHasBeenAccessedAtRuntime(enum TR_YesNoMaybe);OMR::SymbolReference
OMR::SymbolReferenceTable::createLocalObject(int32_t,TR::ResolvedMethodSymbol *,TR::SymbolReference *);setBehaveLikeNonTemp();OMR::Symbol
OMR::SymbolReferenceTable::createLocalObject(int32_t,TR::ResolvedMethodSymbol *,TR::SymbolReference *);addAutomatic(TR::AutomaticSymbol *);OMR::ResolvedMethodSymbol
OMR::SymbolReferenceTable::createLocalObject(int32_t,TR::ResolvedMethodSymbol *,TR::SymbolReference *);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::createLocalAddrArray(int32_t,TR::ResolvedMethodSymbol *,TR::SymbolReference *);setBehaveLikeNonTemp();OMR::Symbol
OMR::SymbolReferenceTable::createLocalAddrArray(int32_t,TR::ResolvedMethodSymbol *,TR::SymbolReference *);addAutomatic(TR::AutomaticSymbol *);OMR::ResolvedMethodSymbol
OMR::SymbolReferenceTable::createLocalAddrArray(int32_t,TR::ResolvedMethodSymbol *,TR::SymbolReference *);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::findOrCreateSymRefWithKnownObject(TR::SymbolReference *,TR::class KnownObjectTable::Index);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::findOrCreateImmutableArrayShadowSymbolRef(TR::DataType);setReallySharesSymbol();OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateImmutableArrayShadowSymbolRef(TR::DataType);setCPIndex(int32_t);OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateImmutableArrayShadowSymbolRef(TR::DataType);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::findOrCreateVtableEntrySymbolRef(TR::ResolvedMethodSymbol *,int32_t);setOwningMethodIndex(class mcount_t);OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateVtableEntrySymbolRef(TR::ResolvedMethodSymbol *,int32_t);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::createIsOverriddenSymbolRef(TR::ResolvedMethodSymbol *);setStaticAddress(void *);OMR::StaticSymbol
OMR::SymbolReferenceTable::createIsOverriddenSymbolRef(TR::ResolvedMethodSymbol *);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::createIsOverriddenSymbolRef(TR::ResolvedMethodSymbol *);setOverriddenBitAddress();OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateDLPStaticSymbolReference(TR::SymbolReference *);setStaticAddress(void *);OMR::StaticSymbol
OMR::SymbolReferenceTable::findOrCreateDLPStaticSymbolReference(TR::SymbolReference *);setNotCollected();OMR::Symbol
OMR::SymbolReferenceTable::findOrCreateDLPStaticSymbolReference(TR::SymbolReference *);setSymbol(TR::Symbol *);OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateDLPStaticSymbolReference(TR::SymbolReference *);setUpDLPFlags(int32_t);OMR::StaticSymbol
OMR::SymbolReferenceTable::findOrCreateDLPStaticSymbolReference(TR::SymbolReference *);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::createGenericIntShadowSymbolReference(intptrj_t,_Bool);setOffset(intptrj_t);OMR::SymbolReference
OMR::SymbolReferenceTable::createGenericIntShadowSymbolReference(intptrj_t,_Bool);setReallySharesSymbol();OMR::SymbolReference
OMR::SymbolReferenceTable::createGenericIntShadowSymbolReference(intptrj_t,_Bool);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::createGenericIntShadowSymbolReference(intptrj_t,_Bool);setMutableGenericIntShadowHasBeenCreated(_Bool);OMR::AliasBuilder
OMR::SymbolReferenceTable::findOrCreateGenericIntArrayShadowSymbolReference(intptrj_t);setOffset(intptrj_t);OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateGenericIntArrayShadowSymbolReference(intptrj_t);setReallySharesSymbol();OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateGenericIntArrayShadowSymbolReference(intptrj_t);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::findOrCreateGenericIntArrayShadowSymbolReference(intptrj_t);setMutableGenericIntShadowHasBeenCreated(_Bool);OMR::AliasBuilder
OMR::SymbolReferenceTable::findOrCreateGenericIntNonArrayShadowSymbolReference(intptrj_t);setOffset(intptrj_t);OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateGenericIntNonArrayShadowSymbolReference(intptrj_t);setReallySharesSymbol();OMR::SymbolReference
OMR::SymbolReferenceTable::findOrCreateGenericIntNonArrayShadowSymbolReference(intptrj_t);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::findOrCreateGenericIntNonArrayShadowSymbolReference(intptrj_t);setMutableGenericIntShadowHasBeenCreated(_Bool);OMR::AliasBuilder
OMR::SymbolReferenceTable::findOrCreateClassSymbol(TR::ResolvedMethodSymbol *,int32_t,void *,_Bool);setClassObject();OMR::Symbol
OMR::SymbolReferenceTable::findOrCreateCounterSymRef(char *,TR::DataType,void *);add(class TR::SymbolReference *);List
OMR::SymbolReferenceTable::createRefinedArrayShadowSymbolRef(TR::DataType);setReallySharesSymbol();OMR::SymbolReference
OMR::SymbolReferenceTable::createRefinedArrayShadowSymbolRef(TR::DataType,TR::Symbol *);setArrayShadowSymbol();OMR::Symbol
OMR::SymbolReferenceTable::createRefinedArrayShadowSymbolRef(TR::DataType,TR::Symbol *);setReallySharesSymbol();OMR::SymbolReference
OMR::SymbolReferenceTable::createRefinedArrayShadowSymbolRef(TR::DataType,TR::Symbol *);setCPIndex(int32_t);OMR::SymbolReference
OMR::SymbolReferenceTable::createRefinedArrayShadowSymbolRef(TR::DataType,TR::Symbol *);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::createRefinedArrayShadowSymbolRef(TR::DataType,TR::Symbol *);setHasVeryRefinedAliasSets(_Bool);OMR::MethodSymbol
OMR::SymbolReferenceTable::makeSharedAliases(TR::SymbolReference *,TR::SymbolReference *);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::findOrCreateCPSymbol(TR::ResolvedMethodSymbol *,int32_t,TR::DataType,_Bool,void *);set(int64_t);TR_BitVector
OMR::SymbolReferenceTable::markBlockAsCold();setIsCold(_Bool);OMR::Block
OMR::SymbolReferenceTable::markBlockAsCold();setFrequency(int32_t);TR::CFGNode
OMR::AliasBuilder::createAliasInfo();pack();TR_BitVector
OMR::AliasBuilder::createAliasInfo();setCatchLocalUseSymRefs();OMR::AliasBuilder
OMR::AliasBuilder::createAliasInfo();init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
OMR::AliasBuilder::createAliasInfo();setFirst(struct OMR::AliasBuilder::CallAliases *);TR_LinkHead0
OMR::AliasBuilder::setVeryRefinedCallAliasSets(TR::ResolvedMethodSymbol *,class TR_BitVector *);add(struct OMR::AliasBuilder::CallAliases *);TR_LinkHead0
OMR::AliasBuilder::setCatchLocalUseSymRefs();init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
OMR::AliasBuilder::gatherLocalUseInfo(TR::Node *,class TR_BitVector &,vcount_t,_Bool);setVisitCount(vcount_t);OMR::Node
OMR::AliasBuilder::gatherLocalUseInfo(TR::Block *,_Bool);add(class TR_Pair<class TR::Block, class TR_BitVector> *);TR_ScratchList
OMR::AliasBuilder::addNonIntPrimitiveArrayShadows(class TR_BitVector *);set(int64_t);TR_BitVector
OMR::AliasBuilder::addAddressArrayShadows(class TR_BitVector *);set(int64_t);TR_BitVector
OMR::AliasBuilder::addIntArrayShadows(class TR_BitVector *);set(int64_t);TR_BitVector
OMR::AutomaticSymbol::AutomaticSymbol();init();OMR::AutomaticSymbol
OMR::AutomaticSymbol::AutomaticSymbol(TR::DataType);init();OMR::AutomaticSymbol
OMR::AutomaticSymbol::AutomaticSymbol(TR::DataType,uint32_t);init();OMR::AutomaticSymbol
OMR::AutomaticSymbol::AutomaticSymbol(TR::DataType,uint32_t,const char *);init();OMR::AutomaticSymbol
OMR::AutomaticSymbol::init();setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::AutomaticSymbol::setIsReferenced(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
OMR::AutomaticSymbol::setIsAddressTaken(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
OMR::AutomaticSymbol::setIsSingleUse(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
OMR::LabelSymbol::LabelSymbol();setIsLabel();OMR::Symbol
OMR::LabelSymbol::LabelSymbol(TR::CodeGenerator *);setIsLabel();OMR::Symbol
OMR::LabelSymbol::LabelSymbol(TR::CodeGenerator *,TR::Block *);setIsLabel();OMR::Symbol
OMR::LabelSymbol::makeRelativeLabelSymbol(intptr_t);setRelativeLabel();OMR::Symbol
OMR::LabelSymbol::makeRelativeLabelSymbol(intptr_t);setName(const char *);OMR::Symbol
OMR::MethodSymbol::MethodSymbol(enum TR_LinkageConventions,class TR_Method *);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::ParameterSymbol::ParameterSymbol(TR::DataType,int32_t);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::ParameterSymbol::ParameterSymbol(TR::DataType,int32_t);setOffset(int32_t);OMR::RegisterMappedSymbol
OMR::ParameterSymbol::ParameterSymbol(TR::DataType,int32_t,size_t);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::ParameterSymbol::ParameterSymbol(TR::DataType,int32_t,size_t);setOffset(int32_t);OMR::RegisterMappedSymbol
OMR::ParameterSymbol::setParameterOffset(int32_t);setOffset(int32_t);OMR::RegisterMappedSymbol
OMR::RegisterMappedSymbol::RegisterMappedSymbol(int32_t);setLiveLocalIndexUninitialized();OMR::RegisterMappedSymbol
OMR::RegisterMappedSymbol::RegisterMappedSymbol(TR::DataType);setLiveLocalIndexUninitialized();OMR::RegisterMappedSymbol
OMR::RegisterMappedSymbol::RegisterMappedSymbol(TR::DataType,uint32_t);setLiveLocalIndexUninitialized();OMR::RegisterMappedSymbol
OMR::ResolvedMethodSymbol::ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *);setParameterList();OMR::ResolvedMethodSymbol
OMR::ResolvedMethodSymbol::ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::initForCompilation(TR::Compilation *);setRegion(TR::Region &);ListBase
OMR::ResolvedMethodSymbol::generateAccurateNodeCount();incOrResetVisitCount();OMR::Compilation
OMR::ResolvedMethodSymbol::recursivelyCountChildren(TR::Node *);setVisitCount(vcount_t);OMR::Node
OMR::ResolvedMethodSymbol::getAutoSymRefs(int32_t);setRegion(TR::Region &);ListBase
OMR::ResolvedMethodSymbol::getPendingPushSymRefs(int32_t);setRegion(TR::Region &);ListBase
OMR::ResolvedMethodSymbol::insertStoresForDeadStackSlotsBeforeInducingOSR(TR::Compilation *,int32_t,TR_ByteCodeInfo &,TR::TreeTop *);insertStoresForDeadStackSlots(TR::Compilation *,TR_ByteCodeInfo &,TR::TreeTop *,_Bool);OMR::ResolvedMethodSymbol
OMR::ResolvedMethodSymbol::genOSRHelperCall(int32_t,TR::SymbolReferenceTable *,TR::CFG *);setLinkage(enum TR_LinkageConventions);OMR::MethodSymbol
OMR::ResolvedMethodSymbol::genOSRHelperCall(int32_t,TR::SymbolReferenceTable *,TR::CFG *);add(class TR::Node *);TR_Array
OMR::ResolvedMethodSymbol::genOSRHelperCall(int32_t,TR::SymbolReferenceTable *,TR::CFG *);append(TR::TreeTop *);OMR::Block
OMR::ResolvedMethodSymbol::genOSRHelperCall(int32_t,TR::SymbolReferenceTable *,TR::CFG *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::ResolvedMethodSymbol::genInduceOSRCallNode(TR::TreeTop *,int32_t,_Bool,_Bool,TR::CFG *);setInterpreted(_Bool);OMR::MethodSymbol
OMR::ResolvedMethodSymbol::genInduceOSRCallNode(TR::TreeTop *,int32_t,_Bool,_Bool,TR::CFG *);setIsOSRInduceBlock();OMR::Block
OMR::ResolvedMethodSymbol::genInduceOSRCallNode(TR::TreeTop *,int32_t,_Bool,_Bool,TR::CFG *);insertBefore(TR::TreeTop *);OMR::TreeTop
OMR::ResolvedMethodSymbol::genInduceOSRCall(TR::TreeTop *,int32_t,class TR_OSRMethodData *,int32_t,_Bool,_Bool,TR::CFG *);append(TR::TreeTop *);OMR::Block
OMR::ResolvedMethodSymbol::genInduceOSRCall(TR::TreeTop *,int32_t,class TR_OSRMethodData *,int32_t,_Bool,_Bool,TR::CFG *);setThrowInsertedByOSR(_Bool);OMR::Node
OMR::ResolvedMethodSymbol::genInduceOSRCall(TR::TreeTop *,int32_t,class TR_OSRMethodData *,int32_t,_Bool,_Bool,TR::CFG *);insertRematableStoresFromCallSites(TR::Compilation *,int32_t,TR::TreeTop *);OMR::ResolvedMethodSymbol
OMR::ResolvedMethodSymbol::genInduceOSRCall(TR::TreeTop *,int32_t,class TR_OSRMethodData *,int32_t,_Bool,_Bool,TR::CFG *);insertStoresForDeadStackSlotsBeforeInducingOSR(TR::Compilation *,int32_t,TR_ByteCodeInfo &,TR::TreeTop *);OMR::ResolvedMethodSymbol
OMR::ResolvedMethodSymbol::prependEmptyFirstBlock();setFirstTreeTop(TR::TreeTop *);OMR::ResolvedMethodSymbol
OMR::ResolvedMethodSymbol::prependEmptyFirstBlock();insertBefore(TR::Block *,TR::Block *);OMR::CFG
OMR::ResolvedMethodSymbol::prependEmptyFirstBlock();addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::ResolvedMethodSymbol::prependEmptyFirstBlock();removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
OMR::ResolvedMethodSymbol::setCannotAttemptOSR(int32_t);set(int64_t);TR_BitVector
OMR::ResolvedMethodSymbol::setContainsOnlySinglePrecision(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setUsesSinglePrecisionMode(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::ResolvedMethodSymbol::setNoTemps(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Linkage::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Linkage::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Linkage::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Linkage::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Node::Node(TR::Node *,TR::ILOpCodes,uint16_t);setReferenceCount(rcount_t);OMR::Node
OMR::Node::Node(TR::Node *,TR::ILOpCodes,uint16_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::Node(TR::Node *,TR::ILOpCodes,uint16_t);setLocalIndex(scount_t);OMR::Node
OMR::Node::Node(TR::Node *,TR::ILOpCodes,uint16_t);setInvalidCallerIndex();TR_ByteCodeInfo
OMR::Node::Node(TR::Node *,TR::ILOpCodes,uint16_t);setIsSameReceiver(_Bool);TR_ByteCodeInfo
OMR::Node::Node(TR::Node *,uint16_t);copyChildren(TR::Node *,uint16_t,_Bool);OMR::Node
OMR::Node::Node(TR::Node *,uint16_t);setGlobalIndex(ncount_t);OMR::Node
OMR::Node::Node(TR::Node *,uint16_t);setReferenceCount(rcount_t);OMR::Node
OMR::Node::Node(TR::Node *,uint16_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::Node(TR::Node *,uint16_t);setLocalIndex(scount_t);OMR::Node
OMR::Node::copyValidProperties(TR::Node *,TR::Node *);setFlags(flags32_t);OMR::Node
OMR::Node::copyValidProperties(TR::Node *,TR::Node *);copyChildren(TR::Node *,uint16_t,_Bool);OMR::Node
OMR::Node::~Node();setOpCodeValue(TR::ILOpCodes);OMR::ILOpCode
OMR::Node::~Node();freeExtensionIfExists();OMR::Node
OMR::Node::create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::Node::create(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::Node::createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::SymbolReference *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Node::createWithSymRef(TR::Node *,TR::ILOpCodes,uint16_t,TR::Node *,TR::SymbolReference *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Node::createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,uintptr_t,TR::SymbolReference *);setChild(int32_t,TR::Node *);OMR::Node
OMR::Node::createWithSymRef(TR::ILOpCodes,uint16_t,TR::Node *,TR::Node *,uintptr_t,TR::SymbolReference *);incReferenceCount();OMR::Node
OMR::Node::addChildrenAndSymRef(uint16_t,TR::SymbolReference *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Node::addChildrenAndSymRef(uint16_t,TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::Node::createWithRoomForOneMore(TR::ILOpCodes,uint16_t,void *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);addExtensionElements(uint16_t);OMR::Node
OMR::Node::createWithRoomForOneMore(TR::ILOpCodes,uint16_t,void *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);setChild(int32_t,TR::Node *);OMR::Node
OMR::Node::createbranch(TR::ILOpCodes,TR::Node *,TR::TreeTop *);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::Node::createCase(TR::Node *,TR::TreeTop *,CASECONST_TYPE);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::Node::createCase(TR::Node *,TR::TreeTop *,CASECONST_TYPE);setCaseConstant(CASECONST_TYPE);OMR::Node
OMR::Node::createArraycopy();addExtensionElements(uint16_t);OMR::Node
OMR::Node::createArraycopy();setArrayCopyElementType(TR::DataType);OMR::Node
OMR::Node::createArraycopy();setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Node::createArraycopy(TR::Node *,TR::Node *,TR::Node *);setArrayCopyElementType(TR::DataType);OMR::Node
OMR::Node::createArraycopy(TR::Node *,TR::Node *,TR::Node *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Node::createArraycopy(TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Node::createRelative32BitFenceNode(TR::Node *,void *);setRelocationType(uint32_t);OMR::Node
OMR::Node::createRelative32BitFenceNode(TR::Node *,void *);setNumRelocations(uint32_t);OMR::Node
OMR::Node::createRelative32BitFenceNode(TR::Node *,void *);setRelocationDestination(uint32_t,void *);OMR::Node
OMR::Node::createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t);setAddress(uint64_t);OMR::Node
OMR::Node::createAddressNode(TR::Node *,TR::ILOpCodes,uintptrj_t,uint8_t);setAddress(uint64_t);OMR::Node
OMR::Node::createAllocationFence(TR::Node *,TR::Node *);setChild(int32_t,TR::Node *);OMR::Node
OMR::Node::bconst(TR::Node *,int8_t);setByte(int8_t);OMR::Node
OMR::Node::buconst(TR::Node *,uint8_t);setUnsignedByte(uint8_t);OMR::Node
OMR::Node::sconst(TR::Node *,int16_t);setShortInt(int16_t);OMR::Node
OMR::Node::cconst(TR::Node *,uint16_t);setUnsignedShortInt(uint16_t);OMR::Node
OMR::Node::lconst(TR::Node *,int64_t);setLongInt(int64_t);OMR::Node
OMR::Node::luconst(TR::Node *,uint64_t);setUnsignedLongInt(uint64_t);OMR::Node
OMR::Node::createCompressedRefsAnchor(TR::Node *);setLongInt(int64_t);OMR::Node
OMR::Node::createAddConstantToAddress(TR::Node *,intptr_t,TR::Node *);setIsInternalPointer(_Bool);OMR::Node
OMR::Node::createVectorConst(TR::Node *,TR::DataType);setDataType(TR::DataType);OMR::Node
OMR::Node::createVectorConversion(TR::Node *,TR::DataType);setDataType(TR::DataType);OMR::Node
OMR::Node::recreateAndCopyValidPropertiesImpl(TR::Node *,TR::ILOpCodes,TR::SymbolReference *);freeExtensionIfExists();OMR::Node
OMR::Node::recreateAndCopyValidPropertiesImpl(TR::Node *,TR::ILOpCodes,TR::SymbolReference *);deallocate(TR::Node *);TR::NodePool
OMR::Node::addChildren(TR::Node **,uint16_t);setNumChildren(uint16_t);OMR::Node
OMR::Node::getAndDecChild(int32_t);decReferenceCount();OMR::Node
OMR::Node::duplicateTreeForCodeMotion();resetFlagsForCodeMotion();OMR::Node
OMR::Node::duplicateTree_DEPRECATED(_Bool);setReferenceCount(rcount_t);OMR::Node
OMR::Node::uncommonChild(int32_t);setChild(int32_t,TR::Node *);OMR::Node
OMR::Node::uncommon();setReferenceCount(rcount_t);OMR::Node
OMR::Node::uncommon();decReferenceCount();OMR::Node
OMR::Node::containsNode(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::isSafeToReplaceNode(TR::TreeTop *);incVisitCount();OMR::Compilation
OMR::Node::isSafeToReplaceNode(TR::TreeTop *);collectSymbolReferencesInNode(class TR_BitVector &,vcount_t);OMR::Node
OMR::Node::performsVolatileAccess(vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::containsDoNotPropagateNode(vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::setNullCheckReference(TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::Node::reverseBranch(TR::TreeTop *);setOpCodeValue(TR::ILOpCodes);OMR::Node
OMR::Node::reverseBranch(TR::TreeTop *);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::Node::gatherAllNodesWhichMightKillCondCode(vcount_t,TR::list<TR::Node *> &);setVisitCount(vcount_t);OMR::Node
OMR::Node::extractTheNullCheck(TR::TreeTop *);setNumChildren(uint16_t);OMR::Node
OMR::Node::countNumberOfNodesInSubtree(vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::printFullSubtree();saveNodeChecklist(class TR_BitVector &);TR_Debug
OMR::Node::printFullSubtree();clearNodeChecklist();TR_Debug
OMR::Node::printFullSubtree();print(TR::FILE *,TR::Node *,uint32_t,_Bool);TR_Debug
OMR::Node::printFullSubtree();restoreNodeChecklist(class TR_BitVector &);TR_Debug
OMR::Node::setFlags(flags32_t);setHasNodeExtension(_Bool);OMR::Node
OMR::Node::setByteCodeIndex(uint32_t);setByteCodeIndex(int32_t);TR_ByteCodeInfo
OMR::Node::setInlinedSiteIndex(int16_t);setCallerIndex(int16_t);TR_ByteCodeInfo
OMR::Node::swapChildren();setFirst(TR::Node *);OMR::Node
OMR::Node::swapChildren();setSecond(TR::Node *);OMR::Node
OMR::Node::removeChild(int32_t);recursivelyDecReferenceCount();OMR::Node
OMR::Node::removeChild(int32_t);setNumChildren(uint16_t);OMR::Node
OMR::Node::removeAllChildren();setNumChildren(uint16_t);OMR::Node
OMR::Node::rotateChildren(int32_t,int32_t);setChild(int32_t,TR::Node *);OMR::Node
OMR::Node::initializeFutureUseCounts(vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::initializeFutureUseCounts(vcount_t);setFutureUseCount(scount_t);OMR::Node
OMR::Node::createArrayStoreCheckInfo();setElem(uint16_t,struct OMR::Node::ArrayStoreCheckInfo *);TR::NodeExtension
OMR::Node::setMethod(class TR_OpaqueMethodBlock *);freeExtensionIfExists();OMR::Node
OMR::Node::setLabel(TR::LabelSymbol *);freeExtensionIfExists();OMR::Node
OMR::Node::setGlobalRegisterNumber(TR_GlobalRegisterNumber);setHigh(TR_GlobalRegisterNumber,TR::Node *);GlobalRegisterInfo
OMR::Node::setGlobalRegisterNumber(TR_GlobalRegisterNumber);setLow(TR_GlobalRegisterNumber,TR::Node *);GlobalRegisterInfo
OMR::Node::setLowGlobalRegisterNumber(TR_GlobalRegisterNumber);setLow(TR_GlobalRegisterNumber,TR::Node *);GlobalRegisterInfo
OMR::Node::setHighGlobalRegisterNumber(TR_GlobalRegisterNumber);setHigh(TR_GlobalRegisterNumber,TR::Node *);GlobalRegisterInfo
OMR::Node::setLiteralPoolOffset(size_t,size_t);freeExtensionIfExists();OMR::Node
OMR::Node::setRelocationDestination(uint32_t,void *);freeExtensionIfExists();OMR::Node
OMR::Node::setRelocationType(uint32_t);freeExtensionIfExists();OMR::Node
OMR::Node::setNumRelocations(uint32_t);freeExtensionIfExists();OMR::Node
OMR::Node::setPinningArrayPointer(TR::AutomaticSymbol *);setPinningArrayPointer();OMR::Symbol
OMR::Node::isEligibleForHighWordOpcode();resetIsHPREligible();OMR::Node
OMR::Node::setHasBeenVisitedForHints(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setPreparedForDirectJNI();set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setPreparedForDirectJNI();setLinkage(enum TR_LinkageConventions);OMR::MethodSymbol
OMR::Node::setIsSafeForCGToFastPathUnsafeCall(_Bool);set(unsigned int);OMR::FlagsTemplate
OMR::Node::setSkipWrtBar(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setLikelyStackWrtBar(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setIsUnsafeStaticWrtBar(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setIsUseBranchOnCount(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setIsPrivatizedInlinerArg(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setPrimitiveLockedRegion(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setHasMonitorClassInNode(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setIsAdjunct(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setParentSupportsLazyClobber(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setIsLoadFence();set(unsigned int);OMR::FlagsTemplate
OMR::Node::setIsStoreFence();set(unsigned int);OMR::FlagsTemplate
OMR::Node::setReturnIsDummy();set(unsigned int);OMR::FlagsTemplate
OMR::Node::setIsBigDecimalLoad();set(unsigned int);OMR::FlagsTemplate
OMR::Node::setCopyToNewVirtualRegister(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setNodeRequiresConditionCodes(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Node::setOpCodeValue(TR::ILOpCodes);setOpCodeValue(TR::ILOpCodes);OMR::ILOpCode
OMR::Node::duplicateTreeWithCommoningImpl(CS2::HashTable<TR::Node *, TR::Node *, TR::Allocator> &);setReferenceCount(rcount_t);OMR::Node
OMR::Node::duplicateTreeWithCommoningImpl(CS2::HashTable<TR::Node *, TR::Node *, TR::Allocator> &);Add(class TR::Node *const &,class TR::Node *const &);CS2::HashTable
OMR::Node::collectSymbolReferencesInNode(class TR_BitVector &,vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Node::createNodeExtension(uint16_t);setExtensionPtr(TR::NodeExtension *);OMR::Node::NodeExtensionStore
OMR::Node::createNodeExtension(uint16_t);setNumElems(uint16_t);OMR::Node::NodeExtensionStore
OMR::Node::createNodeExtension(uint16_t);setHasNodeExtension(_Bool);OMR::Node
OMR::Node::copyNodeExtension(TR::NodeExtension *,uint16_t,size_t);setExtensionPtr(TR::NodeExtension *);OMR::Node::NodeExtensionStore
OMR::Node::copyNodeExtension(TR::NodeExtension *,uint16_t,size_t);setHasNodeExtension(_Bool);OMR::Node
OMR::Node::copyNodeExtension(TR::NodeExtension *,uint16_t,size_t);setNumElems(uint16_t);OMR::Node::NodeExtensionStore
TR_LiveRegisterInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveRegisterInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveRegisterInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LiveRegisterInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LiveRegisters::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveRegisters::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveRegisters::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LiveRegisters::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::NodePool::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::NodePool::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::NodePool::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::NodePool::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ValueNumberInfo::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR::NodePool::deallocate(TR::Node *);~Node();TR::Node
TR::NodePool::cleanUp();~Region();TR::Region
TR_ParentOfChildNode::setChild(TR::Node *);setChild(int32_t,TR::Node *);OMR::Node
TR_ParentOfChildNode::setChild(TR::Node *);decReferenceCount();OMR::Node
TR_ParentOfChildNode::setChild(TR::Node *);incReferenceCount();OMR::Node
OMR::SymbolReference::init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);updateSubSets(TR::SymbolReference *);OMR::AliasBuilder
OMR::SymbolReference::init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);setHasBeenAccessedAtRuntime(enum TR_YesNoMaybe);OMR::SymbolReference
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *);init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);OMR::SymbolReference
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t);init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);OMR::SymbolReference
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t);init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);OMR::SymbolReference
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t);init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);OMR::SymbolReference
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t);init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);OMR::SymbolReference
OMR::SymbolReference::copyFlags(TR::SymbolReference *);set(FlagsTemplate<unsigned int>);OMR::FlagsTemplate
OMR::SymbolReference::setHasBeenAccessedAtRuntime(enum TR_YesNoMaybe);setValue(unsigned int,unsigned int);OMR::FlagsTemplate
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *);init(TR::SymbolReferenceTable *,uint32_t,TR::Symbol *,intptrj_t,class mcount_t,int32_t,int32_t,_Bool);OMR::SymbolReference
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index);set(FlagsTemplate<unsigned int>);OMR::FlagsTemplate
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index);copyAliasSets(TR::SymbolReference *,TR::SymbolReferenceTable *);OMR::SymbolReference
OMR::SymbolReference::SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index);updateSubSets(TR::SymbolReference *);OMR::AliasBuilder
OMR::SymbolReference::setLiteralPoolAliases(class TR_BitVector *,TR::SymbolReferenceTable *);set(int64_t);TR_BitVector
OMR::SymbolReference::makeIndependent(TR::SymbolReferenceTable *,TR::SymbolReference *);set(int64_t);TR_BitVector
BitVectorPool::release(class TR_BitVector *);empty();TR_BitVector
BitVectorPool::release(class TR_BitVector *);push(class TR_BitVector *);TR_Stack
OMR::Compilation::diagnosticImpl(const char *);diagnosticImplVA(const char *,va_list);OMR::Compilation
OMR::Compilation::switchCodeCache(TR::CodeCache *);setCurrentCodeCache(TR::CodeCache *);OMR::Compilation
OMR::Compilation::incInlineDepth(class TR_OpaqueMethodBlock *,TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *);push(int);TR_Stack
OMR::Compilation::incInlineDepth(class TR_OpaqueMethodBlock *,TR::ResolvedMethodSymbol *,TR_ByteCodeInfo &,TR::SymbolReference *,_Bool,class TR_PrexArgInfo *);push(class TR_PrexArgInfo *);TR_Stack
OMR::Compilation::decInlineDepth(_Bool);pop();TR_Stack
OMR::Compilation::setCannotAttemptOSRDuring(uint32_t,_Bool);setCannotAttemptOSRDuring(_Bool);OMR::Compilation::TR_InlinedCallSiteInfo
OMR::Compilation::addPeekingArgInfo(struct TR_PeekingArgInfo *);push(struct TR_PeekingArgInfo *);TR_Stack
OMR::Compilation::removePeekingArgInfo();pop();TR_Stack
OMR::Compilation::dumpMethodTrees(char *,TR::ResolvedMethodSymbol *);printIRTrees(TR::FILE *,const char *,TR::ResolvedMethodSymbol *);TR_Debug
OMR::Compilation::dumpMethodTrees(char *,const char *,TR::ResolvedMethodSymbol *);dumpMethodTrees(char *,TR::ResolvedMethodSymbol *);OMR::Compilation
OMR::Compilation::validateIL(TR::ILValidationContext);validate(const OMR::ILValidationStrategy *);TR::ILValidator
OMR::Compilation::getAccurateNodeCount();generateAccurateNodeCount();OMR::Compilation
OMR::Compilation::setStartTree(TR::TreeTop *);setFirstTreeTop(TR::TreeTop *);OMR::ResolvedMethodSymbol
OMR::Compilation::resetVisitCounts(vcount_t,TR::ResolvedMethodSymbol *);resetVisitCounts(vcount_t,TR::TreeTop *);OMR::Compilation
OMR::Compilation::resetVisitCounts(vcount_t,TR::ResolvedMethodSymbol *);resetVisitCounts(vcount_t);OMR::CFG
OMR::Compilation::resetVisitCounts(vcount_t,TR::ResolvedMethodSymbol *);setVisitCount(vcount_t);OMR::Compilation
OMR::Compilation::restoreInlineDepthUntil(int32_t,TR_ByteCodeInfo &);push(int);TR_Stack
OMR::Compilation::restoreInlineDepthUntil(int32_t,TR_ByteCodeInfo &);push(class TR_PrexArgInfo *);TR_Stack
OMR::Compilation::TR_InlinedCallSiteInfo::operator=(const class OMR::Compilation::TR_InlinedCallSiteInfo &);operator=(const struct TR_InlinedCallSite &);TR_InlinedCallSite
OMR::Compilation::CompilationPhaseScope::~CompilationPhaseScope();restoreCompilationPhase(TR::class Compilation::CompilationPhase);OMR::Compilation
TR_DebuggingCounters::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DebuggingCounters::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DebuggingCounters::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DebuggingCounters::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::SystemSegmentProvider::release(TR::MemorySegment &);deallocate(void *);OMR::RawAllocator
TR::Region::allocate(const size_t,void *);link(class TR::MemorySegment &);TR::MemorySegment
TR::StackMemoryRegion::~StackMemoryRegion();unregisterStackRegion(TR::Region &,TR::Region &);TR_Memory
OMR::CriticalSection::CriticalSection(TR::Monitor *);enter();OMR::Monitor
OMR::CriticalSection::CriticalSection(const class OMR::CriticalSection &);enter();OMR::Monitor
OMR::CriticalSection::~CriticalSection();exit();OMR::Monitor
TR_MemoryBase::jitPersistentFree(void *);freePersistentMemory(void *);TR_PersistentMemory
OMR::TreeTop::insertTreeTops(TR::Compilation *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
OMR::TreeTop::insertTreeTopsAfterMe(TR::TreeTop *,TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
OMR::TreeTop::insertTreeTopsBeforeMe(TR::TreeTop *,TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
OMR::TreeTop::operator new(size_t,_Bool,class TR_Memory *);setLastInstruction(TR::Instruction *);OMR::TreeTop
TR_Debug::verifyCFG(TR::ResolvedMethodSymbol *);check();TR_CFGChecker
TR_CFGChecker::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_CFGChecker::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_CFGChecker::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_CFGChecker::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_CFGChecker::TR_CFGChecker(TR::ResolvedMethodSymbol *,class TR_Debug *);init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
TR_CFGChecker::checkForUnreachableCycles();init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
TR_CFGChecker::checkForUnreachableCycles();findReachableBlocks(class TR_BitVector *);OMR::CFG
TR_Debug::newLabelSymbol(TR::LabelSymbol *);Add(void *const &,const long &);CS2::HashTable
TR_Debug::newVariableSizeSymbol(TR::AutomaticSymbol *);Add(void *const &,char *const &);CS2::HashTable
TR_Debug::printStackBacktrace();printStackBacktrace(TR::Compilation *);TR_LinuxCallStackIterator
TR_Debug::printStackBacktraceToTraceLog(TR::Compilation *);printStackBacktrace(TR::Compilation *);TR_LinuxCallStackIterator
TR_Debug::breakOn();breakPoint();OMR::DebugEnv
TR_Debug::debugOnCreate();breakPoint();OMR::DebugEnv
TR_Debug::print(TR::FILE *,TR::SymbolReference *);print(TR::SymbolReference *,class TR_PrettyPrinterString &,_Bool,_Bool);TR_Debug
TR_Debug::print(TR::SymbolReference *,class TR_PrettyPrinterString &,_Bool,_Bool);append(const char *);TR_PrettyPrinterString
TR_Debug::print(TR::FILE *,TR::LabelSymbol *);print(TR::LabelSymbol *,class TR_PrettyPrinterString &);TR_Debug
TR_Debug::print(TR::LabelSymbol *,class TR_PrettyPrinterString &);append(const char *);TR_PrettyPrinterString
TR_Debug::clearNodeChecklist();empty();TR_BitVector
TR_Debug::setupToDumpTreesAndInstructions(const char *);empty();TR_BitVector
TR_Debug::dumpMixedModeDisassembly();print(TR::FILE *,TR::list<TR::Snippet *> &,_Bool);TR_Debug
TR_Debug::dumpInstructionComments(TR::FILE *,TR::Instruction *,_Bool);printCommonDataMiningAnnotations(TR::FILE *,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::Instruction *);print(TR::FILE *,TR::Instruction *,const char *);TR_Debug
TR_Debug::print(TR::FILE *,class TR_GCStackMap *,TR::GCStackAtlas *);print(TR::FILE *,TR::GCRegisterMap *);TR_Debug
TR_Debug::performTransformationImpl(_Bool,const char *);roundAddressEnumerationCounters(uint32_t);TR_Debug
TR_Debug::traceRegisterAssignment(TR::Instruction *,_Bool,_Bool);print(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::nodePrintAllFlags(TR::Node *,class TR_PrettyPrinterString &);append(const char *);TR_PrettyPrinterString
TR_Debug::printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);print(TR::FILE *,TR::LabelSymbol *);TR_Debug
TR_BackingStore::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BackingStore::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BackingStore::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BackingStore::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BackingStore::setIsEmpty();setValue(unsigned char,unsigned char);OMR::FlagsTemplate
TR_BackingStore::setIsOccupied();set(unsigned char);OMR::FlagsTemplate
TR_BackingStore::setFirstHalfIsOccupied();set(unsigned char);OMR::FlagsTemplate
TR_BackingStore::setFirstHalfIsEmpty();reset(unsigned char);OMR::FlagsTemplate
TR_BackingStore::setSecondHalfIsOccupied();set(unsigned char);OMR::FlagsTemplate
TR_BackingStore::setSecondHalfIsEmpty();reset(unsigned char);OMR::FlagsTemplate
TR_BackingStore::setContainsCollectedReference(_Bool);set(unsigned char,_Bool);OMR::FlagsTemplate
TR::DebugCounter::prependDebugCounter(TR::Compilation *,const char *,TR::TreeTop *,int32_t,int8_t,int32_t);aggregateStandardCounters(TR::Compilation *,TR::Node *,const char *,int32_t,int8_t,int32_t);TR::DebugCounterAggregation
TR::DebugCounterAggregation::aggregateDebugCounterInsertions(TR::Compilation *,TR::Node *,class TR::DebugCounter *,int32_t,int8_t,int32_t);getInsertionCounterNames(TR::Compilation *,TR::Node *,const char *(&)[3]);TR::DebugCounter
TR::DebugCounterAggregation::aggregate(class TR::DebugCounter *,int32_t);add(struct TR::DebugCounterAggregation::CounterDelta *);TR_PersistentList
TR::DebugCounterAggregation::aggregateStandardCounters(TR::Compilation *,TR::Node *,const char *,int32_t,int8_t,int32_t);aggregate(TR::DebugCounter *,int32_t);TR::DebugCounterAggregation
TR::DebugCounterAggregation::aggregateStandardCounters(TR::Compilation *,TR::Node *,const char *,int32_t,int8_t,int32_t);aggregateDebugCounterInsertions(TR::Compilation *,TR::Node *,class TR::DebugCounter *,int32_t,int8_t,int32_t);TR::DebugCounterAggregation
TR::DebugCounterAggregation::aggregateStandardCounters(TR::Compilation *,TR::Node *,const char *,int32_t,int8_t,int32_t);aggregateDebugCounterHistogram(TR::Compilation *,TR::Node *,class TR::DebugCounter *,int32_t,int8_t,int32_t);TR::DebugCounterAggregation
TR::DebugCounterGroup::createCounter(const char *,int8_t,class TR_PersistentMemory *);add(class TR::DebugCounter *);TR_PersistentList
TR::DebugCounterGroup::createCounter(const char *,int8_t,class TR_PersistentMemory *);Add(const char *const &,class TR::DebugCounter *const &);CS2::HashTable
TR::DebugCounterGroup::createAggregation(TR::Compilation *);add(class TR::DebugCounterAggregation *);TR_PersistentList
TR_Debug::clearFilters(TR::CompilationFilters *);setDefaultExclude(_Bool);TR::CompilationFilters
TR_Debug::addSamplingPoint(char *,class TR_FilterBST *&,_Bool);setFilterType(char);TR_FilterBST
TR_Debug::scanFilterName(char *,class TR_FilterBST *);setName(char *,int32_t);TR_FilterBST
TR_Debug::scanFilterName(char *,class TR_FilterBST *);setClass(char *);TR_FilterBST
TR_Debug::scanFilterName(char *,class TR_FilterBST *);setSignature(char *);TR_FilterBST
TR_Debug::scanFilterName(char *,class TR_FilterBST *);setFilterType(char);TR_FilterBST
TR_Debug::printFilters();printFilters(TR::CompilationFilters *);TR_Debug
TR_Debug::printFilterTree(class TR_FilterBST *);print(class TR_FilterBST *);TR_Debug
TR_LogTracer::alwaysTraceM(const char *);traceLnFromLogTracer(const char *);TR_Debug
TR_Debug::findLogFile(const char *,TR::Options *,TR::Options *,TR::Options **,int32_t);findLogFile(const char *,TR::Options *,TR::Options **,int32_t,int32_t &);TR_Debug
TR_Debug::printIRTrees(TR::FILE *,const char *,TR::ResolvedMethodSymbol *);empty();TR_BitVector
TR_Debug::printIRTrees(TR::FILE *,const char *,TR::ResolvedMethodSymbol *);printTopLegend(TR::FILE *);TR_Debug
TR_Debug::printIRTrees(TR::FILE *,const char *,TR::ResolvedMethodSymbol *);printBottomLegend(TR::FILE *);TR_Debug
TR_Debug::printIRTrees(TR::FILE *,const char *,TR::ResolvedMethodSymbol *);printSymRefTable(TR::FILE *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::Node *,uint32_t,_Bool);set(int64_t);TR_BitVector
TR_Debug::print(TR::FILE *,TR::Node *,uint32_t,_Bool);printBasicPreNodeInfoAndIndent(TR::FILE *,TR::Node *,uint32_t);TR_Debug
TR_Debug::print(TR::FILE *,TR::Node *,uint32_t,_Bool);printNodeInfo(TR::FILE *,TR::Node *);TR_Debug
TR_Debug::print(TR::FILE *,TR::Node *,uint32_t,_Bool);printBasicPostNodeInfo(TR::FILE *,TR::Node *,uint32_t);TR_Debug
TR_Debug::printWithFixedPrefix(TR::FILE *,TR::Node *,uint32_t,_Bool,_Bool,const char *);setNodeOpCodeLength(int32_t);OMR::Compilation
TR_Debug::printWithFixedPrefix(TR::FILE *,TR::Node *,uint32_t,_Bool,_Bool,const char *);append(const char *);TR_PrettyPrinterString
TR_Debug::printWithFixedPrefix(TR::FILE *,TR::Node *,uint32_t,_Bool,_Bool,const char *);set(int64_t);TR_BitVector
TR_Debug::printWithFixedPrefix(TR::FILE *,TR::Node *,uint32_t,_Bool,_Bool,const char *);printNodeInfo(TR::FILE *,TR::Node *);TR_Debug
TR_Debug::printWithFixedPrefix(TR::FILE *,TR::Node *,uint32_t,_Bool,_Bool,const char *);printBasicPostNodeInfo(TR::FILE *,TR::Node *,uint32_t);TR_Debug
TR_Debug::printVCG(TR::FILE *,TR::CFG *,const char *);empty();TR_BitVector
TR_Debug::printVCG(TR::FILE *,TR::Node *,uint32_t);set(int64_t);TR_BitVector
TR_Debug::printVCG(TR::FILE *,TR::Node *,uint32_t);printNodeInfo(TR::FILE *,TR::Node *);TR_Debug
TR_Debug::verifyTrees(TR::ResolvedMethodSymbol *);set(int64_t);TR_BitVector
TR_Debug::verifyTrees(TR::ResolvedMethodSymbol *);empty();TR_BitVector
TR_Debug::verifyFinalNodeReferenceCounts(TR::ResolvedMethodSymbol *);empty();TR_BitVector
TR_Debug::printDestination(TR::FILE *,TR::TreeTop *);printDestination(TR::TreeTop *,class TR_PrettyPrinterString &);TR_Debug
TR_Debug::printDestination(TR::FILE *,TR::TreeTop *);incrNodeOpCodeLength(int32_t);OMR::Compilation
TR_Debug::printDestination(TR::TreeTop *,class TR_PrettyPrinterString &);append(const char *);TR_PrettyPrinterString
TR_Debug::printNodeInfo(TR::FILE *,TR::Node *);printNodeInfo(TR::Node *,class TR_PrettyPrinterString &,_Bool);TR_Debug
TR_Debug::printNodeInfo(TR::FILE *,TR::Node *);incrNodeOpCodeLength(int32_t);OMR::Compilation
TR_Debug::printNodeInfo(TR::Node *,class TR_PrettyPrinterString &,_Bool);append(const char *);TR_PrettyPrinterString
TR_Debug::print(TR::FILE *,TR::Block *,uint32_t);printNodesInEdgeListIterator(TR::FILE *,TR::CFGEdgeList &,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,class TR_RegionStructure *,uint32_t);printSubGraph(TR::FILE *,class TR_RegionStructure *,uint32_t);TR_Debug
TR_Debug::printSubGraph(TR::FILE *,class TR_RegionStructure *,uint32_t);reset();TR_RegionStructure::Cursor
TR_Debug::print(TR::FILE *,class TR_InductionVariable *,uint32_t);print(TR::FILE *,TR::VPConstraint *);TR_Debug
TR_Debug::printSymRefTable(TR::FILE *,_Bool);setPrevSymRefTabSize(int32_t);OMR::Compilation
TR_Debug::printBasicPreNodeInfoAndIndent(TR::FILE *,TR::Node *,uint32_t);append(const char *);TR_PrettyPrinterString
TR_Debug::printBasicPreNodeInfoAndIndent(TR::FILE *,TR::Node *,uint32_t);setNodeOpCodeLength(int32_t);OMR::Compilation
TR_Debug::printBasicPostNodeInfo(TR::FILE *,TR::Node *,uint32_t);append(const char *);TR_PrettyPrinterString
TR_Debug::printBasicPostNodeInfo(TR::FILE *,TR::Node *,uint32_t);setNodeOpCodeLength(int32_t);OMR::Compilation
TR_Debug::printNodeFlags(TR::FILE *,TR::Node *);incrNodeOpCodeLength(int32_t);OMR::Compilation
TR_Debug::printLoadConst(TR::FILE *,TR::Node *);printLoadConst(TR::Node *,class TR_PrettyPrinterString &);TR_Debug
TR_Debug::printLoadConst(TR::FILE *,TR::Node *);incrNodeOpCodeLength(int32_t);OMR::Compilation
TR_Debug::print(TR::FILE *,class TR_BlockStructure *,uint32_t);printBaseInfo(TR::FILE *,class TR_Structure *,uint32_t);TR_Debug
TR_Debug::print(TR::FILE *,class TR_StructureSubGraphNode *,uint32_t);print(TR::FILE *,class TR_Structure *,uint32_t);TR_Debug
TR_Debug::printVCG(TR::FILE *,class TR_RegionStructure *);printVCG(TR::FILE *,class TR_StructureSubGraphNode *,_Bool);TR_Debug
TR_Debug::printVCG(TR::FILE *,class TR_RegionStructure *);reset();TR_RegionStructure::Cursor
TR_Debug::printVCG(TR::FILE *,class TR_StructureSubGraphNode *,_Bool);set(int64_t);TR_BitVector
TR_LocalAnalysisInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LocalAnalysisInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LocalAnalysisInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LocalAnalysisInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LocalAnalysisInfo::HashTable::~HashTable();deallocate(void *,size_t,const char *);CS2::shared_allocator
TR_LocalAnalysis::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LocalAnalysis::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LocalAnalysis::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LocalAnalysis::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_UseDefInfo::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR_UseDefInfo::TR_UseDef::operator=(class TR_UseDefInfo::TR_UseDef &&);operator=(union TR_UseDefInfo::TR_UseDef::(anonymous at ../../../..//compiler/optimizer/UseDefInfo.hpp:384:7) &&);TR_UseDefInfo::TR_UseDef::(anonymous)
TR_DataFlowAnalysis::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR_BasicDFSetAnalysis<type-parameter-0-0 *>::TR_ContainerNodeNumberPair::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BasicDFSetAnalysis<type-parameter-0-0 *>::TR_ContainerNodeNumberPair::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BasicDFSetAnalysis<type-parameter-0-0 *>::TR_ContainerNodeNumberPair::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BasicDFSetAnalysis<type-parameter-0-0 *>::TR_ContainerNodeNumberPair::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IntersectionBitVectorAnalysis::compose(class TR_BitVector *,class TR_BitVector *);compose(class TR_BitVector *,class TR_BitVector *);TR_IntersectionDFSetAnalysis
TR_BackwardDFSetAnalysis::analyzeBlockStructure(class TR_BlockStructure *,_Bool);setAnalyzedStatus(_Bool);TR_Structure
TR_BackwardDFSetAnalysis::analyzeRegionStructure(class TR_RegionStructure *,_Bool);reset();ListIterator
TR_BackwardDFSetAnalysis::analyzeRegionStructure(class TR_RegionStructure *,_Bool);reset();TR_RegionStructure::Cursor
TR_BackwardDFSetAnalysis::initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);reset();TR_RegionStructure::Cursor
TR_LiveVariableInformation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveVariableInformation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveVariableInformation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LiveVariableInformation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRLiveVariableInformation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRLiveVariableInformation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OSRLiveVariableInformation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OSRLiveVariableInformation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BackwardDFSetAnalysis::analyzeBlockStructure(class TR_BlockStructure *,_Bool);initializeInfo(class TR_BitVector *);TR_BackwardDFSetAnalysis
TR_BackwardDFSetAnalysis::initializeDFSetAnalysis();initializeBasicDFSetAnalysis();TR_BasicDFSetAnalysis
TR_BackwardDFSetAnalysis::initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);add(class TR_BasicDFSetAnalysis<class TR_BitVector *>::TR_ContainerNodeNumberPair *);TR_LinkHead0
TR_BackwardDFSetAnalysis::analyzeBlockStructure(class TR_BlockStructure *,_Bool);initializeInfo(class TR_SingleBitContainer *);TR_BackwardDFSetAnalysis
TR_BackwardDFSetAnalysis::initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);add(class TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::TR_ContainerNodeNumberPair *);TR_LinkHead0
TR_BackwardIntersectionDFSetAnalysis::initializeInfo(class TR_BitVector *);setAll(int64_t);TR_BitVector
TR_BackwardUnionDFSetAnalysis::inverseInitializeInfo(class TR_BitVector *);setAll(int64_t);TR_BitVector
TR_BackwardUnionDFSetAnalysis::inverseInitializeInfo(class TR_SingleBitContainer *);setAll(int64_t);TR_SingleBitContainer
TR_BasicDFSetAnalysis::initializeBasicDFSetAnalysis();resetAnalyzedStatus();TR_Structure
TR_BasicDFSetAnalysis::performAnalysis(class TR_Structure *,_Bool);resetAnalysisInfo();TR_Structure
TR_BasicDFSetAnalysis::performAnalysis(class TR_Structure *,_Bool);resetAnalyzedStatus();TR_Structure
TR_ForwardDFSetAnalysis::analyzeRegionStructure(class TR_RegionStructure *,_Bool);empty();TR_BitVector
TR_ForwardDFSetAnalysis::initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);empty();TR_BitVector
TR_BasicDFSetAnalysis::TR_BasicDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);initialize();TR_BasicDFSetAnalysis
TR_BasicDFSetAnalysis::initializeBasicDFSetAnalysis();allocateContainer(class TR_BitVector **,_Bool,_Bool);TR_BasicDFSetAnalysis
TR_BasicDFSetAnalysis::performAnalysis(class TR_Structure *,_Bool);initializeDFSetAnalysis();TR_BasicDFSetAnalysis
TR_BasicDFSetAnalysis::performAnalysis(class TR_Structure *,_Bool);doAnalysis(class TR_Structure *,_Bool);TR_BasicDFSetAnalysis
TR_BasicDFSetAnalysis::createAnalysisInfo();setFirst(class TR_BasicDFSetAnalysis<class TR_BitVector *>::TR_ContainerNodeNumberPair *);TR_LinkHead0
TR_BasicDFSetAnalysis::clearAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_BitVector *>::ExtraAnalysisInfo *);initializeInfo(class TR_BitVector *);TR_BasicDFSetAnalysis
TR_BasicDFSetAnalysis::initializeGenAndKillSetInfoForStructures();initializeGenAndKillSetInfoPropertyForStructure(class TR_Structure *,_Bool);TR_BasicDFSetAnalysis
TR_BasicDFSetAnalysis::initializeGenAndKillSetInfoForStructures();initializeGenAndKillSetInfoForStructure(class TR_Structure *);TR_BasicDFSetAnalysis
TR_ForwardDFSetAnalysis::TR_ForwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);initialize();TR_ForwardDFSetAnalysis
TR_ForwardDFSetAnalysis::analyzeBlockStructure(class TR_BlockStructure *,_Bool);initializeInfo(class TR_BitVector *);TR_ForwardDFSetAnalysis
TR_ForwardDFSetAnalysis::analyzeBlockZeroStructure(class TR_BlockStructure *);analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR_ForwardDFSetAnalysis
TR_ForwardDFSetAnalysis::initializeDFSetAnalysis();initializeBasicDFSetAnalysis();TR_BasicDFSetAnalysis
TR_ForwardDFSetAnalysis::initializeDFSetAnalysis();allocateContainer(class TR_BitVector **,_Bool,_Bool);TR_BasicDFSetAnalysis
TR_ForwardDFSetAnalysis::initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);addToAnalysisQueue(class TR_StructureSubGraphNode *,uint8_t);TR_DataFlowAnalysis
TR_ForwardDFSetAnalysis::initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &);TR_ForwardDFSetAnalysis
TR_ForwardDFSetAnalysis::initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);add(class TR_BasicDFSetAnalysis<class TR_BitVector *>::TR_ContainerNodeNumberPair *);TR_LinkHead0
TR_BasicDFSetAnalysis::initializeBasicDFSetAnalysis();allocateContainer(class TR_SingleBitContainer **,_Bool,_Bool);TR_BasicDFSetAnalysis
TR_BasicDFSetAnalysis::createAnalysisInfo();setFirst(class TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::TR_ContainerNodeNumberPair *);TR_LinkHead0
TR_BasicDFSetAnalysis::clearAnalysisInfo(struct TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::ExtraAnalysisInfo *);initializeInfo(class TR_SingleBitContainer *);TR_BasicDFSetAnalysis
TR_ForwardDFSetAnalysis::analyzeBlockStructure(class TR_BlockStructure *,_Bool);initializeInfo(class TR_SingleBitContainer *);TR_ForwardDFSetAnalysis
TR_ForwardDFSetAnalysis::initializeDFSetAnalysis();allocateContainer(class TR_SingleBitContainer **,_Bool,_Bool);TR_BasicDFSetAnalysis
TR_ForwardDFSetAnalysis::initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);add(class TR_BasicDFSetAnalysis<class TR_SingleBitContainer *>::TR_ContainerNodeNumberPair *);TR_LinkHead0
TR_CFGSimplifier::simplifyBooleanStore();addEdge(TR::CFGEdge *);OMR::CFG
TR_CFGSimplifier::simplifyBooleanStore();setFrequency(int32_t);TR::CFGNode
TR_CFGSimplifier::simplifyBooleanStore();removeEdge(TR::CFGEdge *);OMR::CFG
TR_CFGSimplifier::simplifyCondCodeBooleanStore(TR::Block *,TR::Node *,TR::Node *,TR::Node *);removeEdge(TR::CFGEdge *);OMR::CFG
TR_CompactLocals::doCompactLocals();setLocalsIG(class TR_InterferenceGraph *);OMR::CodeGenerator
TR_CompactLocals::perform();doCompactLocals();TR_CompactLocals
TR_CopyPropagation::perform();buildDefUseInfo(_Bool);TR_UseDefInfo
TR_CopyPropagation::perform();setUseDefInfo(class TR_UseDefInfo *);OMR::Optimizer
TR_CopyPropagation::adjustUseDefInfo(TR::Node *,TR::Node *,class TR_UseDefInfo *);setUseDefInfo(class TR_UseDefInfo *);OMR::Optimizer
TR_CopyPropagation::isCorrectToPropagate(TR::Node *,TR::Node *,TR::list<TR::Node *> &,TR::SparseBitVector &,int32_t,const class TR_UseDefInfo::BitVector &,class TR_UseDefInfo *);findUseTree(TR::Node *);TR_CopyPropagation
TR_CopyPropagation::isCorrectToReplace(TR::Node *,TR::Node *,const class TR_UseDefInfo::BitVector &,class TR_UseDefInfo *);findUseTree(TR::Node *);TR_CopyPropagation
TR_CopyPropagation::recursive_isRedefinedBetweenStoreTreeAnd(TR::list<TR::Node *> &,TR::SparseBitVector &,TR::Node *,TR::TreeTop *,int32_t,const class TR_UseDefInfo::BitVector &,class TR_UseDefInfo *);setVisitCount(vcount_t);TR::CFGNode
TR_CopyPropagation::isNodeAvailableInBlock(TR::TreeTop *,TR::Node *);incOrResetVisitCount();OMR::Compilation
TR_CopyPropagation::collectUseTrees(TR::TreeTop *,TR::Node *,TR::NodeChecklist &);add(TR::Node *);TR::NodeChecklist
TR_CopyPropagation::findAnchorTree(TR::Node *,TR::Node *);incOrResetVisitCount();OMR::Compilation
TR_ExpressionPropagation::perform();replaceTargetNodeBySourceTree();TR_ExpressionPropagation
TR_ExpressionPropagation::perform();addConversionIfRequired();TR_ExpressionPropagation
TR_ExpressionPropagation::perform();propagateThroughToCommoningPoints();TR_ExpressionPropagation
TR_ExpressionPropagation::replaceTargetNodeBySourceTree();setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_ExpressionPropagation::replaceTargetNodeBySourceTree();decReferenceCount();OMR::Node
TR_DataFlowAnalysis::addToAnalysisQueue(class TR_StructureSubGraphNode *,uint8_t);add(class TR_StructureSubGraphNode *);TR_ScratchList
TR_DataFlowAnalysis::addToAnalysisQueue(class TR_StructureSubGraphNode *,uint8_t);add(unsigned char *);TR_ScratchList
TR_DataFlowAnalysis::removeHeadFromAnalysisQueue();setListHead(ListElement<class TR_StructureSubGraphNode> *);List
TR_DataFlowAnalysis::removeHeadFromAnalysisQueue();setListHead(ListElement<unsigned char> *);List
OMR::TreeInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::TreeInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::TreeInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::TreeInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::DeadTreesElimination::perform();process(TR::TreeTop *,TR::TreeTop *);TR::DeadTreesElimination
TR::DeadTreesElimination::prePerformOnBlocks();deleteAll();List
TR_Delayedness::TR_Delayedness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);performAnalysis(class TR_Structure *,_Bool);TR_BasicDFSetAnalysis
TR_Delayedness::analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);setAll(int64_t);TR_BitVector
TR_Dominators::TR_Dominators(TR::Compilation *,_Bool);findDominators(TR::Block *);TR_Dominators
TR_Dominators::findDominators(TR::Block *);initialize(TR::Block *,struct TR_Dominators::BBInfo *);TR_Dominators
TR_Dominators::initialize(TR::Block *,struct TR_Dominators::BBInfo *);push_front(const value_type &);TR::forward_list
TR_Dominators::eval(int32_t);compress(int32_t);TR_Dominators
TR_DominatorsChk::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DominatorsChk::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DominatorsChk::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DominatorsChk::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DominatorVerifier::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DominatorVerifier::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DominatorVerifier::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DominatorVerifier::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DominatorVerifier::compareWithPredsOf(TR::Block *,TR::Block *);setVisitCount(vcount_t);TR::CFGNode
TR_DominatorVerifier::compareWithPredsOf(TR::Block *,TR::Block *);set(int64_t);TR_BitVector
TR_DominatorsChk::TR_DominatorsChk(TR::Compilation *);findDominators(TR::Block *);TR_DominatorsChk
TR_DominatorsChk::TR_DominatorsChk(TR::Compilation *);findImmediateDominators();TR_DominatorsChk
TR_DominatorsChk::findDominators(TR::Block *);initialize(TR::Block *,TR::Block *);TR_DominatorsChk
TR_DominatorsChk::initialize(TR::Block *,TR::Block *);push_front(const value_type &);TR::forward_list
TR_DominatorsChk::findImmediateDominators();initialize();TR_DominatorsChk
TR_Earliestness::TR_Earliestness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);performAnalysis(class TR_Structure *,_Bool);TR_BasicDFSetAnalysis
TR_Earliestness::analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);setAll(int64_t);TR_BitVector
TR_Earliestness::postInitializationProcessing();setAll(int64_t);TR_BitVector
TR_ExpressionsSimplification::findAndSimplifyInvariantLoopExpressions(class TR_RegionStructure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_ExpressionsSimplification::findAndSimplifyInvariantLoopExpressions(class TR_RegionStructure *);resetInvariance();TR_RegionStructure
TR_ExpressionsSimplification::findAndSimplifyInvariantLoopExpressions(class TR_RegionStructure *);computeInvariantExpressions();TR_RegionStructure
TR_ExpressionsSimplification::findAndSimplifyInvariantLoopExpressions(class TR_RegionStructure *);set(ListBase<class TR::Block> *);ListIterator
TR_ExpressionsSimplification::findAndSimplifyInvariantLoopExpressions(class TR_RegionStructure *);simplifyInvariantLoopExpressions(ListIterator<TR::Block> &);TR_ExpressionsSimplification
TR_ExpressionsSimplification::invalidateCandidates();getBlocks(List<TR::Block> *);TR_RegionStructure
TR_ExpressionsSimplification::invalidateCandidates();removeUnsupportedCandidates();TR_ExpressionsSimplification
TR_ExpressionsSimplification::removeUncertainBlocks(class TR_RegionStructure *,List<TR::Block> *);set(ListBase<class TR::Block> *);ListIterator
TR_ExpressionsSimplification::removeCandidate(TR::Node *,TR::TreeTop *);setVisitCount(vcount_t);OMR::Node
TR_ExpressionsSimplification::simplifyInvariantLoopExpressions(ListIterator<TR::Block> &);invalidateCandidates();TR_ExpressionsSimplification
TR_ExpressionsSimplification::checkForLoad(TR::Node *,TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_ExpressionsSimplification::LoopInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ExpressionsSimplification::LoopInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_ExpressionsSimplification::LoopInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ExpressionsSimplification::LoopInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeParentPair::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentPair::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentPair::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeParentPair::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopTransformer::initializeSymbolsWrittenAndReadExactlyOnce(int32_t,enum TR_BitVectorGrowable);getAllSymRefs(class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);OMR::SymbolReferenceTable
TR_LoopTransformer::initializeSymbolsWrittenAndReadExactlyOnce(int32_t,enum TR_BitVectorGrowable);Clear();CS2::ASparseBitVector
TR_FieldPrivatizer::perform();detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR_FieldPrivatizer
TR_FieldPrivatizer::detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_FieldPrivatizer::placeStoresBackInExits(List<TR::Block> *,List<TR::Block> *);set(ListBase<class TR::Block> *);ListIterator
TR_FieldPrivatizer::placeStoresBackInExit(TR::Block *,_Bool);getStaticFrequency(TR::Block *,int32_t *);OMR::Optimizer
TR_FieldPrivatizer::privatizeFields(TR::Node *,_Bool,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_FieldPrivatizer::detectFieldsThatCannotBePrivatized(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_FieldPrivatizer::elementPrivatization();setVisitCount(vcount_t);TR_FieldPrivatizer
TR_FieldPrivatizer::elementPrivatization();findElementCandidates();TR_FieldPrivatizer
TR_FieldPrivatizer::elementPrivatization();privatizeElementCandidates();TR_FieldPrivatizer
TR_FieldPrivatizer::walkTreeForLoadOrStoreNode(TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_NodeIndexPair::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeIndexPair::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeIndexPair::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeIndexPair::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_StoreTreeInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_StoreTreeInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_StoreTreeInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_StoreTreeInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopStrider::duplicateAdditiveTermNode(int32_t,TR::Node *,TR::DataType);setByteCodeIndex(uint32_t);OMR::Node
TR_LoopStrider::duplicateAdditiveTermNode(int32_t,TR::Node *,TR::DataType);setInlinedSiteIndex(int16_t);OMR::Node
TR_BasicInductionVariable::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BasicInductionVariable::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BasicInductionVariable::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BasicInductionVariable::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PrimaryInductionVariable::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrimaryInductionVariable::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PrimaryInductionVariable::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PrimaryInductionVariable::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DerivedInductionVariable::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DerivedInductionVariable::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_DerivedInductionVariable::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_DerivedInductionVariable::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InductionVariableAnalysis::DeltaInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InductionVariableAnalysis::DeltaInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InductionVariableAnalysis::DeltaInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InductionVariableAnalysis::DeltaInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopUnroller::unroll(TR::Compilation *,class TR_RegionStructure *,class TR_PrimaryInductionVariable *,enum TR_LoopUnroller::UnrollKind,int32_t,int32_t,TR::Optimizer *);unroll(class TR_RegionStructure *,class TR_StructureSubGraphNode *);TR_LoopUnroller
TR_LoopUnroller::unroll(TR::Compilation *,class TR_RegionStructure *,int32_t,int32_t,TR::Optimizer *);unroll(class TR_RegionStructure *,class TR_StructureSubGraphNode *);TR_LoopUnroller
TR_LoopUnroller::isWellFormedLoop(class TR_RegionStructure *,TR::Compilation *,TR::Block *&);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopUnroller::prepareForArrayShadowRenaming(class TR_RegionStructure *);init();List
TR_LoopUnroller::prepareForArrayShadowRenaming(class TR_RegionStructure *);collectInternalPointers();TR_LoopUnroller
TR_LoopUnroller::prepareForArrayShadowRenaming(class TR_RegionStructure *);collectArrayAccesses();TR_LoopUnroller
TR_LoopUnroller::prepareForArrayShadowRenaming(class TR_RegionStructure *);examineArrayAccesses();TR_LoopUnroller
TR_LoopUnroller::collectInternalPointers();getLoopPreheaders(class TR_RegionStructure *,TR_ScratchList<TR::Block> *);TR_LoopUnroller
TR_LoopUnroller::collectArrayAccesses();getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopUnroller::examineNode(TR::Node *,intptrj_t);setVisitCount(vcount_t);OMR::Node
TR_LoopUnroller::unroll(class TR_RegionStructure *,class TR_StructureSubGraphNode *);prepareLoopStructure(class TR_RegionStructure *);TR_LoopUnroller
TR_LoopUnroller::unroll(class TR_RegionStructure *,class TR_StructureSubGraphNode *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopUnroller::unroll(class TR_RegionStructure *,class TR_StructureSubGraphNode *);prepareForArrayShadowRenaming(class TR_RegionStructure *);TR_LoopUnroller
TR_LoopUnroller::unroll(class TR_RegionStructure *,class TR_StructureSubGraphNode *);refineArrayAliasing();TR_LoopUnroller
TR_LoopUnroller::unroll(class TR_RegionStructure *,class TR_StructureSubGraphNode *);modifyOriginalLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);TR_LoopUnroller
TR_LoopUnroller::unrollLoopOnce(class TR_RegionStructure *,class TR_StructureSubGraphNode *,_Bool);cloneBlocksInRegion(class TR_RegionStructure *,_Bool);TR_LoopUnroller
TR_LoopUnroller::unrollLoopOnce(class TR_RegionStructure *,class TR_StructureSubGraphNode *,_Bool);reset();TR_RegionStructure::Cursor
TR_LoopUnroller::unrollLoopOnce(class TR_RegionStructure *,class TR_StructureSubGraphNode *,_Bool);processSwingQueue();TR_LoopUnroller
TR_LoopUnroller::generateSpillLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);cloneBlocksInRegion(class TR_RegionStructure *,_Bool);TR_LoopUnroller
TR_LoopUnroller::generateSpillLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);fixExitEdges(class TR_Structure *,class TR_Structure *,class TR_StructureSubGraphNode *);TR_LoopUnroller
TR_LoopUnroller::generateSpillLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);setIsEntryOfShortRunningLoop();TR_BlockStructure
TR_LoopUnroller::generateSpillLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);addSubNode(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_LoopUnroller::generateSpillLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);processSwingQueue();TR_LoopUnroller
TR_LoopUnroller::modifyOriginalLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);processSwingQueue();TR_LoopUnroller
TR_LoopUnroller::modifyBranchTree(class TR_RegionStructure *,class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *);recursivelyDecReferenceCount();OMR::Node
TR_LoopUnroller::cloneBlocksInRegion(class TR_RegionStructure *,_Bool);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopUnroller::cloneBlockStructure(class TR_BlockStructure *);setAsLoopInvariantBlock(_Bool);TR_BlockStructure
TR_LoopUnroller::cloneBlockStructure(class TR_BlockStructure *);setNestingDepth(int16_t);TR_Structure
TR_LoopUnroller::cloneBlockStructure(class TR_BlockStructure *);setMaxNestingDepth(int16_t);TR_Structure
TR_LoopUnroller::cloneRegionStructure(class TR_RegionStructure *);setAsCanonicalizedLoop(_Bool);TR_RegionStructure
TR_LoopUnroller::cloneRegionStructure(class TR_RegionStructure *);setContainsInternalCycles(_Bool);TR_RegionStructure
TR_LoopUnroller::cloneRegionStructure(class TR_RegionStructure *);reset();TR_RegionStructure::Cursor
TR_LoopUnroller::cloneRegionStructure(class TR_RegionStructure *);setNestingDepth(int16_t);TR_Structure
TR_LoopUnroller::redirectBackEdgeToExitDestination(class TR_RegionStructure *,class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *,_Bool);addEdgeForSpillLoop(class TR_RegionStructure *,TR::CFGEdge *,class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *,_Bool,enum TR_LoopUnroller::EdgeContext,_Bool);TR_LoopUnroller
TR_LoopUnroller::fixExitEdges(class TR_Structure *,class TR_Structure *,class TR_StructureSubGraphNode *);processSwingQueue();TR_LoopUnroller
TR_LoopUnroller::swingBlocks(TR::Block *,TR::Block *);add(struct TR_LoopUnroller::SwingPair *);List
TR_LoopUnroller::processSwingQueue();deleteAll();List
TR_LoopUnroller::prepareLoopStructure(class TR_RegionStructure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_GeneralLoopUnroller::perform();collectNonColdInnerLoops(class TR_RegionStructure *,List<class TR_RegionStructure> &);TR_GeneralLoopUnroller
TR_GeneralLoopUnroller::weighNaturalLoop(class TR_RegionStructure *,class TR_LoopUnroller::UnrollKind &,int32_t &,int32_t &,int32_t &);incVisitCount();OMR::Compilation
TR_GeneralLoopUnroller::weighNaturalLoop(class TR_RegionStructure *,class TR_LoopUnroller::UnrollKind &,int32_t &,int32_t &,int32_t &);gatherStatistics(class TR_Structure *,int32_t &,int32_t &,int32_t &,int32_t &,class LoopWeightProbe &);TR_GeneralLoopUnroller
TR_GeneralLoopUnroller::weighNaturalLoop(class TR_RegionStructure *,class TR_LoopUnroller::UnrollKind &,int32_t &,int32_t &,int32_t &);Andc(const class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &,class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);CS2::ABitVector
TR_GeneralLoopUnroller::weighNaturalLoop(class TR_RegionStructure *,class TR_LoopUnroller::UnrollKind &,int32_t &,int32_t &,int32_t &);And(const class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &,class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);CS2::ABitVector
TR_GeneralLoopUnroller::countNodesAndSubscripts(TR::Node *,int32_t &,int32_t &,class LoopWeightProbe &);setVisitCount(vcount_t);OMR::Node
TR_GlobalAnticipatability::TR_GlobalAnticipatability(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);initializeBlockInfo(_Bool);TR_BasicDFSetAnalysis
TR_GlobalAnticipatability::analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);killBasedOnSuccTransparency(TR::Block *);TR_GlobalAnticipatability
TR_GlobalAnticipatability::isExceptionalInBlock(TR::Node *,int32_t,ContainerType *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_GlobalAnticipatability::postInitializationProcessing();allocateContainer(class TR_BitVector **,_Bool,_Bool);TR_BasicDFSetAnalysis
TR_LiveRangeSplitter::splitLiveRanges();splitLiveRanges(class TR_StructureSubGraphNode *);TR_LiveRangeSplitter
TR_LiveRangeSplitter::replaceAutosUsedIn(TR::TreeTop *,TR::Node *,TR::Node *,TR::Block *,List<TR::Block> *,List<TR::Block> *,vcount_t,int32_t,SymRefCandidateMap &,struct TR_SymRefCandidatePair **,class TR_BitVector *,class TR_BitVector *,class TR_StructureSubGraphNode *,TR::Block *);setVisitCount(vcount_t);OMR::Node
TR_LiveRangeSplitter::placeStoresInLoopExits(TR::Node *,class TR_StructureSubGraphNode *,List<TR::Block> *,TR::SymbolReference *,TR::SymbolReference *);collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR_Structure
TR_LiveRangeSplitter::splitAndFixPreHeader(TR::SymbolReference *,struct TR_SymRefCandidatePair **,TR::Block *,TR::Node *);setUseDefInfo(class TR_UseDefInfo *);OMR::Optimizer
TR_LiveRangeSplitter::splitAndFixPreHeader(TR::SymbolReference *,struct TR_SymRefCandidatePair **,TR::Block *,TR::Node *);setValueNumberInfo(class TR_ValueNumberInfo *);OMR::Optimizer
TR_LiveRangeSplitter::splitAndFixPreHeader(TR::SymbolReference *,struct TR_SymRefCandidatePair **,TR::Block *,TR::Node *);setAliasSetsAreValid(_Bool,_Bool);OMR::Optimizer
TR_LiveRangeSplitter::splitAndFixPreHeader(TR::SymbolReference *,struct TR_SymRefCandidatePair **,TR::Block *,TR::Node *);requestOpt(OMR::Optimizations,_Bool,TR::Block *);OMR::Optimization
TR_LiveRangeSplitter::splitAndFixPreHeader(TR::SymbolReference *,struct TR_SymRefCandidatePair **,TR::Block *,TR::Node *);appendStoreToBlock(TR::SymbolReference *,TR::SymbolReference *,TR::Block *,TR::Node *);TR_LiveRangeSplitter
TR_LiveRangeSplitter::appendStoreToBlock(TR::SymbolReference *,TR::SymbolReference *,TR::Block *,TR::Node *);join(TR::TreeTop *);OMR::TreeTop
TR_LiveRangeSplitter::prependStoreToBlock(TR::SymbolReference *,TR::SymbolReference *,TR::Block *,TR::Node *);join(TR::TreeTop *);OMR::TreeTop
TR_GlobalRegisterAllocator::perform();setGRACompleted();OMR::CodeGenerator
TR_GlobalRegisterAllocator::perform();walkTreesAndCollectSymbolDataTypes();TR_GlobalRegisterAllocator
TR_GlobalRegisterAllocator::perform();setResetExitsGRA(class TR_BitVector *);OMR::Optimizer
TR_GlobalRegisterAllocator::perform();setSeenBlocksGRA(class TR_BitVector *);OMR::Optimizer
TR_GlobalRegisterAllocator::perform();setSuccessorBitsGRA(class TR_BitVector *);OMR::Optimizer
TR_GlobalRegisterAllocator::perform();deleteAll();List
TR_GlobalRegisterAllocator::perform();init(class TR_Memory *,uint32_t,_Bool,enum TR_AllocationKind);TR_Array
TR_GlobalRegisterAllocator::perform();setCachedExtendedBBInfoValid(_Bool);OMR::Optimizer
TR_GlobalRegisterAllocator::perform();setLiveLocals(class TR_BitVector *);OMR::CodeGenerator
TR_GlobalRegisterAllocator::perform();setUseDefInfo(class TR_UseDefInfo *);OMR::Optimizer
TR_GlobalRegisterAllocator::perform();setValueNumberInfo(class TR_ValueNumberInfo *);OMR::Optimizer
TR_GlobalRegisterAllocator::perform();releaseCandidates();TR_RegisterCandidates
TR_GlobalRegisterAllocator::perform();Clear();CS2::ASparseBitVector
TR_GlobalRegisterAllocator::walkTreesAndCollectSymbolDataTypes();incOrResetVisitCount();OMR::Compilation
TR_GlobalRegisterAllocator::visitNodeForDataType(TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegisterAllocator::findLoopAutoRegisterCandidates();findLoopsAndCorrespondingAutos(class TR_StructureSubGraphNode *,vcount_t,SymRefCandidateMap &);TR_GlobalRegisterAllocator
TR_GlobalRegisterAllocator::markAutosUsedIn(TR::Node *,TR::Node *,TR::Node *,TR::Node **,TR::Block *,List<TR::Block> *,vcount_t,int32_t,SymRefCandidateMap &,class TR_BitVector *,class TR_BitVector *,_Bool);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegisterAllocator::signExtendAllDefNodes(TR::Node *,List<TR::Node> *);add(class TR::Node *);List
TR_GlobalRegisterAllocator::transformBlock(TR::TreeTop *);deleteAll();List
TR_GlobalRegisterAllocator::transformBlock(TR::TreeTop *);empty();TR_BitVector
TR_GlobalRegisterAllocator::transformBlock(TR::TreeTop *);setFirst(struct StoresInBlockInfo *);TR_LinkHead0
TR_GlobalRegisterAllocator::transformNode(TR::Node *,TR::Node *,int32_t,TR::TreeTop *,TR::Block *&,TR_Array<class TR_GlobalRegister> &,class TR_NodeMappings *);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegisterAllocator::transformBlockExit(TR::TreeTop *,TR::Node *,TR::Block *,TR_Array<class TR_GlobalRegister> &,TR::Block *);prepareForBlockExit(TR::TreeTop *&,TR::Node *&,TR::Block *,TR_Array<class TR_GlobalRegister> &,TR::Block *,TR_Array<TR::Node *> &);TR_GlobalRegisterAllocator
TR_GlobalRegisterAllocator::transformBlockExit(TR::TreeTop *,TR::Node *,TR::Block *,TR_Array<class TR_GlobalRegister> &,TR::Block *);addGlRegDepToExit(TR_Array<TR::Node *> &,TR::Node *,TR_Array<class TR_GlobalRegister> &,TR::Block *);TR_GlobalRegisterAllocator
TR_GlobalRegisterAllocator::addRegLoadsToEntry(TR::TreeTop *,TR_Array<class TR_GlobalRegister> &,TR::Block *);setCurrentBlock(TR::Block *);OMR::Compilation
TR_GlobalRegisterAllocator::addRegLoadsToEntry(TR::TreeTop *,TR_Array<class TR_GlobalRegister> &,TR::Block *);deleteAll();List
TR_GlobalRegisterAllocator::addRegLoadsToEntry(TR::TreeTop *,TR_Array<class TR_GlobalRegister> &,TR::Block *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_GlobalRegisterAllocator::addRegLoadsToEntry(TR::TreeTop *,TR_Array<class TR_GlobalRegister> &,TR::Block *);setNumChildren(uint16_t);OMR::Node
TR_GlobalRegisterAllocator::addGlRegDepToExit(TR_Array<TR::Node *> &,TR::Node *,TR_Array<class TR_GlobalRegister> &,TR::Block *);deleteAll();List
TR_GlobalRegisterAllocator::markCandidateForReloadInSuccessors(int32_t,class TR_GlobalRegister *,class TR_GlobalRegister *,TR::Block *,_Bool);setUnavailable(_Bool);TR_GlobalRegister
TR_GlobalRegisterAllocator::markCandidateForReloadInSuccessors(int32_t,class TR_GlobalRegister *,class TR_GlobalRegister *,TR::Block *,_Bool);setUnavailableResolved(_Bool);TR_GlobalRegister
TR_GlobalRegisterAllocator::reloadNonRegStarVariables(TR::TreeTop *,TR::Node *,TR::Block *,_Bool);getAliases(class CS2::ASparseBitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);TR_AliasSetInterface
TR_GlobalRegisterAllocator::extendBlock(TR::Block *,TR::Block *);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegisterAllocator::extendBlock(TR::Block *,TR::Block *);setIsExtensionOfPreviousBlock(_Bool);OMR::Block
TR_GlobalRegisterAllocator::extendBlock(TR::Block *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_GlobalRegisterAllocator::extendBlock(TR::Block *,TR::Block *);setCachedExtendedBBInfoValid(_Bool);OMR::Optimizer
TR_GlobalRegisterAllocator::createBlock(TR::Block *,TR::Block *);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegisterAllocator::createBlock(TR::Block *,TR::Block *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_GlobalRegisterAllocator::createBlock(TR::Block *,TR::Block *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_GlobalRegisterAllocator::createBlock(TR::Block *,TR::Block *);removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
TR_GlobalRegisterAllocator::appendGotoBlock(TR::Block *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_GlobalRegisterAllocator::restoreOriginalSymbol(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegisterAllocator::createStoresForSignExt(TR::Node *,TR::Node *,TR::Node *,TR::TreeTop *,TR::Node **,TR::Block *,List<TR::Block> *,vcount_t,_Bool);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegisterAllocator::populateSymRefNodes(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegister::optimalPlacementForStore(TR::Block *,TR::Compilation *);getStaticFrequency(TR::Block *,int32_t *);OMR::Optimizer
TR_GlobalRegister::copyCurrentRegisterCandidate(class TR_GlobalRegister *);setValue(TR::Node *);TR_GlobalRegister
TR_GlobalRegister::copyCurrentRegisterCandidate(class TR_GlobalRegister *);setAutoContainsRegisterValue(_Bool);TR_GlobalRegister
TR_GlobalRegister::createStoreFromRegister(vcount_t,TR::TreeTop *,int32_t,TR::Compilation *,_Bool);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegister::createStoreFromRegister(vcount_t,TR::TreeTop *,int32_t,TR::Compilation *,_Bool);addStore(TR::TreeTop *);TR_RegisterCandidate
TR_GlobalRegister::createStoreFromRegister(vcount_t,TR::TreeTop *,int32_t,TR::Compilation *,_Bool);setAutoContainsRegisterValue(_Bool);TR_GlobalRegister
TR_GlobalRegister::createStoreFromRegister(vcount_t,TR::TreeTop *,int32_t,TR::Compilation *,_Bool);setExtendedLiveRange(_Bool);TR_RegisterCandidate
TR_GlobalRegister::createStoreToRegister(TR::TreeTop *,TR::Node *,vcount_t,TR::Compilation *,class TR_GlobalRegisterAllocator *);setRegLoadStoreSymbolReference(TR::SymbolReference *);OMR::Node
TR_GlobalRegister::createStoreToRegister(TR::TreeTop *,TR::Node *,vcount_t,TR::Compilation *,class TR_GlobalRegisterAllocator *);setVisitCount(vcount_t);OMR::Node
TR_GlobalRegister::createStoreToRegister(TR::TreeTop *,TR::Node *,vcount_t,TR::Compilation *,class TR_GlobalRegisterAllocator *);setValue(TR::Node *);TR_GlobalRegister
TR_GlobalRegister::createStoreToRegister(TR::TreeTop *,TR::Node *,vcount_t,TR::Compilation *,class TR_GlobalRegisterAllocator *);setAutoContainsRegisterValue(_Bool);TR_GlobalRegister
TR_GlobalRegister::createLoadFromRegister(TR::Node *,TR::Compilation *);setRegLoadStoreSymbolReference(TR::SymbolReference *);OMR::Node
TR_GlobalRegister::createLoadFromRegister(TR::Node *,TR::Compilation *);setValue(TR::Node *);TR_GlobalRegister
switchSuccessorIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
switchSuccessorIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
switchSuccessorIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
switchSuccessorIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
multipleJumpSuccessorIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
multipleJumpSuccessorIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
multipleJumpSuccessorIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
multipleJumpSuccessorIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::ILOpCode::operator=(const class TR::ILOpCode &);operator=(const class OMR::ILOpCode &);OMR::ILOpCode
TR_InlineBlocks::addBlock(TR::Block *);add(class TR_InlineBlock *);List
TR_InlineBlocks::addExceptionBlock(TR::Block *);add(class TR_InlineBlock *);List
TR_CallStack::commit();deleteAll();List
TR_CallStack::initializeControlFlowInfo(TR::ResolvedMethodSymbol *);findLoopingBlocks(class TR_BitVector &);OMR::CFG
TR_CallStack::addAutomatic(TR::AutomaticSymbol *);add(class TR::AutomaticSymbol *);List
TR_CallStack::addTemp(TR::SymbolReference *);add(class TR::SymbolReference *);List
TR_CallStack::addInjectedBasicBlockTemp(TR::SymbolReference *);add(class TR::SymbolReference *);List
TR_CallStack::makeTempsAvailable(List<TR::SymbolReference> &);makeTempsAvailable(List<TR::SymbolReference> &,List<TR::SymbolReference> &);TR_CallStack
TR_CallStack::makeBasicBlockTempsAvailable(List<TR::SymbolReference> &);makeTempsAvailable(List<TR::SymbolReference> &,List<TR::SymbolReference> &);TR_CallStack
TR_DirectCallSite::findCallSiteTarget(class TR_CallStack *,class TR_InlinerBase *);addTarget(class TR_Memory *,class TR_InlinerBase *,struct TR_VirtualGuardSelection *,class TR_ResolvedMethod *,class TR_OpaqueClassBlock *,enum TR_AllocationKind,float);TR_CallSite
TR_IndirectCallSite::findCallTargetUsingArgumentPreexistence(class TR_InlinerBase *);addTarget(class TR_Memory *,class TR_InlinerBase *,struct TR_VirtualGuardSelection *,class TR_ResolvedMethod *,class TR_OpaqueClassBlock *,enum TR_AllocationKind,float);TR_CallSite
TR_InlinerTracer::partialTraceM(const char *);traceLnFromLogTracer(const char *);TR_Debug
TR_InlinerTracer::dumpCallGraphs(TR_LinkHead<struct TR_CallTarget> *);alwaysTraceM(const char *);TR_LogTracer
TR_TrivialInliner::perform();generateAccurateNodeCount();OMR::Compilation
TR_TrivialInliner::perform();setSupressEarlyInlining(_Bool);OMR::Compilation
TR_InlinerBase::setInlineThresholds(TR::ResolvedMethodSymbol *);determineInliningHeuristic(TR::ResolvedMethodSymbol *);OMR_InlinerPolicy
TR_InlinerBase::setInlineThresholds(TR::ResolvedMethodSymbol *);adjustCallerWeightLimit(TR::ResolvedMethodSymbol *,int &);OMR_InlinerUtil
TR_InlinerBase::setInlineThresholds(TR::ResolvedMethodSymbol *);adjustMethodByteCodeSizeThreshold(TR::ResolvedMethodSymbol *,int &);OMR_InlinerUtil
TR_InlinerBase::setInlineThresholds(TR::ResolvedMethodSymbol *);refineInliningThresholds(TR::Compilation *,int32_t &,int32_t &,int32_t &,int32_t &,int32_t &,int32_t &,int32_t);OMR_InlinerUtil
TR_InlinerBase::performInlining(TR::ResolvedMethodSymbol *);cleanup(TR::ResolvedMethodSymbol *,_Bool);TR_InlinerBase
TR_InlinerBase::setSizeThreshold(uint32_t);alwaysTraceM(const char *);TR_LogTracer
TR_InlinerBase::getSymbolAndFindInlineTargets(class TR_CallStack *,struct TR_CallSite *,_Bool);removeAllTargets(class TR_InlinerTracer *,enum TR_InlinerFailureReason);TR_CallSite
TR_InlinerBase::TR_InlinerBase(TR::Optimizer *,TR::Optimization *);setInliner(class TR_InlinerBase *);OMR_InlinerHelper
TR_InlinerBase::TR_InlinerBase(TR::Optimizer *,TR::Optimization *);setInlineVirtuals(_Bool);TR_InlinerBase
TR_InlinerBase::TR_InlinerBase(TR::Optimizer *,TR::Optimization *);init();List
TR_InlinerBase::TR_InlinerBase(TR::Optimizer *,TR::Optimization *);setInlineThresholds(TR::ResolvedMethodSymbol *);TR_InlinerBase
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);setMaxFrequency(int32_t);OMR::CFG
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);setMaxEdgeFrequency(int32_t);OMR::CFG
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);calleeTreeTopPreMergeActions(TR::ResolvedMethodSymbol *,struct TR_CallTarget *);OMR_InlinerUtil
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);incCurrentNumberOfNodes(int32_t);TR_InlinerBase
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);computeMethodBranchProfileInfo(TR::Block *,struct TR_CallTarget *,TR::ResolvedMethodSymbol *);OMR_InlinerUtil
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);incInlinedCalls();OMR::Compilation
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);initialize(class TR_CallStack *);TR_ParameterToArgumentMapper
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);printMapping();TR_ParameterToArgumentMapper
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);setCurrentBlock(TR::Block *);OMR::Compilation
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);transform();TR_TransformInlinedFunction
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);join(TR::TreeTop *);OMR::TreeTop
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);setStructure(class TR_Structure *);OMR::CFG
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);movePredecessors(class TR::CFGNode *);TR::CFGNode
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);inheritBlockInfo(TR::Block *,_Bool);OMR::Block
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);makeTempsAvailable(List<TR::SymbolReference> &);TR_CallStack
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);set(ListBase<class TR::SymbolReference> *);ListIterator
TR_InlinerBase::inlineCallTarget2(class TR_CallStack *,struct TR_CallTarget *,TR::TreeTop **,_Bool,int32_t);setFirstTreeTop(TR::TreeTop *);OMR::ResolvedMethodSymbol
TR_InlinerBase::inlineFromGraph(class TR_CallStack *,struct TR_CallTarget *,class TR_InnerPreexistenceInfo *);commit();TR_CallStack
TR_InlinerBase::findAndUpdateCallSiteInGraph(class TR_CallStack *,TR_ByteCodeInfo &,TR::TreeTop *,TR::Node *,TR::Node *,struct TR_CallTarget *);getSymbolAndFindInlineTargets(class TR_CallStack *,struct TR_CallSite *,_Bool);TR_InlinerBase
TR_InlinerBase::cleanup(TR::ResolvedMethodSymbol *,_Bool);resetInlineDepth();OMR::Compilation
TR_InlinerBase::cleanup(TR::ResolvedMethodSymbol *,_Bool);clearAvailableAutos();OMR::SymbolReferenceTable
TR_InlinerBase::exceedsSizeThreshold(struct TR_CallSite *,int,TR::Block *,TR_ByteCodeInfo &,int32_t,class TR_ResolvedMethod *,class TR_ResolvedMethod *,TR::Node *,_Bool);getBorderFrequencies(int32_t &,int32_t &,class TR_ResolvedMethod *,TR::Node *);TR_InlinerBase
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);join(TR::TreeTop *);OMR::TreeTop
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);copyExceptionSuccessors(TR::CFGNode *,TR::CFGNode *,_Bool (*)(TR::CFGEdge *));OMR::CFG
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);refineInlineGuard(TR::Node *,TR::Block *&,TR::Block *&,_Bool &,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::TreeTop *&,TR::Block *);OMR_InlinerUtil
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);append(TR::TreeTop *);OMR::Block
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);setIsTheVirtualCallNodeForAGuardedInlinedCall();OMR::Node
TR_InlinerBase::addGuardForVirtual(TR::ResolvedMethodSymbol *,TR::ResolvedMethodSymbol *,TR::TreeTop *,TR::Node *,class TR_OpaqueClassBlock *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,class TR_TransformInlinedFunction &,List<TR::SymbolReference> &,struct TR_VirtualGuardSelection *,TR::TreeTop **,struct TR_CallTarget *);rematerializeCallArguments(class TR_TransformInlinedFunction &,struct TR_VirtualGuardSelection *,TR::Node *,TR::Block *,TR::TreeTop *);TR_InlinerBase
TR_InlinerBase::addAdditionalGuard(TR::Node *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *,TR::Block *,TR::Block *,TR::Block *,enum TR_VirtualGuardKind,enum TR_VirtualGuardTestType,_Bool,TR::CFG *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_InlinerBase::addAdditionalGuard(TR::Node *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *,TR::Block *,TR::Block *,TR::Block *,enum TR_VirtualGuardKind,enum TR_VirtualGuardTestType,_Bool,TR::CFG *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_InlinerBase::addAdditionalGuard(TR::Node *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *,TR::Block *,TR::Block *,TR::Block *,enum TR_VirtualGuardKind,enum TR_VirtualGuardTestType,_Bool,TR::CFG *);copyExceptionSuccessors(TR::CFGNode *,TR::CFGNode *,_Bool (*)(TR::CFGEdge *));OMR::CFG
TR_InlinerBase::addAdditionalGuard(TR::Node *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *,TR::Block *,TR::Block *,TR::Block *,enum TR_VirtualGuardKind,enum TR_VirtualGuardTestType,_Bool,TR::CFG *);removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
TR_InlinerBase::addAdditionalGuard(TR::Node *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *,TR::Block *,TR::Block *,TR::Block *,enum TR_VirtualGuardKind,enum TR_VirtualGuardTestType,_Bool,TR::CFG *);setDoNotProfile();OMR::Block
TR_InlinerBase::addAdditionalGuard(TR::Node *,TR::ResolvedMethodSymbol *,class TR_OpaqueClassBlock *,TR::Block *,TR::Block *,TR::Block *,enum TR_VirtualGuardKind,enum TR_VirtualGuardTestType,_Bool,TR::CFG *);join(TR::TreeTop *);OMR::TreeTop
TR_InlinerBase::replaceCallNodeReferences(TR::Node *,TR::Node *,uint32_t,TR::Node *,TR::Node *,rcount_t &);setVisitCount(vcount_t);OMR::Node
TR_DumbInliner::inlineCallTargets(TR::ResolvedMethodSymbol *,class TR_CallStack *,class TR_InnerPreexistenceInfo *);commit();TR_CallStack
TR_DumbInliner::analyzeCallSite(class TR_CallStack *,TR::TreeTop *,TR::Node *,TR::Node *);getSymbolAndFindInlineTargets(class TR_CallStack *,struct TR_CallSite *,_Bool);TR_InlinerBase
TR_InlineCall::inlineCall(TR::TreeTop *,class TR_OpaqueClassBlock *,_Bool,class TR_PrexArgInfo *,int32_t);getSymbolAndFindInlineTargets(class TR_CallStack *,struct TR_CallSite *,_Bool);TR_InlinerBase
TR_InlineCall::inlineCall(TR::TreeTop *,class TR_OpaqueClassBlock *,_Bool,class TR_PrexArgInfo *,int32_t);commit();TR_CallStack
TR_ParameterToArgumentMapper::initialize(class TR_CallStack *);createParmMap(TR::ResolvedMethodSymbol *,TR_LinkHead<struct TR_ParameterMapping> &);TR_InlinerBase
TR_ParameterToArgumentMapper::initialize(class TR_CallStack *);lookForModifiedParameters();TR_ParameterToArgumentMapper
TR_TransformInlinedFunction::transform();incVisitCount();OMR::Compilation
TR_TransformInlinedFunction::transform();mapOSRCallSiteRematTable(uint32_t);TR_ParameterToArgumentMapper
TR_TransformInlinedFunction::transformNode(TR::Node *,TR::Node *,uint32_t);setVisitCount(vcount_t);OMR::Node
TR_TransformInlinedFunction::transformReturn(TR::Node *,TR::Node *);add(class TR::TreeTop *);List
TR_HandleInjectedBasicBlock::findAndReplaceReferences(TR::TreeTop *,TR::Block *,TR::Block *);incVisitCount();OMR::Compilation
TR_HandleInjectedBasicBlock::findAndReplaceReferences(TR::TreeTop *,TR::Block *,TR::Block *);printNodesWithMultipleReferences();TR_HandleInjectedBasicBlock
TR_HandleInjectedBasicBlock::add(TR::TreeTop *,TR::Node *);add(struct TR_HandleInjectedBasicBlock::MultiplyReferencedNode *);TR_LinkHead0
TR_HandleInjectedBasicBlock::replace(struct TR_HandleInjectedBasicBlock::MultiplyReferencedNode *,TR::TreeTop *,TR::Node *,uint32_t);decReferenceCount();OMR::Node
TR_HandleInjectedBasicBlock::replace(struct TR_HandleInjectedBasicBlock::MultiplyReferencedNode *,TR::TreeTop *,TR::Node *,uint32_t);setChild(int32_t,TR::Node *);OMR::Node
RematTools::walkNodesCalculatingRematSafety(TR::Compilation *,TR::Node *,TR::SparseBitVector &,TR::SparseBitVector &,TR::SparseBitVector &,_Bool,TR::SparseBitVector &);getAliasesAndUnionWith(TR::SparseBitVector &);TR_AliasSetInterface
RematTools::getNextTreeTop(TR::TreeTop *&,class TR_BitVector *,TR::Block *);reset(int64_t,_Bool);TR_BitVector
TR_LoopStrider::perform();detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR_LoopStrider
TR_LoopStrider::detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopStrider::examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);setVisitCount(vcount_t);OMR::Node
TR_LoopStrider::identifyExpressionLinearInInductionVariable(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopStrider::foundLoad(TR::TreeTop *,TR::Node *,int32_t,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopStrider::foundValue(TR::Node *,int32_t,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopStrider::changeLoopCondition(class TR_BlockStructure *,_Bool,int32_t,TR::Node *);setLocalIndex(scount_t);OMR::Node
TR_LoopStrider::changeLoopCondition(class TR_BlockStructure *,_Bool,int32_t,TR::Node *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopStrider::placeStore(TR::Node *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopStrider::populateLinearEquation(TR::Node *,int32_t,int32_t,int32_t,TR::Node *);setAdditiveTermNode(TR::Node *,int32_t);TR_LoopStrider
TR_LoopStrider::morphExpressionLinearInInductionVariable(TR::Node *,int32_t,TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopStrider::walkTreesAndFixUseDefs(class TR_Structure *,TR::SymbolReference *,TR::NodeChecklist &);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_LoopStrider::walkTreesAndFixUseDefs(class TR_Structure *,TR::SymbolReference *,TR::NodeChecklist &);decReferenceCount();OMR::Node
TR_LoopStrider::walkTreesAndFixUseDefs(class TR_Structure *,TR::SymbolReference *,TR::NodeChecklist &);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopStrider::walkTreesAndFixUseDefs(class TR_Structure *,TR::SymbolReference *,TR::NodeChecklist &);replaceLoadsInStructure(class TR_Structure *,int32_t,TR::Node *,TR::SymbolReference *,TR::NodeChecklist &,TR::NodeChecklist &);TR_LoopStrider
TR_LoopStrider::walkTreesAndFixUseDefs(class TR_Structure *,TR::SymbolReference *,TR::NodeChecklist &);createConstraintsForNewInductionVariable(class TR_Structure *,TR::SymbolReference *,TR::SymbolReference *);TR_LoopStrider
TR_LoopStrider::replaceLoadsInSubtree(TR::Node *,int32_t,TR::Node *,TR::SymbolReference *,TR::NodeChecklist &,TR::NodeChecklist &);add(TR::Node *);TR::NodeChecklist
TR_LoopStrider::replaceLoadsInSubtree(TR::Node *,int32_t,TR::Node *,TR::SymbolReference *,TR::NodeChecklist &,TR::NodeChecklist &);widenComparison(TR::Node *,int32_t,TR::Node *,TR::NodeChecklist &);TR_LoopStrider
TR_LoopStrider::widenComparison(TR::Node *,int32_t,TR::Node *,TR::NodeChecklist &);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_LoopStrider::widenComparison(TR::Node *,int32_t,TR::Node *,TR::NodeChecklist &);decReferenceCount();OMR::Node
TR_LoopStrider::eliminateSignExtensionsInSubtree(TR::Node *,TR::NodeChecklist &,TR::NodeChecklist &,SignExtMemo &);add(TR::Node *);TR::NodeChecklist
TR_LoopStrider::signExtendBinOp(TR::ILOpCodes,TR::Node *,TR::NodeChecklist &,SignExtMemo &);setFlags(flags32_t);OMR::Node
TR_LoopStrider::transmuteDescendantsIntoTruncations(TR::Node *,TR::Node *);setNumChildren(uint16_t);OMR::Node
TR_LoopStrider::transmuteDescendantsIntoTruncations(TR::Node *,TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_LoopStrider::detectLoopsForIndVarConversion(class TR_Structure *,TR::NodeChecklist &);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopStrider::convertIV(TR::Node *,TR::TreeTop *,int32_t,int32_t,TR::ILOpCodes);insertBefore(TR::TreeTop *);OMR::TreeTop
TR_LoopStrider::placeInitializationTreeInLoopInvariantBlock(class TR_BlockStructure *,TR::SymbolReference *,TR::SymbolReference *,int32_t,TR::SymbolReferenceTable *);setLocalIndex(scount_t);OMR::Node
TR_LoopStrider::placeInitializationTreeInLoopInvariantBlock(class TR_BlockStructure *,TR::SymbolReference *,TR::SymbolReference *,int32_t,TR::SymbolReferenceTable *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopStrider::placeNewInductionVariableIncrementTree(class TR_BlockStructure *,TR::SymbolReference *,TR::SymbolReference *,int32_t,TR::SymbolReferenceTable *,TR::Node *,TR::Node *,TR::TreeTop *,TR::Node *,_Bool);setLocalIndex(scount_t);OMR::Node
TR_LoopStrider::placeNewInductionVariableIncrementTree(class TR_BlockStructure *,TR::SymbolReference *,TR::SymbolReference *,int32_t,TR::SymbolReferenceTable *,TR::Node *,TR::Node *,TR::TreeTop *,TR::Node *,_Bool);join(TR::TreeTop *);OMR::TreeTop
TR_LoopStrider::reassociateAndHoistComputations(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopStrider::duplicateMulTermNode(int32_t,TR::Node *,TR::DataType);setByteCodeIndex(uint32_t);OMR::Node
TR_LoopStrider::duplicateMulTermNode(int32_t,TR::Node *,TR::DataType);setInlinedSiteIndex(int16_t);OMR::Node
TR_LoopStrider::genLoad(TR::Node *,TR::SymbolReference *,_Bool);setLocalIndex(scount_t);OMR::Node
TR_LoopStrider::genLoad(TR::Node *,TR::SymbolReference *,_Bool);setReferenceCount(rcount_t);OMR::Node
TR_InductionVariableAnalysis::perform();gatherCandidates(class TR_Structure *,class TR_BitVector *,class TR_BitVector *);TR_InductionVariableAnalysis
TR_InductionVariableAnalysis::perform();perform(class TR_RegionStructure *);TR_InductionVariableAnalysis
TR_InductionVariableAnalysis::analyzeAcyclicRegion(class TR_RegionStructure *,class TR_RegionStructure *);enqueue(class TR_StructureSubGraphNode *);TR_Queue
TR_InductionVariableAnalysis::analyzeLoopExpressions(class TR_RegionStructure *,class TR_InductionVariableAnalysis::DeltaInfo **);incVisitCount();OMR::Compilation
TR_InductionVariableAnalysis::analyzeExitEdges(class TR_RegionStructure *,class TR_BitVector *,TR_Array<class TR_BasicInductionVariable *> &);resetInvariance();TR_RegionStructure
TR_InductionVariableAnalysis::analyzeExitEdges(class TR_RegionStructure *,class TR_BitVector *,TR_Array<class TR_BasicInductionVariable *> &);setNumLoopExits(int32_t);TR_PrimaryInductionVariable
TR_InductionVariableAnalysis::analyzeExitEdges(class TR_RegionStructure *,class TR_BitVector *,TR_Array<class TR_BasicInductionVariable *> &);setPrimaryInductionVariable(class TR_PrimaryInductionVariable *);TR_RegionStructure
TR_InductionVariableAnalysis::getEntryValue(TR::Block *,TR::SymbolReference *,class TR_BitVector *,TR_Array<TR::Node *> &);set(int64_t);TR_BitVector
TR_InductionVariableAnalysis::isIVUnchangedInLoop(class TR_RegionStructure *,TR::Block *,TR::Node *);add(TR::Block *);TR::BlockChecklist
TR_InductionVariableAnalysis::mergeWithBlock(TR::Block *,class TR_InductionVariableAnalysis::DeltaInfo **,class TR_RegionStructure *);mergeWithSet(class TR_InductionVariableAnalysis::DeltaInfo **,class TR_InductionVariableAnalysis::DeltaInfo **,class TR_RegionStructure *);TR_InductionVariableAnalysis
TR_IVTypeTransformer::perform();detectWhileLoops(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,_Bool);TR_LoopTransformer
TR_IVTypeTransformer::changeIVTypeFromAddrToInt(class TR_RegionStructure *);Push(class TR_StructureSubGraphNode *const &);CS2::QueueOf
TR_IVTypeTransformer::changeIVTypeFromAddrToInt(class TR_RegionStructure *);incVisitCount();OMR::Compilation
TR_IVTypeTransformer::changeIVTypeFromAddrToInt(class TR_RegionStructure *);insertAfter(TR::TreeTop *);OMR::TreeTop
TR_IVTypeTransformer::changeIVTypeFromAddrToInt(class TR_RegionStructure *);unlink(_Bool);OMR::TreeTop
TR_IVTypeTransformer::changeIVTypeFromAddrToInt(class TR_RegionStructure *);Clear();CS2::ASparseBitVector
TR_IVTypeTransformer::isInAddrIncrementForm(TR::Node *,int32_t &);setVisitCount(vcount_t);OMR::Node
TR_IVTypeTransformer::replaceAloadWithBaseIndexInSubtree(TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_IntersectionDFSetAnalysis::initializeInSetInfo();setAll(int64_t);TR_BitVector
TR_IntersectionDFSetAnalysis::initializeCurrentGenKillSetInfo();setAll(int64_t);TR_BitVector
TR_IntersectionDFSetAnalysis::initializeCurrentGenKillSetInfo();empty();TR_BitVector
TR_IntersectionDFSetAnalysis::initializeInfo(class TR_BitVector *);setAll(int64_t);TR_BitVector
TR_IsolatedStoreElimination::performWithUseDefInfo();removeRedundantSpills();TR_IsolatedStoreElimination
TR_IsolatedStoreElimination::performWithUseDefInfo();setSize(uint32_t);TR_Array
TR_IsolatedStoreElimination::performWithUseDefInfo();buildDefUseInfo(_Bool);TR_UseDefInfo
TR_IsolatedStoreElimination::examineNode(TR::Node *,vcount_t,_Bool);setVisitCount(vcount_t);OMR::Node
TR_IsolatedStoreElimination::performDeadStructureRemoval(class TR_UseDefInfo *);findStructuresAndNodesUsedIn(class TR_UseDefInfo *,class TR_Structure *,vcount_t,class TR_BitVector *,class TR_BitVector *,_Bool *);TR_IsolatedStoreElimination
TR_IsolatedStoreElimination::markNodesAndLocateSideEffectIn(TR::Node *,vcount_t,class TR_BitVector *,class TR_BitVector *);setVisitCount(vcount_t);OMR::Node
TR_IsolatedStoreElimination::analyzeSingleBlockLoop(class TR_RegionStructure *,TR::Block *);resetInvariance();TR_RegionStructure
TR_Latestness::TR_Latestness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool);allocateBlockInfoContainer(class TR_BitVector **,_Bool,_Bool);TR_BasicDFSetAnalysis
TR_LiveOnAllPaths::TR_LiveOnAllPaths(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_LiveVariableInformation *,_Bool,_Bool);initializeBlockInfo(_Bool);TR_BasicDFSetAnalysis
TR_LiveOnAllPaths::initializeGenAndKillSetInfo();initializeGenAndKillSetInfo(class TR_BitVector **,class TR_BitVector **,class TR_BitVector **,class TR_BitVector **);TR_LiveVariableInformation
TR_LiveVariableInformation::findCommonedLoads(TR::Node *,class TR_BitVector *,_Bool,vcount_t);visitTreeForLocals(TR::Node *,class TR_BitVector **,class TR_BitVector *,_Bool,_Bool,vcount_t,class TR_BitVector *,_Bool);TR_LiveVariableInformation
TR_LiveVariableInformation::findAllUseOfLocal(TR::Node *,int32_t,class TR_BitVector *,class TR_BitVector *,class TR_BitVector *,_Bool,vcount_t);visitTreeForLocals(TR::Node *,class TR_BitVector **,class TR_BitVector *,_Bool,_Bool,vcount_t,class TR_BitVector *,_Bool);TR_LiveVariableInformation
TR_LiveVariableInformation::findLocalUsesInBackwardsTreeWalk(TR::Node *,int32_t,class TR_BitVector *,class TR_BitVector *,class TR_BitVector *,vcount_t);visitTreeForLocals(TR::Node *,class TR_BitVector **,class TR_BitVector *,_Bool,_Bool,vcount_t,class TR_BitVector *,_Bool);TR_LiveVariableInformation
TR_LiveVariableInformation::findUseOfLocal(TR::Node *,int32_t,class TR_BitVector **,class TR_BitVector **,class TR_BitVector *,_Bool,vcount_t);visitTreeForLocals(TR::Node *,class TR_BitVector **,class TR_BitVector *,_Bool,_Bool,vcount_t,class TR_BitVector *,_Bool);TR_LiveVariableInformation
TR_OSRLiveVariableInformation::findUseOfLocal(TR::Node *,int32_t,class TR_BitVector **,class TR_BitVector **,class TR_BitVector *,_Bool,vcount_t);findUseOfLocal(TR::Node *,int32_t,class TR_BitVector **,class TR_BitVector **,class TR_BitVector *,_Bool,vcount_t);TR_LiveVariableInformation
TR_OSRLiveVariableInformation::getLiveSymbolsInInterpreter(TR_ByteCodeInfo &);buildLiveSymbolsBitVector(class TR_OSRMethodData *,int32_t,class TR_BitVector *);TR_OSRLiveVariableInformation
TR_Liveness::TR_Liveness(TR::Compilation *,TR::Optimizer *,class TR_Structure *,_Bool,class TR_LiveVariableInformation *,_Bool,_Bool);initializeBlockInfo(_Bool);TR_BasicDFSetAnalysis
TR_Liveness::initializeGenAndKillSetInfo();initializeGenAndKillSetInfo(class TR_BitVector **,class TR_BitVector **,class TR_BitVector **,class TR_BitVector **);TR_LiveVariableInformation
TR_LoadExtensions::TR_LoadExtensions(TR::OptimizationManager *);setTrace(_Bool);OMR::Optimization
TR_LoadExtensions::TR_LoadExtensions(TR::OptimizationManager *);Clear();CS2::ASparseBitVector
TR_LocalAnalysisInfo::collectSupportedNodes(TR::Node *,TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_LocalAnalysisInfo::countSupportedNodes(TR::Node *,TR::Node *,_Bool &);setVisitCount(vcount_t);OMR::Node
TR_LocalAnalysisInfo::countSupportedNodes(TR::Node *,TR::Node *,_Bool &);setContainsCall(_Bool);OMR::Node
TR_LocalAnalysisInfo::containsCall(TR::Node *,_Bool &);containsCallResetVisitCounts(TR::Node *);TR_LocalAnalysisInfo
TR_LocalAnalysisInfo::containsCallInTree(TR::Node *,_Bool &);setVisitCount(vcount_t);OMR::Node
TR_LocalAnalysisInfo::containsCallResetVisitCounts(TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_LocalAnalysis::initializeLocalAnalysis(_Bool,_Bool);initializeBlocks(TR::Block *,TR::BitVector &);TR_LocalAnalysis
TR_LocalAnticipatability::TR_LocalAnticipatability(class TR_LocalAnalysisInfo &,class TR_LocalTransparency *,_Bool);initializeLocalAnalysis(_Bool,_Bool);TR_LocalAnalysis
TR_LocalAnticipatability::analyzeBlock(TR::Block *,vcount_t,vcount_t,class TR_BitVector *);reset(int64_t,_Bool);TR_BitVector
TR_LocalAnticipatability::updateAnticipatabilityForSupportedNodes(TR::Node *,ContainerType *,ContainerType *,TR::Block *,ContainerType *,ContainerType *,ContainerType *,class TR_BitVector *,ContainerType *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalAnticipatability::updateAnticipatabilityForSupportedNodes(TR::Node *,ContainerType *,ContainerType *,TR::Block *,ContainerType *,ContainerType *,ContainerType *,class TR_BitVector *,ContainerType *,vcount_t);set(int64_t);TR_BitVector
TR_LocalAnticipatability::updateUsesAndDefs(TR::Node *,TR::Block *,ContainerType *,ContainerType *,ContainerType *,ContainerType *,class TR_BitVector *,ContainerType *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalLiveRangeReduction::prePerformOnBlocks();incVisitCount();OMR::Compilation
TR_LocalLiveRangeReduction::postPerformOnBlocks();incVisitCount();OMR::Compilation
TR_LocalLiveRangeReduction::transformExtendedBlock(TR::TreeTop *,TR::TreeTop *);collectInfo(TR::TreeTop *,TR::TreeTop *);TR_LocalLiveRangeReduction
TR_LocalLiveRangeReduction::transformExtendedBlock(TR::TreeTop *,TR::TreeTop *);updateDepList();TR_LocalLiveRangeReduction
TR_LocalLiveRangeReduction::transformExtendedBlock(TR::TreeTop *,TR::TreeTop *);deleteAll();List
TR_LocalLiveRangeReduction::collectInfo(TR::TreeTop *,TR::TreeTop *);setVisitCount(vcount_t);OMR::Compilation
TR_LocalLiveRangeReduction::moveTreeBefore(class TR_TreeRefInfo *,class TR_TreeRefInfo *,int32_t);setNextTreeTop(TR::TreeTop *);OMR::TreeTop
TR_LocalLiveRangeReduction::moveTreeBefore(class TR_TreeRefInfo *,class TR_TreeRefInfo *,int32_t);setPrevTreeTop(TR::TreeTop *);OMR::TreeTop
TR_LocalLiveRangeReduction::addDepPair(class TR_TreeRefInfo *,class TR_TreeRefInfo *);add(class DepPair *);List
TR_LocalLiveRangeReduction::isWorthMoving(class TR_TreeRefInfo *);set(ListBase<class TR::Node> *);ListIterator
DepPair::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
DepPair::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
DepPair::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
DepPair::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_TreeRefInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_TreeRefInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_TreeRefInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_TreeRefInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_TreeRefInfo::resetSyms();empty();TR_BitVector
TR_LocalReordering::prePerformOnBlocks();incOrResetVisitCount();OMR::Compilation
TR_LocalReordering::postPerformOnBlocks();incVisitCount();OMR::Compilation
TR_LocalReordering::transformBlock(TR::Block *);delayDefinitions(TR::Block *);TR_LocalReordering
TR_LocalReordering::transformBlock(TR::Block *);incOrResetVisitCount();OMR::Compilation
TR_LocalReordering::transformBlock(TR::Block *);collectUses(TR::Block *);TR_LocalReordering
TR_LocalReordering::setUseTreeForSymbolReferencesIn(TR::TreeTop *,TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalReordering::insertDefinitionBetween(TR::TreeTop *,TR::TreeTop *);empty();TR_BitVector
TR_LocalReordering::insertDefinitionBetween(TR::TreeTop *,TR::TreeTop *);collectSymbolsUsedAndDefinedInNode(TR::Node *,vcount_t);TR_LocalReordering
TR_LocalReordering::isAnySymInDefinedOrUsedBy(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalReordering::isAnySymInDefinedBy(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalReordering::moveStoresEarlierIfRhsAnchored(TR::Block *,TR::TreeTop *,TR::Node *,TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalReordering::moveStoresEarlierIfRhsAnchored(TR::Block *,TR::TreeTop *,TR::Node *,TR::Node *,vcount_t);setLocalIndex(scount_t);OMR::Node
TR_LocalReordering::moveStoresEarlierIfRhsAnchored(TR::Block *,TR::TreeTop *,TR::Node *,TR::Node *,vcount_t);empty();TR_BitVector
TR_LocalReordering::collectSymbolsUsedAndDefinedInNode(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalTransparency::TR_LocalTransparency(class TR_LocalAnalysisInfo &,_Bool);initializeLocalAnalysis(_Bool,_Bool);TR_LocalAnalysis
TR_LocalTransparency::updateInfoForSupportedNodes(TR::Node *,ContainerType *,ContainerType *,ContainerType *,ContainerType *,ContainerType *,ContainerType *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LocalTransparency::updateUsesAndDefs(TR::Node *,ContainerType *,ContainerType *,ContainerType *,ContainerType *,ContainerType *,vcount_t,ContainerType *,class TR_BitVector *,ContainerType *);setVisitCount(vcount_t);OMR::Node
TR_LoopTransformer::detectWhileLoops(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,_Bool);setAll(int64_t);TR_BitVector
TR_LoopTransformer::detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,class TR_StructureSubGraphNode *,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);set(int64_t);TR_BitVector
TR_LoopTransformer::detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,class TR_StructureSubGraphNode *,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);empty();TR_BitVector
TR_LoopTransformer::detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,class TR_StructureSubGraphNode *,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);detectWhileLoops(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,_Bool);TR_LoopTransformer
TR_LoopTransformer::detectWhileLoopsInSubnodesInOrder(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,class TR_StructureSubGraphNode *,class TR_RegionStructure *,vcount_t,class TR_BitVector *,_Bool);reset(int64_t,_Bool);TR_BitVector
TR_LoopTransformer::blockIsAlwaysExecutedInLoop(TR::Block *,class TR_RegionStructure *,_Bool *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopTransformer::blockIsAlwaysExecutedInLoop(TR::Block *,class TR_RegionStructure *,_Bool *);deleteAll();List
TR_LoopTransformer::printTrees();incVisitCount();OMR::Compilation
TR_LoopTransformer::adjustTreesInBlock(TR::Block *);setBlock(TR::Block *);OMR::Node
TR_LoopTransformer::duplicateExact(TR::Node *,List<TR::Node> *,List<TR::Node> *);setReferenceCount(rcount_t);OMR::Node
TR_LoopTransformer::duplicateExact(TR::Node *,List<TR::Node> *,List<TR::Node> *);setVisitCount(vcount_t);OMR::Node
TR_LoopTransformer::collectSymbolsWrittenAndReadExactlyOnce(class TR_Structure *,vcount_t);collectSymbolsWrittenAndReadExactlyOnce(class TR_Structure *,vcount_t,struct TR_LoopTransformer::updateInfo_tables &);TR_LoopTransformer
TR_LoopTransformer::updateInfo(TR::Node *,vcount_t,struct TR_LoopTransformer::updateInfo_tables &);setVisitCount(vcount_t);OMR::Node
TR_LoopTransformer::updateInfo(TR::Node *,vcount_t,struct TR_LoopTransformer::updateInfo_tables &);getAliases(class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);TR_AliasSetInterface
TR_LoopTransformer::updateInfo(TR::Node *,vcount_t,struct TR_LoopTransformer::updateInfo_tables &);Or(const class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);CS2::ASparseBitVector
TR_LoopTransformer::getSymbolDefUseStateInSubTree(TR::Node *,TR::RegisterMappedSymbol *);setVisitCount(vcount_t);OMR::Node
TR_LoopCanonicalizer::perform();Clear();CS2::ASparseBitVector
TR_LoopCanonicalizer::perform();deleteAll();List
TR_LoopCanonicalizer::perform();clear();TR_Stack
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);rewritePostToPreIncrementTestInRegion(class TR_RegionStructure *);TR_LoopCanonicalizer
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);add(class TR::Block *);TR_ScratchList
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setFrequency(int32_t);TR::CFGNode
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setBranchDestination(TR::TreeTop *);OMR::Node
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);addEdge(TR::CFGEdge *);OMR::CFG
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setAsCanonicalizedLoop(_Bool);TR_RegionStructure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);replacePart(class TR_Structure *,class TR_Structure *);TR_Structure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setParent(class TR_RegionStructure *);TR_Structure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setEntry(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setNumber(int32_t);TR_Structure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setWasHeaderOfCanonicalizedLoop(_Bool);TR_BlockStructure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);replacePart(class TR_Structure *,class TR_Structure *);TR_RegionStructure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);addSubNode(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);setAsLoopInvariantBlock(_Bool);TR_BlockStructure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);add(class TR::Block *);List
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);addExitEdge(class TR_StructureSubGraphNode *,int32_t,_Bool,TR::CFGEdge *);TR_RegionStructure
TR_LoopCanonicalizer::canonicalizeNaturalLoop(class TR_RegionStructure *);set(ListBase<class TR::CFGEdge> *);ListIterator
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);rewritePostToPreIncrementTestInRegion(class TR_RegionStructure *);TR_LoopCanonicalizer
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);setAsCanonicalizedLoop(_Bool);TR_RegionStructure
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);setAsLoopInvariantBlock(_Bool);TR_BlockStructure
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);addEdge(TR::CFGEdge *);OMR::CFG
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);modifyBranchesForSplitEdges(class TR_RegionStructure *,TR::Block *,TR::Block *,TR::Block *,_Bool,int32_t *,_Bool);TR_LoopCanonicalizer
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);setFrequency(int32_t);TR::CFGNode
TR_LoopCanonicalizer::canonicalizeDoWhileLoop(class TR_RegionStructure *);addSubNode(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_LoopCanonicalizer::examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);setVisitCount(vcount_t);OMR::Node
TR_LoopCanonicalizer::placeInitializationTreeInLoopPreHeader(TR::Block *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopCanonicalizer::rewritePostToPreIncrementTestInBlock(TR::Block *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_LoopCanonicalizer::rewritePostToPreIncrementTestInBlock(TR::Block *);recursivelyDecReferenceCount();OMR::Node
TR_LoopInverter::perform();detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR_LoopInverter
TR_LoopInverter::detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);resetInvariance();TR_RegionStructure
TR_LoopInverter::detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopInverter::detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR_Structure
TR_LoopInverter::detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);initializeSymbolsWrittenAndReadExactlyOnce(int32_t,enum TR_BitVectorGrowable);TR_LoopTransformer
TR_LoopInverter::checkIfSymbolIsReadInKnownTree(TR::Node *,int32_t,TR::TreeTop *,TR::NodeChecklist &);add(TR::Node *);TR::NodeChecklist
TR_RedundantInductionVarElimination::perform();detectWhileLoops(ListAppender<class TR_Structure> &,List<class TR_Structure> &,ListAppender<class TR_Structure> &,List<class TR_Structure> &,class TR_Structure *,_Bool);TR_LoopTransformer
TR_ArrayLoop::findIndVarLoads(TR::Node *,TR::Node *,_Bool &,List<TR::Node> *,TR::Symbol *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_ArrayLoop::updateIndVarStore(class TR_ParentOfChildNode *,TR::Node *,class TR_LRAddressTree *,int32_t);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_ArrayLoop::updateIndVarStore(class TR_ParentOfChildNode *,TR::Node *,class TR_LRAddressTree *,int32_t);recursivelyDecReferenceCount();OMR::Node
TR_Arraytranslate::checkMatIndVarStore(TR::Node *,TR::Node *);setMaterializedIndVarSymRef(TR::SymbolReference *);TR_LRAddressTree
TR_LoopReducer::perform();createWhileLoopsList(TR_ScratchList<class TR_Structure> *);TR_LoopTransformer
TR_LoopReducer::perform();setUseDefInfo(class TR_UseDefInfo *);OMR::Optimizer
TR_LoopReducer::perform();setValueNumberInfo(class TR_ValueNumberInfo *);OMR::Optimizer
TR_LoopReducer::reduceNaturalLoop(class TR_RegionStructure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopReducer::reduceNaturalLoop(class TR_RegionStructure *);remove(class TR::Block *);List
TR_LoopReducer::removeSelfEdge(TR::CFGEdgeList &,int32_t);removeEdge(TR::CFGEdgeList &,int32_t,int32_t);OMR::CFG
TR_LoopReducer::generateArraytranslateAndTest(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopReducer::generateArraytranslateAndTest(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_LoopReducer::generateArraytranslateAndTest(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);setNode(TR::Node *);OMR::TreeTop
TR_LoopReducer::generateArraytranslateAndTest(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopReducer::generateArraytranslateAndTest(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);removeEdge(TR::CFGEdgeList &,int32_t,int32_t);OMR::CFG
TR_LoopReducer::generateArraycopy(class TR_InductionVariable *,TR::Block *);updateAiaddSubTree(class TR_ParentOfChildNode *,class TR_ArrayLoop *);TR_LRAddressTree
TR_LoopReducer::generateArraycopy(class TR_InductionVariable *,TR::Block *);updateMultiply(class TR_ParentOfChildNode *);TR_LRAddressTree
TR_LoopReducer::generateArraycopy(class TR_InductionVariable *,TR::Block *);decReferenceCount();OMR::Node
TR_LoopReducer::generateArraycopy(class TR_InductionVariable *,TR::Block *);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopReducer::generateArraycopy(class TR_InductionVariable *,TR::Block *);setNode(TR::Node *);OMR::TreeTop
TR_LoopReducer::generateArraycopy(class TR_InductionVariable *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setIncrement(int32_t);TR_LRAddressTree
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);updateAiaddSubTree(class TR_ParentOfChildNode *,class TR_ArrayLoop *);TR_LRAddressTree
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);updateMultiply(class TR_ParentOfChildNode *);TR_LRAddressTree
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);decReferenceCount();OMR::Node
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);recursivelyDecReferenceCount();OMR::Node
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setForwardArrayCopy(_Bool);OMR::Node
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setArrayCopyElementType(TR::DataType);OMR::Node
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setNode(TR::Node *);OMR::TreeTop
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopReducer::generateByteToCharArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);insertAfter(TR::TreeTop *);OMR::TreeTop
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setIncrement(int32_t);TR_LRAddressTree
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);updateAiaddSubTree(class TR_ParentOfChildNode *,class TR_ArrayLoop *);TR_LRAddressTree
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);updateMultiply(class TR_ParentOfChildNode *);TR_LRAddressTree
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setForwardArrayCopy(_Bool);OMR::Node
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);setArrayCopyElementType(TR::DataType);OMR::Node
TR_LoopReducer::generateCharToByteArraycopy(class TR_InductionVariable *,class TR_InductionVariable *,TR::Block *);insertAfter(TR::TreeTop *);OMR::TreeTop
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setNode(TR::Node *);OMR::TreeTop
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setSourceIsByteArrayTranslate(_Bool);OMR::Node
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setTargetIsByteArrayTranslate(_Bool);OMR::Node
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setTermCharNodeIsHint(_Bool);OMR::Node
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setTableBackedByRawStorage(_Bool);OMR::Node
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setBranchDestination(TR::TreeTop *);OMR::Node
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopReducer::generateArraytranslate(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *,TR::Block *,TR::Block *);addEdge(TR::CFGEdge *);OMR::CFG
TR_LoopReducer::generateArrayset(class TR_InductionVariable *,TR::Block *);updateAiaddSubTree(class TR_ParentOfChildNode *,class TR_ArrayLoop *);TR_LRAddressTree
TR_LoopReducer::generateArrayset(class TR_InductionVariable *,TR::Block *);updateMultiply(class TR_ParentOfChildNode *);TR_LRAddressTree
TR_LoopReducer::generateArrayset(class TR_InductionVariable *,TR::Block *);decReferenceCount();OMR::Node
TR_LoopReducer::generateArrayset(class TR_InductionVariable *,TR::Block *);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopReducer::generateArrayset(class TR_InductionVariable *,TR::Block *);setNode(TR::Node *);OMR::TreeTop
TR_LoopReducer::generateArrayset(class TR_InductionVariable *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR_RegionStructure
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);incVisitCount();OMR::Compilation
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);updateAiaddSubTree(class TR_ParentOfChildNode *,class TR_ArrayLoop *);TR_LRAddressTree
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);updateMultiply(class TR_ParentOfChildNode *);TR_LRAddressTree
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);setSymbolReference(TR::SymbolReference *);OMR::Node
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);decReferenceCount();OMR::Node
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);setNode(TR::Node *);OMR::TreeTop
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopReducer::generateArraycmp(class TR_RegionStructure *,class TR_InductionVariable *,TR::Block *,TR::Block *);removeEdge(TR::CFGEdgeList &,int32_t,int32_t);OMR::CFG
TR_LoopReducer::replaceInductionVariable(TR::Node *,TR::Node *,int32_t,int32_t,TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_TranslateTable::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_TranslateTable::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_TranslateTable::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_TranslateTable::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopReplicator::perform();empty();TR_BitVector
TR_LoopReplicator::perform();perform(class TR_Structure *);TR_LoopReplicator
TR_LoopReplicator::perform();modifyLoops();TR_LoopReplicator
TR_LoopReplicator::isWellFormedLoop(class TR_RegionStructure *,class TR_Structure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopReplicator::isWellFormedLoop(class TR_RegionStructure *,class TR_Structure *);reset();ListIterator
TR_LoopReplicator::replicateLoop(class TR_RegionStructure *,class TR_StructureSubGraphNode *);add(struct TR_LoopReplicator::LoopInfo *);TR_LinkHead0
TR_LoopReplicator::countChildren(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopReplicator::heuristics(struct TR_LoopReplicator::LoopInfo *);append(struct TR_LoopReplicator::BlockEntry *);TR_LinkHeadAndTail
TR_LoopReplicator::heuristics(struct TR_LoopReplicator::LoopInfo *);set(int64_t);TR_BitVector
TR_LoopReplicator::heuristics(struct TR_LoopReplicator::LoopInfo *);enqueue(class TR::Block *);TR_Queue
TR_LoopReplicator::heuristics(struct TR_LoopReplicator::LoopInfo *);logTrace(struct TR_LoopReplicator::LoopInfo *);TR_LoopReplicator
TR_LoopReplicator::heuristics(struct TR_LoopReplicator::LoopInfo *,_Bool);append(struct TR_LoopReplicator::BlockEntry *);TR_LinkHeadAndTail
TR_LoopReplicator::heuristics(struct TR_LoopReplicator::LoopInfo *,_Bool);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopReplicator::doTailDuplication(struct TR_LoopReplicator::LoopInfo *);setFrequency(int32_t);TR::CFGNode
TR_LoopReplicator::doTailDuplication(struct TR_LoopReplicator::LoopInfo *);addBlocksAndFixEdges(struct TR_LoopReplicator::LoopInfo *);TR_LoopReplicator
TR_LoopReplicator::addBlocksAndFixEdges(struct TR_LoopReplicator::LoopInfo *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopReplicator::addBlocksAndFixEdges(struct TR_LoopReplicator::LoopInfo *);fixUpLoopEntry(struct TR_LoopReplicator::LoopInfo *,TR::Block *);TR_LoopReplicator
TR_LoopReplicator::createEmptyGoto(TR::Block *,TR::Block *,_Bool);join(TR::TreeTop *);OMR::TreeTop
TR_LoopReplicator::createEmptyGoto(TR::Block *,TR::Block *,_Bool);setBlock(TR::Block *);OMR::Node
TR_LoopReplicator::fixUpLoopEntry(struct TR_LoopReplicator::LoopInfo *,TR::Block *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopReplicator::fixUpLoopEntry(struct TR_LoopReplicator::LoopInfo *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopReplicator::fixUpLoopEntry(struct TR_LoopReplicator::LoopInfo *,TR::Block *);copyExceptionSuccessors(TR::CFGNode *,TR::CFGNode *,_Bool (*)(TR::CFGEdge *));OMR::CFG
TR_LoopReplicator::fixUpLoopEntry(struct TR_LoopReplicator::LoopInfo *,TR::Block *);addEdge(TR::CFGEdge *);OMR::CFG
TR_LoopReplicator::calculateBlockWeights(class TR_RegionStructure *);enqueue(class TR_StructureSubGraphNode *);TR_Queue
TR_LoopReplicator::checkInnerLoopFrequencies(class TR_RegionStructure *,struct TR_LoopReplicator::LoopInfo *);logTrace(struct TR_LoopReplicator::LoopInfo *);TR_LoopReplicator
TR_NodeParentSymRef::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentSymRef::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentSymRef::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeParentSymRef::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeParentSymRefWeightTuple::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentSymRefWeightTuple::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentSymRefWeightTuple::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeParentSymRefWeightTuple::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeParentBlockTuple::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentBlockTuple::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_NodeParentBlockTuple::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_NodeParentBlockTuple::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopVersioner::TR_LoopVersioner(TR::OptimizationManager *,_Bool,_Bool);setOnlySpecializeLoops(_Bool);TR_LoopVersioner
TR_LoopVersioner::detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);getBlocks(List<TR::Block> *);TR_Structure
TR_LoopVersioner::isStoreInRequiredForm(int32_t,class TR_Structure *);setReferenceCount(rcount_t);OMR::Node
TR_LoopVersioner::performWithoutDominators();deleteAll();List
TR_LoopVersioner::performWithoutDominators();setFirst(struct VirtualGuardInfo *);TR_LinkHead0
TR_LoopVersioner::performWithoutDominators();initAdditionalDataStructures();TR_LoopVersioner
TR_LoopVersioner::performWithoutDominators();createWhileLoopsList(TR_ScratchList<class TR_Structure> *);TR_LoopTransformer
TR_LoopVersioner::performWithoutDominators();setUseDefInfo(class TR_UseDefInfo *);OMR::Optimizer
TR_LoopVersioner::performWithoutDominators();setValueNumberInfo(class TR_ValueNumberInfo *);OMR::Optimizer
TR_LoopVersioner::isDependentOnInvariant(TR::Node *);SetToFirstOne();CS2::ABitVector<CS2::shared_allocator<CS2::heap_allocator<65536, 12, TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > >::Cursor
TR_LoopVersioner::boundCheckUsesUnchangedValue(TR::TreeTop *,TR::Node *,TR::SymbolReference *,class TR_RegionStructure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopVersioner::boundCheckUsesUnchangedValue(TR::TreeTop *,TR::Node *,TR::SymbolReference *,class TR_RegionStructure *);deleteAll();List
TR_LoopVersioner::findLoad(TR::Node *,TR::SymbolReference *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);setStructure(class TR_Structure *);OMR::CFG
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);reset();ListIterator
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);setIsSpecialized(_Bool);OMR::Block
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);join(TR::TreeTop *);OMR::TreeTop
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);addEdge(TR::CFGEdge *);OMR::CFG
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);cloneStructureEdges(TR::Block **);TR_RegionStructure
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);setVersionedLoop(class TR_RegionStructure *);TR_RegionStructure
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);setCreatedByVersioning(_Bool);TR_BlockStructure
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);setAsLoopInvariantBlock(_Bool);TR_BlockStructure
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);replacePart(class TR_Structure *,class TR_Structure *);TR_RegionStructure
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);addSubNode(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);set(ListBase<class TR::CFGEdge> *);ListIterator
TR_LoopVersioner::versionNaturalLoop(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,List<class TR_Structure> *,List<class TR_Structure> *,_Bool,SharedSparseBitVector &);empty();TR_BitVector
TR_LoopVersioner::detectInvariantTrees(class TR_RegionStructure *,List<TR::TreeTop> *,_Bool,_Bool *,SharedSparseBitVector &);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopVersioner::isExprInvariant(TR::Node *,_Bool);empty();TR_BitVector
TR_LoopVersioner::isExprInvariantRecursive(TR::Node *,_Bool);set(int64_t);TR_BitVector
TR_LoopVersioner::detectChecksToBeEliminated(class TR_RegionStructure *,List<TR::Node> *,List<TR::TreeTop> *,List<int32_t> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<int32_t> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,_Bool &);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopVersioner::convertSpecializedLongsToInts(TR::Node *,vcount_t,TR::SymbolReference **);setVisitCount(vcount_t);OMR::Node
TR_LoopVersioner::collectAllExpressionsToBeChecked(List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,List<TR::TreeTop> *,TR::Node *,List<TR::Node> *,TR::Block *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_LoopVersioner::updateDefinitionsAndCollectProfiledExprs(TR::Node *,TR::Node *,vcount_t,List<TR::Node> *,List<class TR_NodeParentSymRef> *,List<class TR_NodeParentSymRefWeightTuple> *,TR::Node *,_Bool,TR::Block *,int32_t);setVisitCount(vcount_t);OMR::Node
TR_LoopVersioner::replaceInductionVariable(TR::Node *,TR::Node *,int,int,TR::Node *,int);setVisitCount(vcount_t);OMR::Node
TR_LoopVersioner::fixupVirtualGuardTargets(struct VirtualGuardInfo *);setFirst(struct LoopTemps *);TR_LinkHead0
TR_LoopVersioner::fixupVirtualGuardTargets(struct VirtualGuardInfo *);setStructure(class TR_Structure *);OMR::CFG
TR_LoopVersioner::fixupVirtualGuardTargets(struct VirtualGuardInfo *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopVersioner::fixupVirtualGuardTargets(struct VirtualGuardInfo *);prepend(TR::TreeTop *);OMR::Block
TR_LoopVersioner::fixupVirtualGuardTargets(struct VirtualGuardInfo *);reset();ListIterator
TR_LoopVersioner::createEmptyGoto(TR::Block *,TR::Block *,TR::TreeTop *);setIsSpecialized(_Bool);OMR::Block
TR_LoopVersioner::createEmptyGoto(TR::Block *,TR::Block *,TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
TR_LoopVersioner::createEmptyGoto(TR::Block *,TR::Block *,TR::TreeTop *);setBlock(TR::Block *);OMR::Node
TR_LoopVersioner::createClonedHeader(TR::Block *,TR::TreeTop **);setFrequency(int32_t);TR::CFGNode
TR_LoopVersioner::createClonedHeader(TR::Block *,TR::TreeTop **);join(TR::TreeTop *);OMR::TreeTop
TR_LoopVersioner::createClonedHeader(TR::Block *,TR::TreeTop **);addEdge(TR::CFGEdge *);OMR::CFG
TR_LoopVersioner::createClonedHeader(TR::Block *,TR::TreeTop **);set(ListBase<class TR::CFGEdge> *);ListIterator
TR_LoopVersioner::createSwitchNode(TR::Block *,TR::SymbolReference *,int32_t);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::LocalCSE::prePerformOnBlocks();init(int64_t,TR::Region &,enum TR_BitVectorGrowable);TR_BitVector
OMR::LocalCSE::prePerformOnBlocks();incVisitCount();OMR::Compilation
OMR::LocalCSE::prePerformOnBlocks();setAlteredCode(_Bool);OMR::OptimizationManager
OMR::LocalCSE::examineNode(TR::Node *,class TR_BitVector &,TR::Node *,int32_t,int32_t *,_Bool *,int32_t);setVisitCount(vcount_t);OMR::Node
OMR::LocalCSE::examineNode(TR::Node *,class TR_BitVector &,TR::Node *,int32_t,int32_t *,_Bool *,int32_t);killAvailableExpressionsAtGCSafePoints(TR::Node *,TR::Node *,class TR_BitVector &);OMR::LocalCSE
OMR::LocalCSE::commonNode(TR::Node *,int32_t,TR::Node *,TR::Node *);setChild(int32_t,TR::Node *);OMR::Node
OMR::LocalCSE::commonNode(TR::Node *,int32_t,TR::Node *,TR::Node *);recursivelyDecReferenceCount();OMR::Node
OMR::LocalCSE::transformBlock(TR::TreeTop *,TR::TreeTop *);empty();TR_BitVector
OMR::LocalCSE::transformBlock(TR::TreeTop *,TR::TreeTop *);incOrResetVisitCount();OMR::Compilation
OMR::LocalCSE::transformBlock(TR::TreeTop *,TR::TreeTop *);incVisitCount();OMR::Compilation
OMR::LocalCSE::transformBlock(TR::TreeTop *,TR::TreeTop *);invalidateAliasRegion();OMR::Compilation
OMR::LocalCSE::getNumberOfNodes(TR::Node *);setVisitCount(vcount_t);OMR::Node
OMR::LocalCSE::getNumberOfNodes(TR::Node *);setLocalIndex(scount_t);OMR::Node
OMR::LocalCSE::makeNodeAvailableForCommoning(TR::Node *,TR::Node *,class TR_BitVector &,_Bool *);addToHashTable(TR::Node *,int32_t);OMR::LocalCSE
OMR::LocalCSE::killAllAvailableExpressions();removeFromHashTable(HashTable *,int32_t);OMR::LocalCSE
OMR::LocalCSE::killAllAvailableExpressions();reset(int64_t,_Bool);TR_BitVector
OMR::LocalCSE::killAllDataStructures(class TR_BitVector &);empty();TR_BitVector
OMR::LocalCSE::killAllDataStructures(class TR_BitVector &);killAllAvailableExpressions();OMR::LocalCSE
OMR::LocalCSE::killAvailableExpressions(int32_t);removeFromHashTable(HashTable *,int32_t);OMR::LocalCSE
OMR::LocalCSE::killAvailableExpressions(int32_t);reset(int64_t,_Bool);TR_BitVector
OMR::LocalCSE::killAvailableExpressionsUsingAliases(struct TR_NodeKillAliasSetInterface &);getAliasesAndSubtractFrom(class TR_BitVector &);TR_AliasSetInterface
OMR::LocalCSE::killAvailableExpressionsUsingAliases(struct TR_NodeKillAliasSetInterface &);killAvailableExpressionsUsingBitVector(HashTable *,class TR_BitVector &);OMR::LocalCSE
OMR::LocalCSE::killAvailableExpressionsUsingAliases(class TR_BitVector &);killAvailableExpressionsUsingBitVector(HashTable *,class TR_BitVector &);OMR::LocalCSE
TR::LocalDeadStoreElimination::perform();eliminateDeadObjectInitializations();TR::LocalDeadStoreElimination
TR::LocalDeadStoreElimination::prePerformOnBlocks();incVisitCount();OMR::Compilation
TR::LocalDeadStoreElimination::transformBlock(TR::TreeTop *,TR::TreeTop *);setCurrentBlock(TR::Block *);OMR::Compilation
TR::LocalDeadStoreElimination::transformBlock(TR::TreeTop *,TR::TreeTop *);incOrResetVisitCount();OMR::Compilation
TR::LocalDeadStoreElimination::isEntireNodeRemovable(TR::Node *);setExternalReferenceCountToTree(TR::Node *,rcount_t *);TR::LocalDeadStoreElimination
TR::LocalDeadStoreElimination::setExternalReferenceCountToTree(TR::Node *,rcount_t *);setVisitCount(vcount_t);OMR::Node
TR::LocalDeadStoreElimination::setupReferenceCounts(TR::Node *);setVisitCount(vcount_t);OMR::Node
TR::LocalDeadStoreElimination::setupReferenceCounts(TR::Node *);setLocalIndex(scount_t);OMR::Node
TR::LocalDeadStoreElimination::findLocallyAllocatedObjectUses(LDSBitVector &,TR::Node *,int32_t,TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR::LocalDeadStoreElimination::examineNewUsesForKill(TR::Node *,TR::Node *,List<TR::Node> *,List<TR::Node> *,TR::Node *,int32_t,vcount_t);setVisitCount(vcount_t);OMR::Node
TR::LocalDeadStoreElimination::removeStoreTree(TR::TreeTop *);incVisitCount();OMR::Compilation
TR_HoistBlocks::perform();process(TR::TreeTop *,TR::TreeTop *);TR_HoistBlocks
TR_BlockManipulator::breakFallThrough(TR::Block *,TR::Block *,_Bool);setBranchDestination(TR::TreeTop *);OMR::Node
TR_BlockManipulator::breakFallThrough(TR::Block *,TR::Block *,_Bool);append(TR::TreeTop *);OMR::Block
TR_PeepHoleBasicBlocks::perform();setIgnoreUnreachableBlocks(_Bool);OMR::CFG
TR_EliminateRedundantGotos::perform();process(TR::TreeTop *,TR::TreeTop *);TR_EliminateRedundantGotos
TR_EliminateRedundantGotos::placeAsyncCheckBefore(TR::TreeTop *);join(TR::TreeTop *);OMR::TreeTop
TR_EliminateRedundantGotos::renumberInAncestors(class TR_Structure *,int32_t);setNumber(int32_t);TR::CFGNode
TR_CleanseTrees::perform();process(TR::TreeTop *,TR::TreeTop *);TR_CleanseTrees
TR_CleanseTrees::process(TR::TreeTop *,TR::TreeTop *);incVisitCount();OMR::Compilation
TR_ArraysetStoreElimination::perform();process(TR::TreeTop *,TR::TreeTop *);TR_ArraysetStoreElimination
TR_ArraysetStoreElimination::process(TR::TreeTop *,TR::TreeTop *);incVisitCount();OMR::Compilation
TR_ArraysetStoreElimination::optimizeArraysetIfPossible(TR::Node *,TR::Node *,TR::TreeTop *,TR::Node *,class TR_BitVector *,class TR_BitVector *,class TR_BitVector *,vcount_t,TR::TreeTop *);setVisitCount(vcount_t);OMR::Node
TR_CompactNullChecks::perform();process(TR::TreeTop *,TR::TreeTop *);TR_CompactNullChecks
TR_CompactNullChecks::process(TR::TreeTop *,TR::TreeTop *);incVisitCount();OMR::Compilation
TR_CompactNullChecks::replacePassThroughIfPossible(TR::Node *,TR::Node *,TR::Node *,TR::Node *,_Bool *,class TR_BitVector *,vcount_t,vcount_t,TR::TreeTop *);setVisitCount(vcount_t);OMR::Node
TR_CompactNullChecks::replaceNullCheckIfPossible(TR::Node *,TR::Node *,TR::Node *,TR::Node *,class TR_BitVector *,vcount_t,vcount_t,_Bool &);setVisitCount(vcount_t);OMR::Node
TR_SimplifyAnds::perform();process(TR::TreeTop *,TR::TreeTop *);TR_SimplifyAnds
TR_SimplifyAnds::process(TR::TreeTop *,TR::TreeTop *);incVisitCount();OMR::Compilation
TR_Rematerialization::TR_Rematerialization(TR::OptimizationManager *,_Bool);setOnlyRunLongRegHeuristic(_Bool);TR_Rematerialization
TR_Rematerialization::perform();process(TR::TreeTop *,TR::TreeTop *);TR_Rematerialization
TR_Rematerialization::removeNodeFromList(TR::Node *,List<TR::Node> *,List<List<TR::Node> > *,_Bool,List<TR::Node> *,List<TR::Node> *);removeNodeFromList(TR::Node *,List<TR::Node> *,List<List<TR::Node> > *,_Bool,List<TR::Node> *,List<TR::Node> *,const TR::SparseBitVector &);TR_Rematerialization
TR_Rematerialization::examineNode(TR::TreeTop *,TR::Node *,TR::Node *,vcount_t,class TR_RematState *,class TR_RematAdjustments &);decFutureUseCount();OMR::Node
TR_Rematerialization::examineNode(TR::TreeTop *,TR::Node *,TR::Node *,vcount_t,class TR_RematState *,class TR_RematAdjustments &);setVisitCount(vcount_t);OMR::Node
TR_Rematerialization::rematerializeAddresses(TR::Node *,TR::TreeTop *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_Rematerialization::examineLongRegNode(TR::Node *,vcount_t,_Bool);setVisitCount(vcount_t);OMR::Node
TR_Rematerialization::examineLongRegNode(TR::Node *,vcount_t,_Bool);calculateLongRegWeight(_Bool,_Bool);TR_Rematerialization
TR_Rematerialization::initLongRegData();setUseLongRegAllocation(_Bool);OMR::Compilation
TR_Rematerialization::initLongRegData();setLongRegDecision(_Bool);TR_Rematerialization
TR_BlockSplitter::perform();incVisitCount();OMR::Compilation
TR_BlockSplitter::perform();push(class TR::CFGNode *);TR_Stack
TR_BlockSplitter::perform();setVisitCount(vcount_t);TR::CFGNode
TR_BlockSplitter::perform();heapElementQuickSort(TR_Array<class TR_BlockSplitter::TR_IndexedBinaryHeapElement *> *,int32_t,int32_t);TR_BlockSplitter
TR_BlockSplitter::perform();set(struct BlockMapper *,struct BlockMapper *);TR_LinkHeadAndTail
TR_BlockSplitter::splitBlock(TR::Block *,TR_LinkHeadAndTail<struct BlockMapper> *);setStructure(class TR_Structure *);OMR::CFG
TR_BlockSplitter::splitBlock(TR::Block *,TR_LinkHeadAndTail<struct BlockMapper> *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_BlockSplitter::splitBlock(TR::Block *,TR_LinkHeadAndTail<struct BlockMapper> *);removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
TR_BlockSplitter::synergisticDepthCalculator(TR_LinkHeadAndTail<struct BlockMapper> *,TR::Block *);push(class TR::Block *);TR_Stack
TR_BlockSplitter::synergisticDepthCalculator(TR_LinkHeadAndTail<struct BlockMapper> *,TR::Block *);incVisitCount();OMR::Compilation
TR_BlockSplitter::synergisticDepthCalculator(TR_LinkHeadAndTail<struct BlockMapper> *,TR::Block *);dumpSynergies(TR_Array<struct TR_BlockSplitter::Synergy> *);TR_BlockSplitter
TR_BlockSplitter::processNode(TR::Node *,int32_t,TR_Array<uint32_t> *,TR_Array<struct TR_BlockSplitter::Synergy> *);setVisitCount(vcount_t);OMR::Node
TR_BlockSplitter::TR_IndexedBinaryHeapElement::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockSplitter::TR_IndexedBinaryHeapElement::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockSplitter::TR_IndexedBinaryHeapElement::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BlockSplitter::TR_IndexedBinaryHeapElement::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_CheckcastAndProfiledGuardCoalescer::doBasicCase(TR::TreeTop *,TR::TreeTop *);insertAfter(TR::TreeTop *);OMR::TreeTop
TR_CheckcastAndProfiledGuardCoalescer::doBasicCase(TR::TreeTop *,TR::TreeTop *);unlink(_Bool);OMR::TreeTop
TR_CheckcastAndProfiledGuardCoalescer::storeObjectInATemporary(TR::TreeTop *);insertBefore(TR::TreeTop *);OMR::TreeTop
TR_ColdBlockMarker::perform();identifyColdBlocks();TR_ColdBlockMarker
TR_ColdBlockMarker::identifyColdBlocks();initialize();TR_ColdBlockMarker
TR_ColdBlockMarker::isBlockCold(TR::Block *);incVisitCount();OMR::Compilation
TR_ColdBlockOutlining::perform();propagateColdInfo(_Bool);OMR::CFG
TR_ColdBlockOutlining::perform();reorderColdBlocks();TR_ColdBlockOutlining
TR_ColdBlockOutlining::perform();requestOpt(OMR::Optimizations,_Bool,TR::Block *);OMR::Optimization
TR_ProfiledNodeVersioning::temporarilySetProfilingBcInfoOnNewArrayLengthChild(TR::Node *,TR::Compilation *);setByteCodeIndex(int32_t);TR_ByteCodeInfo
TR_ProfiledNodeVersioning::temporarilySetProfilingBcInfoOnNewArrayLengthChild(TR::Node *,TR::Compilation *);setByteCodeInfo(const TR_ByteCodeInfo &);OMR::Node
TR_TrivialDeadTreeRemoval::transformBlock(TR::TreeTop *,TR::TreeTop *);deleteAll();List
TR_TrivialDeadTreeRemoval::examineNode(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_RematState::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RematState::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RematState::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RematState::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Optimization::prePerform();prePerformOnBlocks();OMR::Optimization
OMR::Optimization::postPerform();postPerformOnBlocks();OMR::Optimization
OMR::Optimization::setTrace(_Bool);setTrace(_Bool);OMR::OptimizationManager
OMR::Optimization::requestDeadTreesCleanup(_Bool,TR::Block *);requestOpt(OMR::Optimizations,_Bool,TR::Block *);OMR::Optimization
OMR::Optimization::prepareToReplaceNode(TR::Node *);prepareForNodeRemoval(TR::Node *,_Bool);OMR::Optimizer
OMR::Optimization::prepareToReplaceNode(TR::Node *);removeAllChildren();OMR::Node
OMR::Optimization::prepareToReplaceNode(TR::Node *,TR::ILOpCodes);prepareToReplaceNode(TR::Node *);OMR::Optimization
OMR::Optimization::generateAnchor(TR::Node *,TR::TreeTop *);insertBefore(TR::TreeTop *);OMR::TreeTop
OMR::Optimization::replaceNode(TR::Node *,TR::Node *,TR::TreeTop *,_Bool);incReferenceCount();OMR::Node
OMR::Optimization::replaceNode(TR::Node *,TR::Node *,TR::TreeTop *,_Bool);prepareToStopUsingNode(TR::Node *,TR::TreeTop *,_Bool);OMR::Optimization
OMR::Optimization::replaceNode(TR::Node *,TR::Node *,TR::TreeTop *,_Bool);recursivelyDecReferenceCount();OMR::Node
OMR::OptimizationManager::performChecks();reportAnalysisPhase(uint8_t);OMR::Compilation
TR::DataType::operator=(const class TR::DataType &);operator=(const class OMR::DataType &);OMR::DataType
OMR::TransformUtil::recursivelySetNodeVisitCount(TR::Node *,vcount_t);decFutureUseCount();OMR::Node
OMR::TransformUtil::recursivelySetNodeVisitCount(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::TransformUtil::removeTree(TR::Compilation *,TR::TreeTop *);removeTree(TR::TreeTop *);OMR::ResolvedMethodSymbol
OMR::Optimizer::optimize();setOptimizer(TR::Optimizer *);OMR::Compilation
OMR::Optimizer::optimize();dumpPostOptTrees();OMR::Optimizer
OMR::Optimizer::enableAllLocalOpts();setRequestOptimization(OMR::Optimizations,_Bool,TR::Block *);OMR::Optimizer
OMR::Optimizer::checkNumberOfLoopsAndBasicBlocks(TR::Compilation *,class TR_Structure *);countNumberOfLoops(class TR_Structure *);OMR::Optimizer
OMR::Optimizer::performOptimization(const struct OptimizationStrategy *,int32_t,int32_t,int32_t);reportAnalysisPhase(uint8_t);OMR::Compilation
TR_LoopEstimator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopEstimator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopEstimator::IncrementInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::IncrementInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::IncrementInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopEstimator::IncrementInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopEstimator::EntryInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::EntryInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::EntryInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopEstimator::EntryInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopEstimator::ExitCondition::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::ExitCondition::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LoopEstimator::ExitCondition::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LoopEstimator::ExitCondition::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RedundantAsyncCheckRemoval::Relationship::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RedundantAsyncCheckRemoval::Relationship::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RedundantAsyncCheckRemoval::Relationship::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RedundantAsyncCheckRemoval::Relationship::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RedundantAsyncCheckRemoval::AsyncInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RedundantAsyncCheckRemoval::AsyncInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_RedundantAsyncCheckRemoval::AsyncInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RedundantAsyncCheckRemoval::AsyncInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_RedundantAsyncCheckRemoval::AsyncInfo::addChild(class TR_StructureSubGraphNode *);add(class TR_StructureSubGraphNode *);List
TR_RedundantAsyncCheckRemoval::AsyncInfo::addParent(class TR_StructureSubGraphNode *);add(class TR_StructureSubGraphNode *);List
TR_VirtualGuardTailSplitter::VGInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_VirtualGuardTailSplitter::VGInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_VirtualGuardTailSplitter::VGInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_VirtualGuardTailSplitter::VGInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InnerPreexistence::GuardInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InnerPreexistence::GuardInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_InnerPreexistence::GuardInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InnerPreexistence::GuardInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_InnerPreexistence::GuardInfo::setVisible(uint32_t);set(int64_t);TR_BitVector
TR_HedgeNode::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeNode::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeNode::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HedgeNode::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HedgeTree::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeTree::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeTree::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HedgeTree::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HedgeTreeIterator::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeTreeIterator::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeTreeIterator::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HedgeTreeIterator::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HedgeTreeHandler::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeTreeHandler::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_HedgeTreeHandler::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_HedgeTreeHandler::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::ValuePropagation::addUnsafeArrayAccessNode(ncount_t);set(int64_t);TR_BitVector
OMR::ValuePropagation::ValueConstraint::initialize(int32_t,struct OMR::ValuePropagation::Relationship *,struct OMR::ValuePropagation::StoreRelationship *);initialize(int32_t);TR_HedgeNode
OMR::ValuePropagation::ValueConstraint::initialize(int32_t,struct OMR::ValuePropagation::Relationship *,struct OMR::ValuePropagation::StoreRelationship *);setFirst(struct OMR::ValuePropagation::Relationship *);TR_LinkHead0
OMR::ValuePropagation::ValueConstraint::initialize(int32_t,struct OMR::ValuePropagation::Relationship *,struct OMR::ValuePropagation::StoreRelationship *);setFirst(struct OMR::ValuePropagation::StoreRelationship *);TR_LinkHead0
TR_LiveOnNotAllPaths::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR_FirstUseOfLoad::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_FirstUseOfLoad::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_FirstUseOfLoad::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_FirstUseOfLoad::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_CommonedLoad::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_CommonedLoad::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_CommonedLoad::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_CommonedLoad::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_UseOrKillInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_UseOrKillInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_UseOrKillInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_UseOrKillInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_MovableStore::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_MovableStore::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_MovableStore::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_MovableStore::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_SideExitStorePlacement::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_SideExitStorePlacement::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_SideExitStorePlacement::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_SideExitStorePlacement::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IndirectLoadAnchor::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IndirectLoadAnchor::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_IndirectLoadAnchor::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_IndirectLoadAnchor::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_StoreInformation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_StoreInformation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_StoreInformation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_StoreInformation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_EdgeInformation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_EdgeInformation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_EdgeInformation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_EdgeInformation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_EdgeStorePlacement::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_EdgeStorePlacement::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_EdgeStorePlacement::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_EdgeStorePlacement::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_EdgeStorePlacement::TR_EdgeStorePlacement(class TR_StoreInformation *,class TR_EdgeInformation *,class TR_Memory *);add(class TR_StoreInformation *);List
TR_EdgeStorePlacement::TR_EdgeStorePlacement(class TR_StoreInformation *,class TR_EdgeInformation *,class TR_Memory *);add(class TR_EdgeInformation *);List
TR_BlockStorePlacement::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockStorePlacement::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockStorePlacement::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BlockStorePlacement::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BlockStorePlacement::TR_BlockStorePlacement(class TR_StoreInformation *,TR::Block *,class TR_Memory *);add(class TR_StoreInformation *);List
TR_BlockListEntry::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockListEntry::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_BlockListEntry::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_BlockListEntry::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OrderedBlockList::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OrderedBlockList::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OrderedBlockList::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OrderedBlockList::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_SinkStores::setUsesDataFlowAnalysis(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_SinkStores::setSinkMethodMetaDataStores(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_SinkStores::setSinkStoresWithIndirectLoads(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_SinkStores::setExceptionFlagIsSticky(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_SinkStores::setSinkStoresWithStaticLoads(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
TR_BlockOrderingOptimization::connectTreesAccordingToOrder(TR_BlockList &);setNextTreeTop(TR::TreeTop *);OMR::TreeTop
TR_BlockOrderingOptimization::insertGotoFallThroughBlock(TR::TreeTop *,TR::Node *,TR::CFGNode *,TR::CFGNode *,class TR_RegionStructure *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_BlockOrderingOptimization::insertGotoFallThroughBlock(TR::TreeTop *,TR::Node *,TR::CFGNode *,TR::CFGNode *,class TR_RegionStructure *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_BlockOrderingOptimization::insertGotoFallThroughBlock(TR::TreeTop *,TR::Node *,TR::CFGNode *,TR::CFGNode *,class TR_RegionStructure *);removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
TR_BlockOrderingOptimization::insertGotoFallThroughBlock(TR::TreeTop *,TR::Node *,TR::CFGNode *,TR::CFGNode *,class TR_RegionStructure *);inheritBlockInfo(TR::Block *,_Bool);OMR::Block
TR_OrderBlocks::TR_OrderBlocks(TR::OptimizationManager *,_Bool);setTrace(_Bool);OMR::Optimization
TR_OrderBlocks::perform();initialize();TR_OrderBlocks
TR_OrderBlocks::doReordering();generateNewOrder(TR_BlockList &);TR_OrderBlocks
TR_OrderBlocks::doReordering();connectTreesAccordingToOrder(TR_BlockList &);TR_BlockOrderingOptimization
TR_OrderBlocks::chooseBestFallThroughSuccessor(TR::CFG *,TR::CFGNode *,int32_t &);remove(class TR::CFGEdge *);List
TR_OrderBlocks::chooseBestFallThroughSuccessor(TR::CFG *,TR::CFGNode *,int32_t &);reset();ListIterator
TR_OrderBlocks::removeFromOrderedBlockLists(TR::CFGNode *);remove(class TR::CFGNode *);List
TR_OrderBlocks::removeRedundantBranch(TR::CFG *,TR::Block *,TR::Node *,TR::Block *);recursivelyDecReferenceCount();OMR::Node
TR_OrderBlocks::removeRedundantBranch(TR::CFG *,TR::Block *,TR::Node *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_OrderBlocks::peepHoleBranchBlock(TR::CFG *,TR::Block *,char *);peepHoleBranchToLoopHeader(TR::CFG *,TR::Block *,TR::Block *,TR::Block *,char *);TR_OrderBlocks
TR_BlockShuffling::perform();add(class TR::CFGNode *);List
TR_BlockShuffling::perform();connectTreesAccordingToOrder(TR_BlockList &);TR_BlockOrderingOptimization
TR_OSRDefInfo::TR_OSRDefInfo(TR::OptimizationManager *);prepareUseDefInfo(_Bool,_Bool,_Bool,_Bool);TR_UseDefInfo
TR_OSRDefInfo::performAnalysis(class TR_UseDefInfo::AuxiliaryData &);addSharingInfo(class TR_UseDefInfo::AuxiliaryData &);TR_OSRDefInfo
TR_OSRDefInfo::performAnalysis(class TR_UseDefInfo::AuxiliaryData &);performFurtherAnalysis(class TR_UseDefInfo::AuxiliaryData &);TR_OSRDefInfo
TR_OSRDefInfo::processReachingDefinition(void *,class TR_UseDefInfo::AuxiliaryData &);buildOSRDefs(void *,class TR_UseDefInfo::AuxiliaryData &);TR_OSRDefInfo
TR_OSRDefInfo::buildOSRDefs(void *,class TR_UseDefInfo::AuxiliaryData &);incVisitCount();OMR::Compilation
TR_OSRDefInfo::buildOSRDefs(TR::Node *,void *,class TR_OSRPoint *,class TR_OSRPoint *,TR::Node *,class TR_UseDefInfo::AuxiliaryData &);setVisitCount(vcount_t);OMR::Node
TR_OSRDefInfo::addSharingInfo(class TR_UseDefInfo::AuxiliaryData &);empty();TR_BitVector
TR_OSRDefAnalysis::perform();setStructure(class TR_Structure *);OMR::CFG
TR_OSRDefAnalysis::perform();invalidateStructure();OMR::CFG
TR_OSRLiveRangeAnalysis::fullAnalysis(_Bool,_Bool);setStructure(class TR_Structure *);OMR::CFG
TR_OSRLiveRangeAnalysis::buildOSRLiveRangeInfo(TR::Node *,class TR_BitVector *,class TR_OSRPoint *,int32_t *,int32_t,class TR_OSRMethodData *,_Bool);empty();TR_BitVector
TR_OSRLiveRangeAnalysis::buildOSRLiveRangeInfo(TR::Node *,class TR_BitVector *,class TR_OSRPoint *,int32_t *,int32_t,class TR_OSRMethodData *,_Bool);setAll(int64_t);TR_BitVector
TR_OSRLiveRangeAnalysis::buildOSRLiveRangeInfo(TR::Node *,class TR_BitVector *,class TR_OSRPoint *,int32_t *,int32_t,class TR_OSRMethodData *,_Bool);setNumSymRefs(int32_t);TR_OSRMethodData
TR_OSRLiveRangeAnalysis::buildOSRSlotSharingInfo(TR::Node *,class TR_BitVector *,class TR_OSRPoint *,int32_t *,class TR_BitVector *);ensureSlotSharingInfoAt(const TR_ByteCodeInfo &);TR_OSRCompilationData
TR_OSRLiveRangeAnalysis::buildDeadSlotsInfo(TR::Node *,class TR_BitVector *,class TR_OSRPoint *,int32_t *,_Bool);intersectWithExistingDeadSlots(class TR_OSRPoint *,class TR_BitVector *,class TR_BitVector *,_Bool);TR_OSRLiveRangeAnalysis
TR_OSRLiveRangeAnalysis::buildDeadSlotsInfo(TR::Node *,class TR_BitVector *,class TR_OSRPoint *,int32_t *,_Bool);ensureSlotSharingInfoAt(const TR_ByteCodeInfo &);TR_OSRCompilationData
TR_OSRLiveRangeAnalysis::buildDeadPendingPushSlotsInfo(TR::Node *,class TR_BitVector *,class TR_OSRPoint *);ensureSlotSharingInfoAt(const TR_ByteCodeInfo &);TR_OSRCompilationData
TR_OSRLiveRangeAnalysis::pendingPushLiveRangeInfo(TR::Node *,class TR_BitVector *,class TR_BitVector *,class TR_OSRPoint *,class TR_OSRMethodData *);empty();TR_BitVector
TR_OSRLiveRangeAnalysis::pendingPushSlotSharingInfo(TR::Node *,class TR_BitVector *,class TR_BitVector *,class TR_OSRPoint *);ensureSlotSharingInfoAt(const TR_ByteCodeInfo &);TR_OSRCompilationData
TR_OSRLiveRangeAnalysis::intersectWithExistingDeadSlots(class TR_OSRPoint *,class TR_BitVector *,class TR_BitVector *,_Bool);empty();TR_BitVector
TR_OSRExceptionEdgeRemoval::addDeadStores(TR::Block *,class TR_BitVector &,_Bool);empty();TR_BitVector
TR_OSRExceptionEdgeRemoval::perform();setOSRInfrastructureRemoved(_Bool);OMR::Compilation
TR_PartialRedundancy::perform();setAll(int64_t);TR_BitVector
TR_PartialRedundancy::perform();empty();TR_BitVector
TR_PartialRedundancy::printTrees();incVisitCount();OMR::Compilation
TR_PartialRedundancy::duplicateExact(TR::Node *,List<TR::Node> *,List<TR::Node> *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_PartialRedundancy::duplicateExact(TR::Node *,List<TR::Node> *,List<TR::Node> *,vcount_t);add(class TR::Node *);List
TR_PartialRedundancy::duplicateExact(TR::Node *,List<TR::Node> *,List<TR::Node> *,vcount_t);setReferenceCount(rcount_t);OMR::Node
TR_PartialRedundancy::collectAllNodesToBeAnchored(List<TR::Node> *,TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_PartialRedundancy::eliminateRedundantSupportedNodes(TR::Node *,TR::Node *,_Bool,TR::TreeTop *,int32_t,vcount_t,ContainerType *,ContainerType *,TR::Node **);setVisitCount(vcount_t);OMR::Node
TR_PartialRedundancy::replaceOptimalSubNodes(TR::TreeTop *,TR::Node *,TR::Node *,int32_t,TR::Node *,TR::Node *,_Bool,int32_t,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_PartialRedundancy::processReusedNode(TR::Node *,TR::ILOpCodes,TR::SymbolReference *,int);setNumChildren(uint16_t);OMR::Node
TR_PartialRedundancy::calculateGlobalRegisterWeightsBasedOnStructure(class TR_Structure *,int32_t *);calculateFrequencyOfExecution(int32_t *);TR_Structure
TR_PartialRedundancy::getAlreadyPresentOptimalNode(TR::Node *,int32_t,vcount_t,_Bool &);setVisitCount(vcount_t);OMR::Node
TR_ExceptionCheckMotion::TR_ExceptionCheckMotion(TR::Compilation *,TR::Optimizer *,class TR_PartialRedundancy *);setRequiresStructure(_Bool);OMR::OptimizationManager
TR_ExceptionCheckMotion::analyzeBlockStructure(class TR_BlockStructure *,_Bool);deleteAll();List
TR_ExceptionCheckMotion::analyzeBlockStructure(class TR_BlockStructure *,_Bool);setAll(int64_t);TR_BitVector
TR_ExceptionCheckMotion::analyzeBlockStructure(class TR_BlockStructure *,_Bool);empty();TR_BitVector
TR_ExceptionCheckMotion::analyzeBlockStructure(class TR_BlockStructure *,_Bool);copyListFromInto(List<TR::Node> *,List<TR::Node> *);TR_ExceptionCheckMotion
TR_ExceptionCheckMotion::analyzeBlockStructure(class TR_BlockStructure *,_Bool);appendLists(List<TR::Node> *,List<TR::Node> *);TR_ExceptionCheckMotion
TR_ExceptionCheckMotion::analyzeRegionStructure(class TR_RegionStructure *,_Bool);reset();TR_RegionStructure::Cursor
TR_ExceptionCheckMotion::analyzeRegionStructure(class TR_RegionStructure *,_Bool);copyListFromInto(List<TR::Node> *,List<TR::Node> *);TR_ExceptionCheckMotion
TR_ExceptionCheckMotion::analyzeNodeToInitializeGenAndKillSets(TR::TreeTop *,vcount_t,class TR_BlockStructure *);setVisitCount(vcount_t);OMR::Node
TR_ExceptionCheckMotion::composeLists(List<TR::Node> *,List<TR::Node> *,ContainerType *);empty();TR_BitVector
TR_ExceptionCheckMotion::initializeOutList(List<TR::Node> *);deleteAll();List
TR_ExceptionCheckMotion::createAndAddListElement(TR::Node *,int32_t);setData(class TR::Node *);ListElement
TR_ExceptionCheckMotion::createAndAddListElement(TR::Node *,int32_t);setNextElement(ListElement<class TR::Node> *);ListElement
TR_ExceptionCheckMotion::createAndAddListElement(TR::Node *,int32_t);set(int64_t);TR_BitVector
TR_ExceptionCheckMotion::includeRelevantNodes(TR::Node *,vcount_t,int32_t);setVisitCount(vcount_t);OMR::Node
TR_ExceptionCheckMotion::areExceptionSuccessorsIdentical(TR::CFGNode *,TR::CFGNode *);empty();TR_BitVector
TR_RedundantExpressionAdjustment::TR_RedundantExpressionAdjustment(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_ExceptionCheckMotion *);allocateContainer(class TR_BitVector **,_Bool,_Bool);TR_BasicDFSetAnalysis
TR_RedundantExpressionAdjustment::TR_RedundantExpressionAdjustment(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_ExceptionCheckMotion *);initializeBlockInfo(_Bool);TR_BasicDFSetAnalysis
TR_RedundantExpressionAdjustment::analyzeBlockStructure(class TR_BlockStructure *,_Bool);initializeInfo(class TR_BitVector *);TR_IntersectionDFSetAnalysis
TR_RedundantExpressionAdjustment::analyzeBlockStructure(class TR_BlockStructure *,_Bool);empty();TR_BitVector
TR_PrefetchInsertion::perform();init();List
TR_PrefetchInsertion::perform();collectLoops(class TR_Structure *);TR_PrefetchInsertion
TR_PrefetchInsertion::examineLoop(class TR_RegionStructure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_PrefetchInsertion::examineNode(TR::TreeTop *,TR::Block *,TR::Node *,intptrj_t,class TR_RegionStructure *);setVisitCount(vcount_t);OMR::Node
TR_ReachabilityAnalysis::traverse(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);setTo(int64_t,_Bool);TR_BitVector
TR_ReachabilityAnalysis::traverse(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR_ReachabilityAnalysis
TR_ReachingDefinitions::perform();initializeBlockInfo(_Bool);TR_BasicDFSetAnalysis
TR_ReachingDefinitions::initializeGenAndKillSetInfo();incVisitCount();OMR::Compilation
TR_ReachingDefinitions::initializeGenAndKillSetInfoForNode(TR::Node *,class TR_BitVector &,_Bool,int32_t,TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_ReachingDefinitions::initializeGenAndKillSetInfoForNode(TR::Node *,class TR_BitVector &,_Bool,int32_t,TR::Node *);empty();TR_BitVector
TR_LoopEstimator::estimateLoopIterationsUpperBound();getLoopIncrements(class TR_BitVector &,class TR_LoopEstimator::IncrementInfo **);TR_LoopEstimator
TR_LoopEstimator::getLoopIncrements(class TR_BitVector &,class TR_LoopEstimator::IncrementInfo **);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_LoopEstimator::getLoopIncrements(class TR_BitVector &,class TR_LoopEstimator::IncrementInfo **);enqueue(class TR::Block *);TR_Queue
TR_LoopEstimator::getEntryValueForSymbol(TR::SymbolReference *);set(int64_t);TR_BitVector
TR_LoopEstimator::getEntryValue(TR::Block *,TR::SymbolReference *,class TR_BitVector &,class TR_LoopEstimator::EntryInfo **);set(int64_t);TR_BitVector
TR_RedundantAsyncCheckRemoval::perform();initialize(class TR_Structure *);TR_RedundantAsyncCheckRemoval
TR_RedundantAsyncCheckRemoval::perform();incVisitCount();OMR::Compilation
TR_RedundantAsyncCheckRemoval::initialize(class TR_Structure *);setVisitMarker(class TR_StructureSubGraphNode *);TR_RedundantAsyncCheckRemoval::AsyncInfo
TR_RedundantAsyncCheckRemoval::initialize(class TR_Structure *);setAnalysisInfo(void *);TR_Structure
TR_RedundantAsyncCheckRemoval::processAcyclicRegion(class TR_RegionStructure *);deleteAll();List
TR_RedundantAsyncCheckRemoval::processAcyclicRegion(class TR_RegionStructure *);incVisitCount();OMR::Compilation
TR_RedundantAsyncCheckRemoval::processAcyclicRegion(class TR_RegionStructure *);computeCoverageInfo(class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *);TR_RedundantAsyncCheckRemoval
TR_RedundantAsyncCheckRemoval::processAcyclicRegion(class TR_RegionStructure *);setCoverage(enum TR_RedundantAsyncCheckRemoval::CoverageKind);TR_RedundantAsyncCheckRemoval::AsyncInfo
TR_RedundantAsyncCheckRemoval::processImproperRegion(class TR_RegionStructure *);add(class TR_RegionStructure *);TR_ScratchList
TR_RedundantAsyncCheckRemoval::processImproperRegion(class TR_RegionStructure *);setCoverage(enum TR_RedundantAsyncCheckRemoval::CoverageKind);TR_RedundantAsyncCheckRemoval::AsyncInfo
TR_RedundantAsyncCheckRemoval::processImproperRegion(class TR_RegionStructure *);setHardYieldPoint();TR_RedundantAsyncCheckRemoval::AsyncInfo
TR_RedundantAsyncCheckRemoval::computeCoverageInfo(class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *);setVisitCount(vcount_t);TR::CFGNode
TR_RedundantAsyncCheckRemoval::markAncestors(class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *);setVisitCount(vcount_t);TR::CFGNode
TR_RedundantAsyncCheckRemoval::insertAsyncCheckOnSubTree(class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *);incVisitCount();OMR::Compilation
TR_RedundantAsyncCheckRemoval::insertAsyncCheckOnSubTree(class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *);computeCoverageInfo(class TR_StructureSubGraphNode *,class TR_StructureSubGraphNode *);TR_RedundantAsyncCheckRemoval
TR_RedundantAsyncCheckRemoval::performRegionalBackwardAnalysis(class TR_RegionStructure *,_Bool);enqueueSinks(class TR_RegionStructure *,TR_Queue<class TR_StructureSubGraphNode> *,_Bool);TR_RedundantAsyncCheckRemoval
TR_RedundantAsyncCheckRemoval::isMaxLoopIterationGuardedLoop(class TR_RegionStructure *);enqueue(class TR_StructureSubGraphNode *);TR_Queue
TR_RedundantAsyncCheckRemoval::containsImplicitInternalPointer(TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_RedundantAsyncCheckRemoval::originatesFromShortRunningMethod(class TR_RegionStructure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_RegisterAnticipatability::TR_RegisterAnticipatability(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_BitVector **,_Bool);performAnalysis(class TR_Structure *,_Bool);TR_BasicDFSetAnalysis
TR_RegisterAnticipatability::analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);compose(class TR_BitVector *,class TR_BitVector *);TR_BackwardIntersectionDFSetAnalysis
TR_RegisterAnticipatability::postInitializationProcessing();initializeRegisterUsageInfo();TR_RegisterAnticipatability
TR_RegisterAvailability::TR_RegisterAvailability(TR::Compilation *,TR::Optimizer *,class TR_Structure *,class TR_BitVector **,_Bool);performAnalysis(class TR_Structure *,_Bool);TR_BasicDFSetAnalysis
TR_RegisterAvailability::postInitializationProcessing();initializeRegisterUsageInfo();TR_RegisterAvailability
TR::GlobalSet::collectReferencedAutoSymRefs(TR::Node *,class TR_BitVector &,TR::NodeChecklist &);add(TR::Node *);TR::NodeChecklist
TR_RegisterCandidate::addBlock(TR::Block *,int32_t);incNumberOfLoadsAndStores(uint32_t,uint32_t);TR_RegisterCandidate::BlockInfo
TR_RegisterCandidate::removeLoopExitBlock(TR::Block *);remove(class TR::Block *);List
TR_RegisterCandidate::setWeight(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,class TR_BitVector &,class TR_BitVector &);init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
TR_RegisterCandidate::setWeight(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,class TR_BitVector &,class TR_BitVector &);processLiveOnEntryBlocks(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,_Bool);TR_RegisterCandidate
TR_RegisterCandidate::processLiveOnEntryBlocks(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,_Bool);empty();TR_BitVector
TR_RegisterCandidate::processLiveOnEntryBlocks(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,_Bool);setBitVector(class TR_BitVector &,int32_t);TR_BitVectorIterator
TR_RegisterCandidate::processLiveOnEntryBlocks(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,_Bool);extendLiveRangesForLiveOnExit(TR::Compilation *,TR::Block **,TR_Array<TR::Block *> &);TR_RegisterCandidate
TR_RegisterCandidate::processLiveOnEntryBlocks(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,_Bool);setDontAssignVMThreadRegister(_Bool);TR_RegisterCandidate
TR_RegisterCandidate::extendLiveRangesForLiveOnExit(TR::Compilation *,TR::Block **,TR_Array<TR::Block *> &);empty();TR_BitVector
TR_RegisterCandidate::recalculateWeight(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &);empty();TR_BitVector
TR_RegisterCandidate::recalculateWeight(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &);processLiveOnEntryBlocks(TR::Block **,int32_t *,TR::Compilation *,TR_Array<int32_t> &,TR_Array<int32_t> &,TR_Array<int32_t> &,class TR_BitVector *,TR_Array<TR::Block *> &,_Bool);TR_RegisterCandidate
TR_RegisterCandidates::findOrCreate(TR::SymbolReference *);add(class TR_RegisterCandidate *);TR_LinkHead0
TR_RegisterCandidates::assign(TR::Block **,int32_t,int32_t &,int32_t &);setAll(int64_t);TR_BitVector
TR_RegisterCandidates::assign(TR::Block **,int32_t,int32_t &,int32_t &);collectCfgProperties(TR::Block **,int32_t);TR_RegisterCandidates
TR_RegisterCandidates::assign(TR::Block **,int32_t,int32_t &,int32_t &);init(class TR_Memory *,uint32_t,_Bool,enum TR_AllocationKind);TR_Array
TR_RegisterCandidates::assign(TR::Block **,int32_t,int32_t &,int32_t &);setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &);OMR::CodeGenerator
TR_RegisterCandidates::assign(TR::Block **,int32_t,int32_t &,int32_t &);setFirst(class TR_RegisterCandidate *);TR_LinkHead0
TR_RegisterCandidates::collectCfgProperties(TR::Block **,int32_t);init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
TR_RegisterCandidates::collectCfgProperties(TR::Block **,int32_t);empty();TR_BitVector
TR_RegisterCandidates::lookForCandidates(TR::Node *,TR::Symbol *,TR::Symbol *,_Bool &,_Bool &);setVisitCount(vcount_t);OMR::Node
TR_RegisterCandidates::aliasesPreventAllocation(TR::Compilation *,TR::SymbolReference *);getAliases(class CS2::ASparseBitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);TR_AliasSetInterface
TR_ShrinkWrap::perform();analyzeInstructions();TR_ShrinkWrap
TR_ShrinkWrap::perform();computeSaveRestoreSets(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);TR_ShrinkWrap
TR_ShrinkWrap::perform();doPlacement(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);TR_ShrinkWrap
TR_ShrinkWrap::prePerformOnBlocks();empty();TR_BitVector
TR_ShrinkWrap::prePerformOnBlocks();setFirst(struct PreservedRegisterInfo *);TR_LinkHead0
TR_ShrinkWrap::prePerformOnBlocks();setPreservedRegsInPrologue(class TR_BitVector *);OMR::CodeGenerator
TR_ShrinkWrap::prePerformOnBlocks();setFirst(struct ReturnBlockInfo *);TR_LinkHead0
TR_ShrinkWrap::prePerformOnBlocks();setFirst(struct SWEdgeInfo *);TR_LinkHead0
TR_ShrinkWrap::analyzeInstructions();processIncomingParameterUsage(class TR_BitVector **,int32_t);OMR::X86::CodeGenerator
TR_ShrinkWrap::findJumpInstructionsInBlock(int32_t,TR::list<TR::Instruction *> *);findJumpInstructionsInCodeRegion(TR::Instruction *,TR::Instruction *,CS2::HashTable<TR::Instruction *, _Bool, TR::Allocator> &);TR_ShrinkWrap
TR_ShrinkWrap::computeSaveRestoreSets(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);setAll(int64_t);TR_BitVector
TR_ShrinkWrap::doPlacement(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);createTraversalOrder(_Bool,enum TR_AllocationKind,class TR_BitVector *);OMR::CFG
TR_ShrinkWrap::doPlacement(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);empty();TR_BitVector
TR_ShrinkWrap::doPlacement(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);computeRegisterSaveDescription(class TR_BitVector *,_Bool);OMR::X86::CodeGenerator
TR_ShrinkWrap::findMultiples(class TR_BitVector *,TR::Instruction *,_Bool,_Bool);print(TR::Compilation *,TR::FILE *);TR_BitVector
OMR::Simplifier::perform();incVisitCount();OMR::Compilation
OMR::Simplifier::perform();removeUnreachableBlocks();OMR::CFG
OMR::Simplifier::prePerformOnBlocks();reset();TR_HashTab
OMR::Simplifier::prePerformOnBlocks();init(uint32_t,_Bool);TR_HashTab
OMR::Simplifier::simplify(TR::TreeTop *,TR::Block *);setNode(TR::Node *);OMR::TreeTop
OMR::Simplifier::simplify(TR::Node *,TR::Block *);setVisitCount(vcount_t);OMR::Node
OMR::Simplifier::cleanupFlags(TR::Node *);setVisitCount(vcount_t);OMR::Node
OMR::Simplifier::setCC(TR::Node *,TR_ConditionCodeNumber);add(int32_t,TR_HashId,void *);TR_HashTabInt
OMR::Simplifier::prepareToReplaceNode(TR::Node *);prepareToReplaceNode(TR::Node *);OMR::Optimization
TR_RegionAnalysis::getRegions(TR::Compilation *);createLeafStructures(TR::CFG *,TR::Region &);TR_RegionAnalysis
TR_RegionAnalysis::getRegions(TR::Compilation *,TR::ResolvedMethodSymbol *);createLeafStructures(TR::CFG *,TR::Region &);TR_RegionAnalysis
TR_RegionAnalysis::findNaturalLoop(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &);empty();TR_BitVector
TR_RegionAnalysis::findNaturalLoop(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &);set(int64_t);TR_BitVector
TR_RegionAnalysis::addNaturalLoopNodes(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &,_Bool &,TR::Block *);set(int64_t);TR_BitVector
TR_RegionAnalysis::addNaturalLoopNodes(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &,_Bool &,TR::Block *);reset(int64_t,_Bool);TR_BitVector
TR_RegionAnalysis::addNaturalLoopNodesIterativeVersion(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &,_Bool &,TR::Block *);push(int);TR_Stack
TR_RegionAnalysis::findRegion(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &);empty();TR_BitVector
TR_RegionAnalysis::addRegionNodes(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &,_Bool &,TR::Block *);set(int64_t);TR_BitVector
TR_RegionAnalysis::addRegionNodes(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &,_Bool &,TR::Block *);reset(int64_t,_Bool);TR_BitVector
TR_RegionAnalysis::addRegionNodesIterativeVersion(class TR_RegionAnalysis::StructInfo &,WorkBitVector &,WorkBitVector &,_Bool &,TR::Block *);push(int);TR_Stack
TR_RegionAnalysis::buildRegionSubGraph(class TR_RegionStructure *,class TR_RegionAnalysis::StructInfo &,WorkBitVector &,SubGraphNodes &,TR::Region &);setEntry(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_Structure::mergeBlocks(TR::Block *,TR::Block *);setFrequency(int32_t);TR::CFGNode
TR_Structure::mergeBlocks(TR::Block *,TR::Block *);mergeInto(TR::Block *,TR::Block *);TR_Structure
TR_Structure::mergeBlocks(TR::Block *,TR::Block *);setBlock(TR::Block *);TR_BlockStructure
TR_Structure::mergeBlocks(TR::Block *,TR::Block *);setStructureOf(class TR_BlockStructure *);OMR::Block
TR_Structure::setNestingDepths(int32_t *);setNestingDepth(int16_t);TR_Structure
TR_Structure::setAnyCyclicRegionNestingDepths(int32_t *);setAnyCyclicRegionNestingDepth(int16_t);TR_Structure
TR_BlockStructure::TR_BlockStructure(TR::Compilation *,int32_t,TR::Block *);setStructureOf(class TR_BlockStructure *);OMR::Block
TR_BlockStructure::resetAnalysisInfo();setAnalysisInfo(void *);TR_Structure
TR_BlockStructure::resetAnalyzedStatus();setAnalyzedStatus(_Bool);TR_Structure
TR_BlockStructure::markStructuresWithImproperRegions();setContainsImproperRegion(_Bool);TR_Structure
TR_BlockStructure::collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);add(class TR::Block *);List
TR_BlockStructure::checkStructure(class TR_BitVector *);set(int64_t);TR_BitVector
TR_BlockStructure::renumber(int32_t);setNumber(int32_t);TR::CFGNode
TR_BlockStructure::clearAnalysisInfo();setAnalysisInfo(void *);TR_Structure
TR_BlockStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);setNestingDepth(int16_t);TR_Structure
TR_BlockStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);setMaxNestingDepth(int16_t);TR_Structure
TR_BlockStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);setDuplicatedBlock(class TR_BlockStructure *);TR_BlockStructure
TR_BlockStructure::getBlocks(List<TR::Block> *,vcount_t);setVisitCount(vcount_t);TR::CFGNode
TR_BlockStructure::getBlocks(List<TR::Block> *,vcount_t);add(class TR::Block *);List
TR_RegionStructure::addExitEdge(class TR_StructureSubGraphNode *,int32_t,_Bool,TR::CFGEdge *);add(class TR::CFGEdge *);List
TR_RegionStructure::resetAnalysisInfo();setAnalysisInfo(void *);TR_Structure
TR_RegionStructure::resetAnalyzedStatus();setAnalyzedStatus(_Bool);TR_Structure
TR_RegionStructure::mergeInto(TR::Block *,TR::Block *);reset();TR_RegionStructure::Cursor
TR_RegionStructure::mergeInto(TR::Block *,TR::Block *);renumber(int32_t);TR_Structure
TR_RegionStructure::mergeInto(TR::Block *,TR::Block *);setNumber(int32_t);TR::CFGNode
TR_RegionStructure::removeMergedBlock(TR::Block *,TR::Block *);setNumber(int32_t);TR::CFGNode
TR_RegionStructure::removeMergedBlock(TR::Block *,TR::Block *);removeSubNode(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_RegionStructure::removeMergedBlock(TR::Block *,TR::Block *);setStructure(class TR_Structure *);TR_StructureSubGraphNode
TR_RegionStructure::renumber(int32_t);setNumber(int32_t);TR::CFGNode
TR_RegionStructure::renumber(int32_t);renumber(int32_t);TR_Structure
TR_RegionStructure::addExternalEdge(class TR_Structure *,int32_t,_Bool);addExternalEdge(class TR_Structure *,int32_t,_Bool);TR_Structure
TR_RegionStructure::addExternalEdge(class TR_Structure *,int32_t,_Bool);reset();TR_RegionStructure::Cursor
TR_RegionStructure::addExternalEdge(class TR_Structure *,int32_t,_Bool);addExitEdge(class TR_StructureSubGraphNode *,int32_t,_Bool,TR::CFGEdge *);TR_RegionStructure
TR_RegionStructure::replacePart(class TR_Structure *,class TR_Structure *);setStructure(class TR_Structure *);TR_StructureSubGraphNode
TR_RegionStructure::replacePart(class TR_Structure *,class TR_Structure *);setParent(class TR_RegionStructure *);TR_Structure
TR_RegionStructure::clearAnalysisInfo();setAnalysisInfo(void *);TR_Structure
TR_RegionStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);setAsCanonicalizedLoop(_Bool);TR_RegionStructure
TR_RegionStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);setContainsInternalCycles(_Bool);TR_RegionStructure
TR_RegionStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);reset();TR_RegionStructure::Cursor
TR_RegionStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);setNestingDepth(int16_t);TR_Structure
TR_RegionStructure::cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);setMaxNestingDepth(int16_t);TR_Structure
TR_RegionStructure::replaceExitPart(int32_t,int32_t);reset();ListIterator
TR_RegionStructure::extractUnconditionalExits(TR::Compilation *const,const TR::list<TR::Block *, TR::Region &> &);extractUnconditionalExits(const TR::list<TR::Block *, TR::Region &> &);TR_RegionStructure::ExitExtraction
TR_RegionStructure::collapseIntoParent();removeSubNode(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_RegionStructure::computeInvariantSymbols();setAll(int64_t);TR_BitVector
TR_RegionStructure::computeInvariantSymbols();getBlocks(List<TR::Block> *);TR_RegionStructure
TR_RegionStructure::updateInvariantSymbols(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_RegionStructure::computeInvariantExpressions();computeInvariantSymbols();TR_RegionStructure
TR_RegionStructure::computeInvariantExpressions();getBlocks(List<TR::Block> *);TR_RegionStructure
TR_RegionStructure::updateInvariantExpressions(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_RegionStructure::addGlobalRegisterCandidateToExits(class TR_RegisterCandidate *);collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR_RegionStructure
TR_RegionStructure::addSubNode(class TR_StructureSubGraphNode *);setParent(class TR_RegionStructure *);TR_Structure
TR_RegionStructure::removeSubNode(class TR_StructureSubGraphNode *);removeSubNodeWithoutCleanup(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_RegionStructure::removeSubNode(class TR_StructureSubGraphNode *);cleanupAfterNodeRemoval();TR_RegionStructure
TR_RegionStructure::checkForInternalCycles();setContainsInternalCycles(_Bool);TR_RegionStructure
TR_RegionStructure::removeEdge(TR::CFGEdge *,_Bool);removeEdgeWithoutCleanup(TR::CFGEdge *,_Bool);TR_RegionStructure
TR_RegionStructure::removeSubNodeWithoutCleanup(class TR_StructureSubGraphNode *);setParent(class TR_RegionStructure *);TR_Structure
TR_RegionStructure::ExitExtraction::extractUnconditionalExits(const TR::list<TR::Block *, TR::Region &> &);collectWork(const TR::list<TR::Block *, TR::Region &> &);TR_RegionStructure::ExitExtraction
TR_RegionStructure::ExitExtraction::collectWorkFromRegion(class TR_RegionStructure *,const StructureSet &);enqueue(class TR_Structure *const);TR_RegionStructure::ExitExtraction
TR_RegionStructure::ExitExtraction::moveNodeIntoParent(class TR_StructureSubGraphNode *,class TR_RegionStructure *,class TR_RegionStructure *);removeSubNodeWithoutCleanup(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_RegionStructure::ExitExtraction::moveNodeIntoParent(class TR_StructureSubGraphNode *,class TR_RegionStructure *,class TR_RegionStructure *);addSubNode(class TR_StructureSubGraphNode *);TR_RegionStructure
TR_RegionStructure::ExitExtraction::moveNodeIntoParent(class TR_StructureSubGraphNode *,class TR_RegionStructure *,class TR_RegionStructure *);cleanupAfterNodeRemoval();TR_RegionStructure
TR_RegionStructure::ExitExtraction::moveOutgoingEdgeToParent(class TR_RegionStructure *,class TR_RegionStructure *,class TR_StructureSubGraphNode *,TR::CFGEdge *,_Bool);removeEdgeWithoutCleanup(TR::CFGEdge *,_Bool);TR_RegionStructure
TR_TranslateTable::createTable(uint32_t,uint32_t,uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);updateTable();TR_TranslateTable
TR_RangeTranslateTable::TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint32_t,uint32_t,uint16_t);createTable(uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);TR_TranslateTable
TR_RangeTranslateTable::TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint32_t,uint32_t,uint32_t,uint32_t,uint16_t);createTable(uint32_t,uint32_t,uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);TR_TranslateTable
TR_RangeTranslateTable::TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint16_t,uint16_t,uint16_t);createTable(uint16_t,uint16_t,uint8_t,uint8_t,uint16_t);TR_TranslateTable
TR_RangeTranslateTable::TR_RangeTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint16_t,uint16_t,uint16_t,uint16_t,uint16_t);createTable(uint16_t,uint16_t,uint16_t,uint16_t,uint8_t,uint8_t,uint16_t);TR_TranslateTable
TR_SetTranslateTable::TR_SetTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint8_t []);createTable(uint16_t,uint16_t,uint8_t,uint8_t,uint16_t);TR_TranslateTable
TR_SetTranslateTable::TR_SetTranslateTable(TR::Compilation *,uint8_t,uint8_t,uint16_t []);createTable(uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);TR_TranslateTable
TR_SetTranslateTable::TR_SetTranslateTable(TR::Compilation *,uint8_t,uint8_t,void *,int);createTable(uint32_t,uint32_t,uint8_t,uint8_t,uint16_t);TR_TranslateTable
TR_UnionDFSetAnalysis::initializeInSetInfo();empty();TR_BitVector
TR_UnionDFSetAnalysis::initializeCurrentGenKillSetInfo();empty();TR_BitVector
TR_UnionDFSetAnalysis::initializeCurrentGenKillSetInfo();setAll(int64_t);TR_BitVector
TR_UnionDFSetAnalysis::inverseInitializeInfo(class TR_BitVector *);setAll(int64_t);TR_BitVector
TR_UnionDFSetAnalysis::initializeInSetInfo();empty();TR_SingleBitContainer
TR_UnionDFSetAnalysis::initializeCurrentGenKillSetInfo();empty();TR_SingleBitContainer
TR_UnionDFSetAnalysis::initializeCurrentGenKillSetInfo();setAll(int64_t);TR_SingleBitContainer
TR_UnionDFSetAnalysis::inverseInitializeInfo(class TR_SingleBitContainer *);setAll(int64_t);TR_SingleBitContainer
TR_UseDefInfo::prepareUseDefInfo(_Bool,_Bool,_Bool,_Bool);setAll(int64_t);TR_BitVector
TR_UseDefInfo::prepareUseDefInfo(_Bool,_Bool,_Bool,_Bool);incVisitCount();OMR::Compilation
TR_UseDefInfo::prepareUseDefInfo(_Bool,_Bool,_Bool,_Bool);fillInDataStructures(class TR_UseDefInfo::AuxiliaryData &);TR_UseDefInfo
TR_UseDefInfo::prepareUseDefInfo(_Bool,_Bool,_Bool,_Bool);performAnalysis(class TR_UseDefInfo::AuxiliaryData &);TR_UseDefInfo
TR_UseDefInfo::processReachingDefinition(void *,class TR_UseDefInfo::AuxiliaryData &);buildUseDefs(void *,class TR_UseDefInfo::AuxiliaryData &);TR_UseDefInfo
TR_UseDefInfo::_runReachingDefinitions(class TR_ReachingDefinitions &,class TR_UseDefInfo::AuxiliaryData &);perform();TR_ReachingDefinitions
TR_UseDefInfo::getUsesFromDef(BitVector &,int32_t,_Bool);Or(const class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);CS2::ABitVector
TR_UseDefInfo::getUseDef(BitVector &,int32_t);Or(const class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);CS2::ABitVector
TR_UseDefInfo::getUseDef_noExpansion(BitVector &,int32_t);Or(const class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);CS2::ABitVector
TR_UseDefInfo::getUseDef_ref(int32_t,BitVector *);empty();TR_BitVector
TR_UseDefInfo::getUseDef_ref_body(int32_t,class TR_BitVector *,class TR_UseDefInfo::BitVector *);set(int64_t);TR_BitVector
TR_UseDefInfo::clearUseDef(int32_t);Clear();CS2::ABitVector
TR_UseDefInfo::getDefiningLoads(BitVector &,TR::Node *);Or(const class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);CS2::ABitVector
TR_UseDefInfo::findTrivialSymbolsToExclude(TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &);setVisitCount(vcount_t);OMR::Node
TR_UseDefInfo::isTrivialUseDefNode(TR::Node *,class TR_UseDefInfo::AuxiliaryData &);set(int64_t);TR_BitVector
TR_UseDefInfo::setVolatileSymbolsIndexAndRecurse(TR::BitVector &,int32_t);getAliases(class CS2::ASparseBitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);TR_AliasSetInterface
TR_UseDefInfo::setVolatileSymbolsIndexAndRecurse(TR::BitVector &,int32_t);getAliasesAndUnionWith(TR::SparseBitVector &);TR_AliasSetInterface
TR_UseDefInfo::isValidAutoOrParm(TR::SymbolReference *);getAliases(class CS2::ABitVector<class CS2::shared_allocator<class CS2::heap_allocator<65536, 12, class TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > > &);TR_AliasSetInterface
TR_UseDefInfo::dereferenceDefs(int32_t,BitVector &,BitVector &);Clear();CS2::ABitVector
TR_UseDefInfo::buildValueNumbersToMemorySymbolsMap();incVisitCount();OMR::Compilation
TR_UseDefInfo::findMemorySymbols(TR::Node *);setVisitCount(vcount_t);OMR::Node
TR_UseDefInfo::fillInDataStructures(class TR_UseDefInfo::AuxiliaryData &);incVisitCount();OMR::Compilation
TR_UseDefInfo::indexSymbolsAndNodes(class TR_UseDefInfo::AuxiliaryData &);reset();TR_BitVectorIterator
TR_UseDefInfo::indexSymbolsAndNodes(class TR_UseDefInfo::AuxiliaryData &);incVisitCount();OMR::Compilation
TR_UseDefInfo::findUseDefNodes(TR::Block *,TR::Node *,TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &,TR::deque<uint32_t, TR::Region &> &,_Bool);setVisitCount(vcount_t);OMR::Node
TR_UseDefInfo::findUseDefNodes(TR::Block *,TR::Node *,TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &,TR::deque<uint32_t, TR::Region &> &,_Bool);setLocalIndex(scount_t);OMR::Node
TR_UseDefInfo::findUseDefNodes(TR::Block *,TR::Node *,TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &,TR::deque<uint32_t, TR::Region &> &,_Bool);setUseDefIndex(uint16_t);OMR::Node
TR_UseDefInfo::assignAdjustedNodeIndex(TR::Block *,TR::Node *,TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &,_Bool);setVisitCount(vcount_t);OMR::Node
TR_UseDefInfo::assignAdjustedNodeIndex(TR::Block *,TR::Node *,TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &,_Bool);setUseDefIndex(uint16_t);OMR::Node
TR_UseDefInfo::assignAdjustedNodeIndex(TR::Block *,TR::Node *,TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &,_Bool);setLocalIndex(scount_t);OMR::Node
TR_UseDefInfo::insertData(TR::Block *,TR::Node *,TR::Node *,TR::TreeTop *,class TR_UseDefInfo::AuxiliaryData &,TR::SparseBitVector &,_Bool);setVisitCount(vcount_t);OMR::Node
TR_UseDefInfo::buildUseDefs(void *,class TR_UseDefInfo::AuxiliaryData &);incVisitCount();OMR::Compilation
TR_UseDefInfo::buildUseDefs(TR::Node *,void *,class TR_BitVector &,TR::Node *,class TR_UseDefInfo::AuxiliaryData &);setVisitCount(vcount_t);OMR::Node
TR_UseDefInfo::setSingleDefiningLoad(int32_t,BitVector &,BitVector &);SetToFirstOne();CS2::ABitVector<CS2::shared_allocator<CS2::heap_allocator<65536, 12, TRMemoryAllocator<TR_AllocationKind::heapAlloc, 12, 28> > > >::Cursor
TR_ValueNumberInfo::TR_ValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);GrowTo(size_t);CS2::ArrayOf
TR_ValueNumberInfo::TR_ValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);setSize(uint32_t);TR_Array
TR_ValueNumberInfo::TR_ValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);buildValueNumberInfo();TR_ValueNumberInfo
TR_ValueNumberInfo::growTo(int32_t);GrowTo(size_t);CS2::ArrayOf
TR_ValueNumberInfo::buildValueNumberInfo();allocateParmValueNumbers();TR_ValueNumberInfo
TR_ValueNumberInfo::buildValueNumberInfo();allocateShareableValueNumbers();TR_ValueNumberInfo
TR_ValueNumberInfo::buildValueNumberInfo();allocateNonShareableValueNumbers();TR_ValueNumberInfo
TR_ValueNumberInfo::allocateValueNumber(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_HashValueNumberInfo::TR_HashValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);GrowTo(size_t);CS2::ArrayOf
TR_HashValueNumberInfo::TR_HashValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);buildValueNumberInfo();TR_ValueNumberInfo
TR_HashValueNumberInfo::TR_HashValueNumberInfo(TR::Compilation *,TR::Optimizer *,_Bool,_Bool,_Bool);MakeEmpty();CS2::HashTable
TR_HashValueNumberInfo::VNHashKey::VNHashKey(TR::Node *,class TR_ValueNumberInfo *);hash(uint32_t);TR_HashValueNumberInfo::VNHashKey
TR_VirtualGuardTailSplitter::perform();initializeDataStructures();TR_VirtualGuardTailSplitter
TR_VirtualGuardTailSplitter::perform();splitLinear(TR::Block *,TR::Block *);TR_VirtualGuardTailSplitter
TR_VirtualGuardTailSplitter::initializeDataStructures();add(class TR::Block *);List
TR_VirtualGuardTailSplitter::splitLinear(TR::Block *,TR::Block *);add(class TR::Block *);List
TR_VirtualGuardTailSplitter::remergeGuard(class TR_BlockCloner &,class TR_VirtualGuardTailSplitter::VGInfo *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_VirtualGuardTailSplitter::remergeGuard(class TR_BlockCloner &,class TR_VirtualGuardTailSplitter::VGInfo *);removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
TR_VirtualGuardTailSplitter::remergeGuard(class TR_BlockCloner &,class TR_VirtualGuardTailSplitter::VGInfo *);removeAllChildren();OMR::Node
TR_VirtualGuardTailSplitter::remergeGuard(class TR_BlockCloner &,class TR_VirtualGuardTailSplitter::VGInfo *);setBranchDestination(TR::TreeTop *);OMR::Node
TR_VirtualGuardTailSplitter::putGuard(uint32_t,class TR_VirtualGuardTailSplitter::VGInfo *);setLocalIndex(scount_t);OMR::Node
TR_VirtualGuardTailSplitter::VGInfo::markRemoved();removeChild(class TR_VirtualGuardTailSplitter::VGInfo *);TR_VirtualGuardTailSplitter::VGInfo
TR_InnerPreexistence::devirtualize(class TR_InnerPreexistence::GuardInfo *);recursivelyDecReferenceCount();OMR::Node
TR_InnerPreexistence::devirtualize(class TR_InnerPreexistence::GuardInfo *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_InnerPreexistence::devirtualize(class TR_InnerPreexistence::GuardInfo *);requestOpt(OMR::Optimizations,_Bool,TR::Block *);OMR::Optimization
TR_InnerPreexistence::GuardInfo::GuardInfo(TR::Compilation *,TR::Block *,class TR_InnerPreexistence::GuardInfo *,class TR_ValueNumberInfo *,uint32_t);set(int64_t);TR_BitVector
TR_VirtualGuardHeadMerger::tailSplitBlock(TR::Block *,TR::Block *);setStructure(class TR_Structure *);OMR::CFG
TR_VirtualGuardHeadMerger::tailSplitBlock(TR::Block *,TR::Block *);setFrequency(int32_t);TR::CFGNode
TR_VirtualGuardHeadMerger::tailSplitBlock(TR::Block *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_VirtualGuardHeadMerger::tailSplitBlock(TR::Block *,TR::Block *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_VirtualGuardHeadMerger::tailSplitBlock(TR::Block *,TR::Block *);removeEdge(TR::CFGNode *,TR::CFGNode *);OMR::CFG
TR_VirtualGuardHeadMerger::tailSplitBlock(TR::Block *,TR::Block *);setUseDefInfo(class TR_UseDefInfo *);OMR::Optimizer
TR_VirtualGuardHeadMerger::tailSplitBlock(TR::Block *,TR::Block *);setValueNumberInfo(class TR_ValueNumberInfo *);OMR::Optimizer
TR::RegDepCopyRemoval::RegDepCopyRemoval(TR::OptimizationManager *);discardAllNodeChoices();TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::RegDepCopyRemoval(TR::OptimizationManager *);clearRegDepInfo();TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::perform();discardAllNodeChoices();TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::getRegDepInfo(TR_GlobalRegisterNumber);rangeCheckRegister(TR_GlobalRegisterNumber);TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::getNodeChoice(TR_GlobalRegisterNumber);rangeCheckRegister(TR_GlobalRegisterNumber);TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::processRegDeps(TR::Node *,TR::TreeTop *);clearRegDepInfo();TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::processRegDeps(TR::Node *,TR::TreeTop *);readRegDeps();TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::processRegDeps(TR::Node *,TR::TreeTop *);selectNodesToReuse(TR::NodeChecklist &);TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::processRegDeps(TR::Node *,TR::TreeTop *);selectNodesToCopy(TR::NodeChecklist &);TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::processRegDeps(TR::Node *,TR::TreeTop *);updateRegDeps(TR::NodeChecklist &);TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::makeFreshCopy(TR_GlobalRegisterNumber);insertBefore(TR::TreeTop *);OMR::TreeTop
TR::RegDepCopyRemoval::makeFreshCopy(TR_GlobalRegisterNumber);updateSingleRegDep(TR_GlobalRegisterNumber,TR::Node *);TR::RegDepCopyRemoval
TR::RegDepCopyRemoval::updateSingleRegDep(TR_GlobalRegisterNumber,TR::Node *);recursivelyDecReferenceCount();OMR::Node
TR::RegDepCopyRemoval::updateSingleRegDep(TR_GlobalRegisterNumber,TR::Node *);rememberNodeChoice(TR_GlobalRegisterNumber,TR::Node *);TR::RegDepCopyRemoval
TR_IndexExprManipulator::perform();rewriteIndexExpression(class TR_Structure *);TR_IndexExprManipulator
TR_IndexExprManipulator::rewriteIndexExpression(class TR_Structure *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_IndexExprManipulator::rewriteIndexExpression(class TR_PrimaryInductionVariable *,TR::Node *,TR::Node *,_Bool);setVisitCount(vcount_t);OMR::Node
TR_MovableStore::initCommonedLoadsList(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
TR_SinkStores::doSinking();coalesceSimilarEdgePlacements();TR_SinkStores
TR_SinkStores::placeStoresAlongEdges(List<class TR_StoreInformation> &,List<class TR_EdgeInformation> &);setStructure(class TR_Structure *);OMR::CFG
TR_SinkStores::placeStoresAlongEdges(List<class TR_StoreInformation> &,List<class TR_EdgeInformation> &);placeStoresInBlock(List<class TR_StoreInformation> &,TR::Block *);TR_SinkStores
TR_SinkStores::performStoreSinking();enableAllLocalOpts();OMR::Optimizer
TR_GeneralSinkStores::TR_GeneralSinkStores(TR::OptimizationManager *);setUsesDataFlowAnalysis(_Bool);TR_SinkStores
TR_GeneralSinkStores::TR_GeneralSinkStores(TR::OptimizationManager *);setSinkMethodMetaDataStores(_Bool);TR_SinkStores
TR_GeneralSinkStores::TR_GeneralSinkStores(TR::OptimizationManager *);setSinkStoresWithIndirectLoads(_Bool);TR_SinkStores
TR_GeneralSinkStores::TR_GeneralSinkStores(TR::OptimizationManager *);setExceptionFlagIsSticky(_Bool);TR_SinkStores
TR_GeneralSinkStores::TR_GeneralSinkStores(TR::OptimizationManager *);setSinkStoresWithStaticLoads(_Bool);TR_SinkStores
TR_GeneralSinkStores::storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);setCurrentBlock(TR::Block *);OMR::Compilation
TR_GeneralSinkStores::sinkStorePlacement(class TR_MovableStore *,_Bool);empty();TR_BitVector
TR_GeneralSinkStores::sinkStorePlacement(class TR_MovableStore *,_Bool);setVisitCount(vcount_t);TR::CFGNode
TR_GeneralSinkStores::sinkStorePlacement(class TR_MovableStore *,_Bool);add(class TR::Block *);List
TR_TrivialSinkStores::TR_TrivialSinkStores(TR::OptimizationManager *);setUsesDataFlowAnalysis(_Bool);TR_SinkStores
TR_TrivialSinkStores::TR_TrivialSinkStores(TR::OptimizationManager *);setSinkMethodMetaDataStores(_Bool);TR_SinkStores
TR_TrivialSinkStores::TR_TrivialSinkStores(TR::OptimizationManager *);setSinkStoresWithIndirectLoads(_Bool);TR_SinkStores
TR_TrivialSinkStores::TR_TrivialSinkStores(TR::OptimizationManager *);setExceptionFlagIsSticky(_Bool);TR_SinkStores
TR_TrivialSinkStores::TR_TrivialSinkStores(TR::OptimizationManager *);setSinkStoresWithStaticLoads(_Bool);TR_SinkStores
TR_TrivialSinkStores::genSideExitTree(TR::TreeTop *,TR::Block *,_Bool);setReferenceCount(rcount_t);OMR::Node
TR_TrivialSinkStores::storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);setCurrentBlock(TR::Block *);OMR::Compilation
TR_TrivialSinkStores::sinkStorePlacement(class TR_MovableStore *,_Bool);setVisitCount(vcount_t);TR::CFGNode
TR_TrivialSinkStores::duplicateTreeForSideExit(TR::TreeTop *);clear();TR_HashTab
TR_TrivialSinkStores::duplicateNodeForSideExit(TR::Node *);add(void *,TR_HashId,void *);TR_HashTab
TR_TrivialSinkStores::duplicateNodeForSideExit(TR::Node *);setReferenceCount(rcount_t);OMR::Node
TR_StripMiner::perform();init();List
TR_StripMiner::perform();collectLoops(class TR_Structure *);TR_StripMiner
TR_StripMiner::duplicateLoop(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_StripMiner::duplicateLoop(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);add(class TR::Block *);TR_ScratchList
TR_StripMiner::transformLoop(struct TR_StripMiner::LoopInfo *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_StripMiner::transformLoop(struct TR_StripMiner::LoopInfo *);join(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::transformLoop(struct TR_StripMiner::LoopInfo *);setNextTreeTop(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::transformLoop(struct TR_StripMiner::LoopInfo *);setFrequency(int32_t);TR::CFGNode
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);append(TR::TreeTop *);OMR::Block
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);setNextTreeTop(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);prepend(TR::TreeTop *);OMR::Block
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);recursivelyDecReferenceCount();OMR::Node
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);examineLoop(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType,_Bool);TR_StripMiner
TR_StripMiner::stripMineLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_StripMiner::createGotoBlock(TR::Block *,TR::Block *);append(TR::TreeTop *);OMR::Block
TR_StripMiner::createGotoBlock(TR::Block *,TR::Block *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_StripMiner::createGotoBlock(TR::Block *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::createGotoBlock(TR::Block *,TR::Block *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_StripMiner::createLoopTest(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);prepend(TR::TreeTop *);OMR::Block
TR_StripMiner::createLoopTest(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);recursivelyDecReferenceCount();OMR::Node
TR_StripMiner::createLoopTest(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_StripMiner::createLoopTest(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);join(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::createLoopTest(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);append(TR::TreeTop *);OMR::Block
TR_StripMiner::createLoopTest(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType);setNextTreeTop(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);append(TR::TreeTop *);OMR::Block
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);join(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);setNextTreeTop(TR::TreeTop *);OMR::TreeTop
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);recursivelyDecReferenceCount();OMR::Node
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);redirect(TR::Block *,TR::Block *,TR::Block *);TR_StripMiner
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);setBranchDestination(TR::TreeTop *);OMR::Node
TR_StripMiner::createStartOffsetLoop(struct TR_StripMiner::LoopInfo *,TR::Block *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
TR_StripMiner::examineLoop(struct TR_StripMiner::LoopInfo *,TR_ClonedLoopType,_Bool);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_StripMiner::examineNode(struct TR_StripMiner::LoopInfo *,TR::Node *,TR::Node *,TR::SymbolReference *,vcount_t,TR_ClonedLoopType,_Bool,int32_t);setVisitCount(vcount_t);OMR::Node
TR_StripMiner::checkIfIncrementalIncreasesOfPIV(struct TR_StripMiner::LoopInfo *);getBlocks(List<TR::Block> *);TR_RegionStructure
TR_StripMiner::findLeavesInList();init();List
TR_StripMiner::findLeavesInList();deleteAll();List
TR_StripMiner::findLeavesInList();add(struct TR_StripMiner::LoopInfo *);TR_ScratchList
TR::VPConstraint::print(OMR::ValuePropagation *);print(TR::Compilation *,TR::FILE *);TR::VPConstraint
TR::VPShortConst::create(OMR::ValuePropagation *,int16_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPShortRange::create(OMR::ValuePropagation *,int16_t,int16_t,enum TR_YesNoMaybe);setCanOverflow(enum TR_YesNoMaybe);TR::VPShortConstraint
TR::VPShortRange::create(OMR::ValuePropagation *,int16_t,int16_t,enum TR_YesNoMaybe);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPIntConst::create(OMR::ValuePropagation *,int32_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPIntRange::create(OMR::ValuePropagation *,int32_t,int32_t,enum TR_YesNoMaybe);setCanOverflow(enum TR_YesNoMaybe);TR::VPIntConstraint
TR::VPIntRange::create(OMR::ValuePropagation *,int32_t,int32_t,enum TR_YesNoMaybe);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPLongConst::create(OMR::ValuePropagation *,int64_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPLongRange::create(OMR::ValuePropagation *,int64_t,int64_t,_Bool,enum TR_YesNoMaybe);setCanOverflow(enum TR_YesNoMaybe);TR::VPLongConstraint
TR::VPLongRange::create(OMR::ValuePropagation *,int64_t,int64_t,_Bool,enum TR_YesNoMaybe);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPClass::create(OMR::ValuePropagation *,TR::VPClassType *,TR::VPClassPresence *,TR::VPPreexistentObject *,TR::VPArrayInfo *,TR::VPObjectLocation *);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPResolvedClass::create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPFixedClass::create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPFixedClass::print(TR::Compilation *,TR::FILE *);print(TR::Compilation *,TR::FILE *);TR::VPResolvedClass
TR::VPUnresolvedClass::create(OMR::ValuePropagation *,const char *,int32_t,class TR_ResolvedMethod *);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPPreexistentObject::create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPArrayInfo::create(OMR::ValuePropagation *,int32_t,int32_t,int32_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPObjectLocation::create(OMR::ValuePropagation *,enum TR::VPObjectLocation::VPObjectLocationKind);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPKnownObject::print(TR::Compilation *,TR::FILE *);print(TR::Compilation *,TR::FILE *);TR::VPFixedClass
TR::VPMergedConstraints::create(OMR::ValuePropagation *,TR::VPConstraint *,TR::VPConstraint *);add(class TR::VPConstraint *);TR_ScratchList
TR::VPMergedConstraints::create(OMR::ValuePropagation *,TR::VPConstraint *,TR::VPConstraint *);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPMergedConstraints::create(OMR::ValuePropagation *,ListElement<TR::VPConstraint> *);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPSync::create(OMR::ValuePropagation *,enum TR_YesNoMaybe);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPLessThanOrEqual::create(OMR::ValuePropagation *,int32_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPGreaterThanOrEqual::create(OMR::ValuePropagation *,int32_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPEqual::create(OMR::ValuePropagation *,int32_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::VPNotEqual::create(OMR::ValuePropagation *,int32_t);addConstraint(TR::VPConstraint *,int32_t);OMR::ValuePropagation
TR::ArraycopyTransformation::createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setArrayCopyElementType(TR::DataType);OMR::Node
TR::ArraycopyTransformation::createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setSymbolReference(TR::SymbolReference *);OMR::Node
TR::ArraycopyTransformation::createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setForwardArrayCopy(_Bool);OMR::Node
TR::ArraycopyTransformation::createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setBackwardArrayCopy(_Bool);OMR::Node
TR::ArraycopyTransformation::createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setAndIncChild(int32_t,TR::Node *);OMR::Node
TR::ArraycopyTransformation::createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::Node *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setNode(TR::Node *);OMR::TreeTop
TR::ArraycopyTransformation::createMultipleArrayNodes(TR::TreeTop *,TR::Node *);setChangedTrees(_Bool);TR::ArraycopyTransformation
TR::ArraycopyTransformation::specializeForLength(TR::TreeTop *,TR::Node *,uintptrj_t,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);createArrayNode(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);TR::ArraycopyTransformation
TR::ArraycopyTransformation::specializeForLength(TR::TreeTop *,TR::Node *,uintptrj_t,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setRarePathForwardArrayCopy(_Bool);OMR::Node
TR::ArraycopyTransformation::specializeForLength(TR::TreeTop *,TR::Node *,uintptrj_t,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setBranchDestination(TR::TreeTop *);OMR::Node
TR::ArraycopyTransformation::specializeForLength(TR::TreeTop *,TR::Node *,uintptrj_t,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setFrequency(int32_t);TR::CFGNode
TR::ArraycopyTransformation::specializeForLength(TR::TreeTop *,TR::Node *,uintptrj_t,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setIsCold(_Bool);OMR::Block
TR::ArraycopyTransformation::specializeForLength(TR::TreeTop *,TR::Node *,uintptrj_t,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);requestOpt(OMR::Optimizations,_Bool,TR::Block *);OMR::Optimization
OMR::ValuePropagation::createRelationship(int32_t,TR::VPConstraint *);setNext(struct OMR::ValuePropagation::Relationship *);TR_Link0
OMR::ValuePropagation::freeRelationship(struct OMR::ValuePropagation::Relationship *);add(struct OMR::ValuePropagation::Relationship *);TR_LinkHead0
OMR::ValuePropagation::freeRelationships(TR_LinkHead<struct OMR::ValuePropagation::Relationship> &);setFirst(struct OMR::ValuePropagation::Relationship *);TR_LinkHead0
OMR::ValuePropagation::createStoreRelationship(TR::Symbol *,struct OMR::ValuePropagation::Relationship *);setFirst(struct OMR::ValuePropagation::Relationship *);TR_LinkHead0
OMR::ValuePropagation::createStoreRelationship(TR::Symbol *,struct OMR::ValuePropagation::Relationship *);setNext(struct OMR::ValuePropagation::StoreRelationship *);TR_Link0
OMR::ValuePropagation::freeStoreRelationship(struct OMR::ValuePropagation::StoreRelationship *);freeRelationships(TR_LinkHead<struct OMR::ValuePropagation::Relationship> &);OMR::ValuePropagation
OMR::ValuePropagation::freeStoreRelationship(struct OMR::ValuePropagation::StoreRelationship *);add(struct OMR::ValuePropagation::StoreRelationship *);TR_LinkHead0
OMR::ValuePropagation::freeStoreRelationships(TR_LinkHead<struct OMR::ValuePropagation::StoreRelationship> &);setFirst(struct OMR::ValuePropagation::StoreRelationship *);TR_LinkHead0
OMR::ValuePropagation::freeValueConstraints(ValueConstraints &);empty(TR_HedgeTree<class OMR::ValuePropagation::ValueConstraint> &);TR_HedgeTreeHandler
OMR::ValuePropagation::createEdgeConstraints(TR::CFGEdge *,_Bool);freeValueConstraints(ValueConstraints &);OMR::ValuePropagation
OMR::ValuePropagation::mergeStoreRelationships(class OMR::ValuePropagation::ValueConstraint *,class OMR::ValuePropagation::ValueConstraint *,_Bool);deleteAll();List
OMR::ValuePropagation::mergeValueConstraints(class OMR::ValuePropagation::ValueConstraint *,class OMR::ValuePropagation::ValueConstraint *,_Bool);mergeRelationships(TR_LinkHead<struct OMR::ValuePropagation::Relationship> &,TR_LinkHead<struct OMR::ValuePropagation::Relationship> &,int32_t,_Bool,struct OMR::ValuePropagation::StoreRelationship *,List<TR::Symbol> *,_Bool);OMR::ValuePropagation
OMR::ValuePropagation::mergeValueConstraints(class OMR::ValuePropagation::ValueConstraint *,class OMR::ValuePropagation::ValueConstraint *,_Bool);mergeStoreRelationships(class OMR::ValuePropagation::ValueConstraint *,class OMR::ValuePropagation::ValueConstraint *,_Bool);OMR::ValuePropagation
OMR::ValuePropagation::mergeEdgeConstraints(struct OMR::ValuePropagation::EdgeConstraints *,struct OMR::ValuePropagation::EdgeConstraints *);freeValueConstraints(ValueConstraints &);OMR::ValuePropagation
OMR::ValuePropagation::mergeConstraintIntoEdge(class OMR::ValuePropagation::ValueConstraint *,struct OMR::ValuePropagation::EdgeConstraints *);mergeValueConstraints(class OMR::ValuePropagation::ValueConstraint *,class OMR::ValuePropagation::ValueConstraint *,_Bool);OMR::ValuePropagation
OMR::ValuePropagation::mergeBackEdgeConstraints(struct OMR::ValuePropagation::EdgeConstraints *);reset(TR_HedgeTree<class OMR::ValuePropagation::ValueConstraint> &);TR_HedgeTreeIterator
OMR::ValuePropagation::createStoreConstraints(TR::Node *);freeRelationships(TR_LinkHead<struct OMR::ValuePropagation::Relationship> &);OMR::ValuePropagation
OMR::ValuePropagation::createStoreConstraints(TR::Node *);setFirst(struct OMR::ValuePropagation::Relationship *);TR_LinkHead0
OMR::ValuePropagation::setUnreachableStore(struct OMR::ValuePropagation::StoreRelationship *);freeRelationships(TR_LinkHead<struct OMR::ValuePropagation::Relationship> &);OMR::ValuePropagation
OMR::ValuePropagation::setUnreachableStore(struct OMR::ValuePropagation::StoreRelationship *);setFirst(struct OMR::ValuePropagation::Relationship *);TR_LinkHead0
OMR::ValuePropagation::replaceByConstant(TR::Node *,TR::VPConstraint *,_Bool);removeChildren(TR::Node *,_Bool);OMR::ValuePropagation
OMR::ValuePropagation::replaceByConstant(TR::Node *,TR::VPConstraint *,_Bool);setUseDefIndex(uint16_t);OMR::Node
OMR::ValuePropagation::replaceByConstant(TR::Node *,TR::VPConstraint *,_Bool);invalidateValueNumberInfo();OMR::ValuePropagation
OMR::ValuePropagation::replaceByConstant(TR::Node *,TR::VPConstraint *,_Bool);invalidateUseDefInfo();OMR::ValuePropagation
OMR::ValuePropagation::replaceByConstant(TR::Node *,TR::VPConstraint *,_Bool);setEnableSimplifier();OMR::ValuePropagation
OMR::ValuePropagation::mustTakeException();removeRestOfBlock();OMR::ValuePropagation
OMR::ValuePropagation::setUnreachablePath();setUnreachablePath(ValueConstraints &);OMR::ValuePropagation
OMR::ValuePropagation::setUnreachablePath(TR::CFGEdge *);setUnreachablePath(ValueConstraints &);OMR::ValuePropagation
OMR::ValuePropagation::setUnreachablePath(ValueConstraints &);freeValueConstraints(ValueConstraints &);OMR::ValuePropagation
OMR::ValuePropagation::setUnreachablePath(ValueConstraints &);addConstraintToList(TR::Node *,int32_t,int32_t,TR::VPConstraint *,ValueConstraints *,_Bool);OMR::ValuePropagation
OMR::ValuePropagation::checkAllUnsafeReferences(TR::Node *,vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::ValuePropagation::doDelayedTransformations();deleteAll();List
OMR::ValuePropagation::doDelayedTransformations();set(ListBase<struct OMR::ValuePropagation::TR_TreeTopWrtBarFlag> *);ListIterator
OMR::ValuePropagation::doDelayedTransformations();setFirst(struct OMR::ValuePropagation::CallInfo *);TR_LinkHead0
OMR::ValuePropagation::doDelayedTransformations();setFirst(struct OMR::ValuePropagation::VirtualGuardInfo *);TR_LinkHead0
OMR::ValuePropagation::doDelayedTransformations();init();List
OMR::ValuePropagation::doDelayedTransformations();setFirst(struct OMR::ValuePropagation::ClassInitInfo *);TR_LinkHead0
OMR::ValuePropagation::doDelayedTransformations();empty();TR_BitVector
OMR::ValuePropagation::transformStringConcats(struct OMR::ValuePropagation::VPStringCached *);recursivelyDecReferenceCount();OMR::Node
OMR::ValuePropagation::transformStringConcats(struct OMR::ValuePropagation::VPStringCached *);setNumChildren(uint16_t);OMR::Node
OMR::ValuePropagation::transformStringConcats(struct OMR::ValuePropagation::VPStringCached *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::ValuePropagation::transformStringConcats(struct OMR::ValuePropagation::VPStringCached *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::ValuePropagation::transformStringCtors(struct OMR::ValuePropagation::VPTreeTopPair *);decReferenceCount();OMR::Node
OMR::ValuePropagation::transformStringCtors(struct OMR::ValuePropagation::VPTreeTopPair *);setNumChildren(uint16_t);OMR::Node
OMR::ValuePropagation::transformStringCtors(struct OMR::ValuePropagation::VPTreeTopPair *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::ValuePropagation::transformStringCtors(struct OMR::ValuePropagation::VPTreeTopPair *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::ValuePropagation::transformStringCtors(struct OMR::ValuePropagation::VPTreeTopPair *);unlink(_Bool);OMR::TreeTop
OMR::ValuePropagation::transformReferenceArrayCopy(struct OMR::ValuePropagation::TR_TreeTopWrtBarFlag *);transformReferenceArrayCopyWithoutCreatingStoreTrees(struct OMR::ValuePropagation::TR_TreeTopWrtBarFlag *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);OMR::ValuePropagation
OMR::ValuePropagation::transformReferenceArrayCopyWithoutCreatingStoreTrees(struct OMR::ValuePropagation::TR_TreeTopWrtBarFlag *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);createReferenceArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);OMR::ValuePropagation
OMR::ValuePropagation::transformReferenceArrayCopyWithoutCreatingStoreTrees(struct OMR::ValuePropagation::TR_TreeTopWrtBarFlag *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);createConditionalBlocksBeforeTree(TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::TreeTop *,TR::CFG *,_Bool,_Bool);OMR::Block
OMR::ValuePropagation::transformReferenceArrayCopyWithoutCreatingStoreTrees(struct OMR::ValuePropagation::TR_TreeTopWrtBarFlag *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::ValuePropagation::createReferenceArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setNumChildren(uint16_t);OMR::Node
OMR::ValuePropagation::createReferenceArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::ValuePropagation::createReferenceArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::ValuePropagation::createReferenceArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setNode(TR::Node *);OMR::TreeTop
OMR::ValuePropagation::printStructureInfo(class TR_Structure *,_Bool,_Bool);printParentStructure(class TR_Structure *);OMR::ValuePropagation
OMR::ValuePropagation::removeConstraints(int32_t,ValueConstraints *,_Bool);generalizeStores(ValueConstraints &,ValueConstraints *);OMR::ValuePropagation
OMR::ValuePropagation::checkForInductionVariableIncrement(TR::Node *);set(int64_t);TR_BitVector
OMR::ValuePropagation::setUpInductionVariables(class TR_StructureSubGraphNode *);clearInductionVariables();TR_RegionStructure
OMR::ValuePropagation::createNewBlockInfoForVersioning(TR::Block *);deleteAll();List
OMR::ValuePropagation::createNewBlockInfoForVersioning(TR::Block *);empty();TR_BitVector
OMR::ValuePropagation::createNewBlockInfoForVersioning(TR::Block *);setFirst(struct OMR::ValuePropagation::FirstLoadOfNonInvariant *);TR_LinkHead0
OMR::ValuePropagation::createNewBucketForArrayIndex(struct OMR::ValuePropagation::ArrayLengthToVersion *,TR_LinkHead<struct OMR::ValuePropagation::ArrayLengthToVersion> *,int32_t,TR::Node *,TR::Node *,class TR_OpaqueClassBlock *);add(class TR::Node *);TR_ScratchList
OMR::ValuePropagation::createNewBucketForArrayIndex(struct OMR::ValuePropagation::ArrayLengthToVersion *,TR_LinkHead<struct OMR::ValuePropagation::ArrayLengthToVersion> *,int32_t,TR::Node *,TR::Node *,class TR_OpaqueClassBlock *);add(struct OMR::ValuePropagation::ArrayIndexInfo *);TR_LinkHead0
OMR::ValuePropagation::prepareForBlockVersion(TR_LinkHead<struct OMR::ValuePropagation::ArrayLengthToVersion> *);setAll(int64_t);TR_BitVector
OMR::ValuePropagation::addToSortedList(TR_LinkHead<struct OMR::ValuePropagation::ArrayLengthToVersion> *,struct OMR::ValuePropagation::ArrayLengthToVersion *);insertAfter(struct OMR::ValuePropagation::ArrayLengthToVersion *,struct OMR::ValuePropagation::ArrayLengthToVersion *);TR_LinkHead0
OMR::ValuePropagation::ValueConstraintHandler::free(class OMR::ValuePropagation::ValueConstraint *);freeValueConstraint(class OMR::ValuePropagation::ValueConstraint *);OMR::ValuePropagation
TR::GlobalValuePropagation::perform();initialize();OMR::ValuePropagation
TR::GlobalValuePropagation::perform();setIntersectionFailed(_Bool);OMR::ValuePropagation
TR::GlobalValuePropagation::perform();getParmValues();OMR::ValuePropagation
TR::GlobalValuePropagation::perform();determineConstraints();TR::GlobalValuePropagation
TR::GlobalValuePropagation::perform();requestOpt(OMR::Optimizations,_Bool,TR::Block *);OMR::Optimization
TR::GlobalValuePropagation::perform();doDelayedTransformations();OMR::ValuePropagation
TR::GlobalValuePropagation::determineConstraints();incVisitCount();OMR::Compilation
TR::GlobalValuePropagation::determineConstraints();setRoot(TR_HedgeTree<class OMR::ValuePropagation::ValueConstraint> &,class OMR::ValuePropagation::ValueConstraint *);TR_HedgeTreeHandler
TR::GlobalValuePropagation::determineConstraints();processStructure(class TR_StructureSubGraphNode *,_Bool,_Bool);TR::GlobalValuePropagation
TR::GlobalValuePropagation::processAcyclicRegion(class TR_StructureSubGraphNode *,_Bool,_Bool);processRegionSubgraph(class TR_StructureSubGraphNode *,_Bool,_Bool,_Bool);TR::GlobalValuePropagation
TR::GlobalValuePropagation::processNaturalLoop(class TR_StructureSubGraphNode *,_Bool,_Bool);processRegionSubgraph(class TR_StructureSubGraphNode *,_Bool,_Bool,_Bool);TR::GlobalValuePropagation
TR::GlobalValuePropagation::processImproperLoop(class TR_StructureSubGraphNode *,_Bool,_Bool);generalizeStores(ValueConstraints &,ValueConstraints *);OMR::ValuePropagation
TR::GlobalValuePropagation::processImproperLoop(class TR_StructureSubGraphNode *,_Bool,_Bool);freeValueConstraints(ValueConstraints &);OMR::ValuePropagation
TR::GlobalValuePropagation::processImproperLoop(class TR_StructureSubGraphNode *,_Bool,_Bool);setRoot(TR_HedgeTree<class OMR::ValuePropagation::ValueConstraint> &,class OMR::ValuePropagation::ValueConstraint *);TR_HedgeTreeHandler
TR::GlobalValuePropagation::processImproperLoop(class TR_StructureSubGraphNode *,_Bool,_Bool);propagateOutputConstraints(class TR_StructureSubGraphNode *,_Bool,_Bool,List<TR::CFGEdge> &,List<TR::CFGEdge> *);TR::GlobalValuePropagation
TR::GlobalValuePropagation::processRegionSubgraph(class TR_StructureSubGraphNode *,_Bool,_Bool,_Bool);setVisitCount(vcount_t);TR::CFGNode
TR::GlobalValuePropagation::processRegionSubgraph(class TR_StructureSubGraphNode *,_Bool,_Bool,_Bool);processStructure(class TR_StructureSubGraphNode *,_Bool,_Bool);TR::GlobalValuePropagation
TR::GlobalValuePropagation::processRegionSubgraph(class TR_StructureSubGraphNode *,_Bool,_Bool,_Bool);propagateOutputConstraints(class TR_StructureSubGraphNode *,_Bool,_Bool,List<TR::CFGEdge> &,List<TR::CFGEdge> *);TR::GlobalValuePropagation
TR::GlobalValuePropagation::processRegionNode(class TR_StructureSubGraphNode *,_Bool,_Bool);setVisitCount(vcount_t);TR::CFGNode
TR::GlobalValuePropagation::processRegionNode(class TR_StructureSubGraphNode *,_Bool,_Bool);processStructure(class TR_StructureSubGraphNode *,_Bool,_Bool);TR::GlobalValuePropagation
TR::GlobalValuePropagation::processBlock(class TR_StructureSubGraphNode *,_Bool,_Bool);setFirst(struct OMR::ValuePropagation::BooleanNegationInfo *);TR_LinkHead0
TR::GlobalValuePropagation::processBlock(class TR_StructureSubGraphNode *,_Bool,_Bool);processTrees(TR::TreeTop *,TR::TreeTop *);OMR::ValuePropagation
TR::GlobalValuePropagation::processBlock(class TR_StructureSubGraphNode *,_Bool,_Bool);propagateOutputConstraints(class TR_StructureSubGraphNode *,_Bool,_Bool,List<TR::CFGEdge> &,List<TR::CFGEdge> *);TR::GlobalValuePropagation
TR::GlobalValuePropagation::buildInputConstraints(TR::CFGNode *);freeValueConstraints(ValueConstraints &);OMR::ValuePropagation
TR::GlobalValuePropagation::buildInputConstraints(TR::CFGNode *);setUnreachablePath();OMR::ValuePropagation
TR::GlobalValuePropagation::propagateOutputConstraints(class TR_StructureSubGraphNode *,_Bool,_Bool,List<TR::CFGEdge> &,List<TR::CFGEdge> *);setUnreachablePath();OMR::ValuePropagation
TR_Stats::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Stats::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_Stats::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Stats::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_Stats::TR_Stats(const char *);reset();TR_Stats
TR_Stats::TR_Stats();reset();TR_Stats
OMR::ValuePropagation::ValuePropagation(TR::OptimizationManager *);setVP(OMR::ValuePropagation *);OMR::ValuePropagation::ValueConstraintHandler
OMR::ValuePropagation::initialize();deleteAll();List
OMR::ValuePropagation::initialize();setRoot(TR_HedgeTree<class OMR::ValuePropagation::ValueConstraint> &,class OMR::ValuePropagation::ValueConstraint *);TR_HedgeTreeHandler
OMR::ValuePropagation::initialize();setFirst(struct OMR::ValuePropagation::Relationship *);TR_LinkHead0
OMR::ValuePropagation::initialize();setFirst(struct OMR::ValuePropagation::StoreRelationship *);TR_LinkHead0
OMR::ValuePropagation::createValueConstraint(int32_t,struct OMR::ValuePropagation::Relationship *,struct OMR::ValuePropagation::StoreRelationship *);initialize(int32_t,struct OMR::ValuePropagation::Relationship *,struct OMR::ValuePropagation::StoreRelationship *);OMR::ValuePropagation::ValueConstraint
OMR::ValuePropagation::freeValueConstraint(class OMR::ValuePropagation::ValueConstraint *);freeRelationships(TR_LinkHead<struct OMR::ValuePropagation::Relationship> &);OMR::ValuePropagation
OMR::ValuePropagation::freeValueConstraint(class OMR::ValuePropagation::ValueConstraint *);freeStoreRelationships(TR_LinkHead<struct OMR::ValuePropagation::StoreRelationship> &);OMR::ValuePropagation
OMR::ValuePropagation::freeValueConstraint(class OMR::ValuePropagation::ValueConstraint *);push(class OMR::ValuePropagation::ValueConstraint *);TR_Stack
OMR::ValuePropagation::removeChildren(TR::Node *,_Bool);setNumChildren(uint16_t);OMR::Node
OMR::ValuePropagation::transformArrayCopyCall(TR::Node *);addBlockConstraint(TR::Node *,TR::VPConstraint *,TR::Node *,_Bool);OMR::ValuePropagation
OMR::ValuePropagation::createArrayCopyCallForSpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::ValuePropagation::createArrayCopyCallForSpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);setDontTransformArrayCopyCall();OMR::Node
OMR::ValuePropagation::createArrayCopyCallForSpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);setNode(TR::Node *);OMR::TreeTop
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);setStructure(class TR_Structure *);OMR::CFG
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);append(TR::TreeTop *);OMR::Block
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);setFrequency(int32_t);TR::CFGNode
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);setIsCold(_Bool);OMR::Block
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);join(TR::TreeTop *);OMR::TreeTop
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);addEdge(TR::CFGEdge *);OMR::CFG
OMR::ValuePropagation::transformArrayCopySpineCheck(struct OMR::ValuePropagation::TR_ArrayCopySpineCheck *);copyExceptionSuccessors(TR::CFGNode *,TR::CFGNode *,_Bool (*)(TR::CFGEdge *));OMR::CFG
OMR::ValuePropagation::createPrimitiveArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool,_Bool);setNumChildren(uint16_t);OMR::Node
OMR::ValuePropagation::createPrimitiveArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool,_Bool);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::ValuePropagation::createPrimitiveArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool,_Bool);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::ValuePropagation::createPrimitiveArrayNodeWithoutFlags(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool,_Bool);setNode(TR::Node *);OMR::TreeTop
OMR::ValuePropagation::createConverterCallNodeAfterStores(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setNumChildren(uint16_t);OMR::Node
OMR::ValuePropagation::createConverterCallNodeAfterStores(TR::TreeTop *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::ValuePropagation::buildSameLeafTest(TR::Node *,TR::Node *,TR::Node *);setNode(TR::Node *);OMR::TreeTop
OMR::ValuePropagation::createArrayCopyVCallNodeAfterStores(TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::ValuePropagation::createArrayCopyVCallNodeAfterStores(TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *);setNumChildren(uint16_t);OMR::Node
OMR::ValuePropagation::generateRTArrayNodeWithoutFlags(struct OMR::ValuePropagation::TR_RealTimeArrayCopy *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setNodeIsRecognizedArrayCopyCall(_Bool);OMR::Node
OMR::ValuePropagation::generateRTArrayNodeWithoutFlags(struct OMR::ValuePropagation::TR_RealTimeArrayCopy *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setArrayCopyElementType(TR::DataType);OMR::Node
OMR::ValuePropagation::generateRTArrayNodeWithoutFlags(struct OMR::ValuePropagation::TR_RealTimeArrayCopy *,TR::TreeTop *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,TR::SymbolReference *,_Bool);setDoNotProfile(_Bool);TR_ByteCodeInfo
TR::LocalValuePropagation::prePerformOnBlocks();initialize();OMR::ValuePropagation
TR::LocalValuePropagation::prePerformOnBlocks();setIntersectionFailed(_Bool);OMR::ValuePropagation
TR::LocalValuePropagation::postPerformOnBlocks();doDelayedTransformations();OMR::ValuePropagation
TR::LocalValuePropagation::processBlock(TR::TreeTop *);MakeEmpty();CS2::HashTable
TR::LocalValuePropagation::processBlock(TR::TreeTop *);setFirst(struct OMR::ValuePropagation::BooleanNegationInfo *);TR_LinkHead0
TR::LocalValuePropagation::processBlock(TR::TreeTop *);freeValueConstraints(ValueConstraints &);OMR::ValuePropagation
TR::LocalValuePropagation::processBlock(TR::TreeTop *);getParmValues();OMR::ValuePropagation
OMR::AheadOfTimeCompile::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::AheadOfTimeCompile::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::AheadOfTimeCompile::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::AheadOfTimeCompile::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::Relocation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::Relocation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::Relocation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::Relocation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::IteratedExternalRelocation::setNeedsWideOffsets();set(unsigned char);OMR::FlagsTemplate
TR::IteratedExternalRelocation::setOrderedPair();set(unsigned char);OMR::FlagsTemplate
TR::IteratedExternalRelocation::setModifierValue(uint8_t);setValue(unsigned char,unsigned char);OMR::FlagsTemplate
OMR::CodeGenerator::lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t);lowerTreesPropagateBlockToNode(TR::Node *);OMR::CodeGenerator
OMR::CodeGenerator::identifyUnneededByteConvNodes(TR::Node *,TR::TreeTop *,vcount_t,TR::DataType);setVisitCount(vcount_t);OMR::Node
OMR::CodeGenerator::cleanupFlags(TR::Node *);setVisitCount(vcount_t);OMR::Node
OMR::CodeGenerator::createStackAtlas();copy(class TR_GCStackMap *);TR_GCStackMap
OMR::CodeGenerator::createStackAtlas();setMethodStackMap(class TR_GCStackMap *);OMR::CodeGenerator
OMR::CodeGenerator::createStackAtlas();setParmBaseOffset(int32_t);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setParameterMap(class TR_GCStackMap *);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setLocalMap(class TR_GCStackMap *);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setStackAllocMap(class TR_GCStackAllocMap *);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setNumberOfSlotsToBeInitialized(uint32_t);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setIndexOfFirstSpillTemp(uint32_t);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setInternalPointerMap(class TR_InternalPointerMap *);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setNumberOfPendingPushSlots(uint32_t);OMR::GCStackAtlas
OMR::CodeGenerator::createStackAtlas();setStackAtlas(TR::GCStackAtlas *);OMR::CodeGenerator
OMR::CodeGenerator::remapGCIndicesInInternalPtrFormat();setIndexOfFirstInternalPointer(int32_t);OMR::GCStackAtlas
OMR::CodeGenerator::remapGCIndicesInInternalPtrFormat();reset();ListIterator
OMR::CodeGenerator::remapGCIndicesInInternalPtrFormat();setNumberOfSlotsMapped(uint32_t);OMR::GCStackAtlas
OMR::CodeGenerator::buildGCMapForInstruction(TR::Instruction *);setRegisterSaveDescription(uint32_t);TR_GCStackMap
OMR::CodeGenerator::buildGCMapForInstruction(TR::Instruction *);buildRegisterMapForInstruction(class TR_GCStackMap *);OMR::X86::CodeGenerator
TR_GCStackMap::addToAtlas(TR::Instruction *,TR::CodeGenerator *);setLowestCodeOffset(uint32_t);TR_GCStackMap
TR_GCStackMap::addToAtlas(TR::Instruction *,TR::CodeGenerator *);addStackMap(class TR_GCStackMap *);OMR::GCStackAtlas
TR_GCStackMap::addToAtlas(uint8_t *,TR::CodeGenerator *);setLowestCodeOffset(uint32_t);TR_GCStackMap
TR_GCStackMap::addToAtlas(uint8_t *,TR::CodeGenerator *);addStackMap(class TR_GCStackMap *);OMR::GCStackAtlas
OMR::CodeGenerator::findAndFixCommonedReferences();incVisitCount();OMR::Compilation
OMR::CodeGenerator::findCommonedReferences(TR::Node *,TR::TreeTop *);setVisitCount(vcount_t);OMR::Node
OMR::CodeGenerator::processReference(TR::Node *,TR::Node *,TR::TreeTop *);needSpillTemp(class TR_LiveReference *,TR::Node *,TR::TreeTop *);OMR::CodeGenerator
OMR::CodeGenerator::needSpillTemp(class TR_LiveReference *,TR::Node *,TR::TreeTop *);setNeedSpillTemp(_Bool);TR_LiveReference
OMR::CodeGenerator::allocateVMThreadSpill();setSpillTempAuto();OMR::Symbol
OMR::CodeGenerator::allocateVMThreadSpill();addAutomatic(TR::AutomaticSymbol *);OMR::ResolvedMethodSymbol
OMR::CodeGenerator::allocateVMThreadSpill();setIsOccupied();TR_BackingStore
OMR::CodeGenerator::allocateVMThreadSpill();add(class TR::SymbolReference *);List
OMR::CodeGenerator::allocateSpill(int32_t,_Bool,int32_t *,_Bool);setContainsCollectedReference(_Bool);TR_BackingStore
OMR::CodeGenerator::allocateInternalPointerSpill(TR::AutomaticSymbol *);setIsOccupied();TR_BackingStore
OMR::CodeGenerator::allocateRegister(enum TR_RegisterKinds);addAllocatedRegister(TR::Register *);OMR::CodeGenerator
OMR::CodeGenerator::estimateRegisterPressure(TR::Node *,int32_t &,int32_t &,int32_t,class TR_BitVector *,_Bool,vcount_t,TR::SymbolReference *,_Bool &,_Bool,_Bool &);setVisitCount(vcount_t);OMR::Node
OMR::CodeGenerator::simulateTreeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *);simulateNodeInitialization(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);OMR::CodeGenerator
OMR::CodeGenerator::simulateSkippedTreeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *,char);simulateNodeInitialization(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);OMR::CodeGenerator
OMR::CodeGenerator::simulateDecReferenceCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);simulateNodeInitialization(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);OMR::CodeGenerator
OMR::CodeGenerator::simulateMemoryReference(struct OMR::CodeGenerator::TR_SimulatedMemoryReference *,TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *);simulateTreeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *);OMR::CodeGenerator
OMR::CodeGenerator::simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *);simulateNodeGoingLive(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);OMR::CodeGenerator
OMR::CodeGenerator::simulatedNodeState(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);simulateNodeInitialization(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);OMR::CodeGenerator
TR_LiveReference::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveReference::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_LiveReference::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LiveReference::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_LiveReference::TR_LiveReference(TR::Node *,TR::Node *,class TR_Memory *);addParentToList(TR::Node *);TR_LiveReference
TR_LiveReference::addParentToList(TR::Node *);add(class TR::Node *);List
TR_LiveRegisters::addRegister(TR::Register *,_Bool);initialize(TR::Register *);TR_LiveRegisterInfo
TR_LiveRegisters::addRegister(TR::Register *,_Bool);setLiveRegisterInfo(class TR_LiveRegisterInfo *);OMR::X86::Register
TR_LiveRegisters::addRegister(TR::Register *,_Bool);addToList(class TR_LiveRegisterInfo *&);TR_LiveRegisterInfo
TR_LiveRegisters::addRegister(TR::Register *,_Bool);setIsLive();OMR::Register
TR_LiveRegisters::setAssociation(TR::Register *,TR::RealRegister *);setAssociation(TR_RegisterMask,TR::Compilation *);TR_LiveRegisterInfo
TR_LiveRegisters::registerIsDead(TR::Register *,_Bool);removeFromList(class TR_LiveRegisterInfo *&);TR_LiveRegisterInfo
TR_LiveRegisters::registerIsDead(TR::Register *,_Bool);resetIsLive();OMR::Register
TR_LiveRegisters::registerIsDead(TR::Register *,_Bool);addToList(class TR_LiveRegisterInfo *&);TR_LiveRegisterInfo
TR_LiveRegisters::removeRegisterFromLiveList(TR::Register *);removeFromList(class TR_LiveRegisterInfo *&);TR_LiveRegisterInfo
TR_LiveRegisters::moveRegToList(class TR_LiveRegisters *,class TR_LiveRegisters *,TR::Register *);removeRegisterFromLiveList(TR::Register *);TR_LiveRegisters
TR_LiveRegisters::moveRegToList(class TR_LiveRegisters *,class TR_LiveRegisters *,TR::Register *);addToList(class TR_LiveRegisterInfo *&);TR_LiveRegisterInfo
TR_OutOfLineCodeSection::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OutOfLineCodeSection::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_OutOfLineCodeSection::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OutOfLineCodeSection::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_OutOfLineCodeSection::TR_OutOfLineCodeSection(TR::LabelSymbol *,TR::CodeGenerator *);setStartOfColdInstructionStream();OMR::Symbol
TR_OutOfLineCodeSection::TR_OutOfLineCodeSection(TR::LabelSymbol *,TR::LabelSymbol *,TR::CodeGenerator *);setStartOfColdInstructionStream();OMR::Symbol
TR_OutOfLineCodeSection::TR_OutOfLineCodeSection(TR::LabelSymbol *,TR::LabelSymbol *,TR::CodeGenerator *);setEndOfColdInstructionStream();OMR::Symbol
TR_OutOfLineCodeSection::swapInstructionListsWithCompilation();setFirstInstruction(TR::Instruction *);OMR::CodeGenerator
TR_OutOfLineCodeSection::swapInstructionListsWithCompilation();setAppendInstruction(TR::Instruction *);OMR::CodeGenerator
TR_OutOfLineCodeSection::swapInstructionListsWithCompilation();toggleIsInOOLSection();OMR::CodeGenerator
TR_OutOfLineCodeSection::TR_OutOfLineCodeSection(TR::Node *,TR::ILOpCodes,TR::Register *,TR::LabelSymbol *,TR::LabelSymbol *,TR::CodeGenerator *);setStartOfColdInstructionStream();OMR::Symbol
TR_OutOfLineCodeSection::TR_OutOfLineCodeSection(TR::Node *,TR::ILOpCodes,TR::Register *,TR::LabelSymbol *,TR::LabelSymbol *,TR::CodeGenerator *);setEndOfColdInstructionStream();OMR::Symbol
TR_OutOfLineCodeSection::createOutOfLineCallNode(TR::Node *,TR::ILOpCodes);setReferenceCount(rcount_t);OMR::Node
TR_OutOfLineCodeSection::preEvaluatePersistentHelperArguments();evaluateNodesWithFutureUses(TR::Node *);TR_OutOfLineCodeSection
TR::LabelRelative8BitRelocation::apply(TR::CodeGenerator *);apply8BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::CodeGenerator
TR::LabelRelative12BitRelocation::apply(TR::CodeGenerator *);apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool);OMR::CodeGenerator
TR::LabelRelative24BitRelocation::apply(TR::CodeGenerator *);apply24BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::CodeGenerator
TR::LabelRelative32BitRelocation::apply(TR::CodeGenerator *);apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::X86::CodeGenerator
TR::LoadLabelRelative16BitRelocation::apply(TR::CodeGenerator *);apply16BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);OMR::CodeGenerator
TR::LoadLabelRelative32BitRelocation::apply(TR::CodeGenerator *);apply32BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);OMR::X86::CodeGenerator
TR::LoadLabelRelative64BitRelocation::apply(TR::CodeGenerator *);apply64BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *);OMR::CodeGenerator
TR::ExternalOrderedPair32BitRelocation::ExternalOrderedPair32BitRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);setUpdateLocation(uint8_t *);TR::Relocation
TR::ExternalOrderedPair32BitRelocation::ExternalOrderedPair32BitRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);setTargetAddress(uint8_t *);TR::ExternalRelocation
TR::ExternalOrderedPair32BitRelocation::ExternalOrderedPair32BitRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,TR::CodeGenerator *);setTargetKind(TR_ExternalRelocationTargetKind);TR::ExternalRelocation
TR::LabelTable32BitRelocation::apply(TR::CodeGenerator *);apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *);OMR::CodeGenerator
TR_ScratchRegisterManager::findOrCreateScratchRegister(enum TR_RegisterKinds);add(class TR_ManagedScratchRegister *);List
TR_ScratchRegisterManager::donateScratchRegister(TR::Register *);add(class TR_ManagedScratchRegister *);List
OMR::RegisterDependencyConditions::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::RegisterDependencyConditions::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::RegisterDependencyConditions::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::RegisterDependencyConditions::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::RegisterDependencyConditions::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::X86::RegisterDependencyConditions::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::X86::RegisterDependencyConditions::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::RegisterDependencyConditions::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::RegisterDependencyConditions::blockPreConditionRegisters();blockRegisters(class TR_X86RegisterDependencyIndex);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::unblockPreConditionRegisters();unblockRegisters(class TR_X86RegisterDependencyIndex);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::blockPostConditionRegisters();blockRegisters(class TR_X86RegisterDependencyIndex);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::unblockPostConditionRegisters();unblockRegisters(class TR_X86RegisterDependencyIndex);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::blockPostConditionRealDependencyRegisters(TR::CodeGenerator *);blockRealDependencyRegisters(class TR_X86RegisterDependencyIndex,TR::CodeGenerator *);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::unblockPostConditionRealDependencyRegisters(TR::CodeGenerator *);unblockRealDependencyRegisters(class TR_X86RegisterDependencyIndex,TR::CodeGenerator *);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::blockPreConditionRealDependencyRegisters(TR::CodeGenerator *);blockRealDependencyRegisters(class TR_X86RegisterDependencyIndex,TR::CodeGenerator *);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::unblockPreConditionRealDependencyRegisters(TR::CodeGenerator *);unblockRealDependencyRegisters(class TR_X86RegisterDependencyIndex,TR::CodeGenerator *);TR_X86RegisterDependencyGroup
OMR::X86::RegisterDependencyConditions::stopAddingConditions();stopAddingPreConditions();OMR::X86::RegisterDependencyConditions
OMR::X86::RegisterDependencyConditions::stopAddingConditions();stopAddingPostConditions();OMR::X86::RegisterDependencyConditions
OMR::TreeEvaluator::compressedRefsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::TreeEvaluator::computeCCEvaluator(TR::Node *,TR::CodeGenerator *);setNodeRequiresConditionCodes(_Bool);OMR::Node
OMR::TreeEvaluator::computeCCEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::CodeGenerator::prepareNodeForInstructionSelection(TR::Node *);setVisitCount(vcount_t);OMR::Node
OMR::CodeGenerator::prepareNodeForInstructionSelection(TR::Node *);setRegister(TR::Register *);OMR::Node
OMR::CodeGenerator::prepareNodeForInstructionSelection(TR::Node *);setHasBeenVisitedForHints(_Bool);OMR::Node
OMR::CodeGenerator::eliminateLoadsOfLocalsThatAreNotStored(TR::Node *,int32_t);setVisitCount(vcount_t);OMR::Node
OMR::CodeGenerator::whichChildToEvaluate(TR::Node *);setEvaluationPriority(int32_t);OMR::Node
OMR::Snippet::Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);setSnippetLabel(TR::LabelSymbol *);OMR::Snippet
OMR::Snippet::Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);setGCRegisterMask(uint32_t);OMR::SnippetGCMap
OMR::Snippet::Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);setSnippetLabel(TR::LabelSymbol *);OMR::Snippet
OMR::Snippet::Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);setGCRegisterMask(uint32_t);OMR::SnippetGCMap
OMR::Snippet::setSnippetLabel(TR::LabelSymbol *);setSnippet(TR::Snippet *);OMR::LabelSymbol
OMR::Snippet::prepareSnippetForGCSafePoint();setGCSafePoint();OMR::SnippetGCMap
OMR::Snippet::prepareSnippetForGCSafePoint();setBlock(TR::Block *);OMR::Snippet
OMR::Snippet::prepareSnippetForGCSafePoint();setNeedsExceptionTableEntry();OMR::Snippet
OMR::UnresolvedDataSnippet::setUnresolvedStore();set(unsigned int);OMR::FlagsTemplate
OMR::UnresolvedDataSnippet::resetUnresolvedStore();reset(unsigned int);OMR::FlagsTemplate
TR_Debug::print(TR::FILE *,TR::UnresolvedDataSnippet *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
OMR::CodeGenerator::lowerTrees();preLowerTrees();OMR::CodeGenerator
OMR::CodeGenerator::lowerTrees();postLowerTrees();OMR::CodeGenerator
OMR::CodeGenerator::lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::CodeGenerator::lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t);OMR::CodeGenerator
OMR::CodeGenerator::lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);lowerTreesPostChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t);OMR::CodeGenerator
OMR::CodeGenerator::setUpForInstructionSelection();incVisitCount();OMR::Compilation
OMR::CodeGenerator::doInstructionSelection();setNextAvailableBlockIndex(int32_t);OMR::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();setPrePrologueSize(uint32_t);OMR::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();beginInstructionSelection();OMR::X86::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();endInstructionSelection();OMR::X86::CodeGenerator
OMR::CodeGenerator::generateCode();performAll();OMR::CodeGenPhase
OMR::CodeGenerator::removeUnusedLocals();removeUnusedLocals();OMR::ResolvedMethodSymbol
OMR::CodeGenerator::convertMultiplyToShift(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::CodeGenerator::convertMultiplyToShift(TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::CodeGenerator::convertMultiplyToShift(TR::Node *);setInt(int32_t);OMR::Node
OMR::CodeGenerator::AddArtificiallyInflatedNodeToStack(TR::Node *);push(class TR::Node *);TR_Stack
OMR::CodeGenerator::generateDebugCounter(TR::Instruction *,const char *,int32_t,int8_t,int32_t);aggregateStandardCounters(TR::Compilation *,TR::Node *,const char *,int32_t,int8_t,int32_t);TR::DebugCounterAggregation
OMR::CodeGenerator::generateDebugCounter(const char *,TR::RegisterDependencyConditions &,int32_t,int8_t,int32_t,TR::Instruction *);aggregateStandardCounters(TR::Compilation *,TR::Node *,const char *,int32_t,int8_t,int32_t);TR::DebugCounterAggregation
OMR::CodeGenerator::generateDebugCounter(const char *,class TR_ScratchRegisterManager &,int32_t,int8_t,int32_t,TR::Instruction *);aggregateStandardCounters(TR::Compilation *,TR::Node *,const char *,int32_t,int8_t,int32_t);TR::DebugCounterAggregation
OMR::CodeGenerator::initializeLinkage();setLinkage(TR::Linkage *);OMR::CodeGenerator
OMR::CodeGenerator::addToOSRTable(TR::Instruction *);addInstruction(TR::Instruction *);TR_OSRCompilationData
OMR::CodeGenerator::addToOSRTable(int32_t,TR_ByteCodeInfo &);addInstruction(int32_t,TR_ByteCodeInfo);TR_OSRCompilationData
OMR::CodeGenerator::resizeCodeMemory();resizeCodeMemory(TR::Compilation *,uint8_t *,uint32_t);TR_FrontEnd
OMR::CodeGenerator::addSymbolAndDataTypeToMap(TR::Symbol *,TR::DataType);Add(class TR::Symbol *const &,const class TR::DataType &);CS2::HashTable
OMR::CodeGenerator::startRecordingRegisterUsage();setReferencedRegisterList(TR::list<OMR::RegisterUsage *> *);OMR::CodeGenerator
OMR::CodeGenerator::startRecordingRegisterUsage();setEnableRegisterUsageTracking();OMR::CodeGenerator
OMR::CodeGenerator::stopRecordingRegisterUsage();resetEnableRegisterUsageTracking();OMR::CodeGenerator
OMR::CodeGenerator::allocateCollectedReferenceRegister();setContainsCollectedReference();OMR::Register
OMR::CodeGenerator::allocateSinglePrecisionRegister(enum TR_RegisterKinds);setIsSinglePrecision(_Bool);OMR::Register
OMR::CodeGenerator::allocate64bitRegisterPair(TR::Register *,TR::Register *);setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::RegisterPair
OMR::CodeGenerator::allocate64bitRegisterPair(TR::Register *,TR::Register *);setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::RegisterPair
OMR::CodeGenerator::allocate64bitRegisterPair(TR::Register *,TR::Register *);addAllocatedRegisterPair(TR::RegisterPair *);OMR::CodeGenerator
OMR::CodeGenerator::allocateRegisterPair(TR::Register *,TR::Register *);addAllocatedRegisterPair(TR::RegisterPair *);OMR::CodeGenerator
OMR::CodeGenerator::allocateSinglePrecisionRegisterPair(TR::Register *,TR::Register *);setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::RegisterPair
OMR::CodeGenerator::allocateSinglePrecisionRegisterPair(TR::Register *,TR::Register *);setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::RegisterPair
OMR::CodeGenerator::allocateSinglePrecisionRegisterPair(TR::Register *,TR::Register *);addAllocatedRegisterPair(TR::RegisterPair *);OMR::CodeGenerator
OMR::CodeGenerator::allocateFloatingPointRegisterPair(TR::Register *,TR::Register *);setKind(enum TR_RegisterKinds);OMR::Register
OMR::CodeGenerator::allocateFloatingPointRegisterPair(TR::Register *,TR::Register *);addAllocatedRegisterPair(TR::RegisterPair *);OMR::CodeGenerator
OMR::CodeGenerator::allocateLocalTemp(TR::DataType,_Bool);addAutomatic(TR::AutomaticSymbol *);OMR::ResolvedMethodSymbol
OMR::CodeGenerator::setEstimatedLocationsForSnippetLabels(int32_t);setEstimatedSnippetStart(int32_t);OMR::CodeGenerator
OMR::CodeGenerator::setCurrentBlock(TR::Block *);setCurrentBlock(TR::Block *);OMR::Compilation
OMR::CodeGenerator::toggleIsInOOLSection();set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::CodeGenerator::CodeGenerator();setIsLeafMethod();OMR::CodeGenerator
OMR::CodeGenerator::addMonClass(TR::Node *,class TR_OpaqueClassBlock *);add(void *);TR_Array
OMR::CodeGenerator::addAllocatedRegisterPair(TR::RegisterPair *);setIndex(uint32_t);OMR::Register
OMR::CodeGenerator::addAllocatedRegister(TR::Register *);setIndex(uint32_t);OMR::Register
OMR::CodeGenerator::addAllocatedRegister(TR::Register *);startUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::CodeGenerator::computeBlocksWithCalls();init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
OMR::RegisterUsage::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::RegisterUsage::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::RegisterUsage::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::RegisterUsage::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CodeGenPhase::performUncommonCallConstNodesPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performUncommonCallConstNodesPhase(TR::CodeGenerator *,TR::CodeGenPhase *);uncommonCallConstNodes();OMR::CodeGenerator
OMR::CodeGenPhase::performReserveCodeCachePhase(TR::CodeGenerator *,TR::CodeGenPhase *);reserveCodeCache();OMR::CodeGenerator
OMR::CodeGenPhase::performLowerTreesPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performLowerTreesPhase(TR::CodeGenerator *,TR::CodeGenPhase *);lowerTrees();OMR::CodeGenerator
OMR::CodeGenPhase::performSetupForInstructionSelectionPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performSetupForInstructionSelectionPhase(TR::CodeGenerator *,TR::CodeGenPhase *);setUpForInstructionSelection();OMR::CodeGenerator
OMR::CodeGenPhase::performInstructionSelectionPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performInstructionSelectionPhase(TR::CodeGenerator *,TR::CodeGenPhase *);doInstructionSelection();OMR::CodeGenerator
OMR::CodeGenPhase::performCreateStackAtlasPhase(TR::CodeGenerator *,TR::CodeGenPhase *);createStackAtlas();OMR::CodeGenerator
OMR::CodeGenPhase::performRegisterAssigningPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performMapStackPhase(TR::CodeGenerator *,TR::CodeGenPhase *);remapGCIndicesInInternalPtrFormat();OMR::CodeGenerator
OMR::CodeGenPhase::performMapStackPhase(TR::CodeGenerator *,TR::CodeGenPhase *);setMappingAutomatics();OMR::CodeGenerator
OMR::CodeGenPhase::performPeepholePhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performPeepholePhase(TR::CodeGenerator *,TR::CodeGenPhase *);doPeephole();OMR::CodeGenerator
OMR::CodeGenPhase::performBinaryEncodingPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performBinaryEncodingPhase(TR::CodeGenerator *,TR::CodeGenPhase *);doBinaryEncoding();OMR::X86::CodeGenerator
OMR::CodeGenPhase::performEmitSnippetsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performEmitSnippetsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);emitSnippets();OMR::CodeGenerator
OMR::CodeGenPhase::performProcessRelocationsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performProcessRelocationsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);processRelocations();OMR::CodeGenerator
OMR::CodeGenPhase::performProcessRelocationsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);resizeCodeMemory();OMR::CodeGenerator
OMR::CodeGenPhase::performProcessRelocationsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);registerAssumptions();OMR::CodeGenerator
OMR::CodeGenPhase::performProcessRelocationsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);close(TR::CodeGenerator *);OMR::GCStackAtlas
OMR::CodeGenPhase::performRemoveUnusedLocalsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);reportPhase(enum OMR::CodeGenPhase::PhaseValue);OMR::CodeGenPhase
OMR::CodeGenPhase::performRemoveUnusedLocalsPhase(TR::CodeGenerator *,TR::CodeGenPhase *);removeUnusedLocals();OMR::CodeGenerator
OMR::CodeGenPhase::performInsertDebugCountersPhase(TR::CodeGenerator *,TR::CodeGenPhase *);insertDebugCounters();OMR::CodeGenerator
OMR::MemoryReference::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::MemoryReference::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::MemoryReference::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::MemoryReference::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::MemoryReference::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::X86::MemoryReference::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::X86::MemoryReference::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::MemoryReference::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::MemoryReference::MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *);setSymbol(TR::Symbol *);OMR::SymbolReference
OMR::X86::MemoryReference::MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *);setOffset(intptrj_t);OMR::SymbolReference
OMR::X86::MemoryReference::MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *);setOffset(intptrj_t);OMR::SymbolReference
OMR::X86::MemoryReference::MemoryReference(intptrj_t,TR::CodeGenerator *);setOffset(intptrj_t);OMR::SymbolReference
OMR::X86::MemoryReference::MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *);setOffset(intptrj_t);OMR::SymbolReference
OMR::X86::MemoryReference::setFlags(uint8_t);setValue(unsigned short,unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setForceWideDisplacement();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setForceSIBByte();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setHasUnresolvedDataSnippet();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setHasUnresolvedVirtualCallSnippet();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setInUpcastingMode(_Bool);set(unsigned short,_Bool);OMR::FlagsTemplate
OMR::X86::MemoryReference::setProcessAsLongVolatileLow();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setProcessAsLongVolatileHigh();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setProcessAsFPVolatile();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setNeedsCodeAbsoluteExternalRelocation();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setIgnoreVolatile();set(unsigned short);OMR::FlagsTemplate
OMR::X86::MemoryReference::setStrideFieldInSIB(uint8_t *);setScale(uint8_t);OMR::X86::Instruction::SIB
OMR::X86::AMD64::MemoryReference::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::X86::AMD64::MemoryReference::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::X86::AMD64::MemoryReference::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::AMD64::MemoryReference::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::X86::AMD64::MemoryReference::blockRegisters();blockRegisters();OMR::X86::MemoryReference
OMR::X86::AMD64::MemoryReference::unblockRegisters();unblockRegisters();OMR::X86::MemoryReference
OMR::Register::setContainsInternalPointer();set(unsigned int);OMR::FlagsTemplate
OMR::Register::print(TR::Compilation *,TR::FILE *,enum TR_RegisterSizes);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
OMR::RegisterPair::block();block();OMR::Register
OMR::RegisterPair::unblock();unblock();OMR::Register
OMR::RegisterPair::FlattenRegisterPairs(TR_Queue<TR::Register> *);enqueue(class TR::Register *);TR_Queue
OMR::Instruction::move(TR::Instruction *);remove();OMR::Instruction
OMR::Instruction::move(TR::Instruction *);setNext(TR::Instruction *);OMR::Instruction
OMR::Instruction::move(TR::Instruction *);setPrev(TR::Instruction *);OMR::Instruction
OMR::Instruction::useRegister(TR::Register *);incTotalUseCount(ncount_t);OMR::Register
TR::ELFObjectFileGenerator::ELFObjectFileGenerator(TR::RawAllocator,const uint8_t *,size_t,const char *);initializeELFHeader();TR::ELFObjectFileGenerator
TR::ELFObjectFileGenerator::~ELFObjectFileGenerator();deallocate(void *);OMR::RawAllocator
TR::ELFObjectFileGenerator::emitObjectFile();initializeELFTrailer();TR::ELFObjectFileGenerator
TR::ELFObjectFileGenerator::initializeELFHeader();initializeELFHeaderForPlatform();TR::ELFObjectFileGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();setSupportsDivCheck();OMR::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();setSupportsDoubleWordCAS();OMR::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();setSupportsDoubleWordSet();OMR::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();setSupportsGlRegDepOnFirstBlock();OMR::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();setConsiderAllAutosAsTacticalGlobalRegisterCandidates();OMR::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();initialize(TR::Compilation *);OMR::X86::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();initLinkageToGlobalRegisterMap();OMR::X86::AMD64::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();setRealVMThreadRegister(TR::RealRegister *);OMR::CodeGenerator
OMR::X86::AMD64::CodeGenerator::CodeGenerator();init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
OMR::X86::AMD64::MemoryReference::decNodeReferenceCounts(TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::X86::MemoryReference
OMR::X86::AMD64::MemoryReference::useRegisters(TR::Instruction *,TR::CodeGenerator *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::CodeGenerator *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_ScratchRegisterManager *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::SymbolReference *,TR::CodeGenerator *,class TR_ScratchRegisterManager *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
OMR::X86::AMD64::MemoryReference::MemoryReference(TR::MemoryReference &,intptrj_t,TR::CodeGenerator *,class TR_ScratchRegisterManager *);finishInitialization(TR::CodeGenerator *,class TR_ScratchRegisterManager *);OMR::X86::AMD64::MemoryReference
TR::X86BoundaryAvoidanceInstruction::X86BoundaryAvoidanceInstruction(const struct TR_AtomicRegion *,uint8_t,uint8_t,TR::Instruction *,TR::CodeGenerator *);setNode(TR::Node *);OMR::Instruction
TR::X86BoundaryAvoidanceInstruction::X86BoundaryAvoidanceInstruction(int32_t,const struct TR_AtomicRegion *,uint8_t,uint8_t,TR::Instruction *,TR::CodeGenerator *);setNode(TR::Node *);OMR::Instruction
TR::X86ImmInstruction::adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);adjustVFPStateForCall(struct TR_VFPState *,int32_t,TR::CodeGenerator *);OMR::X86::Instruction
TR::X86RegInstruction::X86RegInstruction(TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegInstruction::X86RegInstruction(TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);trackUpperBitsOnReg(TR::Register *,TR::CodeGenerator *);TR_X86OpCode
TR::X86RegInstruction::X86RegInstruction(TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegInstruction::X86RegInstruction(TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);trackUpperBitsOnReg(TR::Register *,TR::CodeGenerator *);TR_X86OpCode
TR::X86RegInstruction::X86RegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegInstruction::X86RegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);trackUpperBitsOnReg(TR::Register *,TR::CodeGenerator *);TR_X86OpCode
TR::X86RegInstruction::X86RegInstruction(TR::RegisterDependencyConditions *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegInstruction::X86RegInstruction(TR::RegisterDependencyConditions *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);trackUpperBitsOnReg(TR::Register *,TR::CodeGenerator *);TR_X86OpCode
TR::X86RegInstruction::aboutToAssignTargetRegister();aboutToAssignRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions,enum OMR::X86::Instruction::TR_UpperHalfRefConditions);OMR::X86::Instruction
TR::X86RegRegInstruction::X86RegRegInstruction(TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegInstruction::X86RegRegInstruction(TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegInstruction::X86RegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegInstruction::X86RegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegInstruction::aboutToAssignSourceRegister();aboutToAssignRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions,enum OMR::X86::Instruction::TR_UpperHalfRefConditions);OMR::X86::Instruction
TR::X86RegRegRegInstruction::X86RegRegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegRegInstruction::X86RegRegRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegRegInstruction::X86RegRegRegInstruction(TR::Register *,TR::Register *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegRegInstruction::X86RegRegRegInstruction(TR::Register *,TR::Register *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86RegRegRegInstruction::aboutToAssignSourceRightRegister();aboutToAssignRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions,enum OMR::X86::Instruction::TR_UpperHalfRefConditions);OMR::X86::Instruction
TR::X86MemInstruction::X86MemInstruction(TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::AMD64::MemoryReference
TR::X86MemInstruction::X86MemInstruction(TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::AMD64::MemoryReference
TR::X86MemInstruction::X86MemInstruction(TR::RegisterDependencyConditions *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::AMD64::MemoryReference
TR::X86MemInstruction::X86MemInstruction(TR::RegisterDependencyConditions *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::AMD64::MemoryReference
TR::X86CallMemInstruction::adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);adjustVFPStateForCall(struct TR_VFPState *,int32_t,TR::CodeGenerator *);OMR::X86::Instruction
TR::X86MemRegInstruction::X86MemRegInstruction(TR::Register *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86MemRegInstruction::X86MemRegInstruction(TR::Register *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86MemRegInstruction::X86MemRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86MemRegInstruction::X86MemRegInstruction(TR::RegisterDependencyConditions *,TR::Register *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86MemRegInstruction::aboutToAssignSourceRegister();aboutToAssignRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions,enum OMR::X86::Instruction::TR_UpperHalfRefConditions);OMR::X86::Instruction
TR::X86MemRegRegInstruction::X86MemRegRegInstruction(TR::Register *,TR::Register *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86MemRegRegInstruction::X86MemRegRegInstruction(TR::Register *,TR::Register *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::X86MemRegRegInstruction::aboutToAssignSourceRightRegister();aboutToAssignRegister(TR::Register *,enum OMR::X86::Instruction::TR_UpperHalfRefConditions,enum OMR::X86::Instruction::TR_UpperHalfRefConditions);OMR::X86::Instruction
TR::X86RegMemInstruction::X86RegMemInstruction(TR::MemoryReference *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::AMD64::MemoryReference
TR::X86RegMemInstruction::X86RegMemInstruction(TR::MemoryReference *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::AMD64::MemoryReference
TR::X86FPRegInstruction::applyTargetRegisterToOpCode(uint8_t *);setRegisterFieldInOpcode(uint8_t *);OMR::X86::AMD64::RealRegister
TR::X86VFPRestoreInstruction::adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);setVFPState(const struct TR_VFPState &);OMR::X86::CodeGenerator
TR::X86VFPDedicateInstruction::adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);initializeVFPState(TR::class RealRegister::RegNum,int32_t);OMR::X86::CodeGenerator
TR::X86VFPReleaseInstruction::adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);setVFPState(const struct TR_VFPState &);OMR::X86::CodeGenerator
OMR::X86::AMD64::TreeEvaluator::l2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::AMD64::TreeEvaluator::l2iEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::AMD64::TreeEvaluator::lbits2dEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::AMD64::TreeEvaluator::lbits2dEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::AMD64::TreeEvaluator::lcmpEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::AMD64::TreeEvaluator::lcmpEvaluator(TR::Node *,TR::CodeGenerator *);setByteRegisterAssociation(TR::Register *);TR_LiveRegisters
OMR::X86::AMD64::TreeEvaluator::lcmpEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::AMD64::TreeEvaluator::lcmpEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::X86::AMD64::TreeEvaluator::dbits2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::AMD64::TreeEvaluator::dbits2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::AMD64::TreeEvaluator::aconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::AMD64::TreeEvaluator::lconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::AMD64::TreeEvaluator::lloadEvaluator(TR::Node *,TR::CodeGenerator *);setMemRef(TR::MemoryReference *);OMR::X86::Register
OMR::X86::AMD64::TreeEvaluator::lloadEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::AMD64::TreeEvaluator::lloadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::X86::AMD64::MemoryReference
TR::X86SystemLinkage::mapIncomingParms(TR::ResolvedMethodSymbol *,uint32_t &);mapIncomingParms(TR::ResolvedMethodSymbol *);TR::X86SystemLinkage
TR::AMD64SystemLinkage::buildArgs(TR::Node *,TR::RegisterDependencyConditions *);stopAddingPreConditions();OMR::X86::RegisterDependencyConditions
TR::AMD64SystemLinkage::buildIndirectDispatch(TR::Node *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,TR::CodeGenerator *,uint8_t,_Bool);OMR::X86::RegisterDependencyConditions
TR::AMD64SystemLinkage::buildIndirectDispatch(TR::Node *);stopAddingPostConditions();OMR::X86::RegisterDependencyConditions
TR::AMD64SystemLinkage::buildIndirectDispatch(TR::Node *);resetIsLeafMethod();OMR::CodeGenerator
TR::AMD64SystemLinkage::buildDirectDispatch(TR::Node *,_Bool);stopAddingPostConditions();OMR::X86::RegisterDependencyConditions
TR::AMD64SystemLinkage::buildDirectDispatch(TR::Node *,_Bool);resetIsLeafMethod();OMR::CodeGenerator
TR::AMD64SystemLinkage::buildDirectDispatch(TR::Node *,_Bool);setNeedsGCMap(TCollectableReferenceMask);OMR::Instruction
TR::AMD64SystemLinkage::buildDirectDispatch(TR::Node *,_Bool);stopUsingRegister(TR::Register *);OMR::CodeGenerator
TR::AMD64ABILinkage::AMD64ABILinkage(TR::CodeGenerator *);setOutgoingArgAlignment(uint32_t);TR::X86LinkageProperties
TR::AMD64ABILinkage::mapIncomingParms(TR::ResolvedMethodSymbol *,uint32_t &);mapIncomingParms(TR::ResolvedMethodSymbol *);TR::X86SystemLinkage
OMR::IlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::IlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::IlInjector::branchToBlock(int32_t);gotoBlock(TR::Block *);OMR::IlInjector
TestCompiler::IlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IlInjector::IlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *);setMethodAndTest(TR::ResolvedMethod *,class TestCompiler::TestDriver *);TestCompiler::IlInjector
TestCompiler::IlInjector::IlInjector(TR::ResolvedMethod *,TR::TypeDictionary *,class TestCompiler::TestDriver *);setMethodAndTest(TR::ResolvedMethod *,class TestCompiler::TestDriver *);TestCompiler::IlInjector
TestCompiler::IlInjector::IlInjector(TR::IlInjector *);setMethodAndTest(TR::IlInjector *);TestCompiler::IlInjector
TestCompiler::OpIlInjector::OpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);setDataType();TestCompiler::OpIlInjector
TestCompiler::OpIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::OpIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::OpIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::OpIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::BinaryOpIlInjector::BinaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);initOptArgs(uint32_t);TestCompiler::OpIlInjector
TestCompiler::BinaryOpIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::BinaryOpIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::BinaryOpIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::BinaryOpIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::BinaryOpIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::BinaryOpIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::UnaryOpIlInjector::UnaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);initOptArgs(uint32_t);TestCompiler::OpIlInjector
TestCompiler::UnaryOpIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::UnaryOpIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::UnaryOpIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::UnaryOpIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::ChildlessUnaryOpIlInjector::ChildlessUnaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);initOptArgs(uint32_t);TestCompiler::OpIlInjector
TestCompiler::ChildlessUnaryOpIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::ChildlessUnaryOpIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::ChildlessUnaryOpIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::ChildlessUnaryOpIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::ChildlessUnaryOpIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::ChildlessUnaryOpIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::CmpBranchOpIlInjector::CmpBranchOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);initOptArgs(uint32_t);TestCompiler::OpIlInjector
TestCompiler::CmpBranchOpIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::CmpBranchOpIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::CmpBranchOpIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::CmpBranchOpIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::CmpBranchOpIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::CmpBranchOpIlInjector::injectIL();ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,int32_t);OMR::IlInjector
TestCompiler::CmpBranchOpIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::CmpBranchOpIlInjector::injectIL();generateToBlock(int32_t);OMR::IlInjector
OMR::IlValue::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlValue::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlValue::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::IlValue::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::IlBuilder::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlBuilder::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlBuilder::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::IlBuilder::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::IlBuilder::ForLoopUp(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::ForLoopDown(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::ForLoopWithBreak(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::ForLoopWithContinue(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::WhileDoLoopWithBreak(const char *,TR::IlBuilder **,TR::IlBuilder **);WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
OMR::IlBuilder::WhileDoLoopWithContinue(const char *,TR::IlBuilder **,TR::IlBuilder **);WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
OMR::IlBuilder::DoWhileLoopWithBreak(const char *,TR::IlBuilder **,TR::IlBuilder **);DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
OMR::IlBuilder::DoWhileLoopWithContinue(const char *,TR::IlBuilder **,TR::IlBuilder **);DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
OMR::IlBuilder::IfThen(TR::IlBuilder **,TR::IlValue *);IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::appendNoFallThroughBlock(TR::Block *);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
TestCompiler::IlBuilder::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IlBuilder::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IlBuilder::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IlBuilder::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IlBuilder::IlBuilder(class TestCompiler::TestDriver *,TR::MethodBuilder *,TR::TypeDictionary *);setMethodAndTest(TR::ResolvedMethod *,class TestCompiler::TestDriver *);TestCompiler::IlInjector
OMR::IlType::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlType::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::IlType::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::IlType::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::TypeDictionary::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::TypeDictionary::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::TypeDictionary::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::TypeDictionary::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::StoreOpIlInjector::StoreOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);initOptArgs(uint32_t);TestCompiler::OpIlInjector
TestCompiler::StoreOpIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::StoreOpIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::StoreOpIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::StoreOpIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::StoreOpIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::StoreOpIlInjector::injectIL();storeToTemp(TR::SymbolReference *,TR::Node *);OMR::IlInjector
TestCompiler::StoreOpIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::TernaryOpIlInjector::TernaryOpIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);initOptArgs(uint32_t);TestCompiler::OpIlInjector
TestCompiler::TernaryOpIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::TernaryOpIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::TernaryOpIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::TernaryOpIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::TernaryOpIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::TernaryOpIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::UnaryOpIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::UnaryOpIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::BarIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::BarIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::BarIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::BarIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::BarIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::BarIlInjector::injectIL();ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,int32_t);OMR::IlInjector
TestCompiler::BarIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::BarIlInjector::injectIL();generateToBlock(int32_t);OMR::IlInjector
testing::internal::RE::RE(const class testing::internal::RE &);Init(const char *);testing::internal::RE
testing::internal::RE::RE(const char *);Init(const char *);testing::internal::RE
testing::internal::GTestMutexLock::GTestMutexLock(class testing::internal::MutexBase *);Lock();testing::internal::MutexBase
testing::internal::GTestMutexLock::~GTestMutexLock();Unlock();testing::internal::MutexBase
testing::internal::FilePath::operator=(const class testing::internal::FilePath &);Set(const class testing::internal::FilePath &);testing::internal::FilePath
testing::internal::DeathTest::ReturnSentinel::~ReturnSentinel();Abort(enum testing::internal::DeathTest::AbortReason);testing::internal::DeathTest
testing::AssertionResult::operator=(class testing::AssertionResult);swap(class testing::AssertionResult &);testing::AssertionResult
testing::TestInfo::ClearTestResult(class testing::TestInfo *);Clear();testing::TestResult
testing::TestCase::ClearTestCaseResult(class testing::TestCase *);ClearResult();testing::TestCase
TestCompiler::CallIlInjector::CallIlInjector(TR::TypeDictionary *,class TestCompiler::TestDriver *,TR::ILOpCodes);initOptArgs(uint32_t);TestCompiler::OpIlInjector
TestCompiler::CallIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::CallIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::CallIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::CallIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::CallIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::CallIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::IndirectLoadIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IndirectLoadIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IndirectLoadIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IndirectLoadIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IndirectStoreIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IndirectStoreIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::IndirectStoreIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IndirectStoreIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::IndirectLoadIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::IndirectLoadIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::IndirectStoreIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::IndirectStoreIlInjector::injectIL();genTreeTop(TR::Node *);OMR::IlInjector
TestCompiler::IndirectStoreIlInjector::injectIL();returnNoValue();OMR::IlInjector
TestCompiler::FooIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::FooIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::FooIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::FooIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::FooIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::FooIlInjector::injectIL();storeToTemp(TR::SymbolReference *,TR::Node *);OMR::IlInjector
TestCompiler::FooIlInjector::injectIL();ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,int32_t);OMR::IlInjector
TestCompiler::FooIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::FooIlInjector::injectIL();generateToBlock(int32_t);OMR::IlInjector
TestCompiler::Qux2IlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::Qux2IlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::Qux2IlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::Qux2IlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::Qux2IlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::Qux2IlInjector::injectIL();storeToTemp(TR::SymbolReference *,TR::Node *);OMR::IlInjector
TestCompiler::Qux2IlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
OMR::MethodBuilder::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::MethodBuilder::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::MethodBuilder::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::MethodBuilder::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::MethodBuilder::AppendBuilder(TR::IlBuilder *);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
TestCompiler::MethodBuilder::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::MethodBuilder::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::MethodBuilder::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::MethodBuilder::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::MethodBuilder::MethodBuilder(TR::TypeDictionary *,class TestCompiler::TestDriver *);setMethodAndTest(TR::ResolvedMethod *,class TestCompiler::TestDriver *);TestCompiler::IlInjector
TestCompiler::RecursiveFibonnaciMethod::RecursiveFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::RecursiveFibonnaciMethod::RecursiveFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::RecursiveFibonnaciMethod::RecursiveFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::RecursiveFibonnaciMethod::RecursiveFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::RecursiveFibonnaciMethod::RecursiveFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::RecursiveFibonnaciMethod::RecursiveFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineMemory(const char *,TR::IlType *,void *);OMR::MethodBuilder
TestCompiler::RecursiveFibonnaciMethod::buildIL();IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::RecursiveFibonnaciMethod::buildIL();DefineLocal(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::RecursiveFibonnaciMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::RecursiveFibonnaciMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::IterativeFibonnaciMethod::IterativeFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::IterativeFibonnaciMethod::IterativeFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::IterativeFibonnaciMethod::IterativeFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::IterativeFibonnaciMethod::IterativeFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::IterativeFibonnaciMethod::IterativeFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::IterativeFibonnaciMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::IterativeFibonnaciMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::IterativeFibonnaciMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::IterativeFibonnaciMethod::buildIL();ForLoopUp(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileFibonnaciMethod::DoWhileFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::DoWhileFibonnaciMethod::DoWhileFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::DoWhileFibonnaciMethod::DoWhileFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::DoWhileFibonnaciMethod::DoWhileFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileFibonnaciMethod::DoWhileFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileFibonnaciMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileFibonnaciMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileFibonnaciMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileFibonnaciMethod::buildIL();DefineLocal(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileFibonnaciMethod::buildIL();DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileWithBreakMethod::DoWhileWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakMethod::DoWhileWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakMethod::DoWhileWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakMethod::DoWhileWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakMethod::DoWhileWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithBreakMethod::buildIL();DefineLocal(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakMethod::buildIL();DoWhileLoopWithBreak(const char *,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileWithBreakMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithBreakMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileWithBreakMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithContinueMethod::DoWhileWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithContinueMethod::DoWhileWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithContinueMethod::DoWhileWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithContinueMethod::DoWhileWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithContinueMethod::DoWhileWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithContinueMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithContinueMethod::buildIL();DefineLocal(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithContinueMethod::buildIL();DoWhileLoopWithContinue(const char *,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileWithContinueMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithContinueMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileWithContinueMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::DoWhileWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::DoWhileWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::DoWhileWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::DoWhileWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::DoWhileWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::buildIL();DefineLocal(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::buildIL();DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileWithBreakAndContinueMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoFibonnaciMethod::WhileDoFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::WhileDoFibonnaciMethod::WhileDoFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::WhileDoFibonnaciMethod::WhileDoFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::WhileDoFibonnaciMethod::WhileDoFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoFibonnaciMethod::WhileDoFibonnaciMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoFibonnaciMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoFibonnaciMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoFibonnaciMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoFibonnaciMethod::buildIL();WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoWithBreakMethod::WhileDoWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakMethod::WhileDoWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakMethod::WhileDoWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakMethod::WhileDoWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakMethod::WhileDoWithBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithBreakMethod::buildIL();WhileDoLoopWithBreak(const char *,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoWithBreakMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithBreakMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoWithBreakMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithContinueMethod::WhileDoWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithContinueMethod::WhileDoWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithContinueMethod::WhileDoWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithContinueMethod::WhileDoWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoWithContinueMethod::WhileDoWithContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoWithContinueMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithContinueMethod::buildIL();WhileDoLoopWithContinue(const char *,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoWithContinueMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithContinueMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoWithContinueMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::WhileDoWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::WhileDoWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::WhileDoWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::WhileDoWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::WhileDoWithBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::buildIL();WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoWithBreakAndContinueMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::BasicForLoopUpMethod::BasicForLoopUpMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::BasicForLoopUpMethod::BasicForLoopUpMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::BasicForLoopUpMethod::BasicForLoopUpMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::BasicForLoopUpMethod::BasicForLoopUpMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::BasicForLoopUpMethod::BasicForLoopUpMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::BasicForLoopUpMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::BasicForLoopUpMethod::buildIL();ForLoopUp(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::BasicForLoopUpMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::BasicForLoopDownMethod::BasicForLoopDownMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::BasicForLoopDownMethod::BasicForLoopDownMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::BasicForLoopDownMethod::BasicForLoopDownMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::BasicForLoopDownMethod::BasicForLoopDownMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::BasicForLoopDownMethod::BasicForLoopDownMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::BasicForLoopDownMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::BasicForLoopDownMethod::buildIL();ForLoopDown(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::BasicForLoopDownMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopUPIfThenElseMethod::ForLoopUPIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::ForLoopUPIfThenElseMethod::ForLoopUPIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::ForLoopUPIfThenElseMethod::ForLoopUPIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::ForLoopUPIfThenElseMethod::ForLoopUPIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopUPIfThenElseMethod::ForLoopUPIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopUPIfThenElseMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopUPIfThenElseMethod::buildIL();ForLoopUp(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopUPIfThenElseMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopUPIfThenElseMethod::buildIL();IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopUPIfThenElseMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoIfThenElseMethod::WhileDoIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::WhileDoIfThenElseMethod::WhileDoIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::WhileDoIfThenElseMethod::WhileDoIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::WhileDoIfThenElseMethod::WhileDoIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoIfThenElseMethod::WhileDoIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::WhileDoIfThenElseMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoIfThenElseMethod::buildIL();WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::WhileDoIfThenElseMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoIfThenElseMethod::buildIL();IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::WhileDoIfThenElseMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileIfThenElseMethod::DoWhileIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::DoWhileIfThenElseMethod::DoWhileIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::DoWhileIfThenElseMethod::DoWhileIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::DoWhileIfThenElseMethod::DoWhileIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileIfThenElseMethod::DoWhileIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileIfThenElseMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileIfThenElseMethod::buildIL();DefineLocal(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::DoWhileIfThenElseMethod::buildIL();DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::DoWhileIfThenElseMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileIfThenElseMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::DoWhileIfThenElseMethod::buildIL();IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::ShootoutNestedLoopMethod::ShootoutNestedLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::ShootoutNestedLoopMethod::ShootoutNestedLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::ShootoutNestedLoopMethod::ShootoutNestedLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::ShootoutNestedLoopMethod::ShootoutNestedLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::ShootoutNestedLoopMethod::ShootoutNestedLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::ShootoutNestedLoopMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ShootoutNestedLoopMethod::buildIL();ForLoopUp(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ShootoutNestedLoopMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::AbsDiffIfThenElseMethod::AbsDiffIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::AbsDiffIfThenElseMethod::AbsDiffIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::AbsDiffIfThenElseMethod::AbsDiffIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::AbsDiffIfThenElseMethod::AbsDiffIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::AbsDiffIfThenElseMethod::AbsDiffIfThenElseMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::AbsDiffIfThenElseMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::AbsDiffIfThenElseMethod::buildIL();IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::AbsDiffIfThenElseMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::MaxIfThenMethod::MaxIfThenMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::MaxIfThenMethod::MaxIfThenMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::MaxIfThenMethod::MaxIfThenMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::MaxIfThenMethod::MaxIfThenMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::MaxIfThenMethod::MaxIfThenMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::MaxIfThenMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::MaxIfThenMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::IfThenElseLoopMethod::IfThenElseLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::IfThenElseLoopMethod::IfThenElseLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::IfThenElseLoopMethod::IfThenElseLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::IfThenElseLoopMethod::IfThenElseLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::IfThenElseLoopMethod::IfThenElseLoopMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::IfThenElseLoopMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::IfThenElseLoopMethod::buildIL();IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::IfThenElseLoopMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::IfThenElseLoopMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::IfThenElseLoopMethod::buildIL();WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);OMR::IlBuilder
TestCompiler::IfThenElseLoopMethod::buildIL();ForLoopUp(const char *,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopContinueMethod::ForLoopContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::ForLoopContinueMethod::ForLoopContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::ForLoopContinueMethod::ForLoopContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::ForLoopContinueMethod::ForLoopContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopContinueMethod::ForLoopContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopContinueMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopContinueMethod::buildIL();ForLoopWithContinue(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopContinueMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopContinueMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::ForLoopContinueMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakMethod::ForLoopBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::ForLoopBreakMethod::ForLoopBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::ForLoopBreakMethod::ForLoopBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::ForLoopBreakMethod::ForLoopBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopBreakMethod::ForLoopBreakMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopBreakMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakMethod::buildIL();ForLoopWithBreak(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::ForLoopBreakMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakAndContinueMethod::ForLoopBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineLine(const char *);OMR::MethodBuilder
TestCompiler::ForLoopBreakAndContinueMethod::ForLoopBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineFile(const char *);OMR::MethodBuilder
TestCompiler::ForLoopBreakAndContinueMethod::ForLoopBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineName(const char *);OMR::MethodBuilder
TestCompiler::ForLoopBreakAndContinueMethod::ForLoopBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopBreakAndContinueMethod::ForLoopBreakAndContinueMethod(TR::TypeDictionary *,class TestCompiler::BuilderTest *);DefineReturnType(TR::IlType *);OMR::MethodBuilder
TestCompiler::ForLoopBreakAndContinueMethod::buildIL();Store(const char *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakAndContinueMethod::buildIL();ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakAndContinueMethod::buildIL();IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
TestCompiler::ForLoopBreakAndContinueMethod::buildIL();Goto(TR::IlBuilder **);OMR::IlBuilder
TestCompiler::ForLoopBreakAndContinueMethod::buildIL();Return(TR::IlValue *);OMR::IlBuilder
JITTest_BuilderTest_Test::TestBody();RunTest();TestCompiler::TestDriver
JITILBuilderTest_ControlFlowTest_Test::TestBody();compileControlFlowTestMethods();TestCompiler::BuilderTest
JITILBuilderTest_ControlFlowTest_Test::TestBody();invokeControlFlowTests();TestCompiler::BuilderTest
JITILBuilderTest_NestedControlFlowLoopTest_Test::TestBody();compileNestedControlFlowLoopTestMethods();TestCompiler::BuilderTest
JITILBuilderTest_NestedControlFlowLoopTest_Test::TestBody();invokeNestedControlFlowLoopTests();TestCompiler::BuilderTest
TestCompiler::FooBarTest::compileTestMethods();setEntryPoint(void *);TestCompiler::ResolvedMethod
JITTest_FooBarTest_Test::TestBody();RunTest();TestCompiler::TestDriver
TestCompiler::LimitFileTest::createVLog(const char *,const char *);delayUnlink(const char *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest::createAndCheckVLog(const char *,const char *,int *);createVLog(const char *,const char *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest::createAndCheckVLog(const char *,const char *,int *);checkVLogForMethod(const char *,const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest::generateVLog(const char *,const char *);compileTests();TestCompiler::LimitFileTest
TestCompiler::LimitFileTest::compileTests();compileUnaryTestMethods();TestCompiler::OpCodesTest
TestCompiler::LimitFileTest_CreateVLogTest_Test::TestBody();createVLog(const char *,const char *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_CheckVLogTest_Test::TestBody();createAndCheckVLog(const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_UseLimitFileTest_Test::TestBody();createAndCheckVLog(const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_UseLimitFileRangeTest_Test::TestBody();createAndCheckVLog(const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_UseLimitFileRangeTest_Test::TestBody();createVLog(const char *,const char *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_UseLimitFileRangeTest_Test::TestBody();checkVLogForMethod(const char *,const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_UseLimitFileBoundTest_Test::TestBody();createAndCheckVLog(const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_UseLimitFileBoundTest_Test::TestBody();createVLog(const char *,const char *);TestCompiler::LimitFileTest
TestCompiler::LimitFileTest_UseLimitFileBoundTest_Test::TestBody();checkVLogForMethod(const char *,const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::LogFileTest::compileTests();compileUnaryTestMethods();TestCompiler::OpCodesTest
TestCompiler::OptionSetTest::applyOptionSets(const char *,const char *,const TestCompiler::MethodSets &);delayUnlink(const char *);TestCompiler::LimitFileTest
TestCompiler::OptionSetTest_UseOptionSets_Test::TestBody();createAndCheckVLog(const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::OptionSetTest_UseOptionSets_Test::TestBody();applyOptionSets(const char *,const char *,const TestCompiler::MethodSets &);TestCompiler::OptionSetTest
TestCompiler::OptionSetTest_UseOptionSets_Test::TestBody();createVLog(const char *,const char *);TestCompiler::LimitFileTest
TestCompiler::OptionSetTest_UseOptionSets_Test::TestBody();checkVLogForMethod(const char *,const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::OptionSetTest_WithDefault_Test::TestBody();createAndCheckVLog(const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::OptionSetTest_WithDefault_Test::TestBody();applyOptionSets(const char *,const char *,const TestCompiler::MethodSets &);TestCompiler::OptionSetTest
TestCompiler::OptionSetTest_WithDefault_Test::TestBody();createVLog(const char *,const char *);TestCompiler::LimitFileTest
TestCompiler::OptionSetTest_WithDefault_Test::TestBody();checkVLogForMethod(const char *,const char *,const char *,int *);TestCompiler::LimitFileTest
TestCompiler::OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(int (*&)(int, int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(int (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(signed char (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(short (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileBitwiseMethods();compileOpCodeMethod(int (*&)(int, int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(int, int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileTernaryTestMethods();compileOpCodeMethod(int (*&)(int, int, int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(int (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileDisabledOpCodesTests();compileOpCodeMethod(float (*&)(float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::compileDisabledOpCodesTests();compileOpCodeMethod(double (*&)(double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::invokeNoHelperUnaryTests();compileOpCodeMethod(int (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::invokeNoHelperUnaryTests();compileOpCodeMethod(int (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::UnsupportedOpCodesTests();addUnsupportedOpCodeTest(int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType);TestCompiler::OpCodesTest
TestCompiler::OpCodesTest::addUnsupportedOpCodeTest(int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType);compileOpCodeMethod(void (*&)(void),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_UnaryTest_Test::TestBody();compileUnaryTestMethods();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_UnaryTest_Test::TestBody();invokeUnaryTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_IntegerArithmeticTest_Test::TestBody();compileIntegerArithmeticTestMethods();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_IntegerArithmeticTest_Test::TestBody();invokeIntegerArithmeticTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_MemoryOperationTest_Test::TestBody();compileMemoryOperationTestMethods();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_MemoryOperationTest_Test::TestBody();invokeMemoryOperationTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_BitwiseTest_Test::TestBody();compileBitwiseMethods();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_BitwiseTest_Test::TestBody();invokeBitwiseTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_CompareTest_Test::TestBody();compileCompareTestMethods();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_CompareTest_Test::TestBody();invokeCompareTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_TernaryTest_Test::TestBody();compileTernaryTestMethods();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_TernaryTest_Test::TestBody();invokeTernaryTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_AddressTest_Test::TestBody();compileAddressTestMethods();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_AddressTest_Test::TestBody();invokeAddressTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_UnsupportedOpCodesTest_Test::TestBody();UnsupportedOpCodesTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_DISABLED_OpCodesTests_Test::TestBody();compileDisabledOpCodesTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_DISABLED_OpCodesTests_Test::TestBody();invokeDisabledOpCodesTests();TestCompiler::OpCodesTest
JITCrossPlatformsOpCodesTest_DISABLED_UnaryTest_Test::TestBody();invokeNoHelperUnaryTests();TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(signed char (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(short (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(int (*&)(unsigned long, int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(unsigned long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(unsigned long, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(unsigned long, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(short (*&)(unsigned long, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileTernaryTestMethods();compileOpCodeMethod(signed char (*&)(int, signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileTernaryTestMethods();compileOpCodeMethod(short (*&)(int, short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned short, unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned char, unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileBitwiseTestMethods();compileOpCodeMethod(short (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileBitwiseTestMethods();compileOpCodeMethod(signed char (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(signed char (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(short (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(int (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(int, unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::UnsupportedOpCodesTests();addUnsupportedOpCodeTest(int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(float (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(double (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(long (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(double (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(float (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(float (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(double (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(unsigned long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledConvertTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledCompareTestMethods();compileOpCodeMethod(int (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledCompareTestMethods();compileOpCodeMethod(int (*&)(double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledCompareTestMethods();compileOpCodeMethod(int (*&)(float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledCompareTestMethods();compileOpCodeMethod(int (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned char, unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledIntegerArithmeticTestMethods();compileOpCodeMethod(long (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledIntegerArithmeticTestMethods();compileOpCodeMethod(unsigned int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledFloatArithmeticTestMethods();compileOpCodeMethod(float (*&)(float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledFloatArithmeticTestMethods();compileOpCodeMethod(double (*&)(double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledMemoryOperationTestMethods();compileOpCodeMethod(signed char (*&)(unsigned long, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledBitwiseTestMethods();compileOpCodeMethod(long (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledTernaryTestMethods();compileOpCodeMethod(float (*&)(int, float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledTernaryTestMethods();compileOpCodeMethod(double (*&)(int, double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledTernaryTestMethods();compileOpCodeMethod(long (*&)(int, long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::PPCOpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
JITQuxTest_QuxTest2_Test::TestBody();RunTest();TestCompiler::TestDriver
TestCompiler::SimplifierFoldAndIlInjector::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::SimplifierFoldAndIlInjector::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TestCompiler::SimplifierFoldAndIlInjector::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::SimplifierFoldAndIlInjector::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TestCompiler::SimplifierFoldAndIlInjector::injectIL();createBlocks(int32_t);OMR::IlInjector
TestCompiler::SimplifierFoldAndIlInjector::injectIL();storeToTemp(TR::SymbolReference *,TR::Node *);OMR::IlInjector
TestCompiler::SimplifierFoldAndIlInjector::injectIL();returnValue(TR::Node *);OMR::IlInjector
TestCompiler::SimplifierFoldAndInfo::SimplifierFoldAndInfo(class TestCompiler::TestDriver *);DefineFunction(char *,char *,char *,int32_t,TR::IlType **,TR::IlType *);TestCompiler::MethodInfo
TestCompiler::SimplifierFoldAndInfo::SimplifierFoldAndInfo(class TestCompiler::TestDriver *);DefineILInjector(TR::IlInjector *);TestCompiler::MethodInfo
TestCompiler::SimplifierFoldAndTest::SimplifierFoldAndTest();addOptimization(OMR::Optimizations);TestCompiler::OptTestDriver
TestCompiler::SimplifierFoldAndTest_SimplifierFoldAndTest_Test::TestBody();setMethodInfo(TestCompiler::MethodInfo *);TestCompiler::OptTestDriver
TestCompiler::SimplifierFoldAndTest_SimplifierFoldAndTest_Test::TestBody();setIlVerifier(TR::IlVerifier *);TestCompiler::OptTestDriver
TestCompiler::SimplifierFoldAndTest_SimplifierFoldAndTest_Test::TestBody();VerifyAndInvoke();TestCompiler::OptTestDriver
TestCompiler::S390OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(long (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(unsigned int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileFloatArithmeticTestMethods();compileOpCodeMethod(float (*&)(float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileFloatArithmeticTestMethods();compileOpCodeMethod(double (*&)(double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(int (*&)(unsigned long, int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(unsigned long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(unsigned long, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(unsigned long, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileBitwiseTestMethods();compileOpCodeMethod(long (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileTernaryTestMethods();compileOpCodeMethod(long (*&)(int, long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(signed char (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(short (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(int (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(int, unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledCompareOpCodesTestMethods();compileOpCodeMethod(int (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledCompareOpCodesTestMethods();compileOpCodeMethod(int (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledCompareOpCodesTestMethods();compileOpCodeMethod(int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledCompareOpCodesTestMethods();compileOpCodeMethod(int (*&)(unsigned char, unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledCompareOpCodesTestMethods();compileOpCodeMethod(int (*&)(unsigned short, unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledIntegerArithmeticTestMethods();compileOpCodeMethod(signed char (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledIntegerArithmeticTestMethods();compileOpCodeMethod(short (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledIntegerArithmeticTestMethods();compileOpCodeMethod(unsigned int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(signed char (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(short (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(int (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(long (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(short (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(float (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(double (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(int (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(short (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(float (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(double (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(int (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(long (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(float (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(double (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(signed char (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(int (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(float (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(double (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(float (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(float (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledUnaryTestMethods();compileOpCodeMethod(double (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledTernaryTestMethods();compileOpCodeMethod(signed char (*&)(int, signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledTernaryTestMethods();compileOpCodeMethod(short (*&)(int, short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledTernaryTestMethods();compileOpCodeMethod(float (*&)(int, float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledTernaryTestMethods();compileOpCodeMethod(double (*&)(int, double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledMemoryOperationTestMethods();compileOpCodeMethod(signed char (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledMemoryOperationTestMethods();compileOpCodeMethod(short (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledMemoryOperationTestMethods();compileOpCodeMethod(short (*&)(unsigned long, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledMemoryOperationTestMethods();compileOpCodeMethod(signed char (*&)(unsigned long, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledBitwiseTestMethods();compileOpCodeMethod(short (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledBitwiseTestMethods();compileOpCodeMethod(signed char (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledDirectCallTestMethods();compileDirectCallOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledS390ConvertToAddressOpCodesTests();compileOpCodeMethod(unsigned long (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledS390ConvertToAddressOpCodesTests();compileOpCodeMethod(unsigned long (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledS390ConvertToAddressOpCodesTests();compileOpCodeMethod(unsigned long (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledS390ConvertToAddressOpCodesTests();compileOpCodeMethod(unsigned long (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledS390ConvertToAddressOpCodesTests();compileOpCodeMethod(unsigned long (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDisabledS390ConvertToAddressOpCodesTests();compileOpCodeMethod(unsigned long (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::OptTestDriver::Verify();makeOptimizationStrategyArray(struct OptimizationStrategy *);TestCompiler::OptTestDriver
TestCompiler::OptTestDriver::Verify();setIlVerifier(TR::IlVerifier *);TestCompiler::OptTestDriver
TestCompiler::OptTestDriver::Verify();compileTestMethods();TestCompiler::OptTestDriver
TestCompiler::OptTestDriver::VerifyAndInvoke();makeOptimizationStrategyArray(struct OptimizationStrategy *);TestCompiler::OptTestDriver
TestCompiler::OptTestDriver::VerifyAndInvoke();RunTest();TestCompiler::TestDriver
TestCompiler::OptTestDriver::compileTestMethods();setIlVerifier(TR::IlVerifier *);OMR::IlGeneratorMethodDetails
TestCompiler::TestDriver::RunTest();compileTestMethods();TestCompiler::TestDriver
TestCompiler::TestDriver::RunTest();invokeTests();TestCompiler::TestDriver
TestCompiler::X86OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(signed char (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(short (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(long (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileIntegerArithmeticTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileFloatArithmeticTestMethods();compileOpCodeMethod(float (*&)(float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileFloatArithmeticTestMethods();compileOpCodeMethod(double (*&)(double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(signed char (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(short (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(int (*&)(unsigned long, int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(long (*&)(unsigned long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(double (*&)(unsigned long, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(float (*&)(unsigned long, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(short (*&)(unsigned long, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileMemoryOperationTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(short (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(signed char (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(long (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(float (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(double (*&)(unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileUnaryTestMethods();compileOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileBitwiseTestMethods();compileOpCodeMethod(long (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileBitwiseTestMethods();compileOpCodeMethod(short (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileBitwiseTestMethods();compileOpCodeMethod(signed char (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(double, double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(float, float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(short, short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(signed char, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned char, unsigned char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileCompareTestMethods();compileOpCodeMethod(int (*&)(unsigned short, unsigned short),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileTernaryTestMethods();compileOpCodeMethod(long (*&)(int, long, long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileDirectCallOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(int, unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(int (*&)(unsigned long, unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::UnsupportedOpCodesTests();addUnsupportedOpCodeTest(int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileDisabledIntegerArithmeticTestMethods();compileOpCodeMethod(unsigned int (*&)(unsigned int, unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileDisabledMemoryOpCodesTest();compileOpCodeMethod(signed char (*&)(unsigned long, signed char),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::invokeNoHelperUnaryTests();compileOpCodeMethod(long (*&)(double),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::invokeNoHelperUnaryTests();compileOpCodeMethod(long (*&)(float),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
JITX86OpCodesTest_UnaryTest_Test::TestBody();compileUnaryTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_UnaryTest_Test::TestBody();invokeUnaryTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_IntegerArithmeticTest_Test::TestBody();compileIntegerArithmeticTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_IntegerArithmeticTest_Test::TestBody();invokeIntegerArithmeticTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_FloatArithmeticTest_Test::TestBody();compileFloatArithmeticTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_FloatArithmeticTest_Test::TestBody();invokeFloatArithmeticTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_MemoryOperationTest_Test::TestBody();compileMemoryOperationTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_MemoryOperationTest_Test::TestBody();invokeMemoryOperationTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_BitwiseTest_Test::TestBody();compileBitwiseTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_BitwiseTest_Test::TestBody();invokeBitwiseTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DirectCallTest_Test::TestBody();compileDirectCallTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DirectCallTest_Test::TestBody();invokeDirectCallTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_CompareTest_Test::TestBody();compileCompareTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_CompareTest_Test::TestBody();invokeCompareTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_TernaryTest_Test::TestBody();compileTernaryTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_TernaryTest_Test::TestBody();invokeTernaryTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_X86AddressTest_Test::TestBody();compileAddressTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_X86AddressTest_Test::TestBody();invokeAddressTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DISABLED_X86IntegerArithmeticTest_Test::TestBody();compileDisabledIntegerArithmeticTestMethods();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DISABLED_X86IntegerArithmeticTest_Test::TestBody();invokeDisabledIntegerArithmeticTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_UnsupportedOpCodesTest_Test::TestBody();UnsupportedOpCodesTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DISABLED_X86UnaryTest_Test::TestBody();invokeNoHelperUnaryTests();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DISABLED_X86ConvertOpCodesTests_Test::TestBody();compileDisabledConvertOpCodesTest();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DISABLED_X86ConvertOpCodesTests_Test::TestBody();invokeDisabledConvertOpCodesTest();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DISABLED_X86MemoryOpCodesTests_Test::TestBody();compileDisabledMemoryOpCodesTest();TestCompiler::X86OpCodesTest
JITX86OpCodesTest_DISABLED_X86MemoryOpCodesTests_Test::TestBody();invokeDisabledMemoryOpCodesTest();TestCompiler::X86OpCodesTest
TR::CompilationController::shutdown();shutdown();TR::CompilationStrategy
OMR::KnownObjectTable::addArrayWithConstantElements(Index);set(int64_t);TR_BitVector
OMR::CompilerEnv::initialize();initializeHostEnvironment();OMR::CompilerEnv
OMR::CompilerEnv::initialize();initializeTargetEnvironment();OMR::CompilerEnv
OMR::CompilerEnv::initialize();initialize();OMR::ObjectModel
OMR::CompilerEnv::initializeTargetEnvironment();setBitness(TR::Bitness);OMR::Environment
OMR::CompilerEnv::initializeTargetEnvironment();initializeByHostQuery();OMR::CPU
OMR::CompilerEnv::initializeTargetEnvironment();setMajorOS(TR::MajorOperatingSystem);OMR::Environment
OMR::CompilerEnv::initializeHostEnvironment();setBitness(TR::Bitness);OMR::Environment
OMR::CompilerEnv::initializeHostEnvironment();initializeByHostQuery();OMR::CPU
OMR::CompilerEnv::initializeHostEnvironment();setMajorOS(TR::MajorOperatingSystem);OMR::Environment
OMR::PersistentAllocator::deallocate(void *,const size_t);deallocate(void *,const size_t);OMR::RawAllocator
OMR::IlBuilder::injectIL();setupForBuildIL();OMR::IlBuilder
OMR::IlBuilder::injectIL();removeUnreachableBlocks();OMR::CFG
OMR::IlBuilder::setupForBuildIL();initSequence();OMR::IlBuilder
OMR::IlBuilder::setupForBuildIL();appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::printBlock(TR::Block *);print(TR::FILE *,TR::TreeTop *);TR_Debug
OMR::IlBuilder::OrphanBuilder();initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TestCompiler::IlInjector
OMR::IlBuilder::OrphanBuilder();setupForBuildIL();OMR::IlBuilder
OMR::IlBuilder::Copy(TR::IlValue *);setName(const char *);OMR::Symbol
OMR::IlBuilder::Copy(TR::IlValue *);setNotCollected();OMR::Symbol
OMR::IlBuilder::Copy(TR::IlValue *);defineSymbol(const char *,TR::SymbolReference *);OMR::MethodBuilder
OMR::IlBuilder::Copy(TR::IlValue *);storeToTemp(TR::SymbolReference *,TR::Node *);OMR::IlInjector
OMR::IlBuilder::ConstFloat(float);setFloat(float);OMR::Node
OMR::IlBuilder::ConstDouble(double);setDouble(double);OMR::Node
OMR::IlBuilder::LessThan(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::UnsignedLessThan(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::LessOrEqualTo(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::UnsignedLessOrEqualTo(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::GreaterThan(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::UnsignedGreaterThan(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::GreaterOrEqualTo(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::UnsignedGreaterOrEqualTo(TR::IlValue *,TR::IlValue *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::CreateLocalArray(int32_t,TR::IlType *);setName(const char *);OMR::Symbol
OMR::IlBuilder::CreateLocalArray(int32_t,TR::IlType *);setStackAllocatedArrayAccess();OMR::SymbolReference
OMR::IlBuilder::CreateLocalArray(int32_t,TR::IlType *);defineSymbol(const char *,TR::SymbolReference *);OMR::MethodBuilder
OMR::IlBuilder::CreateLocalStruct(TR::IlType *);setName(const char *);OMR::Symbol
OMR::IlBuilder::CreateLocalStruct(TR::IlType *);setStackAllocatedArrayAccess();OMR::SymbolReference
OMR::IlBuilder::CreateLocalStruct(TR::IlType *);defineSymbol(const char *,TR::SymbolReference *);OMR::MethodBuilder
OMR::IlBuilder::Store(const char *,TR::IlValue *);storeNode(TR::SymbolReference *,TR::Node *);OMR::IlBuilder
OMR::IlBuilder::StoreOver(TR::IlValue *,TR::IlValue *);storeOver(TR::IlValue *,TR::Block *);OMR::IlValue
OMR::IlBuilder::StoreAt(TR::IlValue *,TR::IlValue *);indirectStoreNode(TR::Node *,TR::Node *);OMR::IlBuilder
OMR::IlBuilder::StoreIndirect(const char *,const char *,TR::IlValue *,TR::IlValue *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::AtomicAdd(TR::IlValue *,TR::IlValue *);setAndIncChild(int32_t,TR::Node *);OMR::Node
OMR::IlBuilder::Transaction(TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::Transaction(TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::IlBuilder::Transaction(TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::Transaction(TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlBuilder::Transaction(TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);appendNoFallThroughBlock(TR::Block *);OMR::IlBuilder
OMR::IlBuilder::Transaction(TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::Transaction(TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);gotoBlock(TR::Block *);OMR::IlInjector
OMR::IlBuilder::TransactionAbort();setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::IlBuilder::TransactionAbort();genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::VectorStore(const char *,TR::IlValue *);storeNode(TR::SymbolReference *,TR::Node *);OMR::IlBuilder
OMR::IlBuilder::VectorStoreAt(TR::IlValue *,TR::IlValue *);indirectStoreNode(TR::Node *,TR::Node *);OMR::IlBuilder
OMR::IlBuilder::AppendBuilder(TR::IlBuilder *);add(struct OMR::IlBuilder::SequenceEntry *);ListAppender
OMR::IlBuilder::AppendBuilder(TR::IlBuilder *);appendNoFallThroughBlock(TR::Block *);OMR::IlBuilder
OMR::IlBuilder::AppendBuilder(TR::IlBuilder *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlBuilder::genCall(TR::SymbolReference *,int32_t,TR::IlValue **,_Bool);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::Goto(TR::IlBuilder **);Goto(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::Goto(TR::IlBuilder *);appendGoto(TR::Block *);OMR::IlBuilder
OMR::IlBuilder::Goto(TR::IlBuilder *);setDoesNotComeBack();OMR::IlBuilder
OMR::IlBuilder::Return();genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::Return();addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlBuilder::Return();setDoesNotComeBack();OMR::IlBuilder
OMR::IlBuilder::Return(TR::IlValue *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::Return(TR::IlValue *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlBuilder::Return(TR::IlValue *);setDoesNotComeBack();OMR::IlBuilder
OMR::IlBuilder::ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);setMayHaveLoops(_Bool);OMR::ResolvedMethodSymbol
OMR::IlBuilder::ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);Store(const char *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);IfThen(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::ForLoop(_Bool,const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *,TR::IlValue *,TR::IlValue *);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);setMayHaveLoops(_Bool);OMR::ResolvedMethodSymbol
OMR::IlBuilder::WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);IfCmpEqualZero(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);Goto(TR::IlBuilder **);OMR::IlBuilder
OMR::IlBuilder::WhileDoLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);setComesBack();OMR::IlBuilder
OMR::IlBuilder::DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);setMayHaveLoops(_Bool);OMR::ResolvedMethodSymbol
OMR::IlBuilder::DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);IfCmpNotEqualZero(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::DoWhileLoop(const char *,TR::IlBuilder **,TR::IlBuilder **,TR::IlBuilder **);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::IfAnd(TR::IlBuilder **,TR::IlBuilder **,int32_t);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::IfAnd(TR::IlBuilder **,TR::IlBuilder **,int32_t);Goto(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::IfAnd(TR::IlBuilder **,TR::IlBuilder **,int32_t);setComesBack();OMR::IlBuilder
OMR::IlBuilder::IfOr(TR::IlBuilder **,TR::IlBuilder **,int32_t);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::IfOr(TR::IlBuilder **,TR::IlBuilder **,int32_t);IfCmpEqualZero(TR::IlBuilder **,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfOr(TR::IlBuilder **,TR::IlBuilder **,int32_t);Goto(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::IfOr(TR::IlBuilder **,TR::IlBuilder **,int32_t);setComesBack();OMR::IlBuilder
OMR::IlBuilder::IfCmpNotEqualZero(TR::IlBuilder **,TR::IlValue *);IfCmpNotEqualZero(TR::IlBuilder *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpNotEqualZero(TR::IlBuilder *,TR::IlValue *);ifCmpNotEqualZero(TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpNotEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpNotEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpNotEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpEqualZero(TR::IlBuilder **,TR::IlValue *);IfCmpEqualZero(TR::IlBuilder *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpEqualZero(TR::IlBuilder *,TR::IlValue *);ifCmpEqualZero(TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpLessThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedLessThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpLessOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedLessOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpGreaterThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedGreaterThan(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpGreaterOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedGreaterOrEqual(TR::IlBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::IlBuilder::IfCmpUnsignedGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::IfThenElse(TR::IlBuilder **,TR::IlBuilder **,TR::IlValue *);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::Switch(const char *,TR::IlBuilder **,uint32_t,int32_t *,TR::IlBuilder **,_Bool *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::Switch(const char *,TR::IlBuilder **,uint32_t,int32_t *,TR::IlBuilder **,_Bool *);appendNoFallThroughBlock(TR::Block *);OMR::IlBuilder
OMR::IlBuilder::Switch(const char *,TR::IlBuilder **,uint32_t,int32_t *,TR::IlBuilder **,_Bool *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlBuilder::Switch(const char *,TR::IlBuilder **,uint32_t,int32_t *,TR::IlBuilder **,_Bool *);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::Switch(const char *,TR::IlBuilder **,uint32_t);Switch(const char *,TR::IlBuilder **,uint32_t,int32_t *,TR::IlBuilder **,_Bool *);OMR::IlBuilder
OMR::IlBuilder::defineSymbol(const char *,TR::SymbolReference *);defineSymbol(const char *,TR::SymbolReference *);OMR::MethodBuilder
OMR::IlBuilder::newValue(TR::DataType,TR::Node *);append(TR::TreeTop *);OMR::Block
OMR::IlBuilder::defineValue(const char *,TR::IlType *);setNotCollected();OMR::Symbol
OMR::IlBuilder::defineValue(const char *,TR::IlType *);defineSymbol(const char *,TR::SymbolReference *);OMR::IlBuilder
OMR::IlBuilder::storeNode(TR::SymbolReference *,TR::Node *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::indirectStoreNode(TR::Node *,TR::Node *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::binaryOpFromOpMap(OpCodeMapper,TR::IlValue *,TR::IlValue *);doVectorConversions(TR::Node **,TR::Node **);OMR::IlBuilder
OMR::IlBuilder::shiftOpFromOpMap(OpCodeMapper,TR::IlValue *,TR::IlValue *);doVectorConversions(TR::Node **,TR::Node **);OMR::IlBuilder
OMR::IlBuilder::ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);integerizeAddresses(TR::IlValue **,TR::IlValue **);OMR::IlBuilder
OMR::IlBuilder::ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Block *);OMR::IlInjector
OMR::IlBuilder::ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::ifCmpNotEqualZero(TR::IlValue *,TR::Block *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::ifCmpEqualZero(TR::IlValue *,TR::Block *);ifCmpCondition(enum TR_ComparisonTypes,_Bool,TR::IlValue *,TR::IlValue *,TR::Block *);OMR::IlBuilder
OMR::IlBuilder::appendGoto(TR::Block *);gotoBlock(TR::Block *);OMR::IlInjector
OMR::IlBuilder::appendGoto(TR::Block *);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::appendBlock(TR::Block *,_Bool);add(struct OMR::IlBuilder::SequenceEntry *);ListAppender
OMR::IlBuilder::emptyBlock();addNode(TR::CFGNode *,class TR_RegionStructure *,_Bool);OMR::CFG
OMR::IlBuilder::pullInBuilderTrees(TR::IlBuilder *,uint32_t *,TR::TreeTop **,TR::TreeTop **);connectTrees();OMR::IlBuilder
OMR::IlBuilder::connectTrees();allocateBlocks(int32_t);OMR::IlInjector
OMR::IlBuilder::connectTrees();setNextTreeTop(TR::TreeTop *);OMR::TreeTop
OMR::IlBuilder::genOverflowCHKTreeTop(TR::Node *,TR::ILOpCodes);setOverflowCheckOperation(TR::ILOpCodes);OMR::Node
OMR::IlBuilder::genOverflowCHKTreeTop(TR::Node *,TR::ILOpCodes);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::IlBuilder::appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);addExceptionEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlBuilder::appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::IlBuilder::appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);setHandlerInfo(uint32_t);OMR::IlBuilder
OMR::IlBuilder::appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::IlBuilder::appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlBuilder::genOperationWithOverflowCHK(TR::ILOpCodes,TR::Node *,TR::Node *,TR::IlBuilder **,TR::ILOpCodes);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlBuilder::genOperationWithOverflowCHK(TR::ILOpCodes,TR::Node *,TR::Node *,TR::IlBuilder **,TR::ILOpCodes);appendExceptionHandler(TR::Block *,TR::IlBuilder **,uint32_t);OMR::IlBuilder
OMR::IlBuilder::setHandlerInfo(uint32_t);setIsCold(_Bool);OMR::Block
OMR::IlBuilder::setHandlerInfo(uint32_t);setHandlerInfoWithOutBCInfo(uint32_t,uint8_t,uint16_t,class TR_ResolvedMethod *,TR::Compilation *);OMR::Block
OMR::BytecodeBuilder::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::BytecodeBuilder::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::BytecodeBuilder::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::BytecodeBuilder::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::BytecodeBuilder::AddSuccessorBuilder(TR::BytecodeBuilder **);AddSuccessorBuilders(uint32_t);OMR::BytecodeBuilder
OMR::IlValue::load(TR::Block *);storeToAuto();OMR::IlValue
OMR::IlInjector::IlInjector(TR::TypeDictionary *);initPrimitiveTypes();OMR::IlInjector
OMR::IlInjector::IlInjector(TR::IlInjector *);initPrimitiveTypes();OMR::IlInjector
OMR::IlInjector::genIL();reportILGeneratorPhase();OMR::Compilation
OMR::IlInjector::genIL();setCurrentIlGenerator(class TR_IlGenerator *);OMR::Compilation
OMR::IlInjector::createBlocks(int32_t);allocateBlocks(int32_t);OMR::IlInjector
OMR::IlInjector::createBlocks(int32_t);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlInjector::createBlocks(int32_t);setFirstTreeTop(TR::TreeTop *);OMR::ResolvedMethodSymbol
OMR::IlInjector::createBlocks(int32_t);generateToBlock(int32_t);OMR::IlInjector
OMR::IlInjector::dconst(double);setDouble(double);OMR::Node
OMR::IlInjector::fconst(float);setFloat(float);OMR::Node
OMR::IlInjector::storeToTemp(TR::SymbolReference *,TR::Node *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlInjector::ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Block *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlInjector::ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Block *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlInjector::ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,int32_t);ifjump(TR::ILOpCodes,TR::Node *,TR::Node *,TR::Block *);OMR::IlInjector
OMR::IlInjector::returnValue(TR::Node *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlInjector::returnValue(TR::Node *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlInjector::returnNoValue();genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlInjector::returnNoValue();addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlInjector::gotoBlock(TR::Block *);setBranchDestination(TR::TreeTop *);OMR::Node
OMR::IlInjector::gotoBlock(TR::Block *);genTreeTop(TR::Node *);OMR::IlInjector
OMR::IlInjector::gotoBlock(TR::Block *);addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlInjector::generateFallThrough();addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::IlInjector::generateFallThrough();generateToBlock(int32_t);OMR::IlInjector
OMR::MethodBuilder::~MethodBuilder();~TR_Memory();TR_Memory
OMR::MethodBuilder::~MethodBuilder();~Region();TR::Region
OMR::MethodBuilder::~MethodBuilder();~SystemSegmentProvider();OMR::SystemSegmentProvider
OMR::MethodBuilder::setupForBuildIL();initSequence();OMR::IlBuilder
OMR::MethodBuilder::setupForBuildIL();appendBlock(TR::Block *,_Bool);OMR::IlBuilder
OMR::MethodBuilder::setupForBuildIL();setFirstTreeTop(TR::TreeTop *);OMR::ResolvedMethodSymbol
OMR::MethodBuilder::setupForBuildIL();addEdge(TR::CFGNode *,TR::CFGNode *,enum TR_AllocationKind);OMR::CFG
OMR::MethodBuilder::addToAllBytecodeBuildersList(TR::BytecodeBuilder *);add(class TR::BytecodeBuilder *);List
OMR::MethodBuilder::addToBlockCountingWorklist(TR::BytecodeBuilder *);add(class TR::BytecodeBuilder *);List
OMR::MethodBuilder::lookupSymbol(const char *);setNotCollected();OMR::Symbol
OMR::MethodBuilder::OrphanBytecodeBuilder(int32_t,char *);initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TR::BytecodeBuilder
OMR::MethodBuilder::OrphanBytecodeBuilder(int32_t,char *);setupForBuildIL();OMR::IlBuilder
OMR::MethodBuilder::AppendBuilder(TR::BytecodeBuilder *);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::MethodBuilder::AppendBuilder(TR::BytecodeBuilder *);addBytecodeBuilderToWorklist(TR::BytecodeBuilder *);OMR::MethodBuilder
OMR::MethodBuilder::DefineArrayParameter(const char *,TR::IlType *);DefineParameter(const char *,TR::IlType *);OMR::MethodBuilder
OMR::MethodBuilder::DefineFunction(const char *const,const char *const,const char *const,void *,TR::IlType *,int32_t);DefineFunction(const char *const,const char *const,const char *const,void *,TR::IlType *,int32_t,TR::IlType **);OMR::MethodBuilder
OMR::MethodBuilder::AppendBytecodeBuilder(TR::BytecodeBuilder *);AppendBuilder(TR::IlBuilder *);OMR::IlBuilder
OMR::BytecodeBuilder::BytecodeBuilder(TR::MethodBuilder *,int32_t,char *);initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TestCompiler::IlInjector
OMR::BytecodeBuilder::BytecodeBuilder(TR::MethodBuilder *,int32_t,char *);initSequence();OMR::IlBuilder
OMR::BytecodeBuilder::SetCurrentIlGenerator();setCurrentIlGenerator(class TR_IlGenerator *);OMR::Compilation
OMR::BytecodeBuilder::AddFallThroughBuilder(TR::BytecodeBuilder *);transferVMState(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::AddFallThroughBuilder(TR::BytecodeBuilder *);addBytecodeBuilderToWorklist(TR::BytecodeBuilder *);OMR::MethodBuilder
OMR::BytecodeBuilder::AddFallThroughBuilder(TR::BytecodeBuilder *);Goto(TR::IlBuilder **);OMR::IlBuilder
OMR::BytecodeBuilder::Goto(TR::BytecodeBuilder **);Goto(TR::BytecodeBuilder *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::Goto(TR::BytecodeBuilder *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::Goto(TR::BytecodeBuilder *);Goto(TR::IlBuilder *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpEqualZero(TR::BytecodeBuilder **,TR::IlValue *);IfCmpEqualZero(TR::BytecodeBuilder *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpEqualZero(TR::BytecodeBuilder *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpEqualZero(TR::BytecodeBuilder *,TR::IlValue *);IfCmpEqualZero(TR::IlBuilder *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpNotEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpNotEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpNotEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpNotEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpNotEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpNotEqualZero(TR::BytecodeBuilder **,TR::IlValue *);IfCmpNotEqualZero(TR::BytecodeBuilder *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpNotEqualZero(TR::BytecodeBuilder *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpNotEqualZero(TR::BytecodeBuilder *,TR::IlValue *);IfCmpNotEqualZero(TR::IlBuilder *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpLessThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpUnsignedLessThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedLessThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpUnsignedLessThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpLessOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpUnsignedLessOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedLessOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpUnsignedLessOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpGreaterThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpUnsignedGreaterThan(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedGreaterThan(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpUnsignedGreaterThan(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpGreaterOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::IfCmpUnsignedGreaterOrEqual(TR::BytecodeBuilder **,TR::IlValue *,TR::IlValue *);IfCmpUnsignedGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);AddSuccessorBuilder(TR::BytecodeBuilder **);OMR::BytecodeBuilder
OMR::BytecodeBuilder::IfCmpUnsignedGreaterOrEqual(TR::BytecodeBuilder *,TR::IlValue *,TR::IlValue *);IfCmpUnsignedGreaterOrEqual(TR::IlBuilder *,TR::IlValue *,TR::IlValue *);OMR::IlBuilder
OMR::BytecodeBuilder::appendBlock(TR::Block *,_Bool);setByteCodeIndex(int32_t,TR::Compilation *);OMR::Block
OMR::BytecodeBuilder::setHandlerInfo(uint32_t);setIsCold(_Bool);OMR::Block
OMR::BytecodeBuilder::setHandlerInfo(uint32_t);setHandlerInfo(uint32_t,uint8_t,uint16_t,class TR_ResolvedMethod *,TR::Compilation *);OMR::Block
TR::BytecodeBuilder::initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);OMR::IlInjector
TR::BytecodeBuilder::initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);addToAllBytecodeBuildersList(TR::BytecodeBuilder *);OMR::MethodBuilder
OMR::TypeDictionary::~TypeDictionary();~TR_Memory();TR_Memory
OMR::TypeDictionary::~TypeDictionary();~Region();TR::Region
OMR::TypeDictionary::~TypeDictionary();~SystemSegmentProvider();OMR::SystemSegmentProvider
OMR::TypeDictionary::DefineField(const char *,const char *,TR::IlType *,size_t);AddField(const char *,TR::IlType *,size_t);OMR::StructType
OMR::TypeDictionary::DefineField(const char *,const char *,TR::IlType *);AddField(const char *,TR::IlType *);OMR::StructType
OMR::TypeDictionary::CloseStruct(const char *,size_t);Close(size_t);OMR::StructType
OMR::TypeDictionary::CloseStruct(const char *);Close();OMR::StructType
OMR::TypeDictionary::UnionField(const char *,const char *,TR::IlType *);AddField(const char *,TR::IlType *);OMR::UnionType
OMR::TypeDictionary::CloseUnion(const char *);Close();OMR::UnionType
OMR::PrimitiveType::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::PrimitiveType::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::PrimitiveType::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::PrimitiveType::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::FieldInfo::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::FieldInfo::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::FieldInfo::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::FieldInfo::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::StructType::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::StructType::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::StructType::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::StructType::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::UnionType::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::UnionType::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::UnionType::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::UnionType::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::UnionType::clearSymRefs();init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
OMR::PointerType::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::PointerType::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::PointerType::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::PointerType::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CodeCacheHashEntrySlab::free(TR::CodeCacheManager *);freeMemory(void *);OMR::CodeCacheManager
OMR::CodeCache::allocateCodeMemory(size_t,size_t,uint8_t **,_Bool,_Bool);performSizeAdjustments(size_t &,size_t &,_Bool,_Bool);OMR::CodeCacheManager
OMR::CodeCache::addResolvedMethod(class TR_OpaqueMethodBlock *);add(struct OMR::CodeCacheHashEntry *);OMR::CodeCacheHashTable
OMR::CodeCache::initialize(TR::CodeCacheManager *,TR::CodeCacheMemorySegment *,size_t,class OMR::CodeCacheHashEntrySlab *);unreserve();OMR::CodeCache
OMR::CodeCache::initialize(TR::CodeCacheManager *,TR::CodeCacheMemorySegment *,size_t,class OMR::CodeCacheHashEntrySlab *);decreaseFreeSpaceInCodeCacheRepository(size_t);OMR::CodeCacheManager
OMR::CodeCache::addFreeBlock2WithCallSite(uint8_t *,uint8_t *,char *,uint32_t);updateMaxSizeOfFreeBlocks(struct OMR::CodeCacheFreeCacheBlock *,size_t);OMR::CodeCache
OMR::CodeCacheManager::freeMemory(void *);deallocate(void *);OMR::RawAllocator
OMR::CodeCacheManager::addCodeCache(TR::CodeCache *);linkTo(TR::CodeCache *);OMR::CodeCache
OMR::CodeCacheManager::unreserveCodeCache(TR::CodeCache *);unreserve();OMR::CodeCache
OMR::CodeCacheManager::addFreeBlock(void *,uint8_t *);addFreeBlock(void *);OMR::CodeCache
OMR::CodeCacheManager::reservationInterfaceCache(void *,class TR_OpaqueMethodBlock *);findOrAddResolvedMethod(class TR_OpaqueMethodBlock *);OMR::CodeCache
OMR::CodeCacheManager::printMccStats();printRemainingSpaceInCodeCaches();OMR::CodeCacheManager
OMR::CodeCacheManager::printMccStats();printOccupancyStats();OMR::CodeCacheManager
OMR::CodeCacheManager::freeMemorySegment(TR::CodeCacheMemorySegment *);free(TR::CodeCacheManager *);OMR::CodeCacheMemorySegment
OMR::CodeCacheManager::allocateCodeMemoryWithRetries(size_t,size_t,TR::CodeCache **,int32_t,uint8_t **,_Bool,_Bool);unreserve();OMR::CodeCache
OMR::CodeCacheManager::initializeELFHeader();initializeELFHeaderForPlatform(struct OMR::ELFCodeCacheHeader *);OMR::CodeCacheManager
OMR::CodeCacheMemorySegment::adjustAlloc(int64_t);setSegmentAlloc(uint8_t *);OMR::CodeCacheMemorySegment
OMR::CodeCacheMemorySegment::free(TR::CodeCacheManager *);freeMemory(void *);OMR::CodeCacheManager
TestCompiler::ResolvedMethod::ResolvedMethod(TR::MethodBuilder *);computeSignatureChars();TestCompiler::ResolvedMethod
TestCompiler::ResolvedMethod::makeParameterList(TR::ResolvedMethodSymbol *);setTempIndex(int32_t,class TR_FrontEnd *);OMR::ResolvedMethodSymbol
TestCompiler::ResolvedMethod::makeParameterList(TR::ResolvedMethodSymbol *);setFirstJitTempIndex(int32_t);OMR::ResolvedMethodSymbol
TestCompiler::ResolvedMethod::getInjector(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TestCompiler::IlInjector
TR::FEBase::resizeCodeMemory(TR::Compilation *,uint8_t *,uint32_t);resizeCodeMemory(void *,size_t);OMR::CodeCache
TR::FEBase::switchCodeCache(TR::CodeCache *);switchCodeCache(TR::CodeCache *);OMR::Compilation
TestCompiler::FrontEnd::createStackAtlas(_Bool,uint32_t,uint32_t,uint8_t *,uint32_t,TR::Compilation *);setAtlasBits(uint8_t *);OMR::GCStackAtlas
TestCompiler::IlInjector::initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);OMR::IlInjector
TestCompiler::IlInjector::callFunction(TR::ResolvedMethod *,TR::IlType *,int32_t,TR::Node *);setAndIncChild(int32_t,TR::Node *);OMR::Node
TestCompiler::IlInjector::setMethodAndTest(TR::IlInjector *);setMethodAndTest(TR::ResolvedMethod *,class TestCompiler::TestDriver *);TestCompiler::IlInjector
OMR::X86::I386::CodeGenerator::CodeGenerator();initialize(TR::Compilation *);OMR::X86::CodeGenerator
OMR::X86::I386::CodeGenerator::CodeGenerator();setUsesRegisterPairsForLongs();OMR::CodeGenerator
OMR::X86::I386::CodeGenerator::CodeGenerator();setSupportsDoubleWordCAS();OMR::CodeGenerator
OMR::X86::I386::CodeGenerator::CodeGenerator();setSupportsDoubleWordSet();OMR::CodeGenerator
OMR::X86::I386::CodeGenerator::CodeGenerator();setSupportsInlinedAtomicLongVolatiles();OMR::CodeGenerator
TR_X86IntegerMultiplyDecomposer::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_X86IntegerMultiplyDecomposer::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_X86IntegerMultiplyDecomposer::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_X86IntegerMultiplyDecomposer::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::X86MemInstruction::X86MemInstruction(TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::MemoryReference
TR::X86MemInstruction::X86MemInstruction(TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::MemoryReference
TR::X86MemInstruction::X86MemInstruction(TR::RegisterDependencyConditions *,TR::MemoryReference *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::MemoryReference
TR::X86MemInstruction::X86MemInstruction(TR::RegisterDependencyConditions *,TR::MemoryReference *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *,TR::Register *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::MemoryReference
TR::X86RegMemInstruction::X86RegMemInstruction(TR::MemoryReference *,TR::Register *,TR::Node *,enum TR_X86OpCodes,TR::CodeGenerator *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::MemoryReference
TR::X86RegMemInstruction::X86RegMemInstruction(TR::MemoryReference *,TR::Register *,enum TR_X86OpCodes,TR::Instruction *,TR::CodeGenerator *);useRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::X86::MemoryReference
TR::X86FPRegInstruction::applyTargetRegisterToOpCode(uint8_t *);setRegisterFieldInOpcode(uint8_t *);OMR::X86::I386::RealRegister
OMR::X86::I386::TreeEvaluator::aconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::lconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::lloadEvaluator(TR::Node *,TR::CodeGenerator *);setMemRef(TR::MemoryReference *);OMR::X86::Register
OMR::X86::I386::TreeEvaluator::lloadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::X86::MemoryReference
OMR::X86::I386::TreeEvaluator::lstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::landEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::landEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::lorEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::lorEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::lxorEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::lxorEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::l2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::l2iEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::l2fEvaluator(TR::Node *,TR::CodeGenerator *);setMayNeedPrecisionAdjustment();OMR::X86::Register
OMR::X86::I386::TreeEvaluator::l2fEvaluator(TR::Node *,TR::CodeGenerator *);setNeedsPrecisionAdjustment();OMR::X86::Register
OMR::X86::I386::TreeEvaluator::l2fEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::l2dEvaluator(TR::Node *,TR::CodeGenerator *);setMayNeedPrecisionAdjustment();OMR::X86::Register
OMR::X86::I386::TreeEvaluator::l2dEvaluator(TR::Node *,TR::CodeGenerator *);setNeedsPrecisionAdjustment();OMR::X86::Register
OMR::X86::I386::TreeEvaluator::l2dEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::lbits2dEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::lcmpEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::i2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::i2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::iu2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::iu2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::b2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::b2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::bu2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::bu2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::s2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::su2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::c2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::dbits2lEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,TR::CodeGenerator *,uint8_t,_Bool);OMR::X86::RegisterDependencyConditions
OMR::X86::I386::TreeEvaluator::dbits2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::dbits2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairReturnEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairAddEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::integerPairAddEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairSubEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::integerPairSubEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairNegEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::integerPairNegEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairAbsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::integerPairAbsEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairAbsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairByteswapEvaluator(TR::Node *,TR::CodeGenerator *);setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::RegisterPair
OMR::X86::I386::TreeEvaluator::integerPairByteswapEvaluator(TR::Node *,TR::CodeGenerator *);setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::RegisterPair
OMR::X86::I386::TreeEvaluator::integerPairByteswapEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::integerPairByteswapEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::integerPairMinMaxEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::integerPairMinMaxEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::lternaryEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::lternaryEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::lcmpsetEvaluator(TR::Node *,TR::CodeGenerator *);addPreCondition(TR::Register *,TR::class RealRegister::RegNum,TR::CodeGenerator *,uint8_t,_Bool);OMR::X86::RegisterDependencyConditions
OMR::X86::I386::TreeEvaluator::lcmpsetEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,TR::CodeGenerator *,uint8_t,_Bool);OMR::X86::RegisterDependencyConditions
OMR::X86::I386::TreeEvaluator::lcmpsetEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::lcmpsetEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::lcmpsetEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::X86::I386::TreeEvaluator::performLload(TR::Node *,TR::MemoryReference *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::X86::I386::TreeEvaluator::longArithmeticCompareRegisterWithImmediate(TR::Node *,TR::Register *,TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Symbol
OMR::X86::I386::TreeEvaluator::longArithmeticCompareRegisterWithImmediate(TR::Node *,TR::Register *,TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::X86::I386::TreeEvaluator::longArithmeticCompareRegisterWithImmediate(TR::Node *,TR::Register *,TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,TR::CodeGenerator *,uint8_t,_Bool);OMR::X86::RegisterDependencyConditions
TR::IA32SystemLinkage::buildDirectDispatch(TR::Node *,_Bool);stopAddingConditions();OMR::X86::RegisterDependencyConditions
TR::IA32SystemLinkage::buildDirectDispatch(TR::Node *,_Bool);resetIsLeafMethod();OMR::CodeGenerator
TR::IA32SystemLinkage::buildDirectDispatch(TR::Node *,_Bool);setAdjustsFramePointerBy(int32_t);TR::X86ImmInstruction
TR::IA32SystemLinkage::buildVolatileAndReturnDependencies(TR::Node *,TR::RegisterDependencyConditions *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,TR::CodeGenerator *,uint8_t,_Bool);OMR::X86::RegisterDependencyConditions
TestCompiler::S390OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(int (*&)(int),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(long (*&)(long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(double (*&)(double),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileDirectCallTestMethods();compileDirectCallOpCodeMethod(float (*&)(float),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileDirectCallOpCodeMethod(unsigned long (*&)(unsigned long),int32_t,TR::ILOpCodes,TR::ILOpCodes,char *,char *,TR::DataType *,TR::DataType,int32_t &);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::S390OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(signed char (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(short (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileAddressTestMethods();compileOpCodeMethod(unsigned long (*&)(unsigned int),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
TestCompiler::X86OpCodesTest::compileDisabledConvertOpCodesTest();compileOpCodeMethod(long (*&)(unsigned long),int32_t,TR::ILOpCodes,char *,TR::DataType *,TR::DataType,int32_t &,int32_t);TestCompiler::OpCodesTest
OMR::InstOpCode::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::InstOpCode::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::InstOpCode::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::InstOpCode::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Power::Register::setFlippedCCR();set(unsigned int);OMR::FlagsTemplate
OMR::Power::Register::resetFlippedCCR();reset(unsigned int);OMR::FlagsTemplate
OMR::Power::MemoryReference::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Power::MemoryReference::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Power::MemoryReference::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Power::MemoryReference::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Power::CodeGenerator::setHasCall();set(unsigned int);OMR::FlagsTemplate
OMR::Power::CodeGenerator::setNoStackFrame();set(unsigned int);OMR::FlagsTemplate
OMR::Power::CodeGenerator::setCanExceptByTrap();set(unsigned int);OMR::FlagsTemplate
OMR::Power::CodeGenerator::setEnableTLHPrefetching();set(unsigned int);OMR::FlagsTemplate
OMR::Power::CodeGenerator::setIsOutOfLineHotPath(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Power::CodeGenerator::setIsDualTLH();set(unsigned int);OMR::FlagsTemplate
OMR::Instruction::setOpCodeValue(TR::class InstOpCode::Mnemonic);setMnemonic(enum OMR::InstOpCode::Mnemonic);OMR::InstOpCode
OMR::ResolvedMethodSymbol::genOSRHelperCall(int32_t,TR::SymbolReferenceTable *,TR::CFG *);setPreservesAllRegisters();OMR::MethodSymbol
OMR::ResolvedMethodSymbol::genOSRHelperCall(int32_t,TR::SymbolReferenceTable *,TR::CFG *);setSystemLinkageDispatch();OMR::MethodSymbol
TR_PPCRegisterDependencyGroup::setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);setRegister(TR::Register *);OMR::RegisterDependencyExt
TR_PPCRegisterDependencyGroup::setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);assignFlags(uint8_t);OMR::RegisterDependencyExt
TR_PPCRegisterDependencyGroup::setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);setRealRegister(TR::class RealRegister::RegNum);OMR::Power::RegisterDependencyExt
TR_PPCRegisterDependencyGroup::stopUsingDepRegs(uint32_t,TR::Register *,TR::Register *,TR::CodeGenerator *);stopUsingDepRegs(uint32_t,int,TR::Register **,TR::CodeGenerator *);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Power::RegisterDependencyConditions::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Power::RegisterDependencyConditions::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Power::RegisterDependencyConditions::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Power::RegisterDependencyConditions::addPreCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *,uint32_t);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *,uint32_t);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *,uint32_t);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::setPreDependencyExcludeGPR0(TR::Register *);setExcludeGPR0(TR::Register *,uint32_t);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::setPostDependencyExcludeGPR0(TR::Register *);setExcludeGPR0(TR::Register *,uint32_t);TR_PPCRegisterDependencyGroup
TR_PPCRegisterDependencyMap::addDependency(TR::RegisterDependency &,uint32_t);addDependency(TR::class RealRegister::RegNum,TR::RealRegister *,uint32_t);TR_PPCRegisterDependencyMap
TR_PPCRegisterDependencyMap::addDependency(TR::RegisterDependency *,uint32_t);addDependency(TR::class RealRegister::RegNum,TR::RealRegister *,uint32_t);TR_PPCRegisterDependencyMap
TR::PPCMemoryArgument::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::PPCMemoryArgument::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::PPCMemoryArgument::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::PPCMemoryArgument::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_ShrinkWrap::analyzeInstructions();processIncomingParameterUsage(class TR_BitVector **,int32_t);OMR::Power::CodeGenerator
TR_ShrinkWrap::doPlacement(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);computeRegisterSaveDescription(class TR_BitVector *,_Bool);OMR::Power::CodeGenerator
TR::PPCRelocation::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::PPCRelocation::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR::PPCRelocation::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR::PPCRelocation::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::CodeGenerator::buildGCMapForInstruction(TR::Instruction *);buildRegisterMapForInstruction(class TR_GCStackMap *);OMR::Power::CodeGenerator
TR_LiveRegisters::addRegister(TR::Register *,_Bool);setLiveRegisterInfo(class TR_LiveRegisterInfo *);OMR::Power::Register
TR_LiveRegisters::setAssociation(TR::Register *,TR::RealRegister *);setAssociation(uint64_t,TR::Compilation *);TR_LiveRegisterInfo
TR::LabelRelative24BitRelocation::apply(TR::CodeGenerator *);apply24BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::Power::CodeGenerator
TR::LabelRelative32BitRelocation::apply(TR::CodeGenerator *);apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::CodeGenerator
TR::LoadLabelRelative16BitRelocation::apply(TR::CodeGenerator *);apply16BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);OMR::Power::CodeGenerator
TR::LoadLabelRelative32BitRelocation::apply(TR::CodeGenerator *);apply32BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);OMR::CodeGenerator
TR::LoadLabelRelative64BitRelocation::apply(TR::CodeGenerator *);apply64BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *);OMR::Power::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();setNextAvailableBlockIndex(int32_t);OMR::Power::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();beginInstructionSelection();OMR::Power::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();endInstructionSelection();OMR::Power::CodeGenerator
OMR::CodeGenPhase::performPeepholePhase(TR::CodeGenerator *,TR::CodeGenPhase *);doPeephole();OMR::Power::CodeGenerator
OMR::CodeGenPhase::performBinaryEncodingPhase(TR::CodeGenerator *,TR::CodeGenPhase *);doBinaryEncoding();OMR::Power::CodeGenerator
OMR::Instruction::move(TR::Instruction *);remove();OMR::Power::Instruction
OMR::Power::TreeEvaluator::iaddEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iaddEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::laddEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::laddEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::isubEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::isubEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lsubEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lsubEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::imulEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::imulEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dualMulHelper32(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dualMulHelper32(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dualMulHelper32(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lmulEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lmulEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::imulhEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::imulhEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::idivEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::idivEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ldivEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::ldivEvaluator(TR::Node *,TR::CodeGenerator *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
OMR::Power::TreeEvaluator::ldivEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::ldivEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iremEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iremEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lremEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::lremEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lremEvaluator(TR::Node *,TR::CodeGenerator *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
OMR::Power::TreeEvaluator::lremEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ishlEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::ishlEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lshlEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lshlEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ishflEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::ishflEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lshflEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lshflEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ishrEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::ishrEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lshrEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lshrEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iushrEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iushrEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lushrEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lushrEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iandEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iandEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::landEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::landEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ixfrsEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ixfrsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::ixfrsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lxfrsEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lxfrsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lxfrsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::idozEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::idozEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::idozEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::muloverEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::muloverEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::muloverEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR::PPCImmInstruction::PPCImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint32_t,TR_ExternalRelocationTargetKind,TR::CodeGenerator *,uint32_t);setNeedsAOTRelocation(_Bool);OMR::Instruction
TR::PPCImmInstruction::PPCImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint32_t,TR_ExternalRelocationTargetKind,TR::Instruction *,TR::CodeGenerator *,uint32_t);setNeedsAOTRelocation(_Bool);OMR::Instruction
TR::PPCImmInstruction::PPCImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint32_t,TR_ExternalRelocationTargetKind,TR::SymbolReference *,TR::CodeGenerator *,uint32_t);setNeedsAOTRelocation(_Bool);OMR::Instruction
TR::PPCImmInstruction::PPCImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint32_t,TR_ExternalRelocationTargetKind,TR::SymbolReference *,TR::Instruction *,TR::CodeGenerator *,uint32_t);setNeedsAOTRelocation(_Bool);OMR::Instruction
TR::PPCImmInstruction::updateImmediateField(uint32_t);insertImmediateField(uint32_t *);TR::PPCImmInstruction
TR::PPCImm2Instruction::updateImmediateField2(uint32_t);insertImmediateField2(uint32_t *);TR::PPCImm2Instruction
TR::PPCSrc1Instruction::PPCSrc1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCSrc1Instruction::PPCSrc1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCSrc1Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCSrc1Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCDepLabelInstruction::PPCDepLabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCDepLabelInstruction::PPCDepLabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCDepLabelInstruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);OMR::Power::RegisterDependencyConditions
TR::PPCDepLabelInstruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);OMR::Power::RegisterDependencyConditions
TR::PPCConditionalBranchInstruction::PPCConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::CodeGenerator *,_Bool);useRegister(TR::Register *);OMR::Instruction
TR::PPCConditionalBranchInstruction::PPCConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCConditionalBranchInstruction::PPCConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::Instruction *,TR::CodeGenerator *,_Bool);useRegister(TR::Register *);OMR::Instruction
TR::PPCConditionalBranchInstruction::PPCConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCConditionalBranchInstruction::insertConditionRegister(uint32_t *);setRegisterFieldBI(uint32_t *);OMR::Power::RealRegister
TR::PPCDepConditionalBranchInstruction::PPCDepConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,_Bool);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCDepConditionalBranchInstruction::PPCDepConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCDepConditionalBranchInstruction::PPCDepConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *,_Bool);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCDepConditionalBranchInstruction::PPCDepConditionalBranchInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Register *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Instruction::PPCTrg1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Instruction::PPCTrg1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1ImmInstruction::updateImmediateField(uint32_t);insertImmediateField(uint32_t *);TR::PPCTrg1ImmInstruction
TR::PPCTrg1ImmInstruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1ImmInstruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCSrc2Instruction::PPCSrc2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCSrc2Instruction::PPCSrc2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCSrc2Instruction::insertSource1Register(uint32_t *);setRegisterFieldRA(uint32_t *);OMR::Power::RealRegister
TR::PPCSrc2Instruction::insertSource2Register(uint32_t *);setRegisterFieldRB(uint32_t *);OMR::Power::RealRegister
TR::PPCSrc2Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCSrc2Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src1Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src1Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src1ImmInstruction::PPCTrg1Src1ImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,uintptrj_t,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Src1ImmInstruction::PPCTrg1Src1ImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,uintptrj_t,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Power::Instruction
TR::PPCTrg1Src1ImmInstruction::PPCTrg1Src1ImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,uintptrj_t,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Src1ImmInstruction::PPCTrg1Src1ImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,uintptrj_t,TR::Instruction *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Src1ImmInstruction::PPCTrg1Src1ImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,uintptrj_t,TR::Instruction *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Power::Instruction
TR::PPCTrg1Src1ImmInstruction::PPCTrg1Src1ImmInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,uintptrj_t,TR::Instruction *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Src1ImmInstruction::updateImmediateField(uint32_t);insertImmediateField(uint32_t *);TR::PPCTrg1Src1ImmInstruction
TR::PPCTrg1Src1ImmInstruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src1ImmInstruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src1Imm2Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src1Imm2Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src2Instruction::PPCTrg1Src2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Src2Instruction::PPCTrg1Src2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Src2Instruction::PPCTrg1Src2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Src2Instruction::PPCTrg1Src2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Src2Instruction::PPCTrg1Src2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Power::Instruction
TR::PPCTrg1Src2Instruction::PPCTrg1Src2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Src2Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src2Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src3Instruction::PPCTrg1Src3Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Src3Instruction::PPCTrg1Src3Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Src3Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1Src3Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCMemInstruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCMemInstruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCMemSrc1Instruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCMemSrc1Instruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1MemInstruction::registersGoLive(TR::class CodeGenerator::TR_RegisterPressureState *);addVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCTrg1MemInstruction::registersGoDead(TR::class CodeGenerator::TR_RegisterPressureState *);removeVirtualRegister(TR::Register *);OMR::CodeGenerator::TR_RegisterPressureState
TR::PPCControlFlowInstruction::addSourceRegister(TR::Register *);useRegister(TR::Register *);OMR::Instruction
TR::PPCControlFlowInstruction::addTargetRegister(TR::Register *);useRegister(TR::Register *);OMR::Instruction
OMR::Power::TreeEvaluator::ireturnEvaluator(TR::Node *,TR::CodeGenerator *);addPreCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::ireturnEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lreturnEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ifxcmpoEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ifxcmpoEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpeqEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpeqEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::icmpeqEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpneEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpneEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::icmpneEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpltEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::icmpltEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpgeEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::icmpgeEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpgtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::icmpgtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::icmpleEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::icmpleEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iucmpltEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iucmpltEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iucmpgeEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iucmpgeEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iucmpgtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iucmpgtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iucmpleEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iucmpleEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpeqEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpeqEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lcmpeqEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpneEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpneEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lcmpneEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpltEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lcmpltEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpgeEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lcmpgeEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpgtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lcmpgtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpleEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lcmpleEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lucmpltEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lucmpltEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lucmpgeEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lucmpgeEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lucmpgtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lucmpgtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lucmpleEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lucmpleEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lcmpEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lookupEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::tableEvaluator(TR::Node *,TR::CodeGenerator *);setExcludeGPR0();OMR::Power::RegisterDependencyExt
OMR::Power::TreeEvaluator::tableEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::tableEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);rotateChildren(int32_t,int32_t);OMR::Node
OMR::Power::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);setNumChildren(uint16_t);OMR::Node
OMR::Power::TreeEvaluator::compareIntsForEquality(TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::compareIntsForEquality(TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::compareIntsForOrder(TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool,_Bool);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::compareIntsForOrder(TR::class InstOpCode::Mnemonic,TR::LabelSymbol *,TR::Node *,TR::CodeGenerator *,_Bool,_Bool,_Bool);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::igotoEvaluator(TR::Node *,TR::CodeGenerator *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
OMR::Power::TreeEvaluator::igotoEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::igotoEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *);PPCNeedsGCMap(uint32_t);OMR::Power::Instruction
OMR::Power::TreeEvaluator::evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *);setIsNonNull(_Bool);OMR::Node
OMR::Power::TreeEvaluator::genBranchSequence(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *);addTargetRegister(TR::Register *);TR::PPCControlFlowInstruction
OMR::Power::TreeEvaluator::genBranchSequence(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *);addSourceRegister(TR::Register *);TR::PPCControlFlowInstruction
OMR::Power::TreeEvaluator::genBranchSequence(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *);setOpCode2Value(TR::class InstOpCode::Mnemonic);TR::PPCControlFlowInstruction
OMR::Power::TreeEvaluator::genBranchSequence(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *);setCmpOpValue(TR::class InstOpCode::Mnemonic);TR::PPCControlFlowInstruction
OMR::Power::TreeEvaluator::genBranchSequence(TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
TR_PPCLoadLabelItem::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PPCLoadLabelItem::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
TR_PPCLoadLabelItem::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
TR_PPCLoadLabelItem::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Power::TreeEvaluator::dconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::floadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::dloadHelper(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::class InstOpCode::Mnemonic);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::fstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fstoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::dstoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::dstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::freturnEvaluator(TR::Node *,TR::CodeGenerator *);addPreCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::freturnEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fremEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::fremEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fremEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fremEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::fremEvaluator(TR::Node *,TR::CodeGenerator *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
OMR::Power::TreeEvaluator::dremEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dremEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dremEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::dremEvaluator(TR::Node *,TR::CodeGenerator *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
OMR::Power::TreeEvaluator::fnegEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fnegEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::i2fEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::i2dEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::l2fEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::l2dEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::f2dEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::f2dEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::d2iEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::d2iEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::d2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::d2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::d2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::d2fEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::d2fEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::ibits2fEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::fbits2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::lbits2dEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dcmplEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dcmplEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dcmplEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dcmpgEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dcmpgEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dcmpgEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdgetelemEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::vdgetelemEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdgetelemEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdsetelemEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::vdsetelemEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdsetelemEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dxfrsEvaluator(TR::Node *,TR::CodeGenerator *);setDouble(double);OMR::Node
OMR::Power::TreeEvaluator::dxfrsEvaluator(TR::Node *,TR::CodeGenerator *);unsetRegister();OMR::Node
OMR::Power::TreeEvaluator::dxfrsEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dxfrsEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::dxfrsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dxfrsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dintEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dintEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);unsetRegister();OMR::Node
OMR::Power::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);setFloat(float);OMR::Node
OMR::Power::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fsqrtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::fsqrtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dsqrtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dsqrtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::getstackEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::deallocaEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::deallocaEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::long2dbl(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::long2float(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::MemoryReference::setSymbol(TR::Symbol *,TR::CodeGenerator *);setSymbol(TR::Symbol *);OMR::SymbolReference
OMR::Power::MemoryReference::MemoryReference(TR::Node *,uint32_t,TR::CodeGenerator *);checkRegisters(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::MemoryReference::MemoryReference(TR::Node *,TR::MemoryReference &,int32_t,uint32_t,TR::CodeGenerator *);addToOffset(TR::Node *,intptrj_t,TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::MemoryReference::forceIndexedForm(TR::Node *,TR::CodeGenerator *,TR::Instruction *);setOffset(int32_t);OMR::Power::MemoryReference
OMR::Power::MemoryReference::forceIndexedForm(TR::Node *,TR::CodeGenerator *,TR::Instruction *);setIndexModifiable();OMR::Power::MemoryReference
OMR::Power::MemoryReference::forceIndexedForm(TR::Node *,TR::CodeGenerator *,TR::Instruction *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
OMR::Power::Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCImmInstruction::generateBinaryEncoding();addMetaDataForCodeAddress(uint8_t *);TR::PPCImmInstruction
TR::PPCImmInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCImmInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCImmInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCImm2Instruction::generateBinaryEncoding();insertImmediateField(uint32_t *);TR::PPCImmInstruction
TR::PPCImm2Instruction::generateBinaryEncoding();insertImmediateField2(uint32_t *);TR::PPCImm2Instruction
TR::PPCImm2Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCImm2Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCImm2Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCSrc1Instruction::generateBinaryEncoding();insertSource1Register(uint32_t *);TR::PPCSrc1Instruction
TR::PPCSrc1Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCSrc1Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCSrc1Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCLabelInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCLabelInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCLabelInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCAlignedLabelInstruction::generateBinaryEncoding();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::PPCAlignedLabelInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCAlignedLabelInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCAlignedLabelInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCAlignedLabelInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::PPCConditionalBranchInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCConditionalBranchInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCConditionalBranchInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCConditionalBranchInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::PPCConditionalBranchInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLocation(int32_t);TR::PPCConditionalBranchInstruction
TR::PPCAdminInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::PPCAdminInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCAdminInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCDepImmInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCDepImmInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1Instruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Instruction
TR::PPCTrg1Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1ImmInstruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Instruction
TR::PPCTrg1ImmInstruction::generateBinaryEncoding();addMetaDataForCodeAddress(uint8_t *);TR::PPCTrg1ImmInstruction
TR::PPCTrg1ImmInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1ImmInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1ImmInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::PPCSrc2Instruction::generateBinaryEncoding();insertSource1Register(uint32_t *);TR::PPCSrc2Instruction
TR::PPCSrc2Instruction::generateBinaryEncoding();insertSource2Register(uint32_t *);TR::PPCSrc2Instruction
TR::PPCSrc2Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCSrc2Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1Src1Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1Src1Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCTrg1Src1Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1Src1ImmInstruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Src1ImmInstruction
TR::PPCTrg1Src1ImmInstruction::generateBinaryEncoding();insertSource1Register(uint32_t *);TR::PPCTrg1Src1Instruction
TR::PPCTrg1Src1ImmInstruction::generateBinaryEncoding();addMetaDataForCodeAddress(uint8_t *);TR::PPCTrg1Src1ImmInstruction
TR::PPCTrg1Src1ImmInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1Src1ImmInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1Src1Imm2Instruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Src1ImmInstruction
TR::PPCTrg1Src1Imm2Instruction::generateBinaryEncoding();insertSource1Register(uint32_t *);TR::PPCTrg1Src1Instruction
TR::PPCTrg1Src1Imm2Instruction::generateBinaryEncoding();insertShiftAmount(uint32_t *);TR::PPCTrg1Src1ImmInstruction
TR::PPCTrg1Src1Imm2Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1Src1Imm2Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1Src2Instruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src2Instruction::generateBinaryEncoding();insertSource1Register(uint32_t *);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src2Instruction::generateBinaryEncoding();insertSource2Register(uint32_t *);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src2Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1Src2Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1Src2ImmInstruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src2ImmInstruction::generateBinaryEncoding();insertSource1Register(uint32_t *);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src2ImmInstruction::generateBinaryEncoding();insertSource2Register(uint32_t *);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src2ImmInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1Src2ImmInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1Src3Instruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Src3Instruction
TR::PPCTrg1Src3Instruction::generateBinaryEncoding();insertSource1Register(uint32_t *);TR::PPCTrg1Src3Instruction
TR::PPCTrg1Src3Instruction::generateBinaryEncoding();insertSource2Register(uint32_t *);TR::PPCTrg1Src3Instruction
TR::PPCTrg1Src3Instruction::generateBinaryEncoding();insertSource3Register(uint32_t *);TR::PPCTrg1Src3Instruction
TR::PPCTrg1Src3Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1Src3Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCMemInstruction::generateBinaryEncoding();mapOpCode(TR::Instruction *);OMR::Power::MemoryReference
TR::PPCMemInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCMemInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCMemInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCMemSrc1Instruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::PPCMemSrc1Instruction::generateBinaryEncoding();mapOpCode(TR::Instruction *);OMR::Power::MemoryReference
TR::PPCMemSrc1Instruction::generateBinaryEncoding();insertSourceRegister(uint32_t *);TR::PPCMemSrc1Instruction
TR::PPCMemSrc1Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCMemSrc1Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCMemSrc1Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCTrg1MemInstruction::generateBinaryEncoding();mapOpCode(TR::Instruction *);OMR::Power::MemoryReference
TR::PPCTrg1MemInstruction::generateBinaryEncoding();insertTargetRegister(uint32_t *);TR::PPCTrg1Instruction
TR::PPCTrg1MemInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCTrg1MemInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCTrg1MemInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCTrg1MemInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::PPCControlFlowInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
OMR::Power::CodeGenerator::allocateStackSlot();getNext();ListIterator
OMR::Power::CodeGenerator::CodeGenerator();initializeLinkage();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setStackPointerRegister(TR::RealRegister *);OMR::Power::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setMethodMetaDataRegister(TR::RealRegister *);OMR::Power::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setTOCBaseRegister(TR::RealRegister *);OMR::Power::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();initPPCRealRegisterLinkage();OMR::Power::Linkage
OMR::Power::CodeGenerator::CodeGenerator();setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);OMR::Power::Linkage
OMR::Power::CodeGenerator::CodeGenerator();initREGAssociations();OMR::Power::Machine
OMR::Power::CodeGenerator::CodeGenerator();setGlobalGPRPartitionLimit(uint8_t);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setGlobalFPRPartitionLimit(uint8_t);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setGlobalRegisterTable(uint32_t *);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setLastGlobalGPR(TR_GlobalRegisterNumber);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setLast8BitGlobalGPR(TR_GlobalRegisterNumber);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setLastGlobalFPR(TR_GlobalRegisterNumber);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setFirstGlobalVRF(TR_GlobalRegisterNumber);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setLastGlobalVRF(TR_GlobalRegisterNumber);OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsGlRegDeps();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsGlRegDepOnFirstBlock();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setPerformsChecksExplicitly();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setConsiderAllAutosAsTacticalGlobalRegisterCandidates();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setEnableRefinedAliasSets();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsConstantOffsetInAddressing();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsVirtualGuardNOPing();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsPrimitiveArrayCopy();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsReferenceArrayCopy();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsArrayCmp();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsJavaFloatSemantics();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsDivCheck();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsLoweringConstIDiv();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsLoweringConstLDivPower2();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setSupportsProfiledInlining();OMR::CodeGenerator
OMR::Power::CodeGenerator::CodeGenerator();setReturnInfo(enum TR_ReturnInfo);OMR::Compilation
OMR::Power::CodeGenerator::createLinkage(enum TR_LinkageConventions);setLinkage(enum TR_LinkageConventions,TR::Linkage *);OMR::CodeGenerator
OMR::Power::CodeGenerator::generateBinaryEncodingPrologue(struct TR_PPCBinaryEncodingData *);loadUpArguments(TR::Instruction *);OMR::Power::Linkage
OMR::Power::CodeGenerator::generateBinaryEncodingPrologue(struct TR_PPCBinaryEncodingData *);createPrologue(TR::Instruction *);OMR::Linkage
OMR::Power::CodeGenerator::doRegisterAssignment(enum TR_RegisterKinds);setAssignmentDirection(RegisterAssignmentDirection);OMR::Power::CodeGenerator
OMR::Power::CodeGenerator::doBinaryEncoding();generateBinaryEncodingPrologue(struct TR_PPCBinaryEncodingData *);OMR::Power::CodeGenerator
OMR::Power::CodeGenerator::doBinaryEncoding();setEstimatedCodeLength(uint32_t);OMR::CodeGenerator
OMR::Power::CodeGenerator::doBinaryEncoding();setBinaryBufferStart(uint8_t *);OMR::CodeGenerator
OMR::Power::CodeGenerator::doBinaryEncoding();setBinaryBufferCursor(uint8_t *);OMR::CodeGenerator
OMR::Power::CodeGenerator::doBinaryEncoding();alignBinaryBufferCursor();OMR::CodeGenerator
OMR::Power::CodeGenerator::deleteInst(TR::Instruction *);setNext(TR::Instruction *);OMR::Instruction
OMR::Power::CodeGenerator::deleteInst(TR::Instruction *);setPrev(TR::Instruction *);OMR::Instruction
OMR::Power::CodeGenerator::emitDataSnippets();setBinaryBufferCursor(uint8_t *);OMR::CodeGenerator
OMR::Power::CodeGenerator::dumpDataSnippets(TR::FILE *);print(TR::FILE *);OMR::ConstantDataSnippet
OMR::Power::CodeGenerator::buildRegisterMapForInstruction(class TR_GCStackMap *);setInternalPointerMap(class TR_InternalPointerMap *);TR_GCStackMap
OMR::Power::CodeGenerator::freeAndResetTransientLongs();setSize(uint32_t);TR_Array
OMR::Power::CodeGenerator::setRealRegisterAssociation(TR::Register *,TR::class RealRegister::RegNum);setAssociation(TR::Register *,TR::RealRegister *);TR_LiveRegisters
OMR::Power::CodeGenerator::addRealRegisterInterference(TR::Register *,TR::class RealRegister::RegNum);addInterference(uint64_t);TR_LiveRegisterInfo
OMR::Power::CodeGenerator::pickRegister(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &,TR_GlobalRegisterNumber &,TR_LinkHead<class TR_RegisterCandidate> *);setBitVector(class TR_BitVector &,int32_t);TR_BitVectorIterator
OMR::Power::CodeGenerator::generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::CodeGenerator::generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::CodeGenerator::generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &);reclaimScratchRegister(TR::Register *);TR_ScratchRegisterManager
OMR::Power::CodeGenerator::generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &);reclaimScratchRegister(TR::Register *);TR_ScratchRegisterManager
OMR::Power::CodeGenerator::loadIntConstantFixed(TR::Node *,int32_t,TR::Register *,TR::Instruction *,int16_t);addMetaDataForLoadIntConstantFixed(TR::Node *,TR::Instruction *,TR::Instruction *,int16_t,int32_t);OMR::Power::CodeGenerator
OMR::Power::CodeGenerator::addMetaDataFor32BitFixedLoadLabelAddressIntoReg(TR::Node *,TR::LabelSymbol *,TR::Instruction *,TR::Instruction *);addRelocation(TR::Relocation *);OMR::CodeGenerator
OMR::Power::CodeGenerator::addMetaDataFor64BitFixedLoadLabelAddressIntoReg(TR::Node *,TR::LabelSymbol *,TR::Register *,TR::Instruction **);addAOTRelocation(TR::Relocation *,const char *,uintptr_t,TR::Node *);OMR::CodeGenerator
OMR::Power::CodeGenerator::computeCallInfoBitVector();init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
OMR::PPCConstant::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::PPCConstant::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::PPCConstant::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::PPCConstant::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::ConstantDataSnippet::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::ConstantDataSnippet::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::ConstantDataSnippet::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::ConstantDataSnippet::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Power::Instruction::Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *);setBlockIndex(int32_t);OMR::Power::Instruction
OMR::Power::Instruction::Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *);setBlockIndex(int32_t);OMR::Power::Instruction
OMR::Power::Instruction::remove();setNext(TR::Instruction *);OMR::Instruction
OMR::Power::Instruction::remove();setPrev(TR::Instruction *);OMR::Instruction
TR::PPCDepImmSymInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::PPCDepImmSymInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::PPCDepImmSymInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::PPCDepImmSymInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR_Debug::printPrefix(TR::FILE *,TR::Instruction *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCDepInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCLabelInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCLabelInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCDepLabelInstruction *);print(TR::FILE *,TR::PPCLabelInstruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCConditionalBranchInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCConditionalBranchInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCConditionalBranchInstruction *);print(TR::FILE *,TR::LabelSymbol *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCDepConditionalBranchInstruction *);print(TR::FILE *,TR::PPCConditionalBranchInstruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCAdminInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCImmInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCSrc1Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCSrc1Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCDepImmInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCDepImmSymInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src1Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src1Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1ImmInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src1ImmInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src1ImmInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src1Imm2Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src1Imm2Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCSrc2Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCSrc2Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src2Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src2Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src2ImmInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src2ImmInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src3Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1Src3Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCMemSrc1Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCMemSrc1Instruction *);print(TR::FILE *,TR::MemoryReference *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCMemSrc1Instruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCMemSrc1Instruction *);printMemoryReferenceComment(TR::FILE *,TR::MemoryReference *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCMemInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCMemInstruction *);print(TR::FILE *,TR::MemoryReference *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCMemInstruction *);printMemoryReferenceComment(TR::FILE *,TR::MemoryReference *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1MemInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1MemInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1MemInstruction *);print(TR::FILE *,TR::MemoryReference *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCTrg1MemInstruction *);printMemoryReferenceComment(TR::FILE *,TR::MemoryReference *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCControlFlowInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::RegisterDependency *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::printInstructionComment(TR::FILE *,int32_t,TR::Instruction *);dumpInstructionComments(TR::FILE *,TR::Instruction *,_Bool);TR_Debug
TR_Debug::printMemoryReferenceComment(TR::FILE *,TR::MemoryReference *);print(TR::FILE *,TR::SymbolReference *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCHelperCallSnippet *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCArrayCopyCallSnippet *,uint8_t *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
TR_Debug::print(TR::FILE *,TR::PPCArrayCopyCallSnippet *,uint8_t *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR::PPCHelperCallSnippet::genHelperCall(uint8_t *);addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *);OMR::CodeGenerator
TR::PPCHelperCallSnippet::genHelperCall(uint8_t *);registerStackMap(uint8_t *,TR::CodeGenerator *);OMR::SnippetGCMap
TR::PPCHelperCallSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::PPCArrayCopyCallSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::PPCArrayCopyCallSnippet::emitSnippetBody();setOpCodeValue(TR::class InstOpCode::Mnemonic);TR::InstOpCode
TR::PPCArrayCopyCallSnippet::emitSnippetBody();setRegisterFieldRT(uint32_t *);OMR::Power::RealRegister
TR::PPCSrc1Instruction::assignRegisters(enum TR_RegisterKinds);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCSrc1Instruction::assignRegisters(enum TR_RegisterKinds);setSource1Register(TR::Register *);TR::PPCSrc1Instruction
TR::PPCDepLabelInstruction::assignRegisters(enum TR_RegisterKinds);assignPostConditionRegisters(TR::Instruction *,enum TR_RegisterKinds,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCDepLabelInstruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(enum TR_RegisterKinds);TR::PPCLabelInstruction
TR::PPCDepLabelInstruction::assignRegisters(enum TR_RegisterKinds);assignPreConditionRegisters(TR::Instruction *,enum TR_RegisterKinds,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCConditionalBranchInstruction::assignRegisters(enum TR_RegisterKinds);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCConditionalBranchInstruction::assignRegisters(enum TR_RegisterKinds);setConditionRegister(TR::Register *);TR::PPCConditionalBranchInstruction
TR::PPCDepConditionalBranchInstruction::assignRegisters(enum TR_RegisterKinds);block();OMR::Register
TR::PPCDepConditionalBranchInstruction::assignRegisters(enum TR_RegisterKinds);assignPostConditionRegisters(TR::Instruction *,enum TR_RegisterKinds,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCDepConditionalBranchInstruction::assignRegisters(enum TR_RegisterKinds);unblock();OMR::Register
TR::PPCDepConditionalBranchInstruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(enum TR_RegisterKinds);TR::PPCConditionalBranchInstruction
TR::PPCDepConditionalBranchInstruction::assignRegisters(enum TR_RegisterKinds);assignPreConditionRegisters(TR::Instruction *,enum TR_RegisterKinds,TR::CodeGenerator *);OMR::Power::RegisterDependencyConditions
TR::PPCTrg1Instruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(enum TR_RegisterKinds,_Bool);TR::PPCTrg1Instruction
TR::PPCTrg1Instruction::assignRegisters(enum TR_RegisterKinds,_Bool);assignRegisters(enum TR_RegisterKinds);OMR::Power::Instruction
TR::PPCTrg1Instruction::assignRegisters(enum TR_RegisterKinds,_Bool);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCTrg1Instruction::assignRegisters(enum TR_RegisterKinds,_Bool);setTargetRegister(TR::Register *);TR::PPCTrg1Instruction
TR::PPCSrc2Instruction::assignRegisters(enum TR_RegisterKinds);block();OMR::Register
TR::PPCSrc2Instruction::assignRegisters(enum TR_RegisterKinds);setSource2Register(TR::Register *);TR::PPCSrc2Instruction
TR::PPCSrc2Instruction::assignRegisters(enum TR_RegisterKinds);unblock();OMR::Register
TR::PPCSrc2Instruction::assignRegisters(enum TR_RegisterKinds);setSource1Register(TR::Register *);TR::PPCSrc2Instruction
TR::PPCSrc2Instruction::assignRegisters(enum TR_RegisterKinds);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCTrg1Src1Instruction::PPCTrg1Src1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Src1Instruction::PPCTrg1Src1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCTrg1Src1Instruction::assignRegisters(enum TR_RegisterKinds);block();OMR::Register
TR::PPCTrg1Src1Instruction::assignRegisters(enum TR_RegisterKinds);unblock();OMR::Register
TR::PPCTrg1Src1Instruction::assignRegisters(enum TR_RegisterKinds);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCTrg1Src1Instruction::assignRegisters(enum TR_RegisterKinds);setSource1Register(TR::Register *);TR::PPCTrg1Src1Instruction
TR::PPCTrg1Src2Instruction::assignRegisters(enum TR_RegisterKinds);block();OMR::Register
TR::PPCTrg1Src2Instruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(enum TR_RegisterKinds);TR::PPCTrg1Src1Instruction
TR::PPCTrg1Src2Instruction::assignRegisters(enum TR_RegisterKinds);unblock();OMR::Register
TR::PPCTrg1Src2Instruction::assignRegisters(enum TR_RegisterKinds);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCTrg1Src2Instruction::assignRegisters(enum TR_RegisterKinds);setSource2Register(TR::Register *);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src3Instruction::assignRegisters(enum TR_RegisterKinds);block();OMR::Register
TR::PPCTrg1Src3Instruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(enum TR_RegisterKinds);TR::PPCTrg1Src2Instruction
TR::PPCTrg1Src3Instruction::assignRegisters(enum TR_RegisterKinds);unblock();OMR::Register
TR::PPCTrg1Src3Instruction::assignRegisters(enum TR_RegisterKinds);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCTrg1Src3Instruction::assignRegisters(enum TR_RegisterKinds);setSource3Register(TR::Register *);TR::PPCTrg1Src3Instruction
TR::PPCMemInstruction::PPCMemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::MemoryReference
TR::PPCMemInstruction::PPCMemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::MemoryReference
TR::PPCMemInstruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::Power::MemoryReference
TR::PPCMemSrc1Instruction::PPCMemSrc1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::Register *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCMemSrc1Instruction::PPCMemSrc1Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);useRegister(TR::Register *);OMR::Instruction
TR::PPCMemSrc1Instruction::assignRegisters(enum TR_RegisterKinds);block();OMR::Register
TR::PPCMemSrc1Instruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(enum TR_RegisterKinds);TR::PPCMemInstruction
TR::PPCMemSrc1Instruction::assignRegisters(enum TR_RegisterKinds);unblock();OMR::Register
TR::PPCMemSrc1Instruction::assignRegisters(enum TR_RegisterKinds);blockRegisters();OMR::Power::MemoryReference
TR::PPCMemSrc1Instruction::assignRegisters(enum TR_RegisterKinds);unblockRegisters();OMR::Power::MemoryReference
TR::PPCMemSrc1Instruction::assignRegisters(enum TR_RegisterKinds);decFutureUseCountAndUnlatch(TR::Register *);OMR::Power::Machine
TR::PPCMemSrc1Instruction::assignRegisters(enum TR_RegisterKinds);setSourceRegister(TR::Register *);TR::PPCMemSrc1Instruction
TR::PPCTrg1MemInstruction::PPCTrg1MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *,int32_t);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::MemoryReference
TR::PPCTrg1MemInstruction::PPCTrg1MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *,int32_t);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Power::MemoryReference
TR::PPCTrg1MemInstruction::assignRegisters(enum TR_RegisterKinds);blockRegisters();OMR::Power::MemoryReference
TR::PPCTrg1MemInstruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(enum TR_RegisterKinds,_Bool);TR::PPCTrg1Instruction
TR::PPCTrg1MemInstruction::assignRegisters(enum TR_RegisterKinds);unblockRegisters();OMR::Power::MemoryReference
TR::PPCTrg1MemInstruction::assignRegisters(enum TR_RegisterKinds);block();OMR::Register
TR::PPCTrg1MemInstruction::assignRegisters(enum TR_RegisterKinds);assignRegisters(TR::Instruction *,TR::CodeGenerator *);OMR::Power::MemoryReference
TR::PPCTrg1MemInstruction::assignRegisters(enum TR_RegisterKinds);unblock();OMR::Register
OMR::Power::Linkage::saveArguments(TR::Instruction *,_Bool,_Bool,List<TR::ParameterSymbol> &);init(int64_t,class TR_Memory *,enum TR_AllocationKind,enum TR_BitVectorGrowable);TR_BitVector
OMR::Power::Linkage::pushIntegerWordArg(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::Linkage::pushAddressArg(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::Linkage::pushThis(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::Linkage::pushLongArg(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::Linkage::pushFloatArg(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::Linkage::pushDoubleArg(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR::PPCSystemLinkage::mapStack(TR::ResolvedMethodSymbol *);reset();ListIterator
TR::PPCSystemLinkage::mapStack(TR::ResolvedMethodSymbol *);setScalarTempSlots(uint32_t);OMR::ResolvedMethodSymbol
TR::PPCSystemLinkage::mapStack(TR::ResolvedMethodSymbol *);setLocalMappingCursor(uint32_t);OMR::ResolvedMethodSymbol
TR::PPCSystemLinkage::mapStack(TR::ResolvedMethodSymbol *);mapParameters(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &);TR::PPCSystemLinkage
TR::PPCSystemLinkage::mapStack(TR::ResolvedMethodSymbol *);setParmBaseOffset(int32_t);OMR::GCStackAtlas
TR::PPCSystemLinkage::mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);setOffset(int32_t);OMR::RegisterMappedSymbol
TR::PPCSystemLinkage::initPPCRealRegisterLinkage();setState(RegState,_Bool);OMR::RealRegister
TR::PPCSystemLinkage::initPPCRealRegisterLinkage();setAssignedRegister(TR::Register *);OMR::RealRegister
TR::PPCSystemLinkage::initPPCRealRegisterLinkage();setNumberOfLockedRegisters(enum TR_RegisterKinds,int);OMR::Power::Machine
TR::PPCSystemLinkage::createPrologue(TR::Instruction *);createPrologue(TR::Instruction *,List<TR::ParameterSymbol> &);TR::PPCSystemLinkage
TR::PPCSystemLinkage::createPrologue(TR::Instruction *,List<TR::ParameterSymbol> &);setStackPointerRegister(TR::RealRegister *);OMR::Power::CodeGenerator
TR::PPCSystemLinkage::buildVirtualDispatch(TR::Node *,TR::RegisterDependencyConditions *,uint32_t);evaluate(TR::Node *);OMR::CodeGenerator
TR::PPCSystemLinkage::buildVirtualDispatch(TR::Node *,TR::RegisterDependencyConditions *,uint32_t);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR::PPCSystemLinkage::buildDirectDispatch(TR::Node *);buildDirectCall(TR::Node *,TR::SymbolReference *,TR::RegisterDependencyConditions *,const TR::PPCLinkageProperties &,int32_t);TR::PPCSystemLinkage
TR::PPCSystemLinkage::buildDirectDispatch(TR::Node *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
TR::PPCSystemLinkage::buildDirectDispatch(TR::Node *);setHasCall();OMR::Power::CodeGenerator
TR::PPCSystemLinkage::buildDirectDispatch(TR::Node *);setRegister(TR::Register *);OMR::Node
TR::PPCSystemLinkage::buildDirectDispatch(TR::Node *);freeAndResetTransientLongs();OMR::Power::CodeGenerator
TR::PPCSystemLinkage::buildDirectDispatch(TR::Node *);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
TR::PPCSystemLinkage::buildIndirectDispatch(TR::Node *);buildVirtualDispatch(TR::Node *,TR::RegisterDependencyConditions *,uint32_t);TR::PPCSystemLinkage
TR::PPCSystemLinkage::buildIndirectDispatch(TR::Node *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
TR::PPCSystemLinkage::buildIndirectDispatch(TR::Node *);setHasCall();OMR::Power::CodeGenerator
TR::PPCSystemLinkage::buildIndirectDispatch(TR::Node *);setRegister(TR::Register *);OMR::Node
TR::PPCSystemLinkage::buildIndirectDispatch(TR::Node *);freeAndResetTransientLongs();OMR::Power::CodeGenerator
TR::PPCSystemLinkage::buildIndirectDispatch(TR::Node *);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
TR::PPCSystemLinkage::setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &);TR::PPCSystemLinkage
OMR::Power::Machine::Machine(TR::CodeGenerator *);initialiseRegisterFile();OMR::Power::Machine
OMR::Power::Machine::freeBestRegister(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool);setBackingStorage(class TR_BackingStore *);OMR::Register
OMR::Power::Machine::freeBestRegister(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool);traceRegFreed(TR::Register *,TR::Register *);OMR::CodeGenerator
OMR::Power::Machine::freeBestRegister(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool);traceRAInstruction(TR::Instruction *);OMR::CodeGenerator
OMR::Power::Machine::freeBestRegister(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Power::Machine::freeBestRegister(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool);setState(RegState,_Bool);OMR::RealRegister
OMR::Power::Machine::freeBestRegister(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool);setAssignedRegister(TR::Register *);OMR::Register
OMR::Power::Machine::reverseSpillState(TR::Instruction *,TR::Register *,TR::RealRegister *,_Bool);traceRAInstruction(TR::Instruction *);OMR::CodeGenerator
OMR::Power::Machine::assignOneRegister(TR::Instruction *,TR::Register *,_Bool);clearRegisterAssignmentFlags();OMR::CodeGenerator
OMR::Power::Machine::assignOneRegister(TR::Instruction *,TR::Register *,_Bool);setRegisterAssignmentFlag(enum TR_RegisterAssignmentFlagBits);OMR::CodeGenerator
OMR::Power::Machine::assignOneRegister(TR::Instruction *,TR::Register *,_Bool);setAssignedRegister(TR::Register *);OMR::Register
OMR::Power::Machine::assignOneRegister(TR::Instruction *,TR::Register *,_Bool);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Power::Machine::assignOneRegister(TR::Instruction *,TR::Register *,_Bool);setState(RegState,_Bool);OMR::RealRegister
OMR::Power::Machine::assignOneRegister(TR::Instruction *,TR::Register *,_Bool);traceRegAssigned(TR::Register *,TR::Register *);OMR::CodeGenerator
OMR::Power::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum);setState(RegState,_Bool);OMR::RealRegister
OMR::Power::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Power::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum);setAssignedRegister(TR::Register *);OMR::Register
OMR::Power::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum);traceRegAssigned(TR::Register *,TR::Register *);OMR::CodeGenerator
OMR::Power::Machine::decFutureUseCountAndUnlatch(TR::Register *);decFutureUseCount(ncount_t);OMR::Register
TR_PPCOutOfLineCodeSection::TR_PPCOutOfLineCodeSection(TR::Node *,TR::ILOpCodes,TR::Register *,TR::LabelSymbol *,TR::LabelSymbol *,TR::CodeGenerator *);generatePPCOutOfLineCodeSectionDispatch();TR_PPCOutOfLineCodeSection
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setInternalControlFlowSafeNestingDepth(int32_t);OMR::CodeGenerator
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);incOutOfLineColdPathNestedDepth();OMR::CodeGenerator
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);toggleIsInOOLSection();OMR::CodeGenerator
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);swapInstructionListsWithCompilation();TR_OutOfLineCodeSection
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);doRegisterAssignment(enum TR_RegisterKinds);OMR::Power::CodeGenerator
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);decOutOfLineColdPathNestedDepth();OMR::CodeGenerator
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setNext(TR::Instruction *);OMR::Instruction
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setPrev(TR::Instruction *);OMR::Instruction
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setAppendInstruction(TR::Instruction *);OMR::CodeGenerator
TR_PPCOutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setHasBeenRegisterAssigned(_Bool);TR_OutOfLineCodeSection
TR_PPCOutOfLineCodeSection::generatePPCOutOfLineCodeSectionDispatch();swapInstructionListsWithCompilation();TR_OutOfLineCodeSection
TR_PPCOutOfLineCodeSection::generatePPCOutOfLineCodeSectionDispatch();decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::RealRegister::setRegisterFieldXS(uint32_t *);setRegisterFieldRS(uint32_t *);OMR::Power::RealRegister
OMR::Power::RealRegister::setRegisterFieldXT(uint32_t *);setRegisterFieldRT(uint32_t *);OMR::Power::RealRegister
OMR::Power::RealRegister::setRegisterFieldXA(uint32_t *);setRegisterFieldRA(uint32_t *);OMR::Power::RealRegister
OMR::Power::RealRegister::setRegisterFieldXB(uint32_t *);setRegisterFieldRB(uint32_t *);OMR::Power::RealRegister
OMR::Power::RealRegister::setRegisterFieldXC(uint32_t *);setRegisterFieldRC(uint32_t *);OMR::Power::RealRegister
TR_PPCRegisterDependencyGroup::assignRegisters(TR::Instruction *,enum TR_RegisterKinds,uint32_t,TR::CodeGenerator *);unblockRegisters(uint32_t);TR_PPCRegisterDependencyGroup
OMR::Power::RegisterDependencyConditions::RegisterDependencyConditions(TR::CodeGenerator *,TR::Node *,uint32_t,TR::Instruction **);incVisitCount();OMR::Compilation
OMR::Power::RegisterDependencyConditions::unionNoRegPostCondition(TR::Register *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::RegisterDependencyConditions::stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);stopUsingDepRegs(TR::CodeGenerator *,int,TR::Register **);OMR::Power::RegisterDependencyConditions
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setPersistentTOC(class OMR::TableOfConstants *);OMR::PersistentInfo
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setPermanentEntriesAddtionComplete(_Bool);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setTOCSize(uint32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setTOCPtr(uint8_t *);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setTOCBase(uintptrj_t *);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setDownCursor(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setHashTop(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setHashSize(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setCollisionCursor(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setHashMap(struct TR_tocHashEntry *);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setNameAStart(int8_t *);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setNameACursor(int8_t *);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setNameASize(int64_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setLastFloatCursor(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::initTOC(class TR_FrontEnd *,TR::PersistentInfo *,uintptrj_t);setTOCMonitor(TR::Monitor *);TR_PPCTableOfConstants
TR_PPCTableOfConstants::reinitializeMemory();setHashTop(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::reinitializeMemory();setCollisionCursor(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::reinitializeMemory();setDownCursor(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::reinitializeMemory();setUpCursor(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::lookUp(int32_t,struct TR_tocHashEntry *,int32_t *,TR::CodeGenerator *);enter();OMR::Monitor
TR_PPCTableOfConstants::lookUp(int32_t,struct TR_tocHashEntry *,int32_t *,TR::CodeGenerator *);exit();OMR::Monitor
TR_PPCTableOfConstants::permanentEntriesAddtionComplete();enter();OMR::Monitor
TR_PPCTableOfConstants::permanentEntriesAddtionComplete();setUpCursorAfterPermanentEntries(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::permanentEntriesAddtionComplete();setDownCursorAfterPermanentEntries(int32_t);TR_PPCTableOfConstants
TR_PPCTableOfConstants::permanentEntriesAddtionComplete();setPermanentEntriesAddtionComplete(_Bool);TR_PPCTableOfConstants
TR_PPCTableOfConstants::permanentEntriesAddtionComplete();exit();OMR::Monitor
TR_PPCTableOfConstants::isPermanentEntriesAddtionComplete();enter();OMR::Monitor
TR_PPCTableOfConstants::isPermanentEntriesAddtionComplete();exit();OMR::Monitor
OMR::Power::TreeEvaluator::iloadEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iloadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::commonByteLoadEvaluator(TR::Node *,_Bool,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::commonByteLoadEvaluator(TR::Node *,_Bool,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::sloadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::cloadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::aloadEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::aloadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::istoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::istoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::lstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::bstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::bstoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::sstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::sstoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::cstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::cstoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::astoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::astoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::treetopEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::loadaddrEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::loadaddrEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::gprRegLoadEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::gprRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::passThroughEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::passThroughEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::arraycopyEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::arraycopyEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::arraycopyEvaluator(TR::Node *,TR::CodeGenerator *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
OMR::Power::TreeEvaluator::arraycopyEvaluator(TR::Node *,TR::CodeGenerator *);setHasCall();OMR::Power::CodeGenerator
OMR::Power::TreeEvaluator::setmemoryEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::setmemoryEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);addPreCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setLinkRegisterKilled(_Bool);OMR::Power::Machine
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setHasCall();OMR::Power::CodeGenerator
OMR::Power::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::cmpsetEvaluator(TR::Node *,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::cmpsetEvaluator(TR::Node *,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::cmpsetEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::cmpsetEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::cmpsetEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::cmpsetEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::BBStartEvaluator(TR::Node *,TR::CodeGenerator *);setCurrentBlock(TR::Block *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::BBStartEvaluator(TR::Node *,TR::CodeGenerator *);setFirstInstruction(TR::Instruction *);OMR::Block
OMR::Power::TreeEvaluator::BBEndEvaluator(TR::Node *,TR::CodeGenerator *);setLastInstruction(TR::Instruction *);OMR::Block
OMR::Power::TreeEvaluator::vloadEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vloadEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::vstoreEvaluator(TR::Node *,TR::CodeGenerator *);decNodeReferenceCounts(TR::CodeGenerator *);OMR::Power::MemoryReference
OMR::Power::TreeEvaluator::vstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::viremEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::viremEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::viremEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vnotEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vnotEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vicmpltEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vicmpgeEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vicmpgeEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vicmpgeEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vicmpleEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vicmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vicmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vicmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vicmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vicmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vicmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vicmpallgeEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vicmpallltEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vicmpanygeEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vicmpanyltEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vigetelemEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vigetelemEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::getvelemDirectMoveHelper(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::getvelemDirectMoveHelper(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::getvelemDirectMoveHelper(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::getvelemMemoryMoveHelper(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::getvelemMemoryMoveHelper(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::visetelemEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::visetelemEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vimergeEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vimergeEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vmulInt32Helper(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vmulInt32Helper(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vmulInt32Helper(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdivInt32Helper(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdivInt32Helper(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vdivInt32Helper(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vnegInt32Helper(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vnegInt32Helper(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdmergeEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vdmergeEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdcmpleEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vdcmpltEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vdcmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vdcmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdcmpallHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdcmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::vdcmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdcmpanyHelper(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::vdcmpallleEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vdcmpallltEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vdcmpanyleEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vdcmpanyltEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Power::TreeEvaluator::vdlogEvaluator(TR::Node *,TR::CodeGenerator *);setLinkage(enum TR_LinkageConventions);OMR::MethodSymbol
OMR::Power::TreeEvaluator::vdlogEvaluator(TR::Node *,TR::CodeGenerator *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Power::TreeEvaluator::inlineVectorUnaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::inlineVectorUnaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::inlineVectorBinaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::inlineVectorBinaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::inlineVectorTernaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::inlineVectorTernaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::inlineVectorCompareBranch(TR::Node *,TR::CodeGenerator *,_Bool,_Bool);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::inlineVectorCompareBranch(TR::Node *,TR::CodeGenerator *,_Bool,_Bool);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::inlineVectorCompareAllOrAnyOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);setStartInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::inlineVectorCompareAllOrAnyOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);setEndInternalControlFlow();OMR::Symbol
OMR::Power::TreeEvaluator::inlineVectorCompareAllOrAnyOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);stopUsingDepRegs(TR::CodeGenerator *,TR::Register *,TR::Register *);OMR::Power::RegisterDependencyConditions
OMR::Power::TreeEvaluator::inlineVectorCompareAllOrAnyOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::inlineVectorCompareAllOrAnyOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::PrefetchEvaluator(TR::Node *,TR::CodeGenerator *);recursivelyDecReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::PrefetchEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::ibyteswapEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::preserveTOCRegister(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *);setAppendInstruction(TR::Instruction *);OMR::CodeGenerator
TR_PPCComputeCC::setCarryBorrow(TR::Node *,_Bool,TR::Register **,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::arraysetEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::arraysetEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::lconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::inegEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iabsEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::iabsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::iabsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::fabsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dabsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::i2bEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::i2bEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::b2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::b2iEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::bu2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::bu2iEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::bu2lEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::bu2lEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::s2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::s2iEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dfloorEvaluator(TR::Node *,TR::CodeGenerator *);unsetRegister();OMR::Node
OMR::Power::TreeEvaluator::dfloorEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Power::TreeEvaluator::dfloorEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Power::TreeEvaluator::dfloorEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::ConstantDataSnippet::emitSnippetBody();setSnippetBinaryStart(uint8_t *);OMR::ConstantDataSnippet
JITPPCOpCodesTest_UnaryTest_Test::TestBody();compileUnaryTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_UnaryTest_Test::TestBody();invokeUnaryTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_MemoryOperationTest_Test::TestBody();compileMemoryOperationTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_MemoryOperationTest_Test::TestBody();invokeMemoryOperationTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_TernaryTest_Test::TestBody();compileTernaryTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_TernaryTest_Test::TestBody();invokeTernaryTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_CompareTest_Test::TestBody();compileCompareTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_CompareTest_Test::TestBody();invokeCompareTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_BitwiseTest_Test::TestBody();compileBitwiseTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_BitwiseTest_Test::TestBody();invokeBitwiseTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_PPCAddressTest_Test::TestBody();compileAddressTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_PPCAddressTest_Test::TestBody();invokeAddressTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_UnsupportedOpCodesTest_Test::TestBody();UnsupportedOpCodesTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEConvertTests_Test::TestBody();compileDisabledConvertTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEConvertTests_Test::TestBody();invokeDisabledConvertTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLECompareTests_Test::TestBody();compileDisabledCompareTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLECompareTests_Test::TestBody();invokeDisabledCompareTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEIntegerArithmeticTest_Test::TestBody();compileDisabledIntegerArithmeticTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEIntegerArithmeticTest_Test::TestBody();invokeDisabledIntegerArithmeticTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEFloatArithmeticTest_Test::TestBody();compileDisabledFloatArithmeticTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEFloatArithmeticTest_Test::TestBody();invokeDisabledFloatArithmeticTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEMemoryOperationTest_Test::TestBody();compileDisabledMemoryOperationTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEMemoryOperationTest_Test::TestBody();invokeDisabledMemoryOperationTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEUnaryTest_Test::TestBody();compileDisabledUnaryTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEUnaryTest_Test::TestBody();invokeDisabledUnaryTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEBitwiseTest_Test::TestBody();compileDisabledBitwiseTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEBitwiseTest_Test::TestBody();invokeDisabledBitwiseTests();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLETernaryTest_Test::TestBody();compileDisabledTernaryTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLETernaryTest_Test::TestBody();invokeDisabledTernaryTest();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEDirectCallTest_Test::TestBody();compileDisabledDirectCallTestMethods();TestCompiler::PPCOpCodesTest
JITPPCOpCodesTest_DISABLED_PPCLEDirectCallTest_Test::TestBody();invokeDisabledDirectCallTest();TestCompiler::PPCOpCodesTest
OMR::Power::CodeCacheConfig::CodeCacheConfig();setCodeCacheHelperAlignment(size_t);OMR::CodeCacheConfig
TR_S390ProcessorInfo::TR_S390ProcessorInfo();initialize();TR_S390ProcessorInfo
OMR::Z::Snippet::setNeedLitPoolBasePtr();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Snippet::resetNeedLitPoolBasePtr();reset(unsigned short);OMR::FlagsTemplate
OMR::Z::Register::setIsUsedInMemRef(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Register::setIs64BitReg(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Register::setAssignToHPR(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Register::setIsNotHighWordUpgradable(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Register::setSpilledToHPR(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Register::setAlreadySignExtended();set(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::resetAlreadySignExtended();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::setIsUpperBitsAreDirty(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Register::setNotUsedInThisBB();set(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::resetNotUsedInThisBB();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::setValueLiveOnExit();set(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::resetValueLiveOnExit();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::setPendingSpillOnDef();set(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::resetPendingSpillOnDef();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::setRedefined(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Register::resetIsLive();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::Register::resetIsLive();resetIsLive();OMR::Register
OMR::Z::CodeGenerator::setEnableBranchPreload();set(unsigned int);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setDisableBranchPreload();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setEnableBranchPreloadForCalls();set(unsigned int);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setDisableBranchPreloadForCalls();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setIsOutOfLineHotPath(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setEnableTLHPrefetching();set(unsigned int);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setSupportsImplicitNullChecks(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setConditionalMovesEvaluationMode(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setEnableRIOverPrivateLinkage(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setCondCodeShouldBePreserved(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setOnDemandLiteralPoolRun(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setGlobalStaticBaseRegisterOn(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setGlobalPrivateStaticBaseRegisterOn(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setSupportsHighWordFacility(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::setCanExceptByTrap(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::Instruction::setOutOfLineEX();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setThrowsImplicitException();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setExtDisp();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setExtDisp2();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setExceptBranchOp();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setCCuseKnown();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setStartInternalControlFlow();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setEndInternalControlFlow();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setCCused();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setDebugHookOp();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::RegisterBitVector::operator delete(void *,size_t);deallocate(void *,size_t,const char *);CS2::shared_allocator
TR::Instruction::Instruction(TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::RegisterDependencyConditions *,TR::CodeGenerator *);initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);OMR::Z::Instruction
TR::Instruction::Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);OMR::Z::Instruction
TR::Instruction::Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);OMR::Z::Instruction
OMR::Z::MemoryReference::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Z::MemoryReference::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Z::MemoryReference::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Z::MemoryReference::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Z::MemoryReference::setMemRefUsedBefore();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::resetMemRefUsedBefore();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setDispAdjusted();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setPseudoLive();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setCheckForLongDispSlot();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setCausesImplicitNullPointerException();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setIs2ndMemRef();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::resetIs2ndMemRef();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::resetRightAlignMemRef();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setRightAlignMemRef();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setRightAlignMemRef();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::resetLeftAlignMemRef();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setForceEvaluation();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setForceEvaluation();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setForceFolding();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setForceFolding();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setForceFirstTimeFolding();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setForceFirstTimeFolding();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::resetForceFirstTimeFolding();reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setHasTemporaryNegativeOffset();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setIsOriginalSymRefForAliasingOnly();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setIsExposedConstantAddressing();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setAdjustedForLongDisplacement();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setCreatedDuringInstructionSelection();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setUnresolvedDataSnippet();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setTargetAddressSnippet();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setConstantDataSnippet();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setLookupSwitchSnippet();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setMemRefMustNotSpill();set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setBucketBaseRegMemRef();set(unsigned int);OMR::FlagsTemplate
TR_S390RegisterDependencyGroup::clearDependencyInfo(uint32_t);setRegister(TR::Register *);OMR::Z::RegisterDependencyExt
TR_S390RegisterDependencyGroup::clearDependencyInfo(uint32_t);assignFlags(uint8_t);OMR::Z::RegisterDependencyExt
TR_S390RegisterDependencyGroup::clearDependencyInfo(uint32_t);setRealRegister(TR::class RealRegister::RegNum);OMR::Z::RegisterDependencyExt
TR_S390RegisterDependencyGroup::setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);setRegister(TR::Register *);OMR::Z::RegisterDependencyExt
TR_S390RegisterDependencyGroup::setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);assignFlags(uint8_t);OMR::Z::RegisterDependencyExt
TR_S390RegisterDependencyGroup::setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);setRealRegister(TR::class RealRegister::RegNum);OMR::Z::RegisterDependencyExt
TR_S390RegisterDependencyGroup::setRealRegisterForDependency(int32_t,TR::class RealRegister::RegNum);setRealRegister(TR::class RealRegister::RegNum);OMR::Z::RegisterDependencyExt
OMR::Z::RegisterDependencyConditions::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Z::RegisterDependencyConditions::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
OMR::Z::RegisterDependencyConditions::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Z::RegisterDependencyConditions::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
OMR::Z::RegisterDependencyConditions::unionNoRegPostCondition(TR::Register *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::RegisterDependencyConditions::addPreCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);TR_S390RegisterDependencyGroup
OMR::Z::RegisterDependencyConditions::addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);setDependencyInfo(uint32_t,TR::Register *,TR::class RealRegister::RegNum,uint8_t);TR_S390RegisterDependencyGroup
TR_RegisterCandidates::assign(TR::Block **,int32_t,int32_t &,int32_t &);setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &);OMR::Z::CodeGenerator
TR_ShrinkWrap::analyzeInstructions();processIncomingParameterUsage(class TR_BitVector **,int32_t);OMR::Z::CodeGenerator
TR_ShrinkWrap::doPlacement(class TR_RegisterAnticipatability &,class TR_RegisterAvailability &);computeRegisterSaveDescription(class TR_BitVector *,_Bool);OMR::Z::CodeGenerator
OMR::CodeGenerator::lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t);lowerTreesPropagateBlockToNode(TR::Node *);OMR::Z::CodeGenerator
OMR::CodeGenerator::buildGCMapForInstruction(TR::Instruction *);buildRegisterMapForInstruction(class TR_GCStackMap *);OMR::Z::CodeGenerator
TR_LiveRegisters::addRegister(TR::Register *,_Bool);setLiveRegisterInfo(class TR_LiveRegisterInfo *);OMR::Z::Register
TR_LiveRegisters::registerIsDead(TR::Register *,_Bool);resetIsLive();OMR::Z::Register
TR::LabelRelative12BitRelocation::apply(TR::CodeGenerator *);apply12BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *,_Bool);OMR::Z::CodeGenerator
TR::LabelRelative32BitRelocation::apply(TR::CodeGenerator *);apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::Z::CodeGenerator
TR::LabelTable32BitRelocation::apply(TR::CodeGenerator *);apply32BitLabelTableRelocation(int32_t *,TR::LabelSymbol *);OMR::Z::CodeGenerator
OMR::CodeGenerator::lowerTrees();preLowerTrees();OMR::Z::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();setNextAvailableBlockIndex(int32_t);OMR::Z::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();beginInstructionSelection();OMR::Z::CodeGenerator
OMR::CodeGenerator::doInstructionSelection();endInstructionSelection();OMR::Z::CodeGenerator
OMR::CodeGenerator::allocateCollectedReferenceRegister();setContainsCollectedReference();OMR::Z::Register
OMR::CodeGenerator::allocate64bitRegisterPair(TR::Register *,TR::Register *);setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::Z::RegisterPair
OMR::CodeGenerator::allocate64bitRegisterPair(TR::Register *,TR::Register *);setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::Z::RegisterPair
OMR::CodeGenerator::allocateSinglePrecisionRegisterPair(TR::Register *,TR::Register *);setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::Z::RegisterPair
OMR::CodeGenerator::allocateSinglePrecisionRegisterPair(TR::Register *,TR::Register *);setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::Z::RegisterPair
OMR::CodeGenPhase::performInstructionSelectionPhase(TR::CodeGenerator *,TR::CodeGenPhase *);doInstructionSelection();OMR::Z::CodeGenerator
OMR::CodeGenPhase::performPeepholePhase(TR::CodeGenerator *,TR::CodeGenPhase *);doPeephole();OMR::Z::CodeGenerator
OMR::CodeGenPhase::performBinaryEncodingPhase(TR::CodeGenerator *,TR::CodeGenPhase *);doBinaryEncoding();OMR::Z::CodeGenerator
OMR::Z::InstOpCode::operator=(const class OMR::Z::InstOpCode &);operator=(const class OMR::InstOpCode &);OMR::InstOpCode
TR::InstOpCode::operator=(const class TR::InstOpCode &);operator=(const class OMR::Z::InstOpCode &);OMR::Z::InstOpCode
TR_S390BinaryAnalyser::genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);setInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool,_Bool,TR::Compilation *,_Bool,_Bool);TR_Analyser
TR_S390BinaryAnalyser::genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);remapInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *);TR_S390BinaryAnalyser
TR_S390BinaryAnalyser::genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR_S390BinaryAnalyser::intBinaryAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryAnalyser
TR_S390BinaryAnalyser::longBinaryAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryAnalyser
TR_S390BinaryAnalyser::floatBinaryAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryAnalyser
TR_S390BinaryAnalyser::doubleBinaryAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryAnalyser
TR_S390BinaryAnalyser::longSubtractAnalyser(TR::Node *);setInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool,_Bool,TR::Compilation *,_Bool,_Bool);TR_Analyser
TR_S390BinaryAnalyser::longSubtractAnalyser(TR::Node *);remapInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *);TR_S390BinaryAnalyser
TR_S390BinaryAnalyser::longSubtractAnalyser(TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR::S390BranchOnCountInstruction::S390BranchOnCountInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::LabelSymbol *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnCountInstruction::S390BranchOnCountInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::RegisterDependencyConditions *,TR::LabelSymbol *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnCountInstruction::S390BranchOnCountInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnCountInstruction::S390BranchOnCountInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::RegisterDependencyConditions *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::Register *,TR::LabelSymbol *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::Register *,TR::LabelSymbol *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390BranchOnIndexInstruction::S390BranchOnIndexInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390LabelInstruction::S390LabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::CodeGenerator *);getNextAvailableBlockIndex();OMR::Z::CodeGenerator
TR::S390LabelInstruction::S390LabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::LabelSymbol *,TR::CodeGenerator *);getNextAvailableBlockIndex();OMR::Z::CodeGenerator
TR::S390LabelInstruction::S390LabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);getNextAvailableBlockIndex();OMR::Z::CodeGenerator
TR::S390LabelInstruction::S390LabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);getNextAvailableBlockIndex();OMR::Z::CodeGenerator
TR::S390LabelInstruction::S390LabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);getNextAvailableBlockIndex();OMR::Z::CodeGenerator
TR::S390LabelInstruction::S390LabelInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::LabelSymbol *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);getNextAvailableBlockIndex();OMR::Z::CodeGenerator
TR::S390LabelInstruction::preservedForListing();set(unsigned char);OMR::FlagsTemplate
TR::S390LabelInstruction::setSkipForLabelTargetNOPs();set(unsigned char);OMR::FlagsTemplate
TR::S390LabelInstruction::setEstimateDoneForLabelTargetNOPs();set(unsigned char);OMR::FlagsTemplate
TR::S390AnnotationInstruction::S390AnnotationInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int16_t,int32_t,int32_t,_Bool,char *,TR::CodeGenerator *);setRegionNumber(int16_t);OMR::Z::Instruction
TR::S390AnnotationInstruction::S390AnnotationInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int16_t,int32_t,int32_t,_Bool,char *,TR::Instruction *,TR::CodeGenerator *);setRegionNumber(int16_t);OMR::Z::Instruction
TR::S390AnnotationInstruction::S390AnnotationInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int16_t,int32_t,int32_t,_Bool,char *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);setRegionNumber(int16_t);OMR::Z::Instruction
TR::S390AnnotationInstruction::S390AnnotationInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int16_t,int32_t,int32_t,_Bool,char *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);setRegionNumber(int16_t);OMR::Z::Instruction
TR::S390Imm2Instruction::S390Imm2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint16_t,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390Imm2Instruction::S390Imm2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint16_t,TR::Instruction *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390Imm2Instruction::S390Imm2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint16_t,TR::RegisterDependencyConditions *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390Imm2Instruction::S390Imm2Instruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint16_t,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::class InstOpCode::S390BranchCondition,TR::Register *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::class InstOpCode::S390BranchCondition,TR::Register *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::class InstOpCode::S390BranchCondition,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RegInstruction::S390RegInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::class InstOpCode::S390BranchCondition,TR::Register *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RRInstruction::S390RRInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RRInstruction::S390RRInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RRInstruction::S390RRInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RRInstruction::S390RRInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int8_t,TR::Register *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RRInstruction::S390RRInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int8_t,TR::Register *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RRInstruction::S390RRInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390TranslateInstruction::S390TranslateInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390TranslateInstruction::S390TranslateInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,uint8_t);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390TranslateInstruction::S390TranslateInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,int32_t,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,void *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,void *,TR::SymbolReference *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,void *,TR::SymbolReference *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,int32_t,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,void *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Snippet *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Snippet *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Snippet *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Snippet *,TR::RegisterDependencyConditions *,TR::SymbolReference *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,void *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Symbol *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Symbol *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Symbol *,TR::CodeGenerator *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Symbol *,TR::SymbolReference *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Symbol *,TR::SymbolReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Symbol *,TR::SymbolReference *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::LabelSymbol *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::S390RILInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::LabelSymbol *,TR::Instruction *,TR::CodeGenerator *);checkRegForGPR0Disable(TR::class InstOpCode::Mnemonic,TR::Register *);OMR::Z::Instruction
TR::S390RILInstruction::setIsLiteralPoolAddress();set(unsigned char);OMR::FlagsTemplate
TR::S390RILInstruction::setIsImmediateOffsetInBytes();set(unsigned char);OMR::FlagsTemplate
TR::S390RILInstruction::setImmediateOffsetInBytes(uintptrj_t);setIsImmediateOffsetInBytes();TR::S390RILInstruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint32_t,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::RegisterPair *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::RegisterPair *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::RegisterPair *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSInstruction::S390RSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::RegisterPair *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RRSInstruction::S390RRSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::class InstOpCode::S390BranchCondition,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RRSInstruction::S390RRSInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::class InstOpCode::S390BranchCondition,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RIEInstruction::S390RIEInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::class InstOpCode::S390BranchCondition,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390RIEInstruction::S390RIEInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::class InstOpCode::S390BranchCondition,TR::Instruction *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390RIEInstruction::S390RIEInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,int8_t,int8_t,int8_t,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390RIEInstruction::S390RIEInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,int8_t,int8_t,int8_t,TR::Instruction *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390RIEInstruction::S390RIEInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,int16_t,TR::Instruction *,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390RIEInstruction::S390RIEInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,int16_t,TR::CodeGenerator *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390SMIInstruction::S390SMIInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint8_t,TR::LabelSymbol *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SMIInstruction::S390SMIInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint8_t,TR::LabelSymbol *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SMIInstruction::S390SMIInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint8_t,TR::LabelSymbol *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SMIInstruction::S390SMIInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,uint8_t,TR::LabelSymbol *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RISInstruction::S390RISInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,int8_t,TR::MemoryReference *,TR::class InstOpCode::S390BranchCondition,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RISInstruction::S390RISInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,int8_t,TR::MemoryReference *,TR::class InstOpCode::S390BranchCondition,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int8_t,TR::MemoryReference *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int8_t,int8_t,TR::MemoryReference *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int8_t,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemInstruction::S390MemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,int8_t,int8_t,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *,_Bool);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390SIInstruction::S390SIInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,uint8_t,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SIInstruction::S390SIInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,uint8_t,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSLbInstruction::S390RSLbInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint16_t,TR::MemoryReference *,uint8_t,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSLbInstruction::S390RSLbInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,uint16_t,TR::MemoryReference *,uint8_t,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSLbInstruction::S390RSLbInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,int16_t,TR::MemoryReference *,int8_t,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RSLbInstruction::S390RSLbInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,int16_t,TR::MemoryReference *,int8_t,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemMemInstruction::S390MemMemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemMemInstruction::S390MemMemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemMemInstruction::S390MemMemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390MemMemInstruction::S390MemMemInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::MemoryReference *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXInstruction::S390RXInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *);setIs2ndMemRef();OMR::Z::MemoryReference
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setIs2ndMemRef();OMR::Z::MemoryReference
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *);setIs2ndMemRef();OMR::Z::MemoryReference
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setIs2ndMemRef();OMR::Z::MemoryReference
TR::S390SSFInstruction::S390SSFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::RegisterPair *,TR::MemoryReference *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390RXFInstruction::S390RXFInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,TR::RegisterDependencyConditions *,TR::Instruction *,TR::CodeGenerator *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390VInstruction::setMaskField(uint32_t *,uint8_t,int);setMaskField(uint32_t *,int8_t,int8_t);OMR::Z::Instruction
TR::S390VStorageInstruction::S390VStorageInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,uint8_t);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390VStorageInstruction::S390VStorageInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,uint8_t);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390VStorageInstruction::S390VStorageInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,uint8_t,TR::Instruction *);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390VStorageInstruction::S390VStorageInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,uint8_t,TR::Instruction *);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390VRSaInstruction::S390VRSaInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,uint8_t);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390VRSbInstruction::S390VRSbInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,uint8_t);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390VRScInstruction::S390VRScInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *,uint8_t);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390VRSdInstruction::S390VRSdInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::Register *,TR::MemoryReference *);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390VRVInstruction::S390VRVInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,uint8_t);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390VRXInstruction::S390VRXInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,uint8_t);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390VRXInstruction::S390VRXInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,uint8_t,TR::Instruction *);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390VSIInstruction::S390VSIInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,uint8_t);useSourceMemoryReference(TR::MemoryReference *);OMR::Z::Instruction
TR::S390VSIInstruction::S390VSIInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,uint8_t);setupThrowsImplicitNullPointerException(TR::Node *,TR::MemoryReference *);OMR::Z::Instruction
TR::S390VSIInstruction::S390VSIInstruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *,TR::Register *,TR::MemoryReference *,uint8_t);setPrintMaskField(_Bool);TR::S390VStorageInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::CodeGenerator *);setTargetSnippet(TR::Snippet *);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::CodeGenerator *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::CodeGenerator *);setCallType(uint8_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::CodeGenerator *);setKindNOP(enum TR::S390NOPInstruction::KindNOP);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::CodeGenerator *);setArgumentsLengthOnCall(int32_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setTargetSnippet(TR::Snippet *);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setCallType(uint8_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setKindNOP(enum TR::S390NOPInstruction::KindNOP);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setArgumentsLengthOnCall(int32_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::CodeGenerator *);setTargetSnippet(TR::Snippet *);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::CodeGenerator *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::CodeGenerator *);setCallType(uint8_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::CodeGenerator *);setKindNOP(enum TR::S390NOPInstruction::KindNOP);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::CodeGenerator *);setArgumentsLengthOnCall(int32_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setTargetSnippet(TR::Snippet *);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setCallType(uint8_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setKindNOP(enum TR::S390NOPInstruction::KindNOP);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,TR::Snippet *,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setArgumentsLengthOnCall(int32_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,int32_t,TR::Node *,TR::CodeGenerator *);setTargetSnippet(TR::Snippet *);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,int32_t,TR::Node *,TR::CodeGenerator *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,int32_t,TR::Node *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,int32_t,TR::Node *,TR::CodeGenerator *);setCallType(uint8_t);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,int32_t,TR::Node *,TR::CodeGenerator *);setKindNOP(enum TR::S390NOPInstruction::KindNOP);TR::S390NOPInstruction
TR::S390NOPInstruction::S390NOPInstruction(TR::class InstOpCode::Mnemonic,int32_t,int32_t,TR::Node *,TR::CodeGenerator *);setArgumentsLengthOnCall(int32_t);TR::S390NOPInstruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,TR::CodeGenerator *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);useTargetRegister(TR::Register *);OMR::Z::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);useSourceRegister(TR::Register *);OMR::Z::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::S390EInstruction(TR::class InstOpCode::Mnemonic,TR::Node *,TR::Instruction *,TR::CodeGenerator *,TR::Register *,TR::Register *,TR::Register *,TR::Register *,TR::RegisterDependencyConditions *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR_S390BinaryCommutativeAnalyser::genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,_Bool,TR::LabelSymbol *,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition);setInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool,_Bool,TR::Compilation *,_Bool,_Bool);TR_Analyser
TR_S390BinaryCommutativeAnalyser::genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,_Bool,TR::LabelSymbol *,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition);remapInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool);TR_S390BinaryCommutativeAnalyser
TR_S390BinaryCommutativeAnalyser::genericLongAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);setInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool,_Bool,TR::Compilation *,_Bool,_Bool);TR_Analyser
TR_S390BinaryCommutativeAnalyser::genericLongAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);remapInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool);TR_S390BinaryCommutativeAnalyser
TR_S390BinaryCommutativeAnalyser::integerAddAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);setInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool,_Bool,TR::Compilation *,_Bool,_Bool);TR_Analyser
TR_S390BinaryCommutativeAnalyser::integerAddAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);remapInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool);TR_S390BinaryCommutativeAnalyser
TR_S390BinaryCommutativeAnalyser::integerAddAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR_S390BinaryCommutativeAnalyser::longAddAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic);setInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool,_Bool,TR::Compilation *,_Bool,_Bool);TR_Analyser
TR_S390BinaryCommutativeAnalyser::longAddAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic);remapInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool);TR_S390BinaryCommutativeAnalyser
TR_S390BinaryCommutativeAnalyser::longAddAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR_S390BinaryCommutativeAnalyser::floatBinaryCommutativeAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,_Bool,TR::LabelSymbol *,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition);TR_S390BinaryCommutativeAnalyser
TR_S390BinaryCommutativeAnalyser::doubleBinaryCommutativeAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);genericAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,_Bool,TR::LabelSymbol *,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition);TR_S390BinaryCommutativeAnalyser
OMR::Z::TreeEvaluator::imulEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::mulhEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::mulhEvaluator(TR::Node *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::mulhEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::mulhEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::mulhEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dualMulHelper64(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lmulhEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::inegEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::inegEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lnegEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::lnegEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::bnegEvaluator(TR::Node *,TR::CodeGenerator *);signExtendedHighOrderBits(TR::Node *,TR::Register *,uint32_t);OMR::Z::CodeGenerator
OMR::Z::TreeEvaluator::bnegEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::bnegEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::snegEvaluator(TR::Node *,TR::CodeGenerator *);signExtendedHighOrderBits(TR::Node *,TR::Register *,uint32_t);OMR::Z::CodeGenerator
OMR::Z::TreeEvaluator::snegEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::snegEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::integerRolEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::integerRolEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::iandEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::landEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::iorEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lorEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::ixorEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lxorEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR_Debug::print(TR::FILE *,TR::S390CallSnippet *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390CallSnippet *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR::S390CallSnippet::loadArgumentItem(TR::class InstOpCode::Mnemonic,uint8_t *,TR::RealRegister *,int32_t);copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390CallSnippet::loadArgumentItem(TR::class InstOpCode::Mnemonic,uint8_t *,TR::RealRegister *,int32_t);setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390CallSnippet::loadArgumentItem(TR::class InstOpCode::Mnemonic,uint8_t *,TR::RealRegister *,int32_t);setBaseRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390CallSnippet::storeArgumentItem(TR::class InstOpCode::Mnemonic,uint8_t *,TR::RealRegister *,int32_t,TR::CodeGenerator *);copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390CallSnippet::storeArgumentItem(TR::class InstOpCode::Mnemonic,uint8_t *,TR::RealRegister *,int32_t,TR::CodeGenerator *);setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390CallSnippet::storeArgumentItem(TR::class InstOpCode::Mnemonic,uint8_t *,TR::RealRegister *,int32_t,TR::CodeGenerator *);setBaseRegisterField(uint32_t *);OMR::Z::RealRegister
TR_S390CompareAnalyser::longOrderedCompareAndBranchAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition,TR::LabelSymbol *,TR::LabelSymbol *,_Bool &);setInputs(TR::Node *,TR::Register *,TR::Node *,TR::Register *,_Bool,_Bool,TR::Compilation *,_Bool,_Bool);TR_Analyser
TR_S390CompareAnalyser::longOrderedCompareAndBranchAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition,TR::class InstOpCode::S390BranchCondition,TR::LabelSymbol *,TR::LabelSymbol *,_Bool &);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR_Debug::print(TR::FILE *,TR::S390ConstantDataSnippet *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390TargetAddressSnippet *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390TargetAddressSnippet *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390LookupSwitchSnippet *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390InterfaceCallDataSnippet *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390InterfaceCallDataSnippet *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR::S390ConstantDataSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::S390ConstantDataSnippet::emitSnippetBody();addMetaDataForCodeAddress(uint8_t *);TR::S390ConstantDataSnippet
TR::S390ConstantInstructionSnippet::S390ConstantInstructionSnippet(TR::CodeGenerator *,TR::Node *,TR::Instruction *);setLength(uint32_t);TR::S390ConstantDataSnippet
TR::S390ConstantInstructionSnippet::S390ConstantInstructionSnippet(TR::CodeGenerator *,TR::Node *,TR::Instruction *);setIsRefed(_Bool);TR::S390ConstantInstructionSnippet
TR::S390ConstantInstructionSnippet::getDataAs8Bytes();emitSnippetBody();TR::S390ConstantInstructionSnippet
TR::S390ConstantInstructionSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::S390ConstantInstructionSnippet::emitSnippetBody();generateBinaryEncoding();OMR::Z::Instruction
TR::S390EyeCatcherDataSnippet::S390EyeCatcherDataSnippet(TR::CodeGenerator *,TR::Node *);setLength(uint32_t);TR::S390ConstantDataSnippet
TR::S390EyeCatcherDataSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::S390TargetAddressSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::S390LookupSwitchSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::S390InterfaceCallDataSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::S390InterfaceCallDataSnippet::emitSnippetBody();addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *);OMR::CodeGenerator
TR::S390JNICallDataSnippet::print(TR::FILE *,class TR_Debug *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
TR::S390JNICallDataSnippet::print(TR::FILE *,class TR_Debug *);printPrefix(TR::FILE *,TR::Instruction *,uint8_t *,uint8_t);TR_Debug
TR::S390LabelTableSnippet::S390LabelTableSnippet(TR::CodeGenerator *,TR::Node *,uint32_t);setLength(uint32_t);TR::S390ConstantDataSnippet
TR::S390LabelTableSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
OMR::Z::TreeEvaluator::igotoEvaluator(TR::Node *,TR::CodeGenerator *);setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR::S390RegInstruction
OMR::Z::TreeEvaluator::igotoEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::returnEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fcmplEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::fcmplEvaluator(TR::Node *,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Z::Instruction
OMR::Z::TreeEvaluator::fcmplEvaluator(TR::Node *,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::fcmplEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::ternaryEvaluator(TR::Node *,TR::CodeGenerator *);incVisitCount();OMR::Compilation
OMR::Z::TreeEvaluator::ternaryEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::ternaryEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dternaryEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::dternaryEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dternaryEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dternaryEvaluator(TR::Node *,TR::CodeGenerator *);recursivelyDecReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::countReferencesInTree(TR::Node *,TR::Node *);setVisitCount(vcount_t);OMR::Node
OMR::Z::TreeEvaluator::lookupEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lookupEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::tableEvaluator(TR::Node *,TR::CodeGenerator *);setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR::S390RegInstruction
OMR::Z::TreeEvaluator::tableEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);rotateChildren(int32_t,int32_t);OMR::Node
OMR::Z::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);setNumChildren(uint16_t);OMR::Node
OMR::Z::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);generateS390OutOfLineCodeSectionDispatch();TR_S390OutOfLineCodeSection
OMR::Z::TreeEvaluator::ZEROCHKEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::addToRegDep(TR::RegisterDependencyConditions *,TR::Register *,_Bool);addPostConditionIfNotAlreadyInserted(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::evaluateNULLCHKWithPossibleResolve(TR::Node *,_Bool,TR::CodeGenerator *);setIsNonNull(_Bool);OMR::Node
OMR::Z::TreeEvaluator::butestEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::inlineIfButestEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::inlineIfBifEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::commonButestEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::dconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::fmulEvaluator(TR::Node *,TR::CodeGenerator *);floatBinaryCommutativeAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryCommutativeAnalyser
OMR::Z::TreeEvaluator::fmulEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dmulEvaluator(TR::Node *,TR::CodeGenerator *);doubleBinaryCommutativeAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryCommutativeAnalyser
OMR::Z::TreeEvaluator::dmulEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fdivEvaluator(TR::Node *,TR::CodeGenerator *);floatBinaryAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryAnalyser
OMR::Z::TreeEvaluator::ddivEvaluator(TR::Node *,TR::CodeGenerator *);doubleBinaryAnalyser(TR::Node *,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);TR_S390BinaryAnalyser
OMR::Z::TreeEvaluator::floatRemHelper(TR::Node *,TR::CodeGenerator *);swapInstructionListsWithCompilation();TR_OutOfLineCodeSection
OMR::Z::TreeEvaluator::floatRemHelper(TR::Node *,TR::CodeGenerator *);setChild(int32_t,TR::Node *);OMR::Node
OMR::Z::TreeEvaluator::floatRemHelper(TR::Node *,TR::CodeGenerator *);setReferenceCount(rcount_t);OMR::Node
OMR::Z::TreeEvaluator::floatRemHelper(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::floatRemHelper(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::floatRemHelper(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::floatRemHelper(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::floorCeilEvaluator(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int8_t);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::floorCeilEvaluator(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,int8_t);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::f2dEvaluator(TR::Node *,TR::CodeGenerator *);setIsSinglePrecision(_Bool);OMR::Register
OMR::Z::TreeEvaluator::ibits2fEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::ibits2fEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fbits2iEvaluator(TR::Node *,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::fbits2iEvaluator(TR::Node *,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Z::Instruction
OMR::Z::TreeEvaluator::fbits2iEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::fbits2iEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::fbits2iEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::fbits2iEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::MemoryReference::MemoryReference(TR::CodeGenerator *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Register *,int32_t,TR::CodeGenerator *,const char *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Register *,int32_t,TR::SymbolReference *,TR::CodeGenerator *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Register *,TR::Register *,int32_t,TR::CodeGenerator *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *);setupCheckForLongDispFlag(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool,class TR_StorageReference *);tryForceFolding(TR::Node *,TR::CodeGenerator *,class TR_StorageReference *,TR::SymbolReference *&,TR::Symbol *&,List<TR::Node> &);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Node *,_Bool,TR::CodeGenerator *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *);setupCheckForLongDispFlag(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Node *,TR::SymbolReference *,TR::CodeGenerator *,class TR_StorageReference *);enforceDisplacementLimit(TR::Node *,TR::CodeGenerator *,TR::Instruction *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *);setupCheckForLongDispFlag(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Snippet *,TR::CodeGenerator *,TR::Register *,TR::Node *);initSnippetPointers(TR::Snippet *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *);setupCheckForLongDispFlag(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *);setBaseRegister(TR::Register *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(TR::Snippet *,TR::Register *,int32_t,TR::CodeGenerator *);initSnippetPointers(TR::Snippet *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(class OMR::Z::MemoryReference &,int32_t,TR::CodeGenerator *);resetIs2ndMemRef();OMR::Z::MemoryReference
OMR::Z::MemoryReference::MemoryReference(class OMR::Z::MemoryReference &,int32_t,TR::CodeGenerator *);resetMemRefUsedBefore();OMR::Z::MemoryReference
OMR::Z::MemoryReference::tryBaseIndexDispl(TR::CodeGenerator *,TR::Node *,TR::Node *);setBaseRegister(TR::Register *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::tryBaseIndexDispl(TR::CodeGenerator *,TR::Node *,TR::Node *);setOffset(intptrj_t);OMR::Z::MemoryReference
OMR::Z::MemoryReference::tryBaseIndexDispl(TR::CodeGenerator *,TR::Node *,TR::Node *);AddFoldedMemRefToStack(TR::MemoryReference *);OMR::Z::CodeGenerator
OMR::Z::MemoryReference::swapBaseRegister(TR::Register *,TR::CodeGenerator *);setIsUsedInMemRef(_Bool);OMR::Z::Register
OMR::Z::MemoryReference::setUnresolvedSnippet(TR::UnresolvedDataSnippet *);setUnresolvedDataSnippet();OMR::Z::MemoryReference
OMR::Z::MemoryReference::setTargetAddressSnippet(TR::S390TargetAddressSnippet *);setTargetAddressSnippet();OMR::Z::MemoryReference
OMR::Z::MemoryReference::setConstantDataSnippet(TR::S390ConstantDataSnippet *);setConstantDataSnippet();OMR::Z::MemoryReference
OMR::Z::MemoryReference::setLookupSwitchSnippet(TR::S390LookupSwitchSnippet *);setLookupSwitchSnippet();OMR::Z::MemoryReference
OMR::Z::MemoryReference::setLeftAlignMemRef(int32_t);reset(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setLeftAlignMemRef(int32_t);set(unsigned int);OMR::FlagsTemplate
OMR::Z::MemoryReference::setLeftAlignMemRef(int32_t);setLeftMostByte(int32_t);OMR::Z::MemoryReference
OMR::Z::MemoryReference::stopUsingMemRefRegister(TR::CodeGenerator *);RemoveMemRefFromStack(TR::MemoryReference *);OMR::Z::CodeGenerator
OMR::Z::MemoryReference::populateThroughEvaluation(TR::Node *,TR::CodeGenerator *);setBaseRegister(TR::Register *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::populateThroughEvaluation(TR::Node *,TR::CodeGenerator *);setupCausesImplicitNullPointerException(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::consolidateRegisters(TR::Node *,TR::CodeGenerator *);setBaseRegister(TR::Register *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::consolidateRegisters(TR::Node *,TR::CodeGenerator *);setIndexRegister(TR::Register *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::consolidateRegisters(TR::Node *,TR::CodeGenerator *);propagateAlignmentInfo(class OMR::Z::MemoryReference *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::consolidateRegisters(TR::Node *,TR::CodeGenerator *);setSymbolReference(TR::SymbolReference *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::consolidateRegisters(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::MemoryReference::generateBinaryEncoding(uint8_t *,TR::CodeGenerator *,TR::Instruction *);addInstrSpecificRelocation(TR::CodeGenerator *,TR::Instruction *,int32_t,uint8_t *);OMR::Z::MemoryReference
OMR::Z::MemoryReference::estimateBinaryLength(int32_t,TR::CodeGenerator *,TR::Instruction *);setEstimatedBinaryLength(uint8_t);OMR::Instruction
MemToMemConstLenMacroOp::generateLoop();stopUsingRegister(TR::Register *);OMR::CodeGenerator
MemToMemVarLenMacroOp::generateLoop();generateInstruction(int32_t,int64_t);MemToMemVarLenMacroOp
MemToMemVarLenMacroOp::generateLoop();stopUsingRegister(TR::Register *);OMR::CodeGenerator
MemInitConstLenMacroOp::generateLoop();stopUsingRegister(TR::Register *);OMR::CodeGenerator
MemCmpConstLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateLoop();MemToMemConstLenMacroOp
MemCmpConstLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setInRemainder(_Bool);MemToMemMacroOp
MemCmpConstLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateRemainder();MemToMemConstLenMacroOp
MemCmpConstLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
MemCmpConstLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateLoop();MemToMemConstLenMacroOp
MemCmpConstLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setInRemainder(_Bool);MemToMemMacroOp
MemCmpConstLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateRemainder();MemToMemConstLenMacroOp
MemCmpConstLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
MemCmpVarLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateLoop();MemToMemVarLenMacroOp
MemCmpVarLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setInRemainder(_Bool);MemToMemMacroOp
MemCmpVarLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateRemainder();MemToMemVarLenMacroOp
MemCmpVarLenMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
MemCmpVarLenMacroOp::generateInstruction(int32_t,int64_t);generateSrcMemRef(int32_t);MemToMemMacroOp
MemCmpVarLenMacroOp::generateInstruction(int32_t,int64_t);generateDstMemRef(int32_t);MemToMemMacroOp
MemCmpVarLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateLoop();MemToMemVarLenMacroOp
MemCmpVarLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setInRemainder(_Bool);MemToMemMacroOp
MemCmpVarLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);generateRemainder();MemToMemVarLenMacroOp
MemCmpVarLenSignMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,int32_t,TR::Instruction *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
MemToMemTypedMacroOp::operator delete(void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
MemToMemTypedMacroOp::operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);freeMemory(void *,enum TR_AllocationKind,enum TR_MemoryBase::ObjectType);TR_Memory
MemToMemTypedMacroOp::operator delete(void *,TR::Region &);deallocate(void *,size_t);TR::Region
MemToMemTypedMacroOp::operator delete[](void *,TR::Region &);deallocate(void *,size_t);TR::Region
MemToMemTypedMacroOp::generate(TR::Register *,TR::Register *,TR::Register *,_Bool);stopUsingRegister(TR::Register *);OMR::CodeGenerator
MemCpyVarLenMacroOp::generateInstruction(int32_t,int64_t);generateSrcMemRef(int32_t);MemToMemMacroOp
MemCpyVarLenMacroOp::generateInstruction(int32_t,int64_t);generateDstMemRef(int32_t);MemToMemMacroOp
BitOpMemVarLenMacroOp::generateInstruction(int32_t,int64_t);generateSrcMemRef(int32_t);MemToMemMacroOp
BitOpMemVarLenMacroOp::generateInstruction(int32_t,int64_t);generateDstMemRef(int32_t);MemToMemMacroOp
MemToMemTypedVarLenMacroOp::generateLoop();createLoopDependencies(TR::Instruction *);MemToMemTypedMacroOp
MemToMemTypedVarLenMacroOp::generateLoop();setEndInternalControlFlow();OMR::Z::Instruction
MemToMemTypedVarLenMacroOp::generateLoop();setStartInternalControlFlow();OMR::Z::Instruction
MemToMemTypedVarLenMacroOp::addCoreDependencies(TR::RegisterDependencyConditions *);addPreCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
MemToMemTypedVarLenMacroOp::addCoreDependencies(TR::RegisterDependencyConditions *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
MemInitVarLenTypedMacroOp::generateInstruction();stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
MemInitVarLenTypedMacroOp::createLoopDependencies(TR::Instruction *);addCoreDependencies(TR::RegisterDependencyConditions *);MemToMemTypedVarLenMacroOp
MemCpyVarLenTypedMacroOp::MemCpyVarLenTypedMacroOp(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *,TR::DataType,TR::Register *,TR::Node *,_Bool,_Bool);allocWorkReg();MemCpyVarLenTypedMacroOp
MemCpyVarLenTypedMacroOp::cleanUpReg();stopUsingRegister(TR::Register *);OMR::CodeGenerator
MemCpyVarLenTypedMacroOp::generateInstruction();stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
MemCpyVarLenTypedMacroOp::createLoopDependencies(TR::Instruction *);addCoreDependencies(TR::RegisterDependencyConditions *);MemToMemTypedVarLenMacroOp
MemCpyAtomicMacroOp::MemCpyAtomicMacroOp(TR::Node *,TR::Node *,TR::Node *,TR::CodeGenerator *,TR::DataType,TR::Register *,TR::Node *,_Bool,_Bool,int32_t);allocWorkReg();MemCpyAtomicMacroOp
MemCpyAtomicMacroOp::generateLoop();createLoopDependencies(TR::Instruction *);MemCpyAtomicMacroOp
MemCpyAtomicMacroOp::generateLoop();setEndInternalControlFlow();OMR::Z::Instruction
MemCpyAtomicMacroOp::generateLoop();setStartInternalControlFlow();OMR::Z::Instruction
MemCpyAtomicMacroOp::generateSTXLoopLabel(TR::LabelSymbol *,TR::LabelSymbol *,int32_t,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);swapInstructionListsWithCompilation();TR_OutOfLineCodeSection
MemCpyAtomicMacroOp::generateOneSTXthenSTYLoopLabel(TR::LabelSymbol *,TR::LabelSymbol *,int32_t,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,int32_t,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);swapInstructionListsWithCompilation();TR_OutOfLineCodeSection
MemCpyAtomicMacroOp::generateOneSTXthenSTYLoopLabel(TR::LabelSymbol *,TR::LabelSymbol *,int32_t,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,int32_t,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic);generateSTXLoop(int32_t,TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,_Bool);MemCpyAtomicMacroOp
MemCpyAtomicMacroOp::cleanUpReg();stopUsingRegister(TR::Register *);OMR::CodeGenerator
MemCpyAtomicMacroOp::generateInstruction(TR::class InstOpCode::Mnemonic,TR::class InstOpCode::Mnemonic,TR::Register *,int32_t);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
MemCpyAtomicMacroOp::createLoopDependencies(TR::Instruction *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
MemCpyAtomicMacroOp::createLoopDependencies(TR::Instruction *);addCoreDependencies(TR::RegisterDependencyConditions *);MemToMemTypedVarLenMacroOp
OMR::Z::Machine::initialiseRegisterFile();setSiblingRegister(TR::Register *);OMR::Register
OMR::Z::Machine::initialiseRegisterFile();setLowWordRegister(TR::RealRegister *);OMR::Z::RealRegister
OMR::Z::Machine::initialiseRegisterFile();setHighWordRegister(TR::RealRegister *);OMR::Z::RealRegister
OMR::Z::Machine::Machine(TR::CodeGenerator *);initialiseRegisterFile();OMR::Z::Machine
OMR::Z::Machine::Machine(TR::CodeGenerator *);initializeFPRegPairTable();OMR::Z::Machine
OMR::Z::Machine::Machine(TR::CodeGenerator *);clearRegisterAssociations();OMR::Z::Machine
OMR::Z::Machine::assignBestRegisterPair(TR::Register *,TR::Instruction *,_Bool,uint64_t);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::assignBestRegisterPair(TR::Register *,TR::Instruction *,_Bool,uint64_t);setHighOrder(TR::Register *,TR::CodeGenerator *);OMR::Z::RegisterPair
OMR::Z::Machine::assignBestRegisterPair(TR::Register *,TR::Instruction *,_Bool,uint64_t);setLowOrder(TR::Register *,TR::CodeGenerator *);OMR::Z::RegisterPair
OMR::Z::Machine::freeBestRegisterPair(TR::RealRegister **,TR::RealRegister **,enum TR_RegisterKinds,TR::Instruction *,uint64_t);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::freeBestRegisterPair(TR::RealRegister **,TR::RealRegister **,enum TR_RegisterKinds,TR::Instruction *,uint64_t);setState(RegState,_Bool);OMR::RealRegister
OMR::Z::Machine::freeBestRegisterPair(TR::RealRegister **,TR::RealRegister **,enum TR_RegisterKinds,TR::Instruction *,uint64_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Machine::freeBestFPRegisterPair(TR::RealRegister **,TR::RealRegister **,TR::Instruction *,uint64_t);setState(RegState,_Bool);OMR::RealRegister
OMR::Z::Machine::freeBestFPRegisterPair(TR::RealRegister **,TR::RealRegister **,TR::Instruction *,uint64_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Machine::filterColouredRegisterConflicts(TR::Register *,TR::Register *,TR::Instruction *);getUsedRegisters(TR::list<TR::Register *> &);OMR::Z::Instruction
OMR::Z::Machine::addToUpgradedBlockedList(TR::RealRegister *);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::addToUpgradedBlockedList(TR::RealRegister *);push(class TR::RealRegister *);TR_Stack
OMR::Z::Machine::freeBestRegister(TR::Instruction *,TR::Register *,enum TR_RegisterKinds,uint64_t,_Bool,_Bool);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::findBestRegisterForShuffle(TR::Instruction *,TR::Register *,uint64_t);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::freeHighWordRegister(TR::Instruction *,TR::RealRegister *,flags32_t);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::freeHighWordRegister(TR::Instruction *,TR::RealRegister *,flags32_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Machine::freeHighWordRegister(TR::Instruction *,TR::RealRegister *,flags32_t);setState(RegState,_Bool);OMR::RealRegister
OMR::Z::Machine::spillRegister(TR::Instruction *,TR::Register *,uint32_t);traceRAInstruction(TR::Instruction *);OMR::CodeGenerator
OMR::Z::Machine::spillRegister(TR::Instruction *,TR::Register *,uint32_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Machine::spillRegister(TR::Instruction *,TR::Register *,uint32_t);setState(RegState,_Bool);OMR::RealRegister
OMR::Z::Machine::spillRegister(TR::Instruction *,TR::Register *,uint32_t);setAssignedRegister(TR::Register *);OMR::Register
OMR::Z::Machine::reverseSpillState(TR::Instruction *,TR::Register *,TR::RealRegister *);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::reverseSpillState(TR::Instruction *,TR::Register *,TR::RealRegister *);resetValueLiveOnExit();OMR::Z::Register
OMR::Z::Machine::reverseSpillState(TR::Instruction *,TR::Register *,TR::RealRegister *);resetPendingSpillOnDef();OMR::Z::Register
OMR::Z::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,flags32_t);traceRegisterAssignment(const char *);OMR::CodeGenerator
OMR::Z::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,flags32_t);setAssignedRegister(TR::Register *);OMR::Register
OMR::Z::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,flags32_t);traceRegAssigned(TR::Register *,TR::Register *);OMR::CodeGenerator
OMR::Z::Machine::coerceRegisterAssignment(TR::Instruction *,TR::Register *,TR::class RealRegister::RegNum,flags32_t);clearRegisterAssignmentFlags();OMR::CodeGenerator
OMR::Z::Machine::initializeGlobalRegisterTable();setLastVolatileNonLinkGPR(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastLinkageGPR(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setFirstGlobalGPRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setFirstGlobalAccessRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastGlobalAccessRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastGlobalGPRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLast8BitGlobalGPRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastVolatileNonLinkFPR(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastLinkageFPR(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastRealRegisterGlobalRegisterNumber(TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();setLastGlobalCCRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initializeGlobalRegisterTable();initGlobalVectorRegisterMap(uint32_t);OMR::Z::Machine
OMR::Z::Machine::initGlobalVectorRegisterMap(uint32_t);setFirstGlobalVRFRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initGlobalVectorRegisterMap(uint32_t);setLastGlobalVRFRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initGlobalVectorRegisterMap(uint32_t);setFirstOverlappedGlobalVRFRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initGlobalVectorRegisterMap(uint32_t);setLastOverlappedGlobalVRFRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::initGlobalVectorRegisterMap(uint32_t);setLastGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::setFirstGlobalAccessRegisterNumber(TR_GlobalRegisterNumber);setFirstGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setLastGlobalAccessRegisterNumber(TR_GlobalRegisterNumber);setLastGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setLastGlobalGPRRegisterNumber(TR_GlobalRegisterNumber);setLastGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setLastGlobalHPRRegisterNumber(TR_GlobalRegisterNumber);setLastGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setFirstGlobalGPRRegisterNumber(TR_GlobalRegisterNumber);setFirstGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setFirstGlobalHPRRegisterNumber(TR_GlobalRegisterNumber);setFirstGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setFirstGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);setFirstGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setFirstGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);setFirstOverlappedGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::setLastGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);setLastGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setLastGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);setLastOverlappedGlobalFPRRegisterNumber(TR_GlobalRegisterNumber);OMR::Z::Machine
OMR::Z::Machine::setFirstGlobalVRFRegisterNumber(TR_GlobalRegisterNumber);setFirstGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setLastGlobalVRFRegisterNumber(TR_GlobalRegisterNumber);setLastGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
OMR::Z::Machine::setLastGlobalCCRRegisterNumber(TR_GlobalRegisterNumber);setLastGlobalRegisterNumber(enum TR_RegisterKinds,TR_GlobalRegisterNumber);OMR::Machine
TR::S390SystemLinkage::setAutoMarkerSymbolOffset(enum TR_S390AutoMarkers,int32_t);setOffset(int32_t);OMR::RegisterMappedSymbol
TR_Debug::printAssocRegDirective(TR::FILE *,TR::Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::printz(TR::FILE *,TR::Instruction *,const char *);printz(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390LabelInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390LabelInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnCountInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnCountInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnCountInstruction *);print(TR::FILE *,TR::LabelSymbol *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnCountInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnIndexInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnIndexInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnIndexInstruction *);print(TR::FILE *,TR::LabelSymbol *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390BranchOnIndexInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390ImmInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390ImmInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390ImmSnippetInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390ImmSymInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390Imm2Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390Imm2Instruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RegInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RegInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390TranslateInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390TranslateInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390TranslateInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRFInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRFInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRFInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRRInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRRInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRRInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RIInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RIInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RILInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RILInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RSInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RSLInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RSLInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RSLbInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RSLbInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390MemInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SS1Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SS1Instruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SS2Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SS2Instruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SMIInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SMIInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SMIInstruction *);print(TR::FILE *,TR::LabelSymbol *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390MIIInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390MIIInstruction *);print(TR::FILE *,TR::LabelSymbol *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SS4Instruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SSFInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SSFInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SSFInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SSEInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SSEInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SIInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SIInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SILInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390SInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RXInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RXEInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RXEInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RXEInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RXFInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RXFInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RXFInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390PseudoInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390PseudoInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390NOPInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);printSymbolName(TR::FILE *,TR::Symbol *,TR::SymbolReference *,TR::MemoryReference *);TR_Debug
TR_Debug::print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRSInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRSInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RRSInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RIEInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RIEInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RIEInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RISInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RISInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390RISInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390OpCodeOnlyInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390IInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390IEInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390IEInstruction *);printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390VRIInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390VRRInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390VStorageInstruction *);printPrefix(TR::FILE *,TR::Instruction *);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390VStorageInstruction *);print(TR::FILE *,TR::Register *,enum TR_RegisterSizes);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390VStorageInstruction *);print(TR::FILE *,TR::MemoryReference *,TR::Instruction *);TR_Debug
TR_Debug::printInstructionComment(TR::FILE *,int32_t,TR::Instruction *,_Bool);dumpInstructionComments(TR::FILE *,TR::Instruction *,_Bool);TR_Debug
TR_Debug::print(TR::FILE *,TR::S390HelperCallSnippet *);printSnippetLabel(TR::FILE *,TR::LabelSymbol *,uint8_t *,const char *,const char *);TR_Debug
TR::S390HelperCallSnippet::emitSnippetBody();setCodeLocation(uint8_t *);OMR::LabelSymbol
TR::S390HelperCallSnippet::emitSnippetBody();setSnippetDestAddr(intptrj_t);OMR::Z::Snippet
TR::S390HelperCallSnippet::emitSnippetBody();addProjectSpecializedRelocation(uint8_t *,uint8_t *,uint8_t *,TR_ExternalRelocationTargetKind,char *,uintptr_t,TR::Node *);OMR::CodeGenerator
TR::S390HelperCallSnippet::emitSnippetBody();registerStackMap(uint8_t *,TR::CodeGenerator *);OMR::SnippetGCMap
TR::S390BranchInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390BranchInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390BranchInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390BranchInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390BranchInstruction::assignRegistersAndDependencies(enum TR_RegisterKinds);assignOrderedRegisters(enum TR_RegisterKinds);OMR::Z::Instruction
TR::S390BranchInstruction::assignRegistersAndDependencies(enum TR_RegisterKinds);assignFreeRegBitVector();OMR::Z::Instruction
TR::S390BranchInstruction::assignRegistersAndDependencies(enum TR_RegisterKinds);freeUnlatchedRegisters();OMR::CodeGenerator
TR::S390BranchOnCountInstruction::generateBinaryEncoding();setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390BranchOnCountInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390BranchOnCountInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390BranchOnCountInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390BranchOnCountInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390BranchOnIndexInstruction::generateBinaryEncoding();setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390BranchOnIndexInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390BranchOnIndexInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390BranchOnIndexInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390BranchOnIndexInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390LabelInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390LabelInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390LabelInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390LabelInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390LabelInstruction::assignRegistersAndDependencies(enum TR_RegisterKinds);assignOrderedRegisters(enum TR_RegisterKinds);OMR::Z::Instruction
TR::S390LabelInstruction::assignRegistersAndDependencies(enum TR_RegisterKinds);assignFreeRegBitVector();OMR::Z::Instruction
TR::S390PseudoInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390PseudoInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390PseudoInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390DebugCounterBumpInstruction::generateBinaryEncoding();setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390DebugCounterBumpInstruction::generateBinaryEncoding();addRelocation(TR::Relocation *);OMR::CodeGenerator
TR::S390DebugCounterBumpInstruction::generateBinaryEncoding();setBaseRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390DebugCounterBumpInstruction::generateBinaryEncoding();setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390DebugCounterBumpInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390DebugCounterBumpInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390ImmInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390ImmInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390ImmInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390Imm2Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390Imm2Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390Imm2Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390ImmSnippetInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390ImmSnippetInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390ImmSnippetInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390ImmSnippetInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390ImmSymInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390ImmSymInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390ImmSymInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390ImmSymInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RegInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390RegInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390RegInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RegInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RegInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RegInstruction::assignRegistersNoDependencies(enum TR_RegisterKinds);setRegisterOperand(uint32_t,TR::Register *);OMR::Z::Instruction
TR::S390RRInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390RRInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RRInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RRInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390TranslateInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390TranslateInstruction::generateBinaryEncoding();setRegisterField(uint32_t *,int32_t);OMR::Z::RealRegister
TR::S390TranslateInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390TranslateInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390TranslateInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RRFInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390RRFInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RRFInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RRFInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RRRInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390RRRInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RRRInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RRRInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RIInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390RIInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RIInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RIInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RILInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390RILInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RILInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RILInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RSInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390RSInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390RSInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RSInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RSInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RRSInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RRSInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390RRSInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390RRSInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RRSInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RRSInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390IEInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390IEInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390IEInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390IEInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RIEInstruction::splitIntoCompareAndLongBranch();setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390RIEInstruction::splitIntoCompareAndLongBranch();setBinaryBufferCursor(uint8_t *);OMR::CodeGenerator
TR::S390RIEInstruction::splitIntoCompareAndLongBranch();setNext(TR::Instruction *);OMR::Instruction
TR::S390RIEInstruction::splitIntoCompareAndLongBranch();setPrev(TR::Instruction *);OMR::Instruction
TR::S390RIEInstruction::splitIntoCompareAndBranch(TR::Instruction *);setNext(TR::Instruction *);OMR::Instruction
TR::S390RIEInstruction::splitIntoCompareAndBranch(TR::Instruction *);setPrev(TR::Instruction *);OMR::Instruction
TR::S390RIEInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RIEInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390RIEInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RIEInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RIEInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SMIInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SMIInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SMIInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390MIIInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390MIIInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390MIIInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RISInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RISInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390RISInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RISInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RISInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390MemInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390MemInstruction::generateBinaryEncoding();generateBinaryEncoding(uint8_t *,TR::CodeGenerator *,TR::Instruction *);OMR::Z::MemoryReference
TR::S390MemInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390MemInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390MemInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SIInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390SIInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SIInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SIInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SIYInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390SIYInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SIYInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SIYInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SILInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390SILInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SILInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SILInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390SInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RSLInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RSLInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RSLInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RSLInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RSLbInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RSLbInstruction::generateBinaryEncoding();setBaseRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390RSLbInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RSLbInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RSLbInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390MemMemInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390MemMemInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390MemMemInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390MemMemInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SS1Instruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390SS1Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SS1Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SS1Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SS2Instruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390SS2Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SS2Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SS2Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SS4Instruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390SS4Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SS4Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SS4Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RXInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RXInstruction::generateBinaryEncoding();setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390RXInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RXInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RXInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RXEInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RXEInstruction::generateBinaryEncoding();setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390RXEInstruction::generateBinaryEncoding();setMaskField(uint32_t *,int8_t,int8_t);OMR::Z::Instruction
TR::S390RXEInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RXEInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RXEInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RXYInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RXYInstruction::generateBinaryEncoding();setRegisterField(uint32_t *);OMR::Z::RealRegister
TR::S390RXYInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RXYInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RXYInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390SSFInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390SSFInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390SSFInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390SSFInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390SSFInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390RXFInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390RXFInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390RXFInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390RXFInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390VRIInstruction::getExtendedMnemonicName();setPrintM3(_Bool);TR::S390VRIInstruction
TR::S390VRIInstruction::getExtendedMnemonicName();setPrintM4(_Bool);TR::S390VRIInstruction
TR::S390VRIInstruction::getExtendedMnemonicName();setPrintM5(_Bool);TR::S390VRIInstruction
TR::S390VRIInstruction::preGenerateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390VRIInstruction::postGenerateBinaryEncoding(uint8_t *);setBinaryLength(uint8_t);OMR::Instruction
TR::S390VRIInstruction::postGenerateBinaryEncoding(uint8_t *);setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VRIInstruction::postGenerateBinaryEncoding(uint8_t *);addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VRIaInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIaInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRIbInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIbInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRIcInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIcInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIcInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRIdInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIdInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIdInstruction::generateBinaryEncoding();setRegister3Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIdInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRIeInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIeInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIeInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRIfInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIfInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIfInstruction::generateBinaryEncoding();setRegister3Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIfInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRIgInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIgInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIgInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRIhInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIiInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIiInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRIiInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRRInstruction::getExtendedMnemonicName();setPrintM3(_Bool);TR::S390VRRInstruction
TR::S390VRRInstruction::getExtendedMnemonicName();setPrintM4(_Bool);TR::S390VRRInstruction
TR::S390VRRInstruction::getExtendedMnemonicName();setPrintM5(_Bool);TR::S390VRRInstruction
TR::S390VRRInstruction::getExtendedMnemonicName();setPrintM6(_Bool);TR::S390VRRInstruction
TR::S390VRRInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390VRRInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRRInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VRRInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VRRInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VRRgInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390VRRgInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRRgInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VRRgInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VRRgInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VRRhInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390VRRhInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRRhInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRRhInstruction::generateBinaryEncoding();setRegister3Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRRhInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VRRhInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VRRhInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VRRiInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390VRRiInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRRiInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRRiInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRRiInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VRRiInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VRRiInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VStorageInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390VStorageInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VStorageInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VStorageInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VStorageInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VRSdInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390VRSdInstruction::generateBinaryEncoding();setRegister2Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRSdInstruction::generateBinaryEncoding();setRegister4Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRSdInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VRSdInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VRSdInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VRVInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390VRVInstruction::generateBinaryEncoding();setRegister1Field(uint32_t *);OMR::Z::RealRegister
TR::S390VRVInstruction::generateBinaryEncoding();setMaskField(uint32_t *,uint8_t,int);TR::S390VInstruction
TR::S390VRVInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VRVInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VRVInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390VSIInstruction::generateBinaryEncoding();copyBinaryToBufferWithoutClear(uint8_t *);OMR::Z::InstOpCode
TR::S390VSIInstruction::generateBinaryEncoding();setRegister4Field(uint32_t *);OMR::Z::RealRegister
TR::S390VSIInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390VSIInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390VSIInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390NOPInstruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390NOPInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390NOPInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
TR::S390EInstruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
TR::S390EInstruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
TR::S390EInstruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
TR::S390EInstruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
OMR::Z::Linkage::Linkage(TR::CodeGenerator *,enum TR_S390LinkageConventions,enum TR_LinkageConventions);setProperties(uint32_t);OMR::Z::Linkage
OMR::Z::Linkage::setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *,List<TR::ParameterSymbol> &);OMR::Z::Linkage
OMR::Z::Linkage::lockRegister(TR::RealRegister *);setState(RegState,_Bool);OMR::RealRegister
OMR::Z::Linkage::lockRegister(TR::RealRegister *);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Linkage::lockRegister(TR::RealRegister *);setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
OMR::Z::Linkage::unlockRegister(TR::RealRegister *);resetState(RegState);OMR::RealRegister
OMR::Z::Linkage::unlockRegister(TR::RealRegister *);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Linkage::unlockRegister(TR::RealRegister *);setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
OMR::Z::Linkage::lockGPR(int32_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Linkage::lockGPR(int32_t);setState(RegState,_Bool);OMR::RealRegister
OMR::Z::Linkage::lockGPR(int32_t);setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
OMR::Z::Linkage::unlockGPR(int32_t);resetState(RegState);OMR::RealRegister
OMR::Z::Linkage::unlockGPR(int32_t);setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
OMR::Z::Linkage::unlockGPR(int32_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Linkage::lockAR(int32_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Linkage::lockAR(int32_t);setState(RegState,_Bool);OMR::RealRegister
OMR::Z::Linkage::lockAR(int32_t);setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
OMR::Z::Linkage::unlockAR(int32_t);resetState(RegState);OMR::RealRegister
OMR::Z::Linkage::unlockAR(int32_t);setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
OMR::Z::Linkage::unlockAR(int32_t);setAssignedRegister(TR::Register *);OMR::RealRegister
OMR::Z::Linkage::pushLongArg32(TR::Node *,TR::Node *,int32_t,int32_t,int32_t *,TR::RegisterDependencyConditions *,TR::Register *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::Linkage::pushVectorArg(TR::Node *,TR::Node *,int32_t,int32_t,int32_t *,TR::RegisterDependencyConditions *,TR::Register *);addPreCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::Linkage::buildArgs(TR::Node *,TR::RegisterDependencyConditions *,_Bool,int64_t,TR::Register *&,_Bool);clearCachedStackRegisterForOutgoingArguments(_Bool);OMR::Z::Linkage
OMR::Z::Linkage::buildArgs(TR::Node *,TR::RegisterDependencyConditions *,_Bool,int64_t,TR::Register *&,_Bool);doNotKillSpecialRegsForBuildArgs(TR::Linkage *,_Bool,int64_t &);OMR::Z::Linkage
OMR::Z::Linkage::buildArgs(TR::Node *,TR::RegisterDependencyConditions *,_Bool,int64_t,TR::Register *&,_Bool);addSpecialRegDepsForBuildArgs(TR::Node *,TR::RegisterDependencyConditions *,int32_t &,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::storeArgumentOnStack(TR::Node *,TR::class InstOpCode::Mnemonic,TR::Register *,int32_t *,TR::Register *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::Linkage::storeLongDoubleArgumentOnStack(TR::Node *,TR::DataType,TR::class InstOpCode::Mnemonic,TR::Register *,int32_t *,TR::Register *);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::Linkage::storeLongDoubleArgumentOnStack(TR::Node *,TR::DataType,TR::class InstOpCode::Mnemonic,TR::Register *,int32_t *,TR::Register *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::Linkage::generateDispatchReturnLable(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *&,TR::Register *,_Bool,TR::Node *);setRegister(TR::Register *);OMR::Node
OMR::Z::Linkage::buildNativeDispatch(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,_Bool,_Bool,_Bool);setupRegisterDepForLinkage(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,int64_t &,TR::SystemLinkage *,TR::Node *&,_Bool &,TR::Register **,TR::Register *&);OMR::Z::Linkage
OMR::Z::Linkage::buildNativeDispatch(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,_Bool,_Bool,_Bool);setupBuildArgForLinkage(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *,_Bool,_Bool,int64_t &,TR::Node *,_Bool,TR::SystemLinkage *);OMR::Z::Linkage
OMR::Z::Linkage::buildNativeDispatch(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,_Bool,_Bool,_Bool);performCallNativeFunctionForLinkage(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::Register *&,TR::SystemLinkage *,TR::RegisterDependencyConditions *&,TR::Register *,TR::Register *,_Bool);OMR::Z::Linkage
OMR::Z::Linkage::buildNativeDispatch(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,_Bool,_Bool,_Bool);generateDispatchReturnLable(TR::Node *,TR::CodeGenerator *,TR::RegisterDependencyConditions *&,TR::Register *,_Bool,TR::Node *);OMR::Z::Linkage
OMR::Z::Linkage::setupRegisterDepForLinkage(TR::Node *,enum OMR::Z::Linkage::TR_DispatchType,TR::RegisterDependencyConditions *&,int64_t &,TR::SystemLinkage *,TR::Node *&,_Bool &,TR::Register **,TR::Register *&);setHasNativeCall();OMR::Compilation
OMR::Z::Linkage::markPreservedRegsInBlock(int32_t);setModified(_Bool);OMR::Z::RealRegister
OMR::Z::Linkage::setIntegerArgumentRegister(uint32_t,TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setSpecialArgumentRegister(uint32_t,TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setFloatArgumentRegister(uint32_t,TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setVectorArgumentRegister(uint32_t,TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setIntegerReturnRegister(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setLongLowReturnRegister(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setLongHighReturnRegister(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setLongReturnRegister(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setFloatReturnRegister(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setDoubleReturnRegister(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setLongDoubleReturnRegister0(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setLongDoubleReturnRegister2(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setLongDoubleReturnRegister4(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setLongDoubleReturnRegister6(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::setVectorReturnRegister(TR::class RealRegister::RegNum);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
OMR::Z::Linkage::replaceCallWithJumpInstruction(TR::Instruction *);replaceInst(TR::Instruction *,TR::Instruction *);OMR::Z::CodeGenerator
TR::S390SystemLinkage::mapStack(TR::ResolvedMethodSymbol *,uint32_t);setStrictestAutoSymbolAlignment(int32_t,_Bool);OMR::Z::Linkage
TR::S390SystemLinkage::mapStack(TR::ResolvedMethodSymbol *,uint32_t);setStackSizeCheckNeeded(_Bool);OMR::Z::Linkage
TR::S390SystemLinkage::mapStack(TR::ResolvedMethodSymbol *,uint32_t);setLocalsAreaBeginOffset(int32_t);TR::S390SystemLinkage
TR::S390SystemLinkage::mapStack(TR::ResolvedMethodSymbol *,uint32_t);reset();ListIterator
TR::S390SystemLinkage::mapStack(TR::ResolvedMethodSymbol *,uint32_t);setLocalMappingCursor(uint32_t);OMR::ResolvedMethodSymbol
TR::S390SystemLinkage::mapStack(TR::ResolvedMethodSymbol *,uint32_t);setLocalsAreaEndOffset(int32_t);TR::S390SystemLinkage
TR::S390SystemLinkage::mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);setOffset(int32_t);OMR::RegisterMappedSymbol
TR::S390SystemLinkage::mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);setStrictestAutoSymbolAlignment(int32_t,_Bool);OMR::Z::Linkage
TR::S390SystemLinkage::notifyHasalloca();setState(RegState,_Bool);OMR::RealRegister
TR::S390SystemLinkage::notifyHasalloca();setAssignedRegister(TR::Register *);OMR::RealRegister
TR::S390SystemLinkage::notifyHasalloca();setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
TR::S390SystemLinkage::notifyHasalloca();setStackPointerRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390SystemLinkage::createPrologue(TR::Instruction *);setOutgoingParmAreaEndOffset(int32_t);TR::S390SystemLinkage
TR::S390SystemLinkage::createPrologue(TR::Instruction *);setStackFrameSize(int32_t);TR::S390SystemLinkage
TR::S390SystemLinkage::createPrologue(TR::Instruction *);setVarArgRegSaveAreaOffset(int32_t);TR::S390SystemLinkage
TR::S390SystemLinkage::createPrologue(TR::Instruction *);mapStack(TR::ResolvedMethodSymbol *,uint32_t);TR::S390SystemLinkage
TR::S390SystemLinkage::createPrologue(TR::Instruction *);setFirstPrologueInstruction(TR::Instruction *);OMR::Z::Linkage
TR::S390SystemLinkage::createPrologue(TR::Instruction *);setLastPrologueInstruction(TR::Instruction *);OMR::Z::Linkage
TR::S390SystemLinkage::createEpilogue(TR::Instruction *);setBranchCondition(TR::class InstOpCode::S390BranchCondition);TR::S390RegInstruction
TR::S390SystemLinkage::saveGPRsInPrologue(TR::Instruction *);setGPRSaveMask(int16_t);TR::S390SystemLinkage
TR::S390SystemLinkage::saveGPRsInPrologue2(TR::Instruction *);setGPRSaveMask(int16_t);TR::S390SystemLinkage
TR::S390SystemLinkage::initS390RealRegisterLinkage();setState(RegState,_Bool);OMR::RealRegister
TR::S390SystemLinkage::initS390RealRegisterLinkage();setAssignedRegister(TR::Register *);OMR::RealRegister
TR::S390SystemLinkage::initS390RealRegisterLinkage();setHasBeenAssignedInMethod(_Bool);OMR::Z::RealRegister
TR::S390SystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);reset();ListIterator
TR::S390SystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setIncomingParmAreaBeginOffset(int32_t);TR::S390SystemLinkage
TR::S390SystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setIncomingParmAreaEndOffset(int32_t);TR::S390SystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setProperties(uint32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setProperty(uint32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setNumSpecialArgumentRegisters(uint8_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setIntegerReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLongLowReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLongHighReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLongReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setFloatReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setDoubleReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister0(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister2(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister4(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister6(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setStackPointerRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setNormalStackPointerRegister(TR::class RealRegister::RegNum);TR::S390SystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setAlternateStackPointerRegister(TR::class RealRegister::RegNum);TR::S390SystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setEntryPointRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLitPoolRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setExtCodeBaseRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setReturnAddressRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setEnvironmentPointerRegister(TR::class RealRegister::RegNum);TR::S390zOSSystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setCAAPointerRegister(TR::class RealRegister::RegNum);TR::Z::ZOSBaseSystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setDebugHooksRegister(TR::class RealRegister::RegNum);TR::S390SystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setIntegerArgumentRegister(uint32_t,TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setNumIntegerArgumentRegisters(uint8_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setFloatArgumentRegister(uint32_t,TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setNumFloatArgumentRegisters(uint8_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setOffsetToFirstParm(int32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setOffsetToRegSaveArea(int32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setNumberOfDependencyGPRegisters(int32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setFrameType(enum TR_XPLinkFrameType);TR::S390zOSSystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setLargestOutgoingArgumentAreaSize(int32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setAutoMarkerSymbols(TR_Array<TR::SymbolReference *> *);TR::S390SystemLinkage
TR::S390zOSSystemLinkage::S390zOSSystemLinkage(TR::CodeGenerator *);setOffsetToLongDispSlot(int32_t);OMR::Z::Linkage
TR::S390zOSSystemLinkage::callNativeFunction(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);generateInstructionsForCall(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR::S390zOSSystemLinkage
TR::S390zOSSystemLinkage::calculateInterfaceMappingFlags(TR::ResolvedMethodSymbol *);reset();ListIterator
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setProperties(uint32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setRegisterFlag(TR::class RealRegister::RegNum,int32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setIntegerArgumentRegister(uint32_t,TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setNumIntegerArgumentRegisters(uint8_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setFloatArgumentRegister(uint32_t,TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setNumFloatArgumentRegisters(uint8_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setIntegerReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLongLowReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLongHighReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLongReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setFloatReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setDoubleReturnRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister0(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister2(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister4(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLongDoubleReturnRegister6(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setStackPointerRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setNormalStackPointerRegister(TR::class RealRegister::RegNum);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setAlternateStackPointerRegister(TR::class RealRegister::RegNum);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setEntryPointRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLitPoolRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setExtCodeBaseRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setReturnAddressRegister(TR::class RealRegister::RegNum);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setGOTPointerRegister(TR::class RealRegister::RegNum);TR::S390zLinuxSystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setOffsetToRegSaveArea(int32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setGPRSaveAreaBeginOffset(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setGPRSaveAreaEndOffset(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setOffsetToFirstParm(int32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setOffsetToFirstLocal(uint32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setOffsetToLongDispSlot(int32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setOutgoingParmAreaBeginOffset(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setOutgoingParmAreaEndOffset(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setStackFrameSize(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setVarArgOffsetInParmArea(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setVarArgRegSaveAreaOffset(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setNumberOfDependencyGPRegisters(int32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::S390zLinuxSystemLinkage(TR::CodeGenerator *);setLargestOutgoingArgumentAreaSize(int32_t);OMR::Z::Linkage
TR::S390zLinuxSystemLinkage::callNativeFunction(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);generateInstructionsForCall(TR::Node *,TR::RegisterDependencyConditions *,intptrj_t,TR::Register *,TR::Register *,TR::LabelSymbol *,TR::S390JNICallDataSnippet *,_Bool);TR::S390zLinuxSystemLinkage
TR::S390zLinuxSystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);reset();ListIterator
TR::S390zLinuxSystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setIncomingParmAreaBeginOffset(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setVarArgOffsetInParmArea(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setIncomingParmAreaEndOffset(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setNumUsedArgumentGPRs(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setNumUsedArgumentFPRs(int32_t);TR::S390SystemLinkage
TR::S390zLinuxSystemLinkage::initParamOffset(TR::ResolvedMethodSymbol *,int32_t,List<TR::ParameterSymbol> *);setNumUsedArgumentVFRs(int32_t);TR::S390SystemLinkage
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setInternalControlFlowSafeNestingDepth(int32_t);OMR::CodeGenerator
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);incOutOfLineColdPathNestedDepth();OMR::CodeGenerator
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);toggleIsInOOLSection();OMR::CodeGenerator
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);swapInstructionListsWithCompilation();TR_OutOfLineCodeSection
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);doRegisterAssignment(enum TR_RegisterKinds);OMR::Z::CodeGenerator
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);decOutOfLineColdPathNestedDepth();OMR::CodeGenerator
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setNext(TR::Instruction *);OMR::Instruction
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setPrev(TR::Instruction *);OMR::Instruction
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setAppendInstruction(TR::Instruction *);OMR::CodeGenerator
TR_S390OutOfLineCodeSection::assignRegisters(enum TR_RegisterKinds);setHasBeenRegisterAssigned(_Bool);TR_OutOfLineCodeSection
TR_S390OutOfLineCodeSection::generateS390OutOfLineCodeSectionDispatch();swapInstructionListsWithCompilation();TR_OutOfLineCodeSection
TR_S390OutOfLineCodeSection::generateS390OutOfLineCodeSectionDispatch();incOutOfLineColdPathNestedDepth();OMR::CodeGenerator
TR_S390OutOfLineCodeSection::generateS390OutOfLineCodeSectionDispatch();decReferenceCount(TR::Node *);OMR::CodeGenerator
TR_S390OutOfLineCodeSection::generateS390OutOfLineCodeSectionDispatch();decOutOfLineColdPathNestedDepth();OMR::CodeGenerator
TR_S390RegisterDependencyGroup::checkDependencyGroup(TR::CodeGenerator *,TR::Instruction *,uint32_t);setAvailableHPRSpillMask(int64_t);OMR::Z::CodeGenerator
TR_S390RegisterDependencyGroup::checkDependencyGroup(TR::CodeGenerator *,TR::Instruction *,uint32_t);checkRegisterPairSufficiencyAndHPRAssignment(TR::CodeGenerator *,TR::Instruction *,const uint32_t,uint32_t);TR_S390RegisterDependencyGroup
TR_S390RegisterDependencyGroup::checkDependencyGroup(TR::CodeGenerator *,TR::Instruction *,uint32_t);checkRegisterDependencyDuplicates(TR::CodeGenerator *,const uint32_t);TR_S390RegisterDependencyGroup
TR_S390RegisterDependencyGroup::assignRegisters(TR::Instruction *,enum TR_RegisterKinds,uint32_t,TR::CodeGenerator *);unblockRegisters(uint32_t,TR::CodeGenerator *);TR_S390RegisterDependencyGroup
OMR::Z::RegisterDependencyConditions::RegisterDependencyConditions(TR::CodeGenerator *,TR::Node *,uint32_t,TR::Instruction **);incVisitCount();OMR::Compilation
OMR::Z::RegisterDependencyConditions::clone(TR::CodeGenerator *,int32_t);setAddCursorForPre(uint16_t);OMR::Z::RegisterDependencyConditions
OMR::Z::RegisterDependencyConditions::clone(TR::CodeGenerator *,int32_t);setAddCursorForPost(uint16_t);OMR::Z::RegisterDependencyConditions
OMR::Z::RegisterDependencyConditions::createRegisterAssociationDirective(TR::Instruction *,TR::CodeGenerator *);createRegisterAssociationDirective(TR::Instruction *);OMR::Z::Machine
OMR::Z::Snippet::Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);setNeedLitPoolBasePtr();OMR::Z::Snippet
OMR::Z::Snippet::Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);setNeedLitPoolBasePtr();OMR::Z::Snippet
OMR::Z::TreeEvaluator::bloadEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::bloadEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::bstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::bstoreEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::libxloptFuncEvaluator(TR::Node *,TR::CodeGenerator *);setSymbolReference(TR::SymbolReference *);OMR::Node
OMR::Z::TreeEvaluator::treetopEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::aiaddEvaluator(TR::Node *,TR::CodeGenerator *);populateAddTree(TR::Node *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::aiaddEvaluator(TR::Node *,TR::CodeGenerator *);eliminateNegativeDisplacement(TR::Node *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::aiaddEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::aladdEvaluator(TR::Node *,TR::CodeGenerator *);populateAddTree(TR::Node *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::aladdEvaluator(TR::Node *,TR::CodeGenerator *);eliminateNegativeDisplacement(TR::Node *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::aladdEvaluator(TR::Node *,TR::CodeGenerator *);enforceDisplacementLimit(TR::Node *,TR::CodeGenerator *,TR::Instruction *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::aladdEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::ifxcmpoEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::ifxcmpoEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::loadaddrEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vselEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vselEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vselEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vloadEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vloadEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::vRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vstoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vstoreEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::vincEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vincEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vincEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vdecEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vdecEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vdecEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vcomEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vcomEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vectorElementShiftHelper(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vectorElementShiftHelper(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vcmpneEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vcmpltEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Z::TreeEvaluator::vcmpleEvaluator(TR::Node *,TR::CodeGenerator *);swapChildren();OMR::Node
OMR::Z::TreeEvaluator::vrandEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vrandEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vrandEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vreturnEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::vreturnEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vreturnEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vconstEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::getvelemEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::getvelemEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::getvelemEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::vsetelemEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::vsetelemEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::inlineVectorUnaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::inlineVectorUnaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::inlineVectorBinaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::inlineVectorBinaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::inlineVectorTernaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::inlineVectorTernaryOp(TR::Node *,TR::CodeGenerator *,TR::class InstOpCode::Mnemonic);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::passThroughEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::passThroughEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::primitiveArraycopyEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *,TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::primitiveArraycopyEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *,TR::Node *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::referenceArraycopyEvaluator(TR::Node *,TR::CodeGenerator *,TR::Node *,TR::Node *,TR::Node *,TR::Node *,TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraysetEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::inlineIfArraycmpEvaluator(TR::Node *,TR::CodeGenerator *,_Bool &);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool);generateDebugCounter(const char *,int32_t,int8_t);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool);setStartInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraycmpSIMDHelper(TR::Node *,TR::CodeGenerator *,TR::LabelSymbol *,TR::Node *,_Bool,_Bool);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraytranslateEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);setStartInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);recursivelyDecReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraytranslateEncodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);setStartInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);recursivelyDecReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::arraytranslateDecodeSIMDEvaluator(TR::Node *,TR::CodeGenerator *,enum ArrayTranslateFlavor);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::long2StringEvaluator(TR::Node *,TR::CodeGenerator *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::long2StringEvaluator(TR::Node *,TR::CodeGenerator *);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::long2StringEvaluator(TR::Node *,TR::CodeGenerator *);setStartInternalControlFlow();OMR::Z::Instruction
OMR::Z::TreeEvaluator::long2StringEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingMemRefRegister(TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::long2StringEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::long2StringEvaluator(TR::Node *,TR::CodeGenerator *);setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::long2StringEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::BBStartEvaluator(TR::Node *,TR::CodeGenerator *);setCurrentBlockIndex(int32_t);OMR::Z::CodeGenerator
OMR::Z::TreeEvaluator::BBStartEvaluator(TR::Node *,TR::CodeGenerator *);setCurrentBlock(TR::Block *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::BBEndEvaluator(TR::Node *,TR::CodeGenerator *);setLastInstruction(TR::Instruction *);OMR::Block
OMR::Z::TreeEvaluator::iRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);resetAlreadySignExtended();OMR::Z::Register
OMR::Z::TreeEvaluator::iRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lRegStoreEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::getstackEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::deallocaEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::deallocaEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::PrefetchEvaluator(TR::Node *,TR::CodeGenerator *);recursivelyDecReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::loadAutoOffsetEvaluator(TR::Node *,TR::CodeGenerator *);setSymbolReference(TR::SymbolReference *);OMR::Z::MemoryReference
OMR::Z::TreeEvaluator::loadAutoOffsetEvaluator(TR::Node *,TR::CodeGenerator *);stopUsingRegister(TR::Register *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::ixfrsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::lxfrsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fxfrsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::evaluateRegLoads(TR::Node *,TR::CodeGenerator *);Push(class TR::Node *const &);CS2::QueueOf
OMR::Z::TreeEvaluator::vsplatsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::z990PopCountHelper(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *);setStartInternalControlFlow();OMR::Z::Instruction
OMR::Z::TreeEvaluator::z990PopCountHelper(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::TreeEvaluator::z990PopCountHelper(TR::Node *,TR::CodeGenerator *,TR::Register *,TR::Register *);setEndInternalControlFlow();OMR::Symbol
OMR::Z::TreeEvaluator::foldLookup(TR::CodeGenerator *,TR::Node *);decReferenceCount(TR::Node *);OMR::CodeGenerator
TR_S390ComputeCC::setCarryBorrow(TR::Node *,_Bool,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
arraycmpWithPadHelper::setupCLCLandCLCLE();addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
arraycmpWithPadHelper::generateConstCLCL();setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
arraycmpWithPadHelper::generateCLCL();stopUsingRegister(TR::Register *);OMR::CodeGenerator
arraycmpWithPadHelper::generateCLCL();setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
arraycmpWithPadHelper::generateCLCLE();setStartInternalControlFlow(TR::Instruction *);arraycmpWithPadHelper
arraycmpWithPadHelper::generateCLCLE();setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
arraycmpWithPadHelper::generateCLCLE();setEndInternalControlFlow();OMR::Z::Instruction
arraycmpWithPadHelper::generateCLCLE();stopUsingRegister(TR::Register *);OMR::CodeGenerator
arraycmpWithPadHelper::teardownCLCLandCLCLE();stopUsingRegister(TR::Register *);OMR::CodeGenerator
arraycmpWithPadHelper::teardownCLCLandCLCLE();decReferenceCount(TR::Node *);OMR::CodeGenerator
arraycmpWithPadHelper::generateConstCLCSetup();decReferenceCount(TR::Node *);OMR::CodeGenerator
arraycmpWithPadHelper::generateVarCLCSetup();addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
arraycmpWithPadHelper::generateVarCLCMainLoop();stopUsingRegister(TR::Register *);OMR::CodeGenerator
arraycmpWithPadHelper::generateCLCUnequal();setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
arraycmpWithPadHelper::generateConstCLCPaddingLoop();stopUsingRegister(TR::Register *);OMR::CodeGenerator
arraycmpWithPadHelper::generateVarCLCPaddingLoop();stopUsingRegister(TR::Register *);OMR::CodeGenerator
arraycmpWithPadHelper::teardownCLC();stopUsingRegister(TR::Register *);OMR::CodeGenerator
arraycmpWithPadHelper::teardownCLC();recursivelyDecReferenceCount(TR::Node *);OMR::CodeGenerator
arraycmpWithPadHelper::generateCLCFoldedIfResult();setDependencyConditions(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::TreeEvaluator::aconstEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::iabsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::iabsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::labsEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::labsEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::l2aEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::l2aEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::getpmEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::setpmEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::setpmEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dsqrtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::dsqrtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fsqrtEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::fsqrtEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::dnintEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::TreeEvaluator::fnintEvaluator(TR::Node *,TR::CodeGenerator *);setRegister(TR::Register *);OMR::Node
OMR::Z::TreeEvaluator::fnintEvaluator(TR::Node *,TR::CodeGenerator *);decReferenceCount(TR::Node *);OMR::CodeGenerator
OMR::Z::Instruction::Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *);initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);OMR::Z::Instruction
OMR::Z::Instruction::Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *);initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);OMR::Z::Instruction
OMR::Z::Instruction::initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);initialize(TR::RegisterDependencyConditions *);OMR::Z::Instruction
OMR::Z::Instruction::initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);setBlockIndex(int32_t);OMR::Z::Instruction
OMR::Z::Instruction::initialize(TR::Instruction *,_Bool,TR::RegisterDependencyConditions *,_Bool);readCCInfo();OMR::Z::Instruction
OMR::Z::Instruction::setDependencyConditions(TR::RegisterDependencyConditions *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *,int32_t,int32_t);OMR::Z::RegisterDependencyConditions
OMR::Z::Instruction::setDependencyConditions(TR::RegisterDependencyConditions *);setIsUsed();OMR::Z::RegisterDependencyConditions
OMR::Z::Instruction::updateDependencyConditions(TR::RegisterDependencyConditions *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *,int32_t,int32_t);OMR::Z::RegisterDependencyConditions
OMR::Z::Instruction::updateDependencyConditions(TR::RegisterDependencyConditions *);setIsUsed();OMR::Z::RegisterDependencyConditions
OMR::Z::Instruction::setThrowsImplicitNullPointerException();set(unsigned short);OMR::FlagsTemplate
OMR::Z::Instruction::setThrowsImplicitNullPointerException();setThrowsImplicitException();OMR::Z::Instruction
OMR::Z::Instruction::setEstimatedBinaryOffset(uint32_t);setBinaryEncoding(uint8_t *);OMR::Instruction
OMR::Z::Instruction::generateBinaryEncoding();copyBinaryToBuffer(uint8_t *);OMR::Z::InstOpCode
OMR::Z::Instruction::generateBinaryEncoding();setBinaryLength(uint8_t);OMR::Instruction
OMR::Z::Instruction::generateBinaryEncoding();setBinaryEncoding(uint8_t *);OMR::Instruction
OMR::Z::Instruction::generateBinaryEncoding();addAccumulatedInstructionLengthError(int32_t);OMR::CodeGenerator
OMR::Z::Instruction::estimateBinaryLength(int32_t);setEstimatedBinaryLength(uint8_t);OMR::Instruction
OMR::Z::Instruction::clearCCInfo();setHasCCInfo(_Bool);OMR::CodeGenerator
OMR::Z::Instruction::clearCCInfo();setCCInstruction(TR::Instruction *);OMR::Z::CodeGenerator
OMR::Z::Instruction::addARDependencyCondition(TR::Register *,TR::Register *);traceRegAssigned(TR::Register *,TR::Register *);OMR::CodeGenerator
OMR::Z::Instruction::assignOrderedRegisters(enum TR_RegisterKinds);unblock(TR::Register **,int32_t,TR::Register **,int,TR::MemoryReference **,TR::MemoryReference **);OMR::Z::Instruction
OMR::Z::Instruction::assignRegistersAndDependencies(enum TR_RegisterKinds);assignOrderedRegisters(enum TR_RegisterKinds);OMR::Z::Instruction
OMR::Z::Instruction::assignRegistersAndDependencies(enum TR_RegisterKinds);assignFreeRegBitVector();OMR::Z::Instruction
OMR::Z::Instruction::useSourceRegister(TR::Register *);recordOperand(void *,int8_t &);OMR::Z::Instruction
OMR::Z::Instruction::useSourceRegister(TR::Register *);useRegister(TR::Register *,_Bool);OMR::Z::Instruction
OMR::Z::Instruction::useTargetRegister(TR::Register *);recordOperand(void *,int8_t &);OMR::Z::Instruction
OMR::Z::Instruction::useTargetRegister(TR::Register *);setRedefined(_Bool);OMR::Z::Register
OMR::Z::Instruction::useTargetRegister(TR::Register *);useRegister(TR::Register *,_Bool);OMR::Z::Instruction
OMR::Z::Instruction::useSourceMemoryReference(TR::MemoryReference *);setMemRefUsedBefore();OMR::Z::MemoryReference
OMR::Z::Instruction::useSourceMemoryReference(TR::MemoryReference *);recordOperand(void *,int8_t &);OMR::Z::Instruction
OMR::Z::Instruction::useSourceMemoryReference(TR::MemoryReference *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::Instruction::useTargetMemoryReference(TR::MemoryReference *,TR::MemoryReference *);setMemRefUsedBefore();OMR::Z::MemoryReference
OMR::Z::Instruction::useTargetMemoryReference(TR::MemoryReference *,TR::MemoryReference *);recordOperand(void *,int8_t &);OMR::Z::Instruction
OMR::Z::Instruction::useTargetMemoryReference(TR::MemoryReference *,TR::MemoryReference *);bookKeepingRegisterUses(TR::Instruction *,TR::CodeGenerator *);OMR::Z::MemoryReference
OMR::Z::Register::setPlaceholderReg();setIs64BitReg(_Bool);OMR::Z::Register
OMR::Z::Register::setPlaceholderReg();setPlaceholderReg();OMR::Register
OMR::Z::Register::decFutureUseCount(ncount_t);resetNotUsedInThisBB();OMR::Z::Register
OMR::Z::Register::setContainsCollectedReference();set(unsigned int);OMR::FlagsTemplate
OMR::Z::RealRegister::setRegister1Field(uint32_t *);setRegisterField(uint32_t *);OMR::Z::RealRegister
OMR::Z::RealRegister::setRegister2Field(uint32_t *);setIndexRegisterField(uint32_t *);OMR::Z::RealRegister
OMR::Z::RealRegister::setRegister3Field(uint32_t *);setBaseRegisterField(uint32_t *);OMR::Z::RealRegister
OMR::Z::CodeGenerator::preLowerTrees();preLowerTrees();OMR::CodeGenerator
OMR::Z::CodeGenerator::preLowerTrees();init();List
OMR::Z::CodeGenerator::changeRegisterKind(TR::Register *,enum TR_RegisterKinds);setKind(enum TR_RegisterKinds);OMR::Register
OMR::Z::CodeGenerator::beginInstructionSelection();setCurrentBlockIndex(int32_t);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);setVisitCount(vcount_t);OMR::Node
OMR::Z::CodeGenerator::lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);lowerTreesPreChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t);OMR::CodeGenerator
OMR::Z::CodeGenerator::lowerTreesWalk(TR::Node *,TR::TreeTop *,vcount_t);lowerTreesPostChildrenVisit(TR::Node *,TR::TreeTop *,vcount_t);OMR::CodeGenerator
OMR::Z::CodeGenerator::lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *);lowerTreeIfNeeded(TR::Node *,int32_t,TR::Node *,TR::TreeTop *);OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();initializeLinkage();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setOnDemandLiteralPoolRun(_Bool);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setGlobalStaticBaseRegisterOn(_Bool);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setGlobalPrivateStaticBaseRegisterOn(_Bool);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setMultiplyIsDestructive();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setIsOutOfLineHotPath(_Bool);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setUsesRegisterPairsForLongs();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsDivCheck();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsLoweringConstIDiv();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsTestUnderMask();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setPreprologueOffset(int32_t);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsLoweringConstLDivPower2();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsInlinedAtomicLongVolatiles();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsConstantOffsetInAddressing();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsArrayCmp();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsArrayCmpSign();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsTestCharComparisonControl();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsReverseLoadAndStore();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsSearchCharString();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsTranslateAndTestCharString();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsBCDToDFPReduction();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsIntDFPConversions();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setExitPointsInMethod(_Bool);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();clearTotalSpills();OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();clearTotalRegisterXfers();OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();clearTotalRegisterMoves();OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsGlRegDeps();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();addSupportedLiveRegisterKind(enum TR_RegisterKinds);OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setLiveRegisters(class TR_LiveRegisters *,enum TR_RegisterKinds);OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsPrimitiveArrayCopy();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsReferenceArrayCopy();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsPartialInlineOfMethodHooks();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsInliningOfTypeCoersionMethods();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setPerformsChecksExplicitly();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsJavaFloatSemantics();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();freeReusableTempSlot();OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setSupportsProfiledInlining();OMR::CodeGenerator
OMR::Z::CodeGenerator::CodeGenerator();setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);OMR::Z::Linkage
OMR::Z::CodeGenerator::CodeGenerator();initS390RealRegisterLinkage();OMR::Z::Linkage
OMR::Z::CodeGenerator::CodeGenerator();setAccessStaticsIndirectly(_Bool);OMR::CodeGenerator
OMR::Z::CodeGenerator::createLinkage(enum TR_LinkageConventions);setLinkage(enum TR_LinkageConventions,TR::Linkage *);OMR::CodeGenerator
OMR::Z::CodeGenerator::addPICsListForInterfaceSnippet(TR::S390ConstantDataSnippet *,TR::list<TR_OpaqueClassBlock *> *);add(void *,TR_HashId,void *);TR_HashTab
OMR::Z::CodeGenerator::doInstructionSelection();doInstructionSelection();OMR::CodeGenerator
OMR::Z::CodeGenerator::doRegisterAssignment(enum TR_RegisterKinds);setAssignmentDirection(RegisterAssignmentDirection);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::doRegisterAssignment(enum TR_RegisterKinds);allocateUpgradedBlockedList(TR_Stack<TR::RealRegister *> *);OMR::Z::Machine
OMR::Z::CodeGenerator::doBinaryEncoding();generateBinaryEncodingPrologue(struct TR_BinaryEncodingData *,TR::CodeGenerator *);TR_FrontEnd
OMR::Z::CodeGenerator::doBinaryEncoding();setEstimatedCodeLength(uint32_t);OMR::CodeGenerator
OMR::Z::CodeGenerator::doBinaryEncoding();setBinaryBufferStart(uint8_t *);OMR::CodeGenerator
OMR::Z::CodeGenerator::doBinaryEncoding();setBinaryBufferCursor(uint8_t *);OMR::CodeGenerator
OMR::Z::CodeGenerator::doBinaryEncoding();setLabelHashTable(class TR_HashTab *);OMR::Z::CodeGenerator
OMR::Z::CodeGenerator::doPeephole();perform();TR_S390Peephole
OMR::Z::CodeGenerator::AddFoldedMemRefToStack(TR::MemoryReference *);push(class TR::MemoryReference *);TR_Stack
OMR::Z::CodeGenerator::allocateArGprPair(TR::Register *,TR::Register *);setAssociation(uint32_t);OMR::Register
OMR::Z::CodeGenerator::allocateArGprPair(TR::Register *,TR::Register *);setSiblingRegister(TR::Register *);OMR::Register
OMR::Z::CodeGenerator::allocateArGprPair(TR::Register *,TR::Register *);setIsUsedInMemRef(_Bool);OMR::Z::Register
OMR::Z::CodeGenerator::createDepsForRRMemoryInstructions(TR::Node *,TR::RegisterPair *,TR::RegisterPair *,uint8_t);addPostCondition(TR::Register *,TR::class RealRegister::RegNum,uint8_t);OMR::Z::RegisterDependencyConditions
OMR::Z::CodeGenerator::allocateConsecutiveRegisterPair(TR::Register *,TR::Register *);setAssociation(uint32_t);OMR::Register
OMR::Z::CodeGenerator::allocateConsecutiveRegisterPair(TR::Register *,TR::Register *);setSiblingRegister(TR::Register *);OMR::Register
OMR::Z::CodeGenerator::allocateFPRegisterPair(TR::Register *,TR::Register *);setAssociation(uint32_t);OMR::Register
OMR::Z::CodeGenerator::allocateFPRegisterPair(TR::Register *,TR::Register *);setSiblingRegister(TR::Register *);OMR::Register
OMR::Z::CodeGenerator::setUnavailableRegistersUsage(TR_Array<class TR_BitVector> &,TR_Array<class TR_BitVector> &);empty();TR_BitVector
OMR::Z::CodeGenerator::genMemClear(TR::MemoryReference *,TR::Node *,int64_t);generate(TR::MemoryReference *);MemToMemMacroOp
OMR::Z::CodeGenerator::buildRegisterMapForInstruction(class TR_GCStackMap *);setInternalPointerMap(class TR_InternalPointerMap *);TR_GCStackMap
OMR::Z::CodeGenerator::setBranchOnCountFlag(TR::Node *,vcount_t);setIsUseBranchOnCount(_Bool);OMR::Node
OMR::Z::CodeGenerator::setRealRegisterAssociation(TR::Register *,TR::class RealRegister::RegNum);setAssociation(TR::Register *,TR::RealRegister *);TR_LiveRegisters
OMR::Z::CodeGenerator::emitDataSnippets();setBinaryBufferCursor(uint8_t *);OMR::CodeGenerator
OMR::Z::CodeGenerator::findOrCreateConstant(TR::Node *,void *,uint16_t);Add(const struct OMR::Z::CodeGenerator::TR_S390ConstantDataSnippetKey &,class TR::S390ConstantDataSnippet *const &);CS2::HashTable
OMR::Z::CodeGenerator::setEstimatedLocationsForTargetAddressSnippetLabels(int32_t);setEstimatedSnippetStart(int32_t);OMR::CodeGenerator
OMR::Z::CodeGenerator::emitTargetAddressSnippets();setBinaryBufferCursor(uint8_t *);OMR::CodeGenerator
OMR::Z::CodeGenerator::freeAndResetTransientLongs();setSize(uint32_t);TR_Array
OMR::Z::CodeGenerator::allocateReusableTempSlot();set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::freeReusableTempSlot();set(unsigned int,_Bool);OMR::FlagsTemplate
OMR::Z::CodeGenerator::replaceInst(TR::Instruction *,TR::Instruction *);setIndex(TIndex);OMR::Instruction
OMR::Z::CodeGenerator::replaceInst(TR::Instruction *,TR::Instruction *);setBinLocalFreeRegs(uint32_t);OMR::Z::Instruction
OMR::Z::CodeGenerator::replaceInst(TR::Instruction *,TR::Instruction *);setLocalLocalSpillReg1(TR::RealRegister *);OMR::Z::Instruction
OMR::Z::CodeGenerator::replaceInst(TR::Instruction *,TR::Instruction *);setLocalLocalSpillReg2(TR::RealRegister *);OMR::Z::Instruction
OMR::Z::CodeGenerator::deleteInst(TR::Instruction *);setNext(TR::Instruction *);OMR::Instruction
OMR::Z::CodeGenerator::setUsesZeroBasePtr(_Bool);set(unsigned int,_Bool);OMR::FlagsTemplate
TR_S390Peephole::replaceGuardedLoadWithSoftwareReadBarrier();deleteInst(TR::Instruction *);OMR::Z::CodeGenerator
TR_S390Peephole::LRReduction();setUseDefRegisters(_Bool);OMR::Z::Instruction
TR_S390Peephole::removeMergedNullCHK();setUseDefRegisters(_Bool);OMR::Z::Instruction
JITS390OpCodesTest_UnaryTest_Test::TestBody();compileUnaryTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_UnaryTest_Test::TestBody();invokeUnaryTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_IntegerArithmeticTest_Test::TestBody();compileIntegerArithmeticTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_IntegerArithmeticTest_Test::TestBody();invokeIntegerArithmeticTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_FloatArithmeticTest_Test::TestBody();compileFloatArithmeticTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_FloatArithmeticTest_Test::TestBody();invokeFloatArithmeticTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_MemoryOperationTest_Test::TestBody();compileMemoryOperationTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_MemoryOperationTest_Test::TestBody();invokeMemoryOperationTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_BitwiseTest_Test::TestBody();compileBitwiseTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_BitwiseTest_Test::TestBody();invokeBitwiseTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_TernaryTest_Test::TestBody();compileTernaryTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_TernaryTest_Test::TestBody();invokeTernaryTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_CompareTest_Test::TestBody();compileCompareTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_CompareTest_Test::TestBody();invokeCompareTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DirectCallTest_Test::TestBody();compileDirectCallTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DirectCallTest_Test::TestBody();invokeDirectCallTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_S390AddressTest_Test::TestBody();compileAddressTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_S390AddressTest_Test::TestBody();invokeAddressTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390CompareTests_Test::TestBody();compileDisabledCompareOpCodesTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390CompareTests_Test::TestBody();invokeDisabledCompareOpCodesTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390IntegerArithmeticTests_Test::TestBody();compileDisabledIntegerArithmeticTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390IntegerArithmeticTests_Test::TestBody();invokeDisabledIntegerArithmeticTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390UnaryTests_Test::TestBody();compileDisabledUnaryTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390UnaryTests_Test::TestBody();invokeDisabledUnaryTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390TernaryTests_Test::TestBody();compileDisabledTernaryTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390TernaryTests_Test::TestBody();invokeDisabledTernaryTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390MemoryOperationTest_Test::TestBody();compileDisabledMemoryOperationTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390MemoryOperationTest_Test::TestBody();invokeDisabledMemoryOperationTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390BitwiseTest_Test::TestBody();compileDisabledBitwiseTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390BitwiseTest_Test::TestBody();invokeDisabledBitwiseTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390DirectCallTest_Test::TestBody();compileDisabledDirectCallTestMethods();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390DirectCallTest_Test::TestBody();invokeDisabledDirectCallTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390ConvertToAddressTest_Test::TestBody();compileDisabledS390ConvertToAddressOpCodesTests();TestCompiler::S390OpCodesTest
JITS390OpCodesTest_DISABLED_S390ConvertToAddressTest_Test::TestBody();invokeDisabledS390ConvertToAddressOpCodesTests();TestCompiler::S390OpCodesTest
TestCompiler::FrontEnd::generateBinaryEncodingPrologue(struct TR_BinaryEncodingData *,TR::CodeGenerator *);createPrologue(TR::Instruction *);OMR::Z::Linkage
