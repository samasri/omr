BaseNamespace; BaseClassName; FunctionSignature; OverridingNamespace; OverridingClassName; isImplicit
CS2::ABitVector;Cursor;operator unsigned int();CS2::ABitVector;iterator;0
CS2;BSDTimer;Read();CS2;Timer;0
CS2;BSDTimer;Reset();CS2;Timer;0
CS2;BSDTimer;Start();CS2;Timer;0
CS2;BSDTimer;Stop();CS2;Timer;0
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t);TR;AutomaticSymbol;0
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType);TR;AutomaticSymbol;0
OMR;AutomaticSymbol;AutomaticSymbol(TR::DataType,uint32_t,const char *);TR;AutomaticSymbol;0
OMR;RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType,uint32_t);TR;RegisterMappedSymbol;0
OMR;RegisterMappedSymbol;RegisterMappedSymbol(TR::DataType);TR;RegisterMappedSymbol;0
OMR;RegisterMappedSymbol;RegisterMappedSymbol(int32_t);TR;RegisterMappedSymbol;0
OMR;Symbol;Symbol();TR;Symbol;0
OMR;Symbol;Symbol(TR::DataType);TR;Symbol;0
OMR;Symbol;Symbol(TR::DataType,uint32_t);TR;Symbol;0
OMR;Symbol;getKind();OMR;AutomaticSymbol;0
OMR;Symbol;getOffset();OMR;RegisterMappedSymbol;0
OMR;Symbol;isReferenced();OMR;AutomaticSymbol;0
OMR;Symbol;self();OMR;RegisterMappedSymbol;0
OMR;RegisterMappedSymbol;self();OMR;AutomaticSymbol;0
OMR;AutomaticSymbol;~AutomaticSymbol();TR;AutomaticSymbol;1
OMR;RegisterMappedSymbol;~RegisterMappedSymbol();TR;RegisterMappedSymbol;1
OMR;Symbol;~Symbol();TR;Symbol;0
OMR;Block;Block(class TR_Memory *);TR;Block;0
OMR;Block;Block(TR::TreeTop *,TR::TreeTop *,class TR_Memory *);TR;Block;0
TR;CFGNode;asBlock();OMR;Block;0
TR;CFGNode;removeFromCFG(TR::Compilation *);OMR;Block;0
OMR;Block;~Block();TR;Block;0
OMR;LabelSymbol;LabelSymbol();TR;LabelSymbol;0
OMR;LabelSymbol;LabelSymbol(TR::CodeGenerator *,TR::Block *);TR;LabelSymbol;0
OMR;LabelSymbol;LabelSymbol(TR::CodeGenerator *);TR;LabelSymbol;0
OMR;Symbol;self();OMR;LabelSymbol;0
OMR;LabelSymbol;~LabelSymbol();TR;LabelSymbol;1
OMR::X86;RealRegister;RealRegister(TR::CodeGenerator *);OMR::X86::i386;RealRegister;0
OMR::X86;RealRegister;RealRegister(enum TR_RegisterKinds,uint16_t,RegState,RegNum,RegMask,TR::CodeGenerator *);OMR::X86::i386;RealRegister;0
OMR;Register;Register(enum TR_RegisterKinds,uint16_t);OMR::X86;Register;0
OMR::X86;Register;Register(enum TR_RegisterKinds,uint16_t);TR;Register;0
OMR;Register;Register(enum TR_RegisterKinds);OMR::X86;Register;0
OMR::X86;Register;Register(enum TR_RegisterKinds);TR;Register;0
OMR;Register;Register(uint32_t);OMR::X86;Register;0
OMR::X86;Register;Register(uint32_t);TR;Register;0
OMR;Register;block();OMR;RealRegister;0
OMR;RealRegister;getAvailableRegistersMask(enum TR_RegisterKinds);OMR::X86;RealRegister;0
OMR;Register;getRealRegister();OMR;RealRegister;0
OMR;Register;getRegister();OMR;RealRegister;0
OMR;RealRegister;regMaskToRealRegister(TR_RegisterMask,enum TR_RegisterKinds,TR::CodeGenerator *);OMR::X86;RealRegister;0
OMR;Register;self();OMR;RealRegister;0
OMR;Register;setAssignedRegister(TR::Register *);OMR;RealRegister;0
OMR;Register;unblock();OMR;RealRegister;0
OMR;RealRegister;~RealRegister();OMR::X86;RealRegister;1
OMR::X86;RealRegister;~RealRegister();OMR::X86::i386;RealRegister;1
OMR::X86::i386;RealRegister;~RealRegister();TR;RealRegister;1
OMR;Register;~Register();OMR::X86;Register;1
OMR::X86;Register;~Register();TR;Register;1
OMR;MethodSymbol;MethodSymbol(enum TR_LinkageConventions,class TR_Method *);TR;MethodSymbol;0
OMR;ResolvedMethodSymbol;ResolvedMethodSymbol(class TR_ResolvedMethod *,TR::Compilation *);TR;ResolvedMethodSymbol;0
OMR;Symbol;isStatic();OMR;MethodSymbol;0
OMR;Symbol;self();OMR;MethodSymbol;0
OMR;MethodSymbol;self();OMR;ResolvedMethodSymbol;0
OMR;MethodSymbol;~MethodSymbol();TR;MethodSymbol;1
OMR;ResolvedMethodSymbol;~ResolvedMethodSymbol();TR;ResolvedMethodSymbol;1
OMR;StaticSymbol;StaticSymbol(TR::DataType,void *);TR;StaticSymbol;0
OMR;StaticSymbol;StaticSymbol(TR::DataType);TR;StaticSymbol;0
OMR;StaticSymbol;StaticSymbol(TR::DataType,uint32_t);TR;StaticSymbol;0
OMR;Symbol;getName();OMR;StaticSymbol;0
OMR;Symbol;self();OMR;StaticSymbol;0
OMR;StaticSymbol;~StaticSymbol();TR;StaticSymbol;1
OMR;CPU;CPU();OMR::X86;CPU;0
OMR::X86;CPU;CPU();TR;CPU;0
OMR;CPU;~CPU();OMR::X86;CPU;1
OMR::X86;CPU;~CPU();TR;CPU;1
OMR;DebugEnv;DebugEnv();OMR::X86;DebugEnv;0
OMR::X86;DebugEnv;DebugEnv();TR;DebugEnv;0
OMR;DebugEnv;~DebugEnv();OMR::X86;DebugEnv;1
OMR::X86;DebugEnv;~DebugEnv();TR;DebugEnv;1
OMR;Instruction;Instruction(TR::CodeGenerator *,TR::Instruction *,TR::class InstOpCode::Mnemonic,TR::Node *);OMR::X86;Instruction;0
OMR;Instruction;Instruction(TR::CodeGenerator *,TR::class InstOpCode::Mnemonic,TR::Node *);OMR::X86;Instruction;0
OMR;Instruction;assignRegisters(enum TR_RegisterKinds);OMR::X86;Instruction;0
OMR;Instruction;defsRegister(TR::Register *);OMR::X86;Instruction;0
OMR;Instruction;dependencyRefsRegister(TR::Register *);OMR::X86;Instruction;0
OMR;Instruction;estimateBinaryLength(int32_t);OMR::X86;Instruction;0
OMR;Instruction;generateBinaryEncoding();OMR::X86;Instruction;0
OMR;Instruction;getKind();OMR::X86;Instruction;0
OMR;Instruction;getOpCode();OMR::X86;Instruction;0
OMR;Instruction;getOpCodeValue();OMR::X86;Instruction;0
OMR;Instruction;isPatchBarrier();OMR::X86;Instruction;0
OMR;Instruction;refsRegister(TR::Register *);OMR::X86;Instruction;0
OMR;Instruction;usesRegister(TR::Register *);OMR::X86;Instruction;0
OMR;Instruction;~Instruction();OMR::X86;Instruction;1
OMR::X86;Instruction;~Instruction();TR;Instruction;1
OMR::X86::i386;Machine;Machine(TR::CodeGenerator *);TR;Machine;0
OMR;Machine;~Machine();OMR::X86;Machine;1
OMR::X86;Machine;~Machine();OMR::X86::i386;Machine;1
OMR::X86::i386;Machine;~Machine();TR;Machine;1
OMR;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);OMR::X86;Snippet;0
OMR::X86;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *);TR;Snippet;0
OMR;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);OMR::X86;Snippet;0
OMR::X86;Snippet;Snippet(TR::CodeGenerator *,TR::Node *,TR::LabelSymbol *,_Bool);TR;Snippet;0
OMR;Snippet;~Snippet();OMR::X86;Snippet;1
OMR::X86;Snippet;~Snippet();TR;Snippet;1
OMR;AliasBuilder;AliasBuilder(TR::SymbolReferenceTable *,size_t,TR::Compilation *);TR;AliasBuilder;0
OMR;AliasBuilder;~AliasBuilder();TR;AliasBuilder;1
OMR;ArithEnv;ArithEnv();TR;ArithEnv;1
OMR;ArithEnv;~ArithEnv();TR;ArithEnv;1
OMR;CFG;CFG(TR::Compilation *,TR::ResolvedMethodSymbol *);TR;CFG;0
TR;Link;jitPersistentAlloc(size_t);TR;CFGEdge;0
TR;Link;jitPersistentFree(void *);TR;CFGEdge;0
TR;Link;operator delete(void *,size_t);TR;CFGEdge;0
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator delete(void *,TR::Region &);TR;CFGEdge;0
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0
TR;Link;operator delete[](void *,TR::Region &);TR;CFGEdge;0
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;CFGEdge;0
TR;Link;operator new(size_t,TR::Region &);TR;CFGEdge;0
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;CFGEdge;0
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;CFGEdge;0
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;CFGEdge;0
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;CFGEdge;0
TR;Link;operator new[](size_t,TR::Region &);TR;CFGEdge;0
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;CFGEdge;0
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;CFGEdge;0
OMR;ClassEnv;ClassEnv();TR;ClassEnv;1
OMR;ClassEnv;~ClassEnv();TR;ClassEnv;1
OMR;CodeGenPhase;CodeGenPhase(TR::CodeGenerator *);TR;CodeGenPhase;0
OMR;CodeGenPhase;~CodeGenPhase();TR;CodeGenPhase;1
OMR;CodeGenerator;CodeGenerator();OMR::X86;CodeGenerator;0
OMR::X86;CodeGenerator;CodeGenerator();OMR::X86::i386;CodeGenerator;0
OMR::X86::i386;CodeGenerator;CodeGenerator();TestCompiler;CodeGenerator;0
TestCompiler;CodeGenerator;CodeGenerator();TR;CodeGenerator;0
OMR;CodeGenerator;allowGlobalRegisterAcrossBranch(class TR_RegisterCandidate *,TR::Node *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;apply32BitLabelRelativeRelocation(int32_t *,TR::LabelSymbol *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;apply32BitLoadLabelRelativeRelocation(TR::Instruction *,TR::LabelSymbol *,TR::LabelSymbol *,int32_t);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;arrayInitMinimumNumberOfBytes();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;arrayTranslateAndTestMinimumNumberOfIterations();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;arrayTranslateMinimumNumberOfElements(_Bool,_Bool);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;beginInstructionSelection();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;buildRegisterMapForInstruction(class TR_GCStackMap *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;canFoldLargeOffsetInAddressing();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;canNullChkBeImplicit(TR::Node *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;canTransformUnsafeCopyToArrayCopy();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;codegenMulDecomposition(int64_t);OMR::X86::i386;CodeGenerator;0
OMR;CodeGenerator;codegenSupportsUnsignedIntegerDivide();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;computeRegisterSaveDescription(class TR_BitVector *,_Bool);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;createLinkage(enum TR_LinkageConventions);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;doBinaryEncoding();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;doRegisterAssignment(enum TR_RegisterKinds);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;doRematerialization();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;dumpDataSnippets(TR::FILE *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;emitDataSnippets();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;endInstructionSelection();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;estimateBinaryLength(TR::MemoryReference *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,class TR_ScratchRegisterManager &);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,TR::RegisterDependencyConditions *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,int32_t,class TR_ScratchRegisterManager &);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;generateDebugCounterBump(TR::Instruction *,TR::DebugCounterBase *,TR::Register *,TR::RegisterDependencyConditions *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getGlobalRegisters(enum TR_SpillKinds,enum TR_LinkageConventions);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getMaxPatchableInstructionLength();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getMaximumNumberOfGPRsAllowedAcrossEdge(TR::Node *);OMR::X86::i386;CodeGenerator;0
OMR;CodeGenerator;getMaximumNumbersOfAssignableFPRs();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getMaximumNumbersOfAssignableGPRs();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getMaximumNumbersOfAssignableVRs();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getRegisterMapInfoBitsMask();OMR::X86::i386;CodeGenerator;0
OMR;CodeGenerator;getSizeOfCombinedBuffer();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getSupportsBitOpCodes();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getSupportsEncodeUtf16BigWithSurrogateTest();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getSupportsEncodeUtf16LittleWithSurrogateTest();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getSupportsIbyteswap();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getSupportsNewObjectAlignment();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getSupportsOpCodeForAutoSIMD(TR::ILOpCode,TR::DataType);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getSupportsTenuredObjectAlignment();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;getVMThreadGlobalRegisterNumber();OMR::X86::i386;CodeGenerator;0
OMR;CodeGenerator;hasComplexAddressingMode();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;hasDataSnippets();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;hasTMEvaluator();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;internalPointerSupportImplemented();OMR::X86;CodeGenerator;0
OMR::X86;CodeGenerator;internalPointerSupportImplemented();OMR::X86::i386;CodeGenerator;0
OMR;CodeGenerator;isAddressScaleIndexSupported(int32_t);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isAlignmentInstruction(TR::Instruction *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isBranchInstruction(TR::Instruction *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isFenceInstruction(TR::Instruction *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isLabelInstruction(TR::Instruction *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isObjectOfSizeWorthAligning(uint32_t);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isPreservedRegister(int32_t);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isReturnInstruction(TR::Instruction *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;isTargetSnippetOrOutOfLine(TR::Instruction *,TR::Instruction **,TR::Instruction **);OMR::X86;CodeGenerator;0
OMR::X86;CodeGenerator;longClobberEvaluate(TR::Node *);OMR::X86::i386;CodeGenerator;0
OMR;CodeGenerator;materializesHeapBase();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;needToAvoidCommoningInGRA();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;nodeResultGPRCount(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;pickRegister(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &,TR_GlobalRegisterNumber &,TR_LinkHead<class TR_RegisterCandidate> *);OMR::X86::i386;CodeGenerator;0
OMR;CodeGenerator;processIncomingParameterUsage(class TR_BitVector **,int32_t);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;processInstruction(TR::Instruction *,class TR_BitVector **,int32_t &,int32_t &,_Bool);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;removeUnavailableRegisters(class TR_RegisterCandidate *,TR::Block **,class TR_BitVector &);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;setEstimatedLocationsForDataSnippetLabels(int32_t);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;simulateNodeEvaluation(TR::Node *,struct OMR::CodeGenerator::TR_RegisterPressureState *,struct OMR::CodeGenerator::TR_RegisterPressureSummary *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;splitBlockEntry(TR::Instruction *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;splitEdge(TR::Instruction *,_Bool,_Bool,TR::Instruction *,TR::list<TR::Instruction *> *,_Bool);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsAtomicAdd();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsComplexAddressing();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsDebugCounters(TR::DebugCounterInjectionPoint);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsDirectJNICallsForAOT();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsInliningOfIsInstance();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsMergingGuards();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsPassThroughCopyToNewVirtualRegister();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;supportsSinglePrecisionSQRT();OMR::X86;CodeGenerator;0
OMR;CodeGenerator;suppressInliningOfRecognizedMethod(TR::RecognizedMethod);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;updateSnippetMapWithRSD(TR::Instruction *,int32_t);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;willBeEvaluatedAsCallByCodeGen(TR::Node *,TR::Compilation *);OMR::X86;CodeGenerator;0
OMR;CodeGenerator;~CodeGenerator();OMR::X86;CodeGenerator;1
OMR::X86;CodeGenerator;~CodeGenerator();OMR::X86::i386;CodeGenerator;1
OMR::X86::i386;CodeGenerator;~CodeGenerator();TestCompiler;CodeGenerator;1
TestCompiler;CodeGenerator;~CodeGenerator();TR;CodeGenerator;1
OMR;Compilation;Compilation(int32_t,OMR_VMThread *,class TR_FrontEnd *,class TR_ResolvedMethod *,TR::IlGenRequest &,TR::Options &,TR::Region &,class TR_Memory *,class TR_OptimizationPlan *);TR;Compilation;0
OMR;Compilation;~Compilation();TR;Compilation;0
OMR;CompilerEnv;CompilerEnv(TR::RawAllocator,const TR::PersistentAllocatorKit &);TR;CompilerEnv;0
OMR;DataType;DataType();TR;DataType;0
OMR;DataType;DataType(TR::DataTypes);TR;DataType;0
OMR;DataType;~DataType();TR;DataType;1
TR;DebugCounterBase;accumulate();TR;DebugCounter;0
TR;DebugCounterBase;getBumpCountAddress();TR;DebugCounter;0
TR;DebugCounterBase;getBumpCountSymRef(TR::Compilation *);TR;DebugCounter;0
TR;DebugCounterBase;accumulate();TR;DebugCounterAggregation;0
TR;DebugCounterBase;getBumpCountAddress();TR;DebugCounterAggregation;0
TR;DebugCounterBase;getBumpCountSymRef(TR::Compilation *);TR;DebugCounterAggregation;0
OMR;Environment;Environment(TR::MajorOperatingSystem,TR::Bitness);TR;Environment;0
OMR;Environment;Environment();TR;Environment;0
OMR;Environment;~Environment();TR;Environment;1
OMR;GCRegisterMap;GCRegisterMap();TR;GCRegisterMap;0
OMR;GCRegisterMap;~GCRegisterMap();TR;GCRegisterMap;1
OMR;GCStackAtlas;GCStackAtlas(uint32_t,uint32_t,class TR_Memory *);TR;GCStackAtlas;0
OMR;IL;~IL();TR;IL;1
OMR;ILOpCode;ILOpCode(TR::ILOpCodes);TR;ILOpCode;0
OMR;ILOpCode;ILOpCode();TR;ILOpCode;0
OMR;ILOpCode;~ILOpCode();TR;ILOpCode;1
OMR;KnownObjectTable;KnownObjectTable(TR::Compilation *);TR;KnownObjectTable;0
OMR;KnownObjectTable;~KnownObjectTable();TR;KnownObjectTable;1
OMR;Monitor;Monitor();TR;Monitor;1
OMR;Monitor;~Monitor();TR;Monitor;0
OMR;Node;Node(TR::Node *,TR::ILOpCodes,uint16_t);TR;Node;0
OMR;Node;Node();TR;Node;0
OMR;Node;~Node();TR;Node;0
OMR;ObjectModel;ObjectModel();TestCompiler;ObjectModel;0
TestCompiler;ObjectModel;ObjectModel();TR;ObjectModel;0
OMR;ObjectModel;sizeofReferenceField();TestCompiler;ObjectModel;0
OMR;ObjectModel;~ObjectModel();TestCompiler;ObjectModel;1
TestCompiler;ObjectModel;~ObjectModel();TR;ObjectModel;1
OMR;Optimizer;Optimizer(TR::Compilation *,TR::ResolvedMethodSymbol *,_Bool,const struct OptimizationStrategy *,uint16_t);TestCompiler;Optimizer;0
TestCompiler;Optimizer;Optimizer(TR::Compilation *,TR::ResolvedMethodSymbol *,_Bool,const struct OptimizationStrategy *,uint16_t);TR;Optimizer;0
OMR;Optimizer;optimizationStrategy(TR::Compilation *);TestCompiler;Optimizer;0
OMR;Options;Options();TR;Options;0
OMR;Options;Options(TR::Options &);TR;Options;0
OMR;Options;Options(class TR_Memory *,int32_t,int32_t,class TR_ResolvedMethod *,void *,class TR_OptimizationPlan *,_Bool,int32_t);TR;Options;0
OMR;Options;self();OMR;Options;0
OMR;PersistentInfo;PersistentInfo(class TR_PersistentMemory *);TR;PersistentInfo;0
OMR;PersistentInfo;~PersistentInfo();TR;PersistentInfo;1
OMR::X86;RegisterIterator;RegisterIterator(TR::Machine *,enum TR_RegisterKinds);TR;RegisterIterator;0
OMR::X86;RegisterIterator;getCurrent();TR;X86FPStackIterator;0
OMR::X86;RegisterIterator;getFirst();TR;X86FPStackIterator;0
OMR::X86;RegisterIterator;getNext();TR;X86FPStackIterator;0
TestCompiler;ResolvedMethod;ResolvedMethod(class TR_OpaqueMethodBlock *);TR;ResolvedMethod;0
TestCompiler;ResolvedMethod;ResolvedMethod(TR::MethodBuilder *);TR;ResolvedMethod;0
TR;ResolvedMethod;classNameChars();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;classNameLength();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;convertToMethod();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;getPersistentIdentifier();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;hasBackwardBranches();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isAbstract();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isCompilable(class TR_Memory *);TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isConstructor();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isFinal();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isInterpreted();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;isJITInternalNative();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isJNINative();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isNative();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isNewInstanceImplThunk();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isNonEmptyObjectConstructor();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isPrivate();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isProtected();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isPublic();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isSameMethod(class TR_ResolvedMethod *);TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isStatic();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isStrictFP();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isSubjectToPhaseChange(TR::Compilation *);TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;isSynchronized();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;localName(uint32_t,uint32_t,int32_t &,class TR_Memory *);TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;makeParameterList(TR::ResolvedMethodSymbol *);TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;maxBytecodeIndex();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;nameChars();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;nameLength();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;numberOfExceptionHandlers();TestCompiler;ResolvedMethodBase;0
TR;ResolvedMethod;numberOfParameterSlots();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;numberOfTemps();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;parmType(uint32_t);TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;resolvedMethodAddress();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;returnType();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;signature(class TR_Memory *,enum TR_AllocationKind);TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;signatureChars();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;signatureLength();TestCompiler;ResolvedMethodBase;0
TestCompiler;ResolvedMethodBase;signatureLength();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;startAddressForInterpreterOfJittedMethod();TestCompiler;ResolvedMethod;0
TR;ResolvedMethod;startAddressForJittedMethod();TestCompiler;ResolvedMethod;0
TestCompiler;ResolvedMethod;~ResolvedMethod();TR;ResolvedMethod;1
TR;Method;classNameChars();TestCompiler;Method;0
TestCompiler;Method;classNameChars();TestCompiler;ResolvedMethod;0
TR;Method;classNameLength();TestCompiler;Method;0
TR;Method;isConstructor();TestCompiler;Method;0
TR;Method;isFinalInObject();TestCompiler;Method;0
TR;Method;jitPersistentAlloc(size_t);TestCompiler;Method;0
TR;Method;jitPersistentFree(void *);TestCompiler;Method;0
TR;Method;nameChars();TestCompiler;Method;0
TestCompiler;Method;nameChars();TestCompiler;ResolvedMethod;0
TR;Method;nameLength();TestCompiler;Method;0
TR;Method;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator delete(void *,TR::Region &);TestCompiler;Method;0
TR;Method;operator delete(void *,size_t);TestCompiler;Method;0
TR;Method;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0
TR;Method;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0
TR;Method;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator delete[](void *,TR::Region &);TestCompiler;Method;0
TR;Method;operator new(size_t,TR::Region &);TestCompiler;Method;0
TR;Method;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0
TR;Method;operator new(size_t,class TR_PersistentMemory *);TestCompiler;Method;0
TR;Method;operator new(size_t,TR_ArenaAllocator *);TestCompiler;Method;0
TR;Method;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;Method;0
TR;Method;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Method;0
TR;Method;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Method;0
TR;Method;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;Method;0
TR;Method;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;Method;0
TR;Method;operator new[](size_t,TR::Region &);TestCompiler;Method;0
TR;Method;parmType(uint32_t);TestCompiler;ResolvedMethod;0
TR;Method;returnType();TestCompiler;ResolvedMethod;0
TR;Method;signature(class TR_Memory *,enum TR_AllocationKind);TestCompiler;ResolvedMethod;0
TR;Method;signatureChars();TestCompiler;Method;0
TestCompiler;Method;signatureChars();TestCompiler;ResolvedMethod;0
TR;Method;signatureLength();TestCompiler;Method;0
TestCompiler;Method;signatureLength();TestCompiler;ResolvedMethod;0
OMR;SnippetGCMap;SnippetGCMap();TR;SnippetGCMap;0
OMR;SnippetGCMap;~SnippetGCMap();TR;SnippetGCMap;1
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t,const char *);TR;SymbolReference;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::SymbolReference &,intptrj_t,TR::class KnownObjectTable::Index);TR;SymbolReference;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,int32_t,TR::Symbol *,intptrj_t);TR;SymbolReference;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,class mcount_t,int32_t,int32_t);TR;SymbolReference;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::class SymbolReferenceTable::CommonNonhelperSymbol,TR::Symbol *,intptrj_t);TR;SymbolReference;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *);TR;SymbolReference;0
OMR;SymbolReference;SymbolReference(TR::SymbolReferenceTable *,TR::Symbol *,intptrj_t);TR;SymbolReference;0
OMR;SymbolReference;~SymbolReference();TR;SymbolReference;1
OMR;SymbolReferenceTable;SymbolReferenceTable(size_t,TR::Compilation *);TR;SymbolReferenceTable;0
OMR;TreeTop;TreeTop(TR::Node *,TR::TreeTop *,TR::TreeTop *);TR;TreeTop;0
OMR;TreeTop;TreeTop(TR::TreeTop *,TR::Node *,TR::Compilation *);TR;TreeTop;0
OMR;VMEnv;VMEnv();TR;VMEnv;1
OMR;VMEnv;~VMEnv();TR;VMEnv;1
OMR;VMMethodEnv;VMMethodEnv();TR;VMMethodEnv;1
OMR;VMMethodEnv;~VMMethodEnv();TR;VMMethodEnv;1
TR;BitVectorIterator;getFirstElement();TR;BitContainerIterator;0
TR;BitVectorIterator;getNextElement();TR;BitContainerIterator;0
TR;BitVectorIterator;hasMoreElements();TR;BitContainerIterator;0
TR;HashTab;calculateHash(const void *);TR;HashTabDouble;0
TR;HashTab;isEqual(const void *,const void *);TR;HashTabDouble;0
TR;HashTab;calculateHash(const void *);TR;HashTabFloat;0
TR;HashTab;isEqual(const void *,const void *);TR;HashTabFloat;0
TR;HashTab;calculateHash(const void *);TR;HashTabInt;0
TR;HashTab;calculateHash(const void *);TR;HashTabLong;0
TR;HashTab;isEqual(const void *,const void *);TR;HashTabLong;0
TR;HashTab;calculateHash(const void *);TR;HashTabString;0
TR;HashTab;isEqual(const void *,const void *);TR;HashTabString;0
TR;Dominators;jitPersistentAlloc(size_t);TR;PostDominators;0
TR;Dominators;jitPersistentFree(void *);TR;PostDominators;0
TR;Dominators;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0
TR;Dominators;operator delete(void *,size_t);TR;PostDominators;0
TR;Dominators;operator delete(void *,TR::Region &);TR;PostDominators;0
TR;Dominators;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator delete[](void *,TR::Region &);TR;PostDominators;0
TR;Dominators;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0
TR;Dominators;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator new(size_t,TR_ArenaAllocator *);TR;PostDominators;0
TR;Dominators;operator new(size_t,class TR_PersistentMemory *);TR;PostDominators;0
TR;Dominators;operator new(size_t,TR::Internal::PersistentNewType);TR;PostDominators;0
TR;Dominators;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0
TR;Dominators;operator new(size_t,TR::Region &);TR;PostDominators;0
TR;Dominators;operator new[](size_t,TR::Region &);TR;PostDominators;0
TR;Dominators;operator new[](size_t,TR::Internal::PersistentNewType);TR;PostDominators;0
TR;Dominators;operator new[](size_t,class TR_PersistentMemory *);TR;PostDominators;0
TR;Dominators;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PostDominators;0
TR;Dominators;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;PostDominators;0
OMR;ParameterSymbol;ParameterSymbol(TR::DataType,_Bool,int32_t);TR;ParameterSymbol;0
OMR;ParameterSymbol;ParameterSymbol(TR::DataType,_Bool,int32_t,size_t);TR;ParameterSymbol;0
OMR;RegisterMappedSymbol;self();OMR;ParameterSymbol;0
OMR;ParameterSymbol;~ParameterSymbol();TR;ParameterSymbol;1
OMR;Recompilation;Recompilation(TR::Compilation *);TR;Recompilation;0
OMR;Recompilation;~Recompilation();TR;Recompilation;1
OMR;Optimization;Optimization(TR::OptimizationManager *);TR;Optimization;0
OMR;Optimization;~Optimization();TR;Optimization;1
OMR;OptimizationManager;OptimizationManager(TR::Optimizer *,OptimizationFactory,OMR::Optimizations,const struct OptimizationStrategy *);TR;OptimizationManager;0
OMR;OptimizationManager;~OptimizationManager();TR;OptimizationManager;1
TR;TreeTopIteratorImpl;currentNode();TR;NodeIterator;0
TR;NodeIterator;currentNode();TR;NodeOccurrenceIterator;0
TR;TreeTopIteratorImpl;currentTree();TR;NodeIterator;0
TR;TreeTopIteratorImpl;isAt(class TR::PreorderNodeIterator &);TR;NodeIterator;0
TR;TreeTopIteratorImpl;isAt(TR::TreeTop *);TR;NodeIterator;0
TR;TreeTopIteratorImpl;logCurrentLocation();TR;NodeIterator;0
TR;NodeIterator;logCurrentLocation();TR;NodeOccurrenceIterator;0
TR;TreeTopIteratorImpl;operator!=(TR::TreeTop *);TR;NodeIterator;0
TR;TreeTopIteratorImpl;operator++();TR;PostorderNodeOccurrenceIterator;0
TR;TreeTopIteratorImpl;operator==(TR::TreeTop *);TR;NodeIterator;0
TR;TreeTopIteratorImpl;stepForward();TR;PostorderNodeOccurrenceIterator;0
TR;TreeTopIteratorImpl;operator++();TR;PostorderNodeIterator;0
TR;TreeTopIteratorImpl;stepForward();TR;PostorderNodeIterator;0
TR;TreeTopIteratorImpl;operator++();TR;PreorderNodeIterator;0
TR;TreeTopIteratorImpl;stepForward();TR;PreorderNodeIterator;0
TR;TreeTopIteratorImpl;operator++();TR;PreorderNodeOccurrenceIterator;0
TR;TreeTopIteratorImpl;stepForward();TR;PreorderNodeOccurrenceIterator;0
TR;TreeTopIteratorImpl;stepBackward();TR;TreeTopIterator;0
TR;TreeTopIteratorImpl;stepForward();TR;TreeTopIterator;0
OMR;MonitorTable;MonitorTable();TR;MonitorTable;1
TR;Pattern;getName();TR;AnythingPattern;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;AnythingPattern;0
TR;Pattern;getName();TR;ChildPattern;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChildPattern;0
TR;Pattern;getName();TR;ChildrenPattern;0
TR;ChildrenPattern;getName();TR;CommutativePattern;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChildrenPattern;0
TR;ChildrenPattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;CommutativePattern;0
TR;Pattern;getName();TR;ChoicePattern;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;ChoicePattern;0
TR;Pattern;getName();TR;OpCodePattern;0
TR;OpCodePattern;getName();TR;IConstPattern;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;OpCodePattern;0
TR;OpCodePattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;IConstPattern;0
TR;Pattern;tracePattern(TR::Node *);TR;OpCodePattern;0
TR;OpCodePattern;getName();TR;LConstPattern;0
TR;OpCodePattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;LConstPattern;0
TR;Pattern;getName();TR;NoRegisterPattern;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;NoRegisterPattern;0
TR;Pattern;getName();TR;UnifyPattern;0
TR;Pattern;thisMatches(TR::Node *,class TR_Unification &,TR::Compilation *);TR;UnifyPattern;0
TR;VPConstraint;asArrayInfo();TR;VPArrayInfo;0
TR;VPConstraint;getArrayInfo();TR;VPArrayInfo;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPArrayInfo;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPArrayInfo;0
TR;VPConstraint;name();TR;VPArrayInfo;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPArrayInfo;0
TR;VPConstraint;asClass();TR;VPClass;0
TR;VPConstraint;getArrayInfo();TR;VPClass;0
TR;VPConstraint;getClass();TR;VPClass;0
TR;VPConstraint;getClassPresence();TR;VPClass;0
TR;VPConstraint;getClassSignature(int32_t &);TR;VPClass;0
TR;VPConstraint;getClassType();TR;VPClass;0
TR;VPConstraint;getConstString();TR;VPClass;0
TR;VPConstraint;getKnownObject();TR;VPClass;0
TR;VPConstraint;getObjectLocation();TR;VPClass;0
TR;VPConstraint;getPreexistence();TR;VPClass;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0
TR;VPConstraint;isClassObject();TR;VPClass;0
TR;VPConstraint;isConstString();TR;VPClass;0
TR;VPConstraint;isFixedClass();TR;VPClass;0
TR;VPConstraint;isHeapObject();TR;VPClass;0
TR;VPConstraint;isJ9ClassObject();TR;VPClass;0
TR;VPConstraint;isJavaLangClassObject();TR;VPClass;0
TR;VPConstraint;isNonNullObject();TR;VPClass;0
TR;VPConstraint;isNullObject();TR;VPClass;0
TR;VPConstraint;isPreexistentObject();TR;VPClass;0
TR;VPConstraint;isStackObject();TR;VPClass;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPClass;0
TR;VPConstraint;name();TR;VPClass;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPClass;0
TR;VPConstraint;asClassPresence();TR;VPClassPresence;0
TR;VPConstraint;asNonNullObject();TR;VPNonNullObject;0
TR;VPConstraint;getClassPresence();TR;VPClassPresence;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNonNullObject;0
TR;VPConstraint;isNonNullObject();TR;VPNonNullObject;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNonNullObject;0
TR;VPConstraint;name();TR;VPNonNullObject;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNonNullObject;0
TR;VPConstraint;asClassType();TR;VPClassType;0
TR;VPConstraint;asConstString();TR;VPConstString;0
TR;VPConstraint;asFixedClass();TR;VPFixedClass;0
TR;VPConstraint;asResolvedClass();TR;VPResolvedClass;0
TR;VPResolvedClass;create(OMR::ValuePropagation *,class TR_OpaqueClassBlock *);TR;VPFixedClass;0
TR;VPClassType;getArrayClass(OMR::ValuePropagation *);TR;VPResolvedClass;0
TR;VPResolvedClass;getArrayClass(OMR::ValuePropagation *);TR;VPFixedClass;0
TR;VPConstraint;getClass();TR;VPResolvedClass;0
TR;VPConstraint;getClassSignature(int32_t &);TR;VPClassType;0
TR;VPClassType;getClassSignature(int32_t &);TR;VPResolvedClass;0
TR;VPConstraint;getClassType();TR;VPClassType;0
TR;VPConstraint;getConstString();TR;VPConstString;0
TR;VPFixedClass;hasMoreThanFixedClassInfo();TR;VPConstString;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPResolvedClass;0
TR;VPResolvedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPFixedClass;0
TR;VPFixedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0
TR;VPClassType;isArray();TR;VPFixedClass;0
TR;VPConstraint;isClassObject();TR;VPClassType;0
TR;VPConstraint;isConstString();TR;VPConstString;0
TR;VPConstraint;isFixedClass();TR;VPFixedClass;0
TR;VPConstraint;isJ9ClassObject();TR;VPClassType;0
TR;VPConstraint;isJavaLangClassObject();TR;VPClassType;0
TR;VPClassType;isJavaLangObject(OMR::ValuePropagation *);TR;VPResolvedClass;0
TR;VPClassType;isPrimitiveArray(TR::Compilation *);TR;VPResolvedClass;0
TR;VPClassType;isReferenceArray(TR::Compilation *);TR;VPResolvedClass;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPResolvedClass;0
TR;VPResolvedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPFixedClass;0
TR;VPFixedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPConstString;0
TR;VPConstraint;name();TR;VPResolvedClass;0
TR;VPResolvedClass;name();TR;VPFixedClass;0
TR;VPFixedClass;name();TR;VPConstString;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPResolvedClass;0
TR;VPResolvedClass;print(TR::Compilation *,TR::FILE *);TR;VPFixedClass;0
TR;VPFixedClass;print(TR::Compilation *,TR::FILE *);TR;VPConstString;0
TR;VPConstraint;asEqual();TR;VPEqual;0
TR;VPConstraint;asRelation();TR;VPRelation;0
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPEqual;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPEqual;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPEqual;0
TR;VPConstraint;mustBeEqual();TR;VPEqual;0
TR;VPConstraint;mustBeGreaterThan();TR;VPEqual;0
TR;VPConstraint;mustBeGreaterThanOrEqual();TR;VPEqual;0
TR;VPConstraint;mustBeLessThan();TR;VPEqual;0
TR;VPConstraint;mustBeLessThanOrEqual();TR;VPEqual;0
TR;VPConstraint;mustBeNotEqual();TR;VPEqual;0
TR;VPConstraint;name();TR;VPEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPEqual;0
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPEqual;0
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPEqual;0
TR;VPConstraint;asGreaterThanOrEqual();TR;VPGreaterThanOrEqual;0
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0
TR;VPConstraint;mustBeGreaterThan();TR;VPGreaterThanOrEqual;0
TR;VPConstraint;mustBeGreaterThanOrEqual();TR;VPGreaterThanOrEqual;0
TR;VPConstraint;mustBeNotEqual();TR;VPGreaterThanOrEqual;0
TR;VPConstraint;name();TR;VPGreaterThanOrEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPGreaterThanOrEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPGreaterThanOrEqual;0
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPGreaterThanOrEqual;0
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPIntConstraint;0
TR;VPConstraint;asIntConst();TR;VPIntConst;0
TR;VPConstraint;asIntConstraint();TR;VPIntConstraint;0
TR;VPConstraint;canOverflow();TR;VPIntConstraint;0
TR;VPIntConstraint;getHigh();TR;VPIntConst;0
TR;VPConstraint;getHighInt();TR;VPIntConstraint;0
TR;VPConstraint;getLowInt();TR;VPIntConstraint;0
TR;VPConstraint;getPrecision();TR;VPIntConstraint;0
TR;VPIntConstraint;getPrecision();TR;VPIntConst;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConst;0
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPIntConstraint;0
TR;VPConstraint;name();TR;VPIntConst;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPIntConst;0
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPIntConstraint;0
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPIntConstraint;0
TR;VPConstraint;asIntRange();TR;VPIntRange;0
TR;VPIntConstraint;getHigh();TR;VPIntRange;0
TR;VPIntConstraint;getPrecision();TR;VPIntRange;0
TR;VPConstraint;name();TR;VPIntRange;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPIntRange;0
TR;VPConstraint;asKnownObject();TR;VPKnownObject;0
TR;VPConstraint;getKnownObject();TR;VPKnownObject;0
TR;VPFixedClass;hasMoreThanFixedClassInfo();TR;VPKnownObject;0
TR;VPFixedClass;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0
TR;VPClassType;isJavaLangClassObject();TR;VPKnownObject;0
TR;VPFixedClass;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPKnownObject;0
TR;VPFixedClass;name();TR;VPKnownObject;0
TR;VPFixedClass;print(TR::Compilation *,TR::FILE *);TR;VPKnownObject;0
TR;VPConstraint;asLessThanOrEqual();TR;VPLessThanOrEqual;0
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPLessThanOrEqual;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0
TR;VPConstraint;mustBeLessThan();TR;VPLessThanOrEqual;0
TR;VPConstraint;mustBeLessThanOrEqual();TR;VPLessThanOrEqual;0
TR;VPConstraint;mustBeNotEqual();TR;VPLessThanOrEqual;0
TR;VPConstraint;name();TR;VPLessThanOrEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPLessThanOrEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLessThanOrEqual;0
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPLessThanOrEqual;0
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPLongConstraint;0
TR;VPConstraint;asLongConst();TR;VPLongConst;0
TR;VPConstraint;asLongConstraint();TR;VPLongConstraint;0
TR;VPConstraint;canOverflow();TR;VPLongConstraint;0
TR;VPLongConstraint;getHigh();TR;VPLongConst;0
TR;VPConstraint;getHighLong();TR;VPLongConstraint;0
TR;VPConstraint;getLowLong();TR;VPLongConstraint;0
TR;VPConstraint;getPrecision();TR;VPLongConstraint;0
TR;VPLongConstraint;getPrecision();TR;VPLongConst;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConst;0
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPLongConstraint;0
TR;VPConstraint;name();TR;VPLongConst;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLongConst;0
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPLongConstraint;0
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPLongConstraint;0
TR;VPConstraint;asLongRange();TR;VPLongRange;0
TR;VPLongConstraint;getHigh();TR;VPLongRange;0
TR;VPLongConstraint;getPrecision();TR;VPLongRange;0
TR;VPConstraint;name();TR;VPLongRange;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPLongRange;0
TR;VPConstraint;asMergedConstraints();TR;VPMergedConstraints;0
TR;VPConstraint;asMergedIntConstraints();TR;VPMergedConstraints;0
TR;VPConstraint;asMergedLongConstraints();TR;VPMergedConstraints;0
TR;VPConstraint;asMergedShortConstraints();TR;VPMergedConstraints;0
TR;VPConstraint;getHighInt();TR;VPMergedConstraints;0
TR;VPConstraint;getHighLong();TR;VPMergedConstraints;0
TR;VPConstraint;getHighShort();TR;VPMergedConstraints;0
TR;VPConstraint;getLowInt();TR;VPMergedConstraints;0
TR;VPConstraint;getLowLong();TR;VPMergedConstraints;0
TR;VPConstraint;getLowShort();TR;VPMergedConstraints;0
TR;VPConstraint;getUnsignedHighInt();TR;VPMergedConstraints;0
TR;VPConstraint;getUnsignedHighLong();TR;VPMergedConstraints;0
TR;VPConstraint;getUnsignedHighShort();TR;VPMergedConstraints;0
TR;VPConstraint;getUnsignedLowInt();TR;VPMergedConstraints;0
TR;VPConstraint;getUnsignedLowLong();TR;VPMergedConstraints;0
TR;VPConstraint;getUnsignedLowShort();TR;VPMergedConstraints;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPMergedConstraints;0
TR;VPConstraint;name();TR;VPMergedConstraints;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPMergedConstraints;0
TR;VPConstraint;asNotEqual();TR;VPNotEqual;0
TR;VPRelation;getComplement(OMR::ValuePropagation *);TR;VPNotEqual;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNotEqual;0
TR;VPConstraint;mustBeNotEqual();TR;VPNotEqual;0
TR;VPConstraint;name();TR;VPNotEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *,int32_t);TR;VPNotEqual;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNotEqual;0
TR;VPRelation;propagateAbsoluteConstraint(TR::VPConstraint *,int32_t,OMR::ValuePropagation *);TR;VPNotEqual;0
TR;VPRelation;propagateRelativeConstraint(TR::VPRelation *,int32_t,int32_t,OMR::ValuePropagation *);TR;VPNotEqual;0
TR;VPConstraint;asNullObject();TR;VPNullObject;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject;0
TR;VPConstraint;isNullObject();TR;VPNullObject;0
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPNullObject;0
TR;VPConstraint;name();TR;VPNullObject;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPNullObject;0
TR;VPConstraint;asObjectLocation();TR;VPObjectLocation;0
TR;VPConstraint;getObjectLocation();TR;VPObjectLocation;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPObjectLocation;0
TR;VPConstraint;isClassObject();TR;VPObjectLocation;0
TR;VPConstraint;isHeapObject();TR;VPObjectLocation;0
TR;VPConstraint;isJ9ClassObject();TR;VPObjectLocation;0
TR;VPConstraint;isJavaLangClassObject();TR;VPObjectLocation;0
TR;VPConstraint;isStackObject();TR;VPObjectLocation;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPObjectLocation;0
TR;VPConstraint;name();TR;VPObjectLocation;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPObjectLocation;0
TR;VPConstraint;asPreexistentObject();TR;VPPreexistentObject;0
TR;VPConstraint;getPreexistence();TR;VPPreexistentObject;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPPreexistentObject;0
TR;VPConstraint;isPreexistentObject();TR;VPPreexistentObject;0
TR;VPConstraint;name();TR;VPPreexistentObject;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPPreexistentObject;0
TR;VPConstraint;add(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPShortConstraint;0
TR;VPConstraint;asShortConst();TR;VPShortConst;0
TR;VPConstraint;asShortConstraint();TR;VPShortConstraint;0
TR;VPConstraint;canOverflow();TR;VPShortConstraint;0
TR;VPShortConstraint;getHigh();TR;VPShortConst;0
TR;VPConstraint;getHighShort();TR;VPShortConstraint;0
TR;VPConstraint;getLowShort();TR;VPShortConstraint;0
TR;VPConstraint;getPrecision();TR;VPShortConstraint;0
TR;VPShortConstraint;getPrecision();TR;VPShortConst;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0
TR;VPConstraint;mustBeEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConst;0
TR;VPConstraint;mustBeLessThan(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0
TR;VPConstraint;mustBeLessThanOrEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0
TR;VPConstraint;mustBeNotEqual(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPShortConstraint;0
TR;VPConstraint;name();TR;VPShortConst;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPShortConst;0
TR;VPConstraint;setCanOverflow(enum TR_YesNoMaybe);TR;VPShortConstraint;0
TR;VPConstraint;subtract(TR::VPConstraint *,TR::DataType,OMR::ValuePropagation *);TR;VPShortConstraint;0
TR;VPConstraint;asShortRange();TR;VPShortRange;0
TR;VPShortConstraint;getHigh();TR;VPShortRange;0
TR;VPShortConstraint;getPrecision();TR;VPShortRange;0
TR;VPConstraint;name();TR;VPShortRange;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPShortRange;0
TR;VPConstraint;asVPSync();TR;VPSync;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPSync;0
TR;VPConstraint;merge1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPSync;0
TR;VPConstraint;name();TR;VPSync;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPSync;0
TR;VPConstraint;asUnreachablePath();TR;VPUnreachablePath;0
TR;VPConstraint;name();TR;VPUnreachablePath;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPUnreachablePath;0
TR;VPConstraint;asUnresolvedClass();TR;VPUnresolvedClass;0
TR;VPClassType;getArrayClass(OMR::ValuePropagation *);TR;VPUnresolvedClass;0
TR;VPClassType;getClassSignature(int32_t &);TR;VPUnresolvedClass;0
TR;VPConstraint;intersect1(TR::VPConstraint *,OMR::ValuePropagation *);TR;VPUnresolvedClass;0
TR;VPClassType;isPrimitiveArray(TR::Compilation *);TR;VPUnresolvedClass;0
TR;VPClassType;isReferenceArray(TR::Compilation *);TR;VPUnresolvedClass;0
TR;VPConstraint;name();TR;VPUnresolvedClass;0
TR;VPConstraint;print(TR::Compilation *,TR::FILE *);TR;VPUnresolvedClass;0
TR;Structure;addExternalEdge(class TR_Structure *,int32_t,_Bool);TR;BlockStructure;0
TR;Structure;asBlock();TR;BlockStructure;0
TR;Structure;changeContinueLoopsToNestedLoops(class TR_RegionStructure *);TR;BlockStructure;0
TR;Structure;checkStructure(class TR_BitVector *);TR;BlockStructure;0
TR;Structure;clearAnalysisInfo();TR;BlockStructure;0
TR;Structure;cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);TR;BlockStructure;0
TR;Structure;cloneStructureEdges(TR::Block **);TR;BlockStructure;0
TR;Structure;collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *);TR;BlockStructure;0
TR;Structure;collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR;BlockStructure;0
TR;Structure;doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool);TR;BlockStructure;0
TR;Structure;getBlocks(List<TR::Block> *,vcount_t);TR;BlockStructure;0
TR;Structure;getBlocks(List<TR::Block> *);TR;BlockStructure;0
TR;Structure;getEntryBlock();TR;BlockStructure;0
TR;Structure;getKind();TR;BlockStructure;0
TR;Structure;hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t);TR;BlockStructure;0
TR;Structure;isExpressionTransparentIn(int32_t,class TR_LocalTransparency *);TR;BlockStructure;0
TR;Structure;markStructuresWithImproperRegions();TR;BlockStructure;0
TR;Structure;removeEdge(class TR_Structure *,class TR_Structure *);TR;BlockStructure;0
TR;Structure;removeExternalEdgeTo(class TR_Structure *,int32_t);TR;BlockStructure;0
TR;Structure;renumber(int32_t);TR;BlockStructure;0
TR;Structure;renumberRecursively(int32_t,int32_t);TR;BlockStructure;0
TR;Structure;replacePart(class TR_Structure *,class TR_Structure *);TR;BlockStructure;0
TR;Structure;resetAnalysisInfo();TR;BlockStructure;0
TR;Structure;resetAnalyzedStatus();TR;BlockStructure;0
TR;Structure;resetVisitCounts(vcount_t);TR;BlockStructure;0
TR;Structure;addEdge(TR::CFGEdge *,_Bool);TR;RegionStructure;0
TR;Structure;addExternalEdge(class TR_Structure *,int32_t,_Bool);TR;RegionStructure;0
TR;Structure;asRegion();TR;RegionStructure;0
TR;Structure;changeContinueLoopsToNestedLoops(class TR_RegionStructure *);TR;RegionStructure;0
TR;Structure;checkStructure(class TR_BitVector *);TR;RegionStructure;0
TR;Structure;clearAnalysisInfo();TR;RegionStructure;0
TR;Structure;cloneStructure(TR::Block **,class TR_StructureSubGraphNode **,List<class TR_Structure> *,List<class TR_Structure> *);TR;RegionStructure;0
TR;Structure;cloneStructureEdges(TR::Block **);TR;RegionStructure;0
TR;Structure;collectCFGEdgesTo(int32_t,List<TR::CFGEdge> *);TR;RegionStructure;0
TR;Structure;collectExitBlocks(List<TR::Block> *,List<TR::CFGEdge> *);TR;RegionStructure;0
TR;Structure;doDataFlowAnalysis(class TR_DataFlowAnalysis *,_Bool);TR;RegionStructure;0
TR;Structure;getBlocks(List<TR::Block> *,vcount_t);TR;RegionStructure;0
TR;Structure;getBlocks(List<TR::Block> *);TR;RegionStructure;0
TR;Structure;getEntryBlock();TR;RegionStructure;0
TR;Structure;getKind();TR;RegionStructure;0
TR;Structure;getMaxNestingDepth(int32_t *,int32_t *);TR;RegionStructure;0
TR;Structure;hoistInvariantsOutOfNestedLoops(class TR_LocalTransparency *,class TR_BitVector **,_Bool,class TR_BlockStructure *,class TR_RegionStructure *,int32_t);TR;RegionStructure;0
TR;Structure;isExpressionTransparentIn(int32_t,class TR_LocalTransparency *);TR;RegionStructure;0
TR;Structure;markStructuresWithImproperRegions();TR;RegionStructure;0
TR;Structure;mergeInto(TR::Block *,TR::Block *);TR;RegionStructure;0
TR;Structure;removeEdge(class TR_Structure *,class TR_Structure *);TR;RegionStructure;0
TR;Structure;removeExternalEdgeTo(class TR_Structure *,int32_t);TR;RegionStructure;0
TR;Structure;removeMergedBlock(TR::Block *,TR::Block *);TR;RegionStructure;0
TR;Structure;renumber(int32_t);TR;RegionStructure;0
TR;Structure;renumberRecursively(int32_t,int32_t);TR;RegionStructure;0
TR;Structure;replacePart(class TR_Structure *,class TR_Structure *);TR;RegionStructure;0
TR;Structure;resetAnalysisInfo();TR;RegionStructure;0
TR;Structure;resetAnalyzedStatus();TR;RegionStructure;0
TR;Structure;resetVisitCounts(vcount_t);TR;RegionStructure;0
TR;CFGNode;asStructureSubGraphNode();TR;StructureSubGraphNode;0
OMR;IlGenRequest;IlGenRequest(TR::IlGeneratorMethodDetails &);TR;IlGenRequest;0
OMR;IlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;CompileIlGenRequest;0
OMR;IlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;CompileIlGenRequest;0
OMR;IlGenRequest;~IlGenRequest();TR;IlGenRequest;1
OMR;IlGeneratorMethodDetails;IlGeneratorMethodDetails();TestCompiler;IlGeneratorMethodDetails;0
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails();TR;IlGeneratorMethodDetails;0
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails(class TR_ResolvedMethod *);TR;IlGeneratorMethodDetails;0
TestCompiler;IlGeneratorMethodDetails;IlGeneratorMethodDetails(TR::ResolvedMethod *);TR;IlGeneratorMethodDetails;0
OMR;IlGeneratorMethodDetails;print(class TR_FrontEnd *,TR::FILE *);TestCompiler;IlGeneratorMethodDetails;0
OMR;IlGeneratorMethodDetails;self();OMR;IlGeneratorMethodDetails;0
OMR;IlGeneratorMethodDetails;~IlGeneratorMethodDetails();TestCompiler;IlGeneratorMethodDetails;0
TestCompiler;IlGeneratorMethodDetails;~IlGeneratorMethodDetails();TR;IlGeneratorMethodDetails;0
TR;IlGenRequest;allowIlGenOptimizations();TR;InliningIlGenRequest;0
OMR;IlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;InliningIlGenRequest;0
TR;InliningIlGenRequest;getIlGenerator(TR::ResolvedMethodSymbol *,class TR_FrontEnd *,TR::Compilation *,TR::SymbolReferenceTable *);TR;PartialInliningIlGenRequest;0
OMR;IlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;InliningIlGenRequest;0
TR;InliningIlGenRequest;print(class TR_FrontEnd *,TR::FILE *,const char *);TR;PartialInliningIlGenRequest;0
OMR;Optimization;optDetailString();TR;Inliner;0
OMR;Optimization;perform();TR;Inliner;0
TR::GlobalSet;Set;get(uint32_t);TR::GlobalSet;DenseSet;0
TR::GlobalSet;Set;print(TR::Compilation *);TR::GlobalSet;DenseSet;0
TR::GlobalSet;Set;set(uint32_t);TR::GlobalSet;DenseSet;0
TR::GlobalSet;Set;get(uint32_t);TR::GlobalSet;SparseSet;0
TR::GlobalSet;Set;print(TR::Compilation *);TR::GlobalSet;SparseSet;0
TR::GlobalSet;Set;set(uint32_t);TR::GlobalSet;SparseSet;0
OMR;TransformUtil;TransformUtil();TR;TransformUtil;0
TR;Link;jitPersistentAlloc(size_t);TR;DirectCallSite;0
TR;Link;jitPersistentFree(void *);TR;DirectCallSite;0
TR;Link;operator delete(void *,size_t);TR;DirectCallSite;0
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;Link;operator delete(void *,TR::Region &);TR;DirectCallSite;0
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;Link;operator delete[](void *,TR::Region &);TR;DirectCallSite;0
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;DirectCallSite;0
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;DirectCallSite;0
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;DirectCallSite;0
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0
TR;Link;operator new(size_t,TR::Region &);TR;DirectCallSite;0
TR;Link;operator new[](size_t,TR::Region &);TR;DirectCallSite;0
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;DirectCallSite;0
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;DirectCallSite;0
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;DirectCallSite;0
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DirectCallSite;0
TR;InlinerBase;inlineCallTargets(TR::ResolvedMethodSymbol *,class TR_CallStack *,class TR_InnerPreexistenceInfo *);TR;DumbInliner;0
TR;InlinerBase;inlineRecognizedMethod(TR::RecognizedMethod);TR;InlineCall;0
TR;Link;jitPersistentAlloc(size_t);TR;IndirectCallSite;0
TR;IndirectCallSite;jitPersistentAlloc(size_t);TR;FunctionPointerCallSite;0
TR;Link;jitPersistentFree(void *);TR;IndirectCallSite;0
TR;IndirectCallSite;jitPersistentFree(void *);TR;FunctionPointerCallSite;0
TR;Link;operator delete(void *,size_t);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete(void *,size_t);TR;FunctionPointerCallSite;0
TR;Link;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
TR;Link;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
TR;Link;operator delete(void *,TR::Region &);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete(void *,TR::Region &);TR;FunctionPointerCallSite;0
TR;Link;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0
TR;Link;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
TR;Link;operator delete[](void *,TR::Region &);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete[](void *,TR::Region &);TR;FunctionPointerCallSite;0
TR;Link;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
TR;Link;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0
TR;IndirectCallSite;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0
TR;Link;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
TR;Link;operator new(size_t,TR_ArenaAllocator *);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new(size_t,TR_ArenaAllocator *);TR;FunctionPointerCallSite;0
TR;Link;operator new(size_t,TR::Internal::PersistentNewType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new(size_t,TR::Internal::PersistentNewType);TR;FunctionPointerCallSite;0
TR;Link;operator new(size_t,class TR_PersistentMemory *);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new(size_t,class TR_PersistentMemory *);TR;FunctionPointerCallSite;0
TR;Link;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
TR;Link;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0
TR;Link;operator new(size_t,TR::Region &);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new(size_t,TR::Region &);TR;FunctionPointerCallSite;0
TR;Link;operator new[](size_t,TR::Region &);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new[](size_t,TR::Region &);TR;FunctionPointerCallSite;0
TR;Link;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
TR;Link;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;FunctionPointerCallSite;0
TR;Link;operator new[](size_t,TR::Internal::PersistentNewType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new[](size_t,TR::Internal::PersistentNewType);TR;FunctionPointerCallSite;0
TR;Link;operator new[](size_t,class TR_PersistentMemory *);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new[](size_t,class TR_PersistentMemory *);TR;FunctionPointerCallSite;0
TR;Link;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;IndirectCallSite;0
TR;IndirectCallSite;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;FunctionPointerCallSite;0
OMR;Optimization;optDetailString();TR;TrivialInliner;0
OMR;Optimization;perform();TR;TrivialInliner;0
OMR::X86;Linkage;Linkage(TR::CodeGenerator *);TR;Linkage;0
OMR;Linkage;createEpilogue(TR::Instruction *);OMR::X86;Linkage;0
OMR;Linkage;createPrologue(TR::Instruction *);OMR::X86;Linkage;0
OMR;Linkage;getRightToLeft();OMR::X86;Linkage;0
OMR;Linkage;mapSingleAutomatic(TR::AutomaticSymbol *,uint32_t &);OMR::X86;Linkage;0
OMR;Linkage;mapStack(TR::ResolvedMethodSymbol *);OMR::X86;Linkage;0
OMR;Linkage;numArgumentRegisters(enum TR_RegisterKinds);OMR::X86;Linkage;0
OMR;Linkage;setParameterLinkageRegisterIndex(TR::ResolvedMethodSymbol *);OMR::X86;Linkage;0
OMR;Linkage;~Linkage();OMR::X86;Linkage;1
OMR::X86;Linkage;~Linkage();TR;Linkage;1
OMR;Optimization;optDetailString();TR;LoadExtensions;0
OMR;Optimization;perform();TR;LoadExtensions;0
OMR;RegisterPair;RegisterPair(TR::Register *,TR::Register *);TR;RegisterPair;0
OMR;RegisterPair;RegisterPair(enum TR_RegisterKinds);TR;RegisterPair;0
OMR;RegisterPair;RegisterPair();TR;RegisterPair;0
OMR;Register;block();OMR;RegisterPair;0
OMR;Register;getHighOrder();OMR;RegisterPair;0
OMR;Register;getLowOrder();OMR;RegisterPair;0
OMR;Register;getRegister();OMR;RegisterPair;0
OMR;Register;getRegisterPair();OMR;RegisterPair;0
OMR;Register;unblock();OMR;RegisterPair;0
OMR;RegisterPair;~RegisterPair();TR;RegisterPair;1
TR;ValueNumberInfo;allocateValueNumber(TR::Node *);TR;HashValueNumberInfo;0
TR;ValueNumberInfo;initializeNode(TR::Node *,int32_t &);TR;HashValueNumberInfo;0
OMR;IL;IL();TR;IL;1
TR;SegmentAllocator;allocationLimit();OMR;SystemSegmentProvider;0
TR;SegmentProvider;bytesAllocated();OMR;SystemSegmentProvider;0
TR;SegmentAllocator;regionBytesAllocated();OMR;SystemSegmentProvider;0
TR;SegmentProvider;release(TR::MemorySegment &);OMR;SystemSegmentProvider;0
TR;SegmentProvider;request(size_t);OMR;SystemSegmentProvider;0
TR;SegmentAllocator;setAllocationLimit(size_t);OMR;SystemSegmentProvider;0
TR;SegmentAllocator;systemBytesAllocated();OMR;SystemSegmentProvider;0
TR;CallStackIterator;printStackBacktrace(TR::Compilation *);TR;LinuxCallStackIterator;0
__cxxabiv1;__pbase_type_info;__pointer_catch(const class __cxxabiv1::__pbase_type_info *,void **,unsigned int);__cxxabiv1;__pointer_to_member_type_info;0
__cxxabiv1;__pbase_type_info;__pointer_catch(const class __cxxabiv1::__pbase_type_info *,void **,unsigned int);__cxxabiv1;__pointer_type_info;0
__cxxabiv1;__class_type_info;__do_dyncast(ptrdiff_t,enum __cxxabiv1::__class_type_info::__sub_kind,const class __cxxabiv1::__class_type_info *,const void *,const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__dyncast_result &);__cxxabiv1;__si_class_type_info;0
__cxxabiv1;__class_type_info;__do_find_public_src(ptrdiff_t,const void *,const class __cxxabiv1::__class_type_info *,const void *);__cxxabiv1;__si_class_type_info;0
__cxxabiv1;__class_type_info;__do_upcast(const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__upcast_result &__restrict);__cxxabiv1;__si_class_type_info;0
__cxxabiv1;__class_type_info;__do_dyncast(ptrdiff_t,enum __cxxabiv1::__class_type_info::__sub_kind,const class __cxxabiv1::__class_type_info *,const void *,const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__dyncast_result &);__cxxabiv1;__vmi_class_type_info;0
__cxxabiv1;__class_type_info;__do_find_public_src(ptrdiff_t,const void *,const class __cxxabiv1::__class_type_info *,const void *);__cxxabiv1;__vmi_class_type_info;0
__cxxabiv1;__class_type_info;__do_upcast(const class __cxxabiv1::__class_type_info *,const void *,struct __cxxabiv1::__class_type_info::__upcast_result &__restrict);__cxxabiv1;__vmi_class_type_info;0
OMR;Optimization;optDetailString();TR;AsyncCheckInsertion;0
OMR;Optimization;perform();TR;AsyncCheckInsertion;0
OMR;Optimization;shouldPerform();TR;AsyncCheckInsertion;0
TR;BackwardDFSetAnalysis;TR_BackwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BackwardDFSetAnalysis;0
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;GlobalAnticipatability;0
TR;BackwardDFSetAnalysis;analyzeNodeIfSuccessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &);TR;BackwardDFSetAnalysis;0
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;GlobalAnticipatability;0
TR;DataFlowAnalysis;asGlobalAnticipatability();TR;GlobalAnticipatability;0
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BackwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;compose(Container *,Container *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;compose(Container *,Container *);TR;BackwardIntersectionDFSetAnalysis;0
TR;DataFlowAnalysis;getKind();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;getKind();TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;getKind();TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;getKind();TR;BackwardIntersectionDFSetAnalysis;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;GlobalAnticipatability;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;GlobalAnticipatability;0
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardIntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeDFSetAnalysis();TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &,class TR_BitVector &,_Bool);TR;BackwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BackwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BackwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeInfo(Container *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeInfo(Container *);TR;BackwardIntersectionDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardIntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardIntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardIntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;GlobalAnticipatability;0
TR;BackwardDFSetAnalysis;traceBBVA();TR;BackwardDFSetAnalysis;0
TR;BackwardDFSetAnalysis;~TR_BackwardDFSetAnalysis();TR;BackwardDFSetAnalysis;1
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;Liveness;0
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Liveness;0
TR;DataFlowAnalysis;asLiveness();TR;Liveness;0
TR;BackwardDFSetAnalysis;compose(Container *,Container *);TR;BackwardUnionDFSetAnalysis;0
TR;BackwardDFSetAnalysis;getKind();TR;BackwardUnionDFSetAnalysis;0
TR;BackwardUnionDFSetAnalysis;getKind();TR;Liveness;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Liveness;0
TR;BackwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardUnionDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;Liveness;0
TR;BackwardDFSetAnalysis;initializeInfo(Container *);TR;BackwardUnionDFSetAnalysis;0
TR;BackwardDFSetAnalysis;initializeOutSetInfo();TR;BackwardUnionDFSetAnalysis;0
TR;BackwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;BackwardUnionDFSetAnalysis;0
TR;BackwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;BackwardUnionDFSetAnalysis;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Liveness;0
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;Liveness;0
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ForwardDFSetAnalysis;0
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Delayedness;0
TR;DataFlowAnalysis;asDelayedness();TR;Delayedness;0
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;compose(Container *,Container *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;compose(Container *,Container *);TR;IntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;getKind();TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;getKind();TR;IntersectionDFSetAnalysis;0
TR;IntersectionDFSetAnalysis;getKind();TR;Delayedness;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Delayedness;0
TR;BasicDFSetAnalysis;initialize();TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;IntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;IntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeInfo(Container *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeInfo(Container *);TR;IntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseCompose(Container *,Container *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;IntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseInitializeInfo(Container *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;IntersectionDFSetAnalysis;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Delayedness;0
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Earliestness;0
TR;DataFlowAnalysis;asEarliestness();TR;Earliestness;0
TR;ForwardDFSetAnalysis;compose(Container *,Container *);TR;UnionDFSetAnalysis;0
TR;ForwardDFSetAnalysis;getKind();TR;UnionDFSetAnalysis;0
TR;UnionDFSetAnalysis;getKind();TR;Earliestness;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Earliestness;0
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;UnionDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;UnionDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeInfo(Container *);TR;UnionDFSetAnalysis;0
TR;ForwardDFSetAnalysis;inverseCompose(Container *,Container *);TR;UnionDFSetAnalysis;0
TR;ForwardDFSetAnalysis;inverseInitializeInfo(Container *);TR;UnionDFSetAnalysis;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Earliestness;0
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;FlowSensitiveEscapeAnalysis;0
TR;DataFlowAnalysis;asFlowSensitiveEscapeAnalysis();TR;FlowSensitiveEscapeAnalysis;0
TR;IntersectionDFSetAnalysis;getKind();TR;FlowSensitiveEscapeAnalysis;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;FlowSensitiveEscapeAnalysis;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;FlowSensitiveEscapeAnalysis;0
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;FlowSensitiveEscapeAnalysis;0
TR;DataFlowAnalysis;asIsolatedness();TR;Isolatedness;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Isolatedness;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Isolatedness;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;Isolatedness;0
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;Latestness;0
TR;DataFlowAnalysis;asLatestness();TR;Latestness;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;Latestness;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;Latestness;0
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;LiveOnAllPaths;0
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;LiveOnAllPaths;0
TR;DataFlowAnalysis;asLiveOnAllPaths();TR;LiveOnAllPaths;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;LiveOnAllPaths;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;LiveOnAllPaths;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;LiveOnAllPaths;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;LiveOnAllPaths;0
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;LiveOnAllPaths;0
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ReachingBlocks;0
TR;UnionDFSetAnalysis;getKind();TR;ReachingBlocks;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;ReachingBlocks;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;ReachingBlocks;0
TR;DataFlowAnalysis;perform();TR;ReachingBlocks;0
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;ReachingBlocks;0
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ReachingDefinitions;0
TR;UnionDFSetAnalysis;getKind();TR;ReachingDefinitions;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;ReachingDefinitions;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;ReachingDefinitions;0
TR;DataFlowAnalysis;perform();TR;ReachingDefinitions;0
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;ReachingDefinitions;0
TR;BackwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;RegisterAnticipatability;0
TR;BackwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;RegisterAnticipatability;0
TR;DataFlowAnalysis;asRegisterAnticipatability();TR;RegisterAnticipatability;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;RegisterAnticipatability;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RegisterAnticipatability;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RegisterAnticipatability;0
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;RegisterAvailability;0
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;RegisterAvailability;0
TR;DataFlowAnalysis;asRegisterAvailability();TR;RegisterAvailability;0
TR;IntersectionDFSetAnalysis;getKind();TR;RegisterAvailability;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RegisterAvailability;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RegisterAvailability;0
TR;BackwardIntersectionDFSetAnalysis;getKind();TR;BackwardIntersectionDFSetAnalysis;0
TR;BackwardIntersectionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardIntersectionDFSetAnalysis;0
TR;BackwardIntersectionDFSetAnalysis;initializeOutSetInfo();TR;BackwardIntersectionDFSetAnalysis;0
TR;BackwardUnionDFSetAnalysis;TR_BackwardUnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BackwardUnionDFSetAnalysis;0
TR;BackwardUnionDFSetAnalysis;getKind();TR;BackwardUnionDFSetAnalysis;0
TR;BackwardUnionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;BackwardUnionDFSetAnalysis;0
TR;BackwardUnionDFSetAnalysis;initializeOutSetInfo();TR;BackwardUnionDFSetAnalysis;0
TR;BackwardUnionDFSetAnalysis;~TR_BackwardUnionDFSetAnalysis();TR;BackwardUnionDFSetAnalysis;1
TR;BasicDFSetAnalysis;TR_BasicDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;createAnalysisInfo();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;doAnalysis(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;getAnalysisInfo(class TR_Structure *);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;getKind();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initialize();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeBasicDFSetAnalysis();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeBlockInfo(_Bool);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeDFSetAnalysis();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForStructure(class TR_Structure *);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoForStructures();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfoPropertyForStructure(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;performAnalysis(class TR_Structure *,_Bool);TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;supportsGenAndKillSetsForStructures();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;traceBVA();TR;BasicDFSetAnalysis;0
TR;BasicDFSetAnalysis;~TR_BasicDFSetAnalysis();TR;BasicDFSetAnalysis;1
TR;ForwardDFSetAnalysis;TR_ForwardDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;analyzeBlockZeroStructure(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;analyzeNodeIfPredecessorsAnalyzed(class TR_RegionStructure *,class TR_BitVector &);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;analyzeTreeTopsInBlockStructure(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;canGenAndKillForStructure(class TR_Structure *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;IntersectionBitVectorAnalysis;0
TR;BasicDFSetAnalysis;compose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;getKind();TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initialize();TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeDFSetAnalysis();TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfo(class TR_RegionStructure *,class TR_BitVector &);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfoForBlock(class TR_BlockStructure *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeGenAndKillSetInfoForRegion(class TR_RegionStructure *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;initializeInSetInfo();TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeInfo(class TR_BitVector *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;initializeInfo(class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseCompose(class TR_BitVector *,class TR_BitVector *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseCompose(class TR_SingleBitContainer *,class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseInitializeInfo(class TR_SingleBitContainer *);TR;ForwardDFSetAnalysis;0
TR;BasicDFSetAnalysis;inverseInitializeInfo(class TR_BitVector *);TR;ForwardDFSetAnalysis;0
TR;ForwardDFSetAnalysis;~TR_ForwardDFSetAnalysis();TR;ForwardDFSetAnalysis;1
TR;ForwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;Earliestness;0
TR;ForwardDFSetAnalysis;analyzeNode(TR::Node *,vcount_t,class TR_BlockStructure *,class TR_BitVector *);TR;RegisterAvailability;0
OMR;Optimization;optDetailString();TR;CatchBlockRemover;0
OMR;Optimization;perform();TR;CatchBlockRemover;0
OMR;Optimization;optDetailString();TR;CFGSimplifier;0
OMR;Optimization;perform();TR;CFGSimplifier;0
OMR;Optimization;optDetailString();TR;CompactLocals;0
OMR;Optimization;perform();TR;CompactLocals;0
OMR;Optimization;optDetailString();TR;CopyPropagation;0
OMR;Optimization;perform();TR;CopyPropagation;0
TR;IsolatedStoreElimination;create(TR::OptimizationManager *);TR;DeadStoreElimination;0
OMR;Optimization;optDetailString();TR;IsolatedStoreElimination;0
TR;IsolatedStoreElimination;optDetailString();TR;DeadStoreElimination;0
OMR;Optimization;perform();TR;IsolatedStoreElimination;0
OMR;Optimization;optDetailString();TR;DeadTreesElimination;0
OMR;Optimization;perform();TR;DeadTreesElimination;0
OMR;Optimization;performOnBlock(TR::Block *);TR;DeadTreesElimination;0
OMR;Optimization;prePerformOnBlocks();TR;DeadTreesElimination;0
OMR;Optimization;optDetailString();TR;ExpressionsSimplification;0
OMR;Optimization;perform();TR;ExpressionsSimplification;0
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;FieldPrivatizer;0
OMR;Optimization;optDetailString();TR;FieldPrivatizer;0
OMR;Optimization;perform();TR;LoopTransformer;0
TR;LoopTransformer;perform();TR;FieldPrivatizer;0
TR;LoopTransformer;asLoopCanonicalizer();TR;LoopCanonicalizer;0
TR;LoopCanonicalizer;create(TR::OptimizationManager *);TR;RedundantInductionVarElimination;0
TR;LoopTransformer;examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);TR;LoopCanonicalizer;0
OMR;Optimization;optDetailString();TR;LoopCanonicalizer;0
TR;LoopCanonicalizer;optDetailString();TR;RedundantInductionVarElimination;0
TR;LoopTransformer;perform();TR;LoopCanonicalizer;0
TR;LoopCanonicalizer;perform();TR;RedundantInductionVarElimination;0
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopInverter;0
OMR;Optimization;optDetailString();TR;LoopInverter;0
TR;LoopTransformer;perform();TR;LoopInverter;0
OMR;Optimization;optDetailString();TR;InductionVariableAnalysis;0
OMR;Optimization;perform();TR;InductionVariableAnalysis;0
TR;BasicInductionVariable;getExitValue();TR;DerivedInductionVariable;0
TR;BasicInductionVariable;getIterationCount();TR;DerivedInductionVariable;0
TR;BasicInductionVariable;jitPersistentAlloc(size_t);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;jitPersistentFree(void *);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,size_t);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,TR::Region &);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,TR::Region &);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,TR_ArenaAllocator *);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_PersistentMemory *);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,TR::Region &);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,TR::Internal::PersistentNewType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,TR::Region &);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_PersistentMemory *);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,TR::Internal::PersistentNewType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;DerivedInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;DerivedInductionVariable;0
OMR;Optimization;optDetailString();TR;GeneralLoopUnroller;0
TR;LoopTransformer;perform();TR;GeneralLoopUnroller;0
OMR;Optimization;optDetailString();TR;IVTypeTransformer;0
TR;LoopTransformer;perform();TR;IVTypeTransformer;0
TR;LoopTransformer;checkIfIncrementInDifferentExtendedBlock(TR::Block *,int32_t);TR;LoopStrider;0
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopStrider;0
TR;LoopTransformer;examineTreeForInductionVariableUse(TR::Block *,TR::Node *,int32_t,TR::Node *,vcount_t,TR::SymbolReference **);TR;LoopStrider;0
TR;LoopTransformer;isStoreInRequiredForm(int32_t,class TR_Structure *);TR;LoopStrider;0
OMR;Optimization;optDetailString();TR;LoopStrider;0
TR;LoopTransformer;perform();TR;LoopStrider;0
TR;LoopTransformer;updateLoadUsedInLoopIncrement(TR::Node *,int32_t);TR;LoopStrider;0
TR;LoopTransformer;updateStoreInfo(int32_t,TR::TreeTop *);TR;LoopStrider;0
TR;BasicInductionVariable;getExitValue();TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;getIterationCount();TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;jitPersistentAlloc(size_t);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;jitPersistentFree(void *);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,size_t);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete(void *,TR::Region &);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,TR::Region &);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,TR_ArenaAllocator *);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_PersistentMemory *);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,TR::Region &);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,TR::Internal::PersistentNewType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,TR::Region &);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_PersistentMemory *);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,TR::Internal::PersistentNewType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;PrimaryInductionVariable;0
TR;BasicInductionVariable;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;PrimaryInductionVariable;0
OMR;Optimization;optDetailString();TR;GlobalRegisterAllocator;0
OMR;Optimization;perform();TR;GlobalRegisterAllocator;0
OMR;Optimization;optDetailString();TR;LiveRangeSplitter;0
OMR;Optimization;perform();TR;LiveRangeSplitter;0
;SuccessorIterator;getFirstSuccessor();;multipleJumpSuccessorIterator;0
;SuccessorIterator;getNextSuccessor();;multipleJumpSuccessorIterator;0
;SuccessorIterator;asSwitchSuccessor();;switchSuccessorIterator;0
;SuccessorIterator;getFirstSuccessor();;switchSuccessorIterator;0
;SuccessorIterator;getNextSuccessor();;switchSuccessorIterator;0
TR;IntersectionDFSetAnalysis;compose(class TR_BitVector *,class TR_BitVector *);TR;IntersectionBitVectorAnalysis;0
TR;IntersectionDFSetAnalysis;getKind();TR;IntersectionDFSetAnalysis;0
TR;IntersectionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;IntersectionDFSetAnalysis;0
TR;IntersectionDFSetAnalysis;initializeInSetInfo();TR;IntersectionDFSetAnalysis;0
OMR;Optimization;optDetailString();TR;LocalLiveRangeReduction;0
OMR;Optimization;perform();TR;LocalLiveRangeReduction;0
OMR;Optimization;postPerformOnBlocks();TR;LocalLiveRangeReduction;0
OMR;Optimization;prePerformOnBlocks();TR;LocalLiveRangeReduction;0
OMR;Optimization;optDetailString();TR;LocalReordering;0
OMR;Optimization;perform();TR;LocalReordering;0
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalReordering;0
OMR;Optimization;postPerformOnBlocks();TR;LocalReordering;0
OMR;Optimization;prePerformOnBlocks();TR;LocalReordering;0
TR;AddressTree;processBaseAndIndex(TR::Node *);TR;LRAddressTree;0
TR;LoopTransformer;asLoopReducer();TR;LoopReducer;0
OMR;Optimization;optDetailString();TR;LoopReducer;0
TR;LoopTransformer;perform();TR;LoopReducer;0
OMR;Optimization;optDetailString();TR;LoopReplicator;0
TR;LoopTransformer;perform();TR;LoopReplicator;0
TR;LoopTransformer;asLoopVersioner();TR;LoopVersioner;0
TR;LoopVersioner;create(TR::OptimizationManager *);TR;LoopSpecializer;0
TR;LoopTransformer;detectCanonicalizedPredictableLoops(class TR_Structure *,class TR_BitVector **,int32_t);TR;LoopVersioner;0
TR;LoopTransformer;isStoreInRequiredForm(int32_t,class TR_Structure *);TR;LoopVersioner;0
OMR;Optimization;optDetailString();TR;LoopVersioner;0
TR;LoopVersioner;optDetailString();TR;LoopSpecializer;0
TR;LoopTransformer;perform();TR;LoopVersioner;0
OMR;LocalCSE;LocalCSE(TR::OptimizationManager *);TR;LocalCSE;0
OMR;Optimization;optDetailString();OMR;LocalCSE;0
OMR;Optimization;perform();OMR;LocalCSE;0
OMR;Optimization;performOnBlock(TR::Block *);OMR;LocalCSE;0
OMR;Optimization;postPerformOnBlocks();OMR;LocalCSE;0
OMR;Optimization;prePerformOnBlocks();OMR;LocalCSE;0
OMR;LocalCSE;~LocalCSE();TR;LocalCSE;1
OMR;Optimization;optDetailString();TR;LocalDeadStoreElimination;0
OMR;Optimization;perform();TR;LocalDeadStoreElimination;0
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalDeadStoreElimination;0
OMR;Optimization;postPerformOnBlocks();TR;LocalDeadStoreElimination;0
OMR;Optimization;prePerformOnBlocks();TR;LocalDeadStoreElimination;0
OMR;Optimization;self();TR;LocalDeadStoreElimination;0
OMR;Optimization;optDetailString();TR;ArraysetStoreElimination;0
OMR;Optimization;perform();TR;ArraysetStoreElimination;0
OMR;Optimization;performOnBlock(TR::Block *);TR;ArraysetStoreElimination;0
OMR;Optimization;optDetailString();TR;CleanseTrees;0
OMR;Optimization;perform();TR;CleanseTrees;0
OMR;Optimization;performOnBlock(TR::Block *);TR;CleanseTrees;0
OMR;Optimization;prePerformOnBlocks();TR;CleanseTrees;0
OMR;Optimization;optDetailString();TR;BlockShuffling;0
OMR;Optimization;perform();TR;BlockShuffling;0
OMR;Optimization;optDetailString();TR;BlockSplitter;0
OMR;Optimization;perform();TR;BlockSplitter;0
TR;Array;operator[](uint32_t);TR;Array;0
OMR;Optimization;optDetailString();TR;CheckcastAndProfiledGuardCoalescer;0
OMR;Optimization;perform();TR;CheckcastAndProfiledGuardCoalescer;0
TR;ColdBlockMarker;create(TR::OptimizationManager *);TR;ColdBlockOutlining;0
OMR;Optimization;optDetailString();TR;ColdBlockMarker;0
TR;ColdBlockMarker;optDetailString();TR;ColdBlockOutlining;0
OMR;Optimization;perform();TR;ColdBlockMarker;0
TR;ColdBlockMarker;perform();TR;ColdBlockOutlining;0
OMR;Optimization;optDetailString();TR;CompactNullChecks;0
OMR;Optimization;perform();TR;CompactNullChecks;0
OMR;Optimization;performOnBlock(TR::Block *);TR;CompactNullChecks;0
OMR;Optimization;optDetailString();TR;EliminateRedundantGotos;0
OMR;Optimization;perform();TR;EliminateRedundantGotos;0
OMR;Optimization;performOnBlock(TR::Block *);TR;EliminateRedundantGotos;0
OMR;Optimization;optDetailString();TR;ExtendBasicBlocks;0
OMR;Optimization;perform();TR;ExtendBasicBlocks;0
OMR;Optimization;optDetailString();TR;HoistBlocks;0
OMR;Optimization;perform();TR;HoistBlocks;0
OMR;Optimization;performOnBlock(TR::Block *);TR;HoistBlocks;0
OMR;Optimization;optDetailString();TR;InvariantArgumentPreexistence;0
OMR;Optimization;perform();TR;InvariantArgumentPreexistence;0
TR;Rematerialization;create(TR::OptimizationManager *);TR;LongRegAllocation;0
OMR;Optimization;optDetailString();TR;Rematerialization;0
TR;Rematerialization;optDetailString();TR;LongRegAllocation;0
OMR;Optimization;perform();TR;Rematerialization;0
OMR;Optimization;performOnBlock(TR::Block *);TR;Rematerialization;0
OMR;Optimization;postPerformOnBlocks();TR;LongRegAllocation;0
OMR;Optimization;prePerformOnBlocks();TR;Rematerialization;0
OMR;Optimization;optDetailString();TR;OrderBlocks;0
OMR;Optimization;perform();TR;OrderBlocks;0
OMR;Optimization;shouldPerform();TR;OrderBlocks;0
OMR;Optimization;optDetailString();TR;PeepHoleBasicBlocks;0
OMR;Optimization;perform();TR;PeepHoleBasicBlocks;0
OMR;Optimization;optDetailString();TR;ProfiledNodeVersioning;0
OMR;Optimization;perform();TR;ProfiledNodeVersioning;0
OMR;Optimization;optDetailString();TR;SimplifyAnds;0
OMR;Optimization;perform();TR;SimplifyAnds;0
OMR;Optimization;performOnBlock(TR::Block *);TR;SimplifyAnds;0
OMR;Optimization;optDetailString();TR;TrivialBlockExtension;0
OMR;Optimization;perform();TR;TrivialBlockExtension;0
OMR;Optimization;performOnBlock(TR::Block *);TR;TrivialBlockExtension;0
OMR;Optimization;optDetailString();TR;TrivialDeadTreeRemoval;0
OMR;Optimization;perform();TR;TrivialDeadTreeRemoval;0
OMR;Optimization;performOnBlock(TR::Block *);TR;TrivialDeadTreeRemoval;0
OMR;Simplifier;Simplifier(TR::OptimizationManager *);TR;Simplifier;0
OMR;Optimization;optDetailString();OMR;Simplifier;0
OMR;Optimization;perform();OMR;Simplifier;0
OMR;Optimization;performOnBlock(TR::Block *);OMR;Simplifier;0
OMR;Optimization;postPerformOnBlocks();OMR;Simplifier;0
OMR;Optimization;prePerformOnBlocks();OMR;Simplifier;0
OMR;Optimization;prepareToReplaceNode(TR::Node *);OMR;Simplifier;0
OMR;Simplifier;~Simplifier();TR;Simplifier;1
;ListBase;jitPersistentAlloc(size_t);;List;0
;List;jitPersistentAlloc(size_t);TR;OrderedBlockList;0
;ListBase;jitPersistentFree(void *);;List;0
;List;jitPersistentFree(void *);TR;OrderedBlockList;0
;ListBase;operator delete(void *,TR::Region &);;List;0
;List;operator delete(void *,TR::Region &);TR;OrderedBlockList;0
;ListBase;operator delete(void *,size_t);;List;0
;List;operator delete(void *,size_t);TR;OrderedBlockList;0
;ListBase;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
;ListBase;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
;ListBase;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);;List;0
;List;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0
;ListBase;operator delete[](void *,TR::Region &);;List;0
;List;operator delete[](void *,TR::Region &);TR;OrderedBlockList;0
;ListBase;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);;List;0
;List;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0
;ListBase;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
;ListBase;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
;ListBase;operator new(size_t,class TR_PersistentMemory *);;List;0
;List;operator new(size_t,class TR_PersistentMemory *);TR;OrderedBlockList;0
;ListBase;operator new(size_t,TR::Internal::PersistentNewType);;List;0
;List;operator new(size_t,TR::Internal::PersistentNewType);TR;OrderedBlockList;0
;ListBase;operator new(size_t,TR::Region &);;List;0
;List;operator new(size_t,TR::Region &);TR;OrderedBlockList;0
;ListBase;operator new(size_t,TR_ArenaAllocator *);;List;0
;List;operator new(size_t,TR_ArenaAllocator *);TR;OrderedBlockList;0
;ListBase;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
;ListBase;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
;ListBase;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);;List;0
;List;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0
;ListBase;operator new[](size_t,TR::Region &);;List;0
;List;operator new[](size_t,TR::Region &);TR;OrderedBlockList;0
;ListBase;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
;ListBase;operator new[](size_t,TR::Internal::PersistentNewType);;List;0
;List;operator new[](size_t,TR::Internal::PersistentNewType);TR;OrderedBlockList;0
;ListBase;operator new[](size_t,class TR_PersistentMemory *);;List;0
;List;operator new[](size_t,class TR_PersistentMemory *);TR;OrderedBlockList;0
;ListBase;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);;List;0
;List;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TR;OrderedBlockList;0
;ListBase;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);;List;0
;List;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TR;OrderedBlockList;0
TR;HedgeTreeHandler;allocate(int32_t);OMR::ValuePropagation;ValueConstraintHandler;0
TR;HedgeTreeHandler;comp();OMR::ValuePropagation;ValueConstraintHandler;0
OMR;Optimization;optDetailString();TR;ArraycopyTransformation;0
OMR;Optimization;perform();TR;ArraycopyTransformation;0
OMR;ValuePropagation;ValuePropagation(TR::OptimizationManager *);TR;ValuePropagation;0
OMR;Optimization;optDetailString();TR;GlobalValuePropagation;0
OMR;Optimization;perform();TR;GlobalValuePropagation;0
OMR;ValuePropagation;~ValuePropagation();TR;ValuePropagation;1
OMR;Optimization;optDetailString();TR;LocalValuePropagation;0
OMR;Optimization;perform();TR;LocalValuePropagation;0
OMR;Optimization;performOnBlock(TR::Block *);TR;LocalValuePropagation;0
OMR;Optimization;postPerformOnBlocks();TR;LocalValuePropagation;0
OMR;Optimization;prePerformOnBlocks();TR;LocalValuePropagation;0
OMR;Optimizer;~Optimizer();TestCompiler;Optimizer;1
OMR;Optimization;optDetailString();TR;RegDepCopyRemoval;0
OMR;Optimization;perform();TR;RegDepCopyRemoval;0
TR;DataFlowAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;ExceptionCheckMotion;0
TR;DataFlowAnalysis;analyzeRegionStructure(class TR_RegionStructure *,_Bool);TR;ExceptionCheckMotion;0
TR;DataFlowAnalysis;asExceptionCheckMotion();TR;ExceptionCheckMotion;0
TR;DataFlowAnalysis;getKind();TR;ExceptionCheckMotion;0
TR;DataFlowAnalysis;perform();TR;ExceptionCheckMotion;0
TR;DataFlowAnalysis;trace();TR;ExceptionCheckMotion;0
OMR;Optimization;optDetailString();TR;GeneralSinkStores;0
OMR;Optimization;perform();TR;GeneralSinkStores;0
TR;SinkStores;sinkStorePlacement(class TR_MovableStore *,_Bool);TR;GeneralSinkStores;0
TR;SinkStores;storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);TR;GeneralSinkStores;0
OMR;Optimization;optDetailString();TR;IndexExprManipulator;0
OMR;Optimization;perform();TR;IndexExprManipulator;0
OMR;Optimization;optDetailString();TR;InnerPreexistence;0
OMR;Optimization;perform();TR;InnerPreexistence;0
OMR;Optimization;optDetailString();TR;OSRDefAnalysis;0
OMR;Optimization;perform();TR;OSRDefAnalysis;0
TR;UseDefInfo;performAnalysis(class TR_UseDefInfo::AuxiliaryData &);TR;OSRDefInfo;0
TR;UseDefInfo;processReachingDefinition(void *,class TR_UseDefInfo::AuxiliaryData &);TR;OSRDefInfo;0
OMR;Optimization;optDetailString();TR;OSRExceptionEdgeRemoval;0
OMR;Optimization;perform();TR;OSRExceptionEdgeRemoval;0
OMR;Optimization;optDetailString();TR;OSRLiveRangeAnalysis;0
OMR;Optimization;perform();TR;OSRLiveRangeAnalysis;0
OMR;Optimization;optDetailString();TR;PartialRedundancy;0
OMR;Optimization;perform();TR;PartialRedundancy;0
OMR;Optimization;optDetailString();TR;PrefetchInsertion;0
TR;LoopTransformer;perform();TR;PrefetchInsertion;0
OMR;Optimization;optDetailString();TR;RedundantAsyncCheckRemoval;0
OMR;Optimization;perform();TR;RedundantAsyncCheckRemoval;0
OMR;Optimization;shouldPerform();TR;RedundantAsyncCheckRemoval;0
TR;ForwardDFSetAnalysis;analyzeBlockStructure(class TR_BlockStructure *,_Bool);TR;RedundantExpressionAdjustment;0
TR;DataFlowAnalysis;asRedundantExpressionAdjustment();TR;RedundantExpressionAdjustment;0
TR;IntersectionDFSetAnalysis;getKind();TR;RedundantExpressionAdjustment;0
TR;BasicDFSetAnalysis;getNumberOfBits();TR;RedundantExpressionAdjustment;0
TR;BasicDFSetAnalysis;initializeGenAndKillSetInfo();TR;RedundantExpressionAdjustment;0
TR;BasicDFSetAnalysis;postInitializationProcessing();TR;RedundantExpressionAdjustment;0
TR;BasicDFSetAnalysis;supportsGenAndKillSets();TR;RedundantExpressionAdjustment;0
TR;BasicDFSetAnalysis;supportsGenAndKillSetsForStructures();TR;RedundantExpressionAdjustment;0
OMR;Optimization;optDetailString();TR;ShrinkWrap;0
OMR;Optimization;perform();TR;ShrinkWrap;0
OMR;Optimization;prePerformOnBlocks();TR;ShrinkWrap;0
OMR;Optimization;optDetailString();TR;StripMiner;0
TR;LoopTransformer;perform();TR;StripMiner;0
OMR;Optimization;shouldPerform();TR;StripMiner;0
OMR;Optimization;optDetailString();TR;TrivialSinkStores;0
OMR;Optimization;perform();TR;TrivialSinkStores;0
TR;SinkStores;sinkStorePlacement(class TR_MovableStore *,_Bool);TR;TrivialSinkStores;0
TR;SinkStores;storeIsSinkingCandidate(TR::Block *,TR::Node *,int32_t,_Bool,uint32_t &,int32_t &,_Bool &,vcount_t &,vcount_t &);TR;TrivialSinkStores;0
OMR;Optimization;optDetailString();TR;VirtualGuardHeadMerger;0
OMR;Optimization;perform();TR;VirtualGuardHeadMerger;0
OMR;Optimization;optDetailString();TR;VirtualGuardTailSplitter;0
OMR;Optimization;perform();TR;VirtualGuardTailSplitter;0
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanReachGivenBlocks;0
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;BackwardReachability;0
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanBeReachedFromCatchBlock;0
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;ForwardReachability;0
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanBeReachedWithoutExceptionEdges;0
TR;ReachabilityAnalysis;propagateInputs(blocknum_t,int32_t,blocknum_t *,blocknum_t *,class TR_BitVector *);TR;ForwardReachabilityWithoutExceptionEdges;0
TR;ReachabilityAnalysis;isOrigin(TR::Block *);TR;CanReachNonColdBlocks;0
TR;UnionDFSetAnalysis;TR_UnionDFSetAnalysis(TR::Compilation *,TR::CFG *,TR::Optimizer *,_Bool);TR;UnionDFSetAnalysis;0
TR;UnionDFSetAnalysis;getKind();TR;UnionDFSetAnalysis;0
TR;UnionDFSetAnalysis;initializeCurrentGenKillSetInfo();TR;UnionDFSetAnalysis;0
TR;UnionDFSetAnalysis;initializeInSetInfo();TR;UnionDFSetAnalysis;0
TR;UnionDFSetAnalysis;~TR_UnionDFSetAnalysis();TR;UnionDFSetAnalysis;1
TR;Stats;report(FILE *);TR;StatsHisto;0
TR;Stats;reset();TR;StatsHisto;0
TR;Stats;update(double);TR;StatsHisto;0
TR;Stats;mean();TR;StatsInterval;0
TR;Stats;report(FILE *);TR;StatsInterval;0
TR;Stats;stddev();TR;StatsInterval;0
OMR;AheadOfTimeCompile;AheadOfTimeCompile(uint32_t *,TR::Compilation *);TR;AheadOfTimeCompile;0
OMR;AheadOfTimeCompile;~AheadOfTimeCompile();TR;AheadOfTimeCompile;1
TR;Relocation;addAOTRelocation(TR::CodeGenerator *);TR;ExternalRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;ExternalRelocation;0
TR;Relocation;getUpdateLocation();TR;BeforeBinaryEncodingExternalRelocation;0
TR;Relocation;trace(TR::Compilation *);TR;ExternalRelocation;0
TR;ExternalRelocation;apply(TR::CodeGenerator *);TR;ExternalOrderedPair32BitRelocation;0
TR;ExternalRelocation;collectModifier();TR;ExternalOrderedPair32BitRelocation;0
TR;ExternalRelocation;getNarrowSize();TR;ExternalOrderedPair32BitRelocation;0
TR;ExternalRelocation;getWideSize();TR;ExternalOrderedPair32BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;InstructionAbsoluteRelocation;0
TR;Relocation;isAOTRelocation();TR;InstructionAbsoluteRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelAbsoluteRelocation;0
TR;Relocation;isAOTRelocation();TR;LabelRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative12BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative16BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative24BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative32BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelRelative8BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LabelTable32BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative16BitRelocation;0
TR;Relocation;isAOTRelocation();TR;LoadLabelRelative16BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative32BitRelocation;0
TR;Relocation;isAOTRelocation();TR;LoadLabelRelative32BitRelocation;0
TR;Relocation;apply(TR::CodeGenerator *);TR;LoadLabelRelative64BitRelocation;0
OMR;RegisterDependencyConditions;RegisterDependencyConditions();OMR::X86;RegisterDependencyConditions;0
OMR::X86;RegisterDependencyConditions;RegisterDependencyConditions();TR;RegisterDependencyConditions;0
OMR::X86;RegisterDependencyConditions;RegisterDependencyConditions(class TR_X86RegisterDependencyIndex,class TR_X86RegisterDependencyIndex,class TR_Memory *);TR;RegisterDependencyConditions;0
OMR::X86;RegisterDependencyConditions;RegisterDependencyConditions(TR::Node *,TR::CodeGenerator *,class TR_X86RegisterDependencyIndex,List<TR::Register> *);TR;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;jitPersistentAlloc(size_t);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;jitPersistentFree(void *);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete(void *,size_t);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete(void *,TR::Region &);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete[](void *,TR::Region &);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new(size_t,TR_ArenaAllocator *);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_PersistentMemory *);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new(size_t,TR::Internal::PersistentNewType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new(size_t,TR::Region &);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new[](size_t,TR::Internal::PersistentNewType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_PersistentMemory *);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new[](size_t,TR::Region &);OMR::X86;RegisterDependencyConditions;0
OMR;RegisterDependencyConditions;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;RegisterDependencyConditions;0
OMR;UnresolvedDataSnippet;UnresolvedDataSnippet(TR::CodeGenerator *,TR::Node *,TR::SymbolReference *,_Bool,_Bool);TR;UnresolvedDataSnippet;0
OMR;Snippet;emitSnippetBody();OMR;UnresolvedDataSnippet;0
OMR;Snippet;getLength(int32_t);OMR;UnresolvedDataSnippet;0
OMR;Snippet;self();OMR;UnresolvedDataSnippet;0
OMR;UnresolvedDataSnippet;~UnresolvedDataSnippet();TR;UnresolvedDataSnippet;1
OMR::X86;MemoryReference;MemoryReference(TR::Node *,TR::CodeGenerator *,_Bool);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::IA32DataSnippet *,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::Register *,TR::Register *,uint8_t,intptrj_t,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::Register *,intptrj_t,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::SymbolReference *,intptrj_t,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(intptrj_t,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::Register *,TR::Register *,uint8_t,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::Register *,TR::SymbolReference *,TR::Register *,uint8_t,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::SymbolReference *,TR::CodeGenerator *);TR;MemoryReference;0
OMR::X86;MemoryReference;MemoryReference(TR::LabelSymbol *,TR::CodeGenerator *);TR;MemoryReference;0
OMR;MemoryReference;jitPersistentAlloc(size_t);OMR::X86;MemoryReference;0
OMR;MemoryReference;jitPersistentFree(void *);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete(void *,size_t);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete(void *,TR::Region &);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete[](void *,TR::Region &);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new(size_t,TR_ArenaAllocator *);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new(size_t,TR::Internal::PersistentNewType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new(size_t,class TR_PersistentMemory *);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new(size_t,TR::Region &);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new[](size_t,TR::Region &);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new[](size_t,TR::Internal::PersistentNewType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR::X86;MemoryReference;0
OMR;MemoryReference;operator new[](size_t,class TR_PersistentMemory *);OMR::X86;MemoryReference;0
OMR;MemoryReference;~MemoryReference();OMR::X86;MemoryReference;1
OMR::X86;MemoryReference;~MemoryReference();TR;MemoryReference;1
OMR;Snippet;emitSnippetBody();TR;IA32DataSnippet;0
OMR::X86;Snippet;getKind();TR;IA32DataSnippet;0
TR;IA32DataSnippet;getKind();TR;IA32ConstantDataSnippet;0
OMR;Snippet;getLength(int32_t);TR;IA32DataSnippet;0
TR;AMD64Imm64Instruction;addMetaDataForCodeAddress(uint8_t *);TR;AMD64Imm64SymInstruction;0
OMR::X86;Instruction;description();TR;AMD64Imm64Instruction;0
TR;AMD64Imm64Instruction;description();TR;AMD64Imm64SymInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;AMD64Imm64Instruction;0
TR;AMD64Imm64Instruction;estimateBinaryLength(int32_t);TR;AMD64Imm64SymInstruction;0
OMR::X86;Instruction;generateOperand(uint8_t *);TR;AMD64Imm64Instruction;0
TR;AMD64Imm64Instruction;generateOperand(uint8_t *);TR;AMD64Imm64SymInstruction;0
OMR;Instruction;getBinaryLengthLowerBound();TR;AMD64Imm64Instruction;0
OMR::X86;Instruction;getKind();TR;AMD64Imm64Instruction;0
TR;AMD64Imm64Instruction;getKind();TR;AMD64Imm64SymInstruction;0
TR;AMD64RegImm64Instruction;addMetaDataForCodeAddress(uint8_t *);TR;AMD64RegImm64SymInstruction;0
OMR::X86;Instruction;assignRegisters(enum TR_RegisterKinds);TR;X86RegInstruction;0
OMR::X86;Instruction;defsRegister(TR::Register *);TR;X86RegInstruction;0
OMR::X86;Instruction;description();TR;X86RegInstruction;0
TR;X86RegInstruction;description();TR;AMD64RegImm64Instruction;0
TR;AMD64RegImm64Instruction;description();TR;AMD64RegImm64SymInstruction;0
OMR::X86;Instruction;enlarge(int32_t,int32_t,_Bool);TR;X86RegInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86RegInstruction;0
TR;X86RegInstruction;estimateBinaryLength(int32_t);TR;AMD64RegImm64Instruction;0
OMR::X86;Instruction;generateOperand(uint8_t *);TR;X86RegInstruction;0
TR;X86RegInstruction;generateOperand(uint8_t *);TR;AMD64RegImm64Instruction;0
TR;AMD64RegImm64Instruction;generateOperand(uint8_t *);TR;AMD64RegImm64SymInstruction;0
OMR;Instruction;getBinaryLengthLowerBound();TR;X86RegInstruction;0
TR;X86RegInstruction;getBinaryLengthLowerBound();TR;AMD64RegImm64Instruction;0
OMR::X86;Instruction;getIA32RegInstruction();TR;X86RegInstruction;0
OMR::X86;Instruction;getKind();TR;X86RegInstruction;0
TR;X86RegInstruction;getKind();TR;AMD64RegImm64Instruction;0
TR;AMD64RegImm64Instruction;getKind();TR;AMD64RegImm64SymInstruction;0
OMR::X86;Instruction;getNumOperandReferencedGPRegisters();TR;X86RegInstruction;0
OMR::X86;Instruction;getTargetRegister();TR;X86RegInstruction;0
OMR::X86;Instruction;refsRegister(TR::Register *);TR;X86RegInstruction;0
OMR::X86;Instruction;usesRegister(TR::Register *);TR;X86RegInstruction;0
OMR::X86;Instruction;description();TR;X86AlignmentInstruction;0
OMR::X86;Instruction;enlarge(int32_t,int32_t,_Bool);TR;X86AlignmentInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86AlignmentInstruction;0
OMR::X86;Instruction;generateBinaryEncoding();TR;X86AlignmentInstruction;0
OMR::X86;Instruction;getKind();TR;X86AlignmentInstruction;0
OMR::X86;Instruction;assignRegisters(enum TR_RegisterKinds);TR;X86BoundaryAvoidanceInstruction;0
TR;X86BoundaryAvoidanceInstruction;betterPadLength(int32_t,const struct TR_AtomicRegion *,int32_t);TR;X86PatchableCodeAlignmentInstruction;0
OMR::X86;Instruction;description();TR;X86BoundaryAvoidanceInstruction;0
TR;X86BoundaryAvoidanceInstruction;description();TR;X86PatchableCodeAlignmentInstruction;0
OMR::X86;Instruction;enlarge(int32_t,int32_t,_Bool);TR;X86BoundaryAvoidanceInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86BoundaryAvoidanceInstruction;0
OMR::X86;Instruction;generateBinaryEncoding();TR;X86BoundaryAvoidanceInstruction;0
OMR::X86;Instruction;getKind();TR;X86BoundaryAvoidanceInstruction;0
TR;X86BoundaryAvoidanceInstruction;getKind();TR;X86PatchableCodeAlignmentInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86CallMemInstruction;0
OMR::X86;Instruction;assignRegisters(enum TR_RegisterKinds);TR;X86MemInstruction;0
TR;X86MemInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86CallMemInstruction;0
OMR::X86;Instruction;defsRegister(TR::Register *);TR;X86MemInstruction;0
OMR::X86;Instruction;description();TR;X86MemInstruction;0
TR;X86MemInstruction;description();TR;X86CallMemInstruction;0
OMR::X86;Instruction;enlarge(int32_t,int32_t,_Bool);TR;X86MemInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86MemInstruction;0
OMR::X86;Instruction;generateOperand(uint8_t *);TR;X86MemInstruction;0
OMR;Instruction;getBinaryLengthLowerBound();TR;X86MemInstruction;0
OMR::X86;Instruction;getKind();TR;X86MemInstruction;0
TR;X86MemInstruction;getKind();TR;X86CallMemInstruction;0
OMR::X86;Instruction;getMemoryReference();TR;X86MemInstruction;0
OMR::X86;Instruction;getNumOperandReferencedGPRegisters();TR;X86MemInstruction;0
OMR;Instruction;getSnippetForGC();TR;X86MemInstruction;0
OMR::X86;Instruction;needsLockPrefix();TR;X86MemInstruction;0
OMR::X86;Instruction;refsRegister(TR::Register *);TR;X86MemInstruction;0
OMR::X86;Instruction;usesRegister(TR::Register *);TR;X86MemInstruction;0
TR;X86RegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86RegRegInstruction;0
TR;X86RegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPRegRegInstruction;0
TR;X86FPRegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPArithmeticRegRegInstruction;0
TR;X86RegInstruction;defsRegister(TR::Register *);TR;X86RegRegInstruction;0
TR;X86RegInstruction;description();TR;X86RegRegInstruction;0
TR;X86RegRegInstruction;description();TR;X86FPRegRegInstruction;0
TR;X86FPRegRegInstruction;description();TR;X86FPArithmeticRegRegInstruction;0
TR;X86RegInstruction;generateOperand(uint8_t *);TR;X86RegRegInstruction;0
TR;X86RegRegInstruction;generateOperand(uint8_t *);TR;X86FPRegRegInstruction;0
TR;X86FPRegRegInstruction;generateOperand(uint8_t *);TR;X86FPArithmeticRegRegInstruction;0
TR;X86RegInstruction;getIA32RegRegInstruction();TR;X86RegRegInstruction;0
TR;X86RegInstruction;getKind();TR;X86RegRegInstruction;0
TR;X86RegRegInstruction;getKind();TR;X86FPRegRegInstruction;0
TR;X86FPRegRegInstruction;getKind();TR;X86FPArithmeticRegRegInstruction;0
OMR::X86;Instruction;getNumOperandReferencedFPRegisters();TR;X86FPRegRegInstruction;0
TR;X86RegInstruction;getNumOperandReferencedGPRegisters();TR;X86RegRegInstruction;0
TR;X86RegRegInstruction;getNumOperandReferencedGPRegisters();TR;X86FPRegRegInstruction;0
OMR::X86;Instruction;getSourceRegister();TR;X86RegRegInstruction;0
TR;X86RegInstruction;refsRegister(TR::Register *);TR;X86RegRegInstruction;0
TR;X86RegInstruction;usesRegister(TR::Register *);TR;X86RegRegInstruction;0
OMR::X86;Instruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPCompareEvalInstruction;0
OMR::X86;Instruction;description();TR;X86FPCompareEvalInstruction;0
OMR::X86;Instruction;getKind();TR;X86FPCompareEvalInstruction;0
TR;X86FPRegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPCompareRegRegInstruction;0
TR;X86FPRegRegInstruction;description();TR;X86FPCompareRegRegInstruction;0
TR;X86FPRegRegInstruction;generateOperand(uint8_t *);TR;X86FPCompareRegRegInstruction;0
TR;X86FPRegRegInstruction;getKind();TR;X86FPCompareRegRegInstruction;0
TR;X86MemInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86MemRegInstruction;0
TR;X86MemRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPMemRegInstruction;0
TR;X86MemInstruction;defsRegister(TR::Register *);TR;X86MemRegInstruction;0
TR;X86MemInstruction;description();TR;X86MemRegInstruction;0
TR;X86MemRegInstruction;description();TR;X86FPMemRegInstruction;0
TR;X86MemInstruction;generateOperand(uint8_t *);TR;X86MemRegInstruction;0
TR;X86MemRegInstruction;generateOperand(uint8_t *);TR;X86FPMemRegInstruction;0
TR;X86MemInstruction;getKind();TR;X86MemRegInstruction;0
TR;X86MemRegInstruction;getKind();TR;X86FPMemRegInstruction;0
OMR::X86;Instruction;getNumOperandReferencedFPRegisters();TR;X86FPMemRegInstruction;0
TR;X86MemInstruction;getNumOperandReferencedGPRegisters();TR;X86MemRegInstruction;0
TR;X86MemRegInstruction;getNumOperandReferencedGPRegisters();TR;X86FPMemRegInstruction;0
OMR::X86;Instruction;getSourceRegister();TR;X86MemRegInstruction;0
TR;X86MemInstruction;refsRegister(TR::Register *);TR;X86MemRegInstruction;0
TR;X86MemInstruction;usesRegister(TR::Register *);TR;X86MemRegInstruction;0
TR;X86RegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPRegInstruction;0
TR;X86RegInstruction;generateOperand(uint8_t *);TR;X86FPRegInstruction;0
TR;X86RegInstruction;getKind();TR;X86FPRegInstruction;0
OMR::X86;Instruction;getNumOperandReferencedFPRegisters();TR;X86FPRegInstruction;0
TR;X86RegInstruction;getNumOperandReferencedGPRegisters();TR;X86FPRegInstruction;0
TR;X86RegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86RegMemInstruction;0
TR;X86RegMemInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPRegMemInstruction;0
TR;X86RegInstruction;description();TR;X86RegMemInstruction;0
TR;X86RegMemInstruction;description();TR;X86FPRegMemInstruction;0
TR;X86RegInstruction;enlarge(int32_t,int32_t,_Bool);TR;X86RegMemInstruction;0
TR;X86RegInstruction;estimateBinaryLength(int32_t);TR;X86RegMemInstruction;0
TR;X86RegInstruction;generateOperand(uint8_t *);TR;X86RegMemInstruction;0
TR;X86RegMemInstruction;generateOperand(uint8_t *);TR;X86FPRegMemInstruction;0
TR;X86RegInstruction;getBinaryLengthLowerBound();TR;X86RegMemInstruction;0
TR;X86RegMemInstruction;getBinaryLengthLowerBound();TR;X86FPRegMemInstruction;0
TR;X86RegInstruction;getIA32RegMemInstruction();TR;X86RegMemInstruction;0
TR;X86RegInstruction;getKind();TR;X86RegMemInstruction;0
TR;X86RegMemInstruction;getKind();TR;X86FPRegMemInstruction;0
OMR::X86;Instruction;getMemoryReference();TR;X86RegMemInstruction;0
OMR::X86;Instruction;getNumOperandReferencedFPRegisters();TR;X86FPRegMemInstruction;0
TR;X86RegInstruction;getNumOperandReferencedGPRegisters();TR;X86RegMemInstruction;0
TR;X86RegMemInstruction;getNumOperandReferencedGPRegisters();TR;X86FPRegMemInstruction;0
OMR;Instruction;getSnippetForGC();TR;X86RegMemInstruction;0
OMR::X86;Instruction;needsLockPrefix();TR;X86RegMemInstruction;0
TR;X86RegInstruction;refsRegister(TR::Register *);TR;X86RegMemInstruction;0
TR;X86RegInstruction;usesRegister(TR::Register *);TR;X86RegMemInstruction;0
TR;X86FPRegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPST0ST1RegRegInstruction;0
TR;X86FPST0ST1RegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPRemainderRegRegInstruction;0
TR;X86FPRegRegInstruction;description();TR;X86FPST0ST1RegRegInstruction;0
TR;X86FPST0ST1RegRegInstruction;description();TR;X86FPRemainderRegRegInstruction;0
TR;X86FPRegRegInstruction;generateOperand(uint8_t *);TR;X86FPST0ST1RegRegInstruction;0
TR;X86FPRegRegInstruction;getKind();TR;X86FPST0ST1RegRegInstruction;0
TR;X86FPST0ST1RegRegInstruction;getKind();TR;X86FPRemainderRegRegInstruction;0
TR;X86FPRegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPST0STiRegRegInstruction;0
TR;X86FPRegRegInstruction;description();TR;X86FPST0STiRegRegInstruction;0
TR;X86FPRegRegInstruction;generateOperand(uint8_t *);TR;X86FPST0STiRegRegInstruction;0
TR;X86FPRegRegInstruction;getKind();TR;X86FPST0STiRegRegInstruction;0
TR;X86FPRegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86FPSTiST0RegRegInstruction;0
TR;X86FPRegRegInstruction;description();TR;X86FPSTiST0RegRegInstruction;0
TR;X86FPRegRegInstruction;generateOperand(uint8_t *);TR;X86FPSTiST0RegRegInstruction;0
TR;X86FPRegRegInstruction;getKind();TR;X86FPSTiST0RegRegInstruction;0
OMR::X86;Instruction;description();TR;X86FenceInstruction;0
OMR::X86;Instruction;generateBinaryEncoding();TR;X86FenceInstruction;0
OMR::X86;Instruction;getKind();TR;X86FenceInstruction;0
TR;X86ImmInstruction;addMetaDataForCodeAddress(uint8_t *);TR;X86ImmSnippetInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86ImmInstruction;0
OMR::X86;Instruction;description();TR;X86ImmInstruction;0
TR;X86ImmInstruction;description();TR;X86ImmSnippetInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86ImmInstruction;0
OMR::X86;Instruction;generateOperand(uint8_t *);TR;X86ImmInstruction;0
TR;X86ImmInstruction;generateOperand(uint8_t *);TR;X86ImmSnippetInstruction;0
OMR;Instruction;getBinaryLengthLowerBound();TR;X86ImmInstruction;0
OMR::X86;Instruction;getIA32ImmInstruction();TR;X86ImmInstruction;0
OMR::X86;Instruction;getKind();TR;X86ImmInstruction;0
TR;X86ImmInstruction;getKind();TR;X86ImmSnippetInstruction;0
OMR;Instruction;getSnippetForGC();TR;X86ImmSnippetInstruction;0
TR;X86ImmInstruction;addMetaDataForCodeAddress(uint8_t *);TR;X86ImmSymInstruction;0
TR;X86ImmInstruction;description();TR;X86ImmSymInstruction;0
TR;X86ImmInstruction;estimateBinaryLength(int32_t);TR;X86ImmSymInstruction;0
TR;X86ImmInstruction;generateOperand(uint8_t *);TR;X86ImmSymInstruction;0
TR;X86ImmInstruction;getKind();TR;X86ImmSymInstruction;0
OMR::X86;Instruction;assignRegisters(enum TR_RegisterKinds);TR;X86LabelInstruction;0
OMR::X86;Instruction;description();TR;X86LabelInstruction;0
OMR::X86;Instruction;enlarge(int32_t,int32_t,_Bool);TR;X86LabelInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86LabelInstruction;0
OMR::X86;Instruction;generateBinaryEncoding();TR;X86LabelInstruction;0
OMR;Instruction;getBinaryLengthLowerBound();TR;X86LabelInstruction;0
OMR::X86;Instruction;getIA32LabelInstruction();TR;X86LabelInstruction;0
OMR::X86;Instruction;getKind();TR;X86LabelInstruction;0
OMR;Instruction;getLabelSymbol();TR;X86LabelInstruction;0
OMR;Instruction;getSnippetForGC();TR;X86LabelInstruction;0
OMR::X86;Instruction;isPatchBarrier();TR;X86LabelInstruction;0
TR;X86MemImmInstruction;addMetaDataForCodeAddress(uint8_t *);TR;X86MemImmSymInstruction;0
TR;X86MemInstruction;description();TR;X86MemImmInstruction;0
TR;X86MemImmInstruction;description();TR;X86MemImmSymInstruction;0
TR;X86MemInstruction;estimateBinaryLength(int32_t);TR;X86MemImmInstruction;0
TR;X86MemInstruction;generateOperand(uint8_t *);TR;X86MemImmInstruction;0
TR;X86MemImmInstruction;generateOperand(uint8_t *);TR;X86MemImmSymInstruction;0
TR;X86MemInstruction;getBinaryLengthLowerBound();TR;X86MemImmInstruction;0
TR;X86MemInstruction;getKind();TR;X86MemImmInstruction;0
TR;X86MemImmInstruction;getKind();TR;X86MemImmSymInstruction;0
TR;X86MemRegInstruction;description();TR;X86MemRegImmInstruction;0
TR;X86MemInstruction;estimateBinaryLength(int32_t);TR;X86MemRegImmInstruction;0
TR;X86MemRegInstruction;generateOperand(uint8_t *);TR;X86MemRegImmInstruction;0
TR;X86MemInstruction;getBinaryLengthLowerBound();TR;X86MemRegImmInstruction;0
TR;X86MemRegInstruction;getKind();TR;X86MemRegImmInstruction;0
TR;X86MemRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86MemRegRegInstruction;0
TR;X86MemRegInstruction;description();TR;X86MemRegRegInstruction;0
TR;X86MemRegInstruction;getKind();TR;X86MemRegRegInstruction;0
TR;X86MemRegInstruction;getNumOperandReferencedGPRegisters();TR;X86MemRegRegInstruction;0
OMR::X86;Instruction;getSourceRightRegister();TR;X86MemRegRegInstruction;0
TR;X86MemRegInstruction;refsRegister(TR::Register *);TR;X86MemRegRegInstruction;0
TR;X86MemRegInstruction;usesRegister(TR::Register *);TR;X86MemRegRegInstruction;0
TR;X86MemInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86MemTableInstruction;0
TR;X86MemInstruction;description();TR;X86MemTableInstruction;0
TR;X86MemInstruction;getKind();TR;X86MemTableInstruction;0
OMR::X86;Instruction;description();TR;X86PaddingInstruction;0
TR;X86PaddingInstruction;description();TR;X86PaddingSnippetInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86PaddingInstruction;0
OMR::X86;Instruction;generateBinaryEncoding();TR;X86PaddingInstruction;0
OMR::X86;Instruction;getKind();TR;X86PaddingInstruction;0
OMR;Instruction;getSnippetForGC();TR;X86PaddingSnippetInstruction;0
TR;X86RegImmInstruction;addMetaDataForCodeAddress(uint8_t *);TR;X86RegImmSymInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86RegImmInstruction;0
TR;X86RegInstruction;description();TR;X86RegImmInstruction;0
TR;X86RegImmInstruction;description();TR;X86RegImmSymInstruction;0
TR;X86RegInstruction;estimateBinaryLength(int32_t);TR;X86RegImmInstruction;0
TR;X86RegInstruction;generateOperand(uint8_t *);TR;X86RegImmInstruction;0
TR;X86RegImmInstruction;generateOperand(uint8_t *);TR;X86RegImmSymInstruction;0
TR;X86RegInstruction;getBinaryLengthLowerBound();TR;X86RegImmInstruction;0
TR;X86RegInstruction;getKind();TR;X86RegImmInstruction;0
TR;X86RegImmInstruction;getKind();TR;X86RegImmSymInstruction;0
TR;X86RegMemInstruction;description();TR;X86RegMemImmInstruction;0
TR;X86RegMemInstruction;estimateBinaryLength(int32_t);TR;X86RegMemImmInstruction;0
TR;X86RegMemInstruction;generateOperand(uint8_t *);TR;X86RegMemImmInstruction;0
TR;X86RegMemInstruction;getBinaryLengthLowerBound();TR;X86RegMemImmInstruction;0
TR;X86RegMemInstruction;getKind();TR;X86RegMemImmInstruction;0
TR;X86RegRegInstruction;description();TR;X86RegRegImmInstruction;0
TR;X86RegInstruction;estimateBinaryLength(int32_t);TR;X86RegRegImmInstruction;0
TR;X86RegRegInstruction;generateOperand(uint8_t *);TR;X86RegRegImmInstruction;0
TR;X86RegInstruction;getBinaryLengthLowerBound();TR;X86RegRegImmInstruction;0
TR;X86RegRegInstruction;getKind();TR;X86RegRegImmInstruction;0
TR;X86RegRegInstruction;getNumOperandReferencedGPRegisters();TR;X86RegRegImmInstruction;0
TR;X86RegRegInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86RegRegRegInstruction;0
TR;X86RegRegInstruction;defsRegister(TR::Register *);TR;X86RegRegRegInstruction;0
TR;X86RegRegInstruction;description();TR;X86RegRegRegInstruction;0
TR;X86RegRegInstruction;getKind();TR;X86RegRegRegInstruction;0
TR;X86RegRegInstruction;getNumOperandReferencedGPRegisters();TR;X86RegRegRegInstruction;0
OMR::X86;Instruction;getSourceRightRegister();TR;X86RegRegRegInstruction;0
TR;X86RegRegInstruction;refsRegister(TR::Register *);TR;X86RegRegRegInstruction;0
TR;X86RegRegInstruction;usesRegister(TR::Register *);TR;X86RegRegRegInstruction;0
OMR::X86;Instruction;description();TR;X86RestoreVMThreadInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86RestoreVMThreadInstruction;0
OMR::X86;Instruction;generateBinaryEncoding();TR;X86RestoreVMThreadInstruction;0
OMR;Instruction;getBinaryLengthLowerBound();TR;X86RestoreVMThreadInstruction;0
OMR::X86;Instruction;getKind();TR;X86RestoreVMThreadInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86VFPCallCleanupInstruction;0
OMR::X86;Instruction;assignRegisters(enum TR_RegisterKinds);TR;X86VFPCallCleanupInstruction;0
OMR::X86;Instruction;description();TR;X86VFPCallCleanupInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86VFPCallCleanupInstruction;0
OMR::X86;Instruction;getKind();TR;X86VFPCallCleanupInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86VFPDedicateInstruction;0
TR;X86RegMemInstruction;assignRegisters(enum TR_RegisterKinds);TR;X86VFPDedicateInstruction;0
TR;X86RegMemInstruction;description();TR;X86VFPDedicateInstruction;0
TR;X86RegMemInstruction;getKind();TR;X86VFPDedicateInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86VFPReleaseInstruction;0
OMR::X86;Instruction;assignRegisters(enum TR_RegisterKinds);TR;X86VFPReleaseInstruction;0
OMR::X86;Instruction;description();TR;X86VFPReleaseInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86VFPReleaseInstruction;0
OMR::X86;Instruction;getKind();TR;X86VFPReleaseInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86VFPRestoreInstruction;0
OMR::X86;Instruction;description();TR;X86VFPRestoreInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86VFPRestoreInstruction;0
OMR::X86;Instruction;getKind();TR;X86VFPRestoreInstruction;0
OMR::X86;Instruction;adjustVFPState(struct TR_VFPState *,TR::CodeGenerator *);TR;X86VFPSaveInstruction;0
OMR::X86;Instruction;description();TR;X86VFPSaveInstruction;0
OMR::X86;Instruction;estimateBinaryLength(int32_t);TR;X86VFPSaveInstruction;0
OMR::X86;Instruction;getKind();TR;X86VFPSaveInstruction;0
OMR;Snippet;emitSnippetBody();TR;X86DivideCheckSnippet;0
OMR::X86;Snippet;getKind();TR;X86RestartSnippet;0
TR;X86RestartSnippet;getKind();TR;X86DivideCheckSnippet;0
OMR;Snippet;getLength(int32_t);TR;X86DivideCheckSnippet;0
OMR;RegisterDependencyConditions;~RegisterDependencyConditions();OMR::X86;RegisterDependencyConditions;1
TR;X86FPCompareAnalyser;fpCompareAnalyser(TR::Node *,enum TR_X86OpCodes,enum TR_X86OpCodes,enum TR_X86OpCodes,_Bool);TR;IA32XMMCompareAnalyser;0
OMR;Snippet;emitSnippetBody();TR;X86FPConversionSnippet;0
TR;X86FPConversionSnippet;genFPConversion(uint8_t *);TR;X86FPConvertToIntSnippet;0
TR;X86RestartSnippet;getKind();TR;X86FPConversionSnippet;0
TR;X86FPConversionSnippet;getKind();TR;X86FPConvertToIntSnippet;0
OMR;Snippet;getLength(int32_t);TR;X86FPConvertToIntSnippet;0
TR;X86FPConversionSnippet;genFPConversion(uint8_t *);TR;X86FPConvertToLongSnippet;0
TR;X86FPConversionSnippet;getKind();TR;X86FPConvertToLongSnippet;0
OMR;Snippet;getLength(int32_t);TR;X86FPConvertToLongSnippet;0
OMR;Snippet;emitSnippetBody();TR;X86HelperCallSnippet;0
TR;X86HelperCallSnippet;genHelperCall(uint8_t *);TR;X86CheckAsyncMessagesSnippet;0
TR;X86RestartSnippet;getKind();TR;X86HelperCallSnippet;0
OMR;Snippet;getLength(int32_t);TR;X86HelperCallSnippet;0
OMR::X86;Linkage;buildDirectDispatch(TR::Node *,_Bool);TR;X86SystemLinkage;0
OMR::X86;Linkage;buildIndirectDispatch(TR::Node *);TR;X86SystemLinkage;0
OMR::X86;Linkage;copyGlRegDepsToParameterSymbols(TR::Node *,TR::CodeGenerator *);TR;X86SystemLinkage;0
OMR::X86;Linkage;copyLinkageInfoToParameterSymbols();TR;X86SystemLinkage;0
OMR::X86;Linkage;createEpilogue(TR::Instruction *);TR;X86SystemLinkage;0
OMR::X86;Linkage;createPrologue(TR::Instruction *);TR;X86SystemLinkage;0
OMR::X86;Linkage;getProperties();TR;X86SystemLinkage;0
OMR::X86;Linkage;mapIncomingParms(TR::ResolvedMethodSymbol *);TR;X86SystemLinkage;0
TR;X86SystemLinkage;buildArgs(TR::Node *,TR::RegisterDependencyConditions *);TR;IA32SystemLinkage;0
TR;X86SystemLinkage;buildDirectDispatch(TR::Node *,_Bool);TR;IA32SystemLinkage;0
TR;X86SystemLinkage;buildIndirectDispatch(TR::Node *);TR;IA32SystemLinkage;0
TR;X86SystemLinkage;buildVolatileAndReturnDependencies(TR::Node *,TR::RegisterDependencyConditions *);TR;IA32SystemLinkage;0
TR;X86SystemLinkage;getAlignment(TR::DataType);TR;IA32SystemLinkage;0
TR;X86SystemLinkage;getSingleWordFrameAllocationRegister();TR;IA32SystemLinkage;0
TR;X86SystemLinkage;layoutParm(TR::Node *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &);TR;IA32SystemLinkage;0
TR;X86SystemLinkage;layoutParm(TR::ParameterSymbol *,int32_t &,uint16_t &,uint16_t &,TR::parmLayoutResult &);TR;IA32SystemLinkage;0
TR;X86SystemLinkage;setUpStackSizeForCallNode(TR::Node *);TR;IA32SystemLinkage;0
OMR::X86;RegisterIterator;~RegisterIterator();TR;RegisterIterator;1
OMR;CodeCache;CodeCache();TR;CodeCache;0
OMR;CodeCacheConfig;CodeCacheConfig();TR;CodeCacheConfig;0
OMR;CodeCacheConfig;~CodeCacheConfig();TR;CodeCacheConfig;1
OMR;CodeCacheManager;CodeCacheManager(class TR_FrontEnd *);TestCompiler;CodeCacheManager;0
TestCompiler;CodeCacheManager;CodeCacheManager(class TR_FrontEnd *);TR;CodeCacheManager;0
OMR;CodeCacheManager;freeMemory(void *);TestCompiler;CodeCacheManager;0
OMR;CodeCacheManager;getMemory(size_t);TestCompiler;CodeCacheManager;0
OMR;CodeCacheManager;initialize(_Bool,uint32_t);TestCompiler;CodeCacheManager;0
OMR;CodeCacheManager;self();TestCompiler;CodeCacheManager;0
OMR;CodeCacheManager;~CodeCacheManager();TestCompiler;CodeCacheManager;1
TestCompiler;CodeCacheManager;~CodeCacheManager();TR;CodeCacheManager;1
TestCompiler;FrontEnd;FrontEnd();TR;FrontEnd;0
TR;FrontEnd;allocateCodeMemory(TR::Compilation *,uint32_t,uint32_t,uint8_t **,_Bool);TR;FEBase;0
TR;FrontEnd;allocateRelocationData(TR::Compilation *,uint32_t);TR;FEBase;0
TR;FrontEnd;createDebug(TR::Compilation *);TR;FECommon;0
TR;FrontEnd;createResolvedMethod(class TR_Memory *,class TR_OpaqueMethodBlock *,class TR_ResolvedMethod *,class TR_OpaqueClassBlock *);TestCompiler;FrontEnd;0
TR;FrontEnd;getClassFromSignature(const char *,int32_t,class TR_ResolvedMethod *,_Bool);TR;FECommon;0
TR;FrontEnd;getClassFromSignature(const char *,int32_t,class TR_OpaqueMethodBlock *,_Bool);TR;FECommon;0
TR;FrontEnd;getDesignatedCodeCache(TR::Compilation *);TR;FEBase;0
TR;FrontEnd;getOffsetOfIndexableSizeField();TR;FECommon;0
TR;FrontEnd;getPersistentInfo();TR;FEBase;0
TR;FrontEnd;indexedTrampolineLookup(int32_t,void *);TR;FEBase;0
TR;FrontEnd;methodTrampolineLookup(TR::Compilation *,TR::SymbolReference *,void *);TestCompiler;FrontEnd;0
TR;FECommon;persistentMemory();TR;FEBase;0
TR;FrontEnd;reserveTrampolineIfNecessary(TR::Compilation *,TR::SymbolReference *,_Bool);TestCompiler;FrontEnd;0
TR;FrontEnd;resizeCodeMemory(TR::Compilation *,uint8_t *,uint32_t);TR;FEBase;0
TR;FrontEnd;sampleSignature(class TR_OpaqueMethodBlock *,char *,int32_t,class TR_Memory *);TR;FECommon;0
TR;FrontEnd;unreserveCodeCache(TR::CodeCache *);TR;FEBase;0
TestCompiler;FrontEnd;~FrontEnd();TR;FrontEnd;1
OMR;IlInjector;IlInjector(TR::IlInjector *);TestCompiler;IlInjector;0
TestCompiler;IlInjector;IlInjector(TR::IlInjector *);TR;IlInjector;0
OMR;IlInjector;IlInjector(TR::TypeDictionary *);TestCompiler;IlInjector;0
TestCompiler;IlInjector;IlInjector(TR::TypeDictionary *);TR;IlInjector;0
OMR;IlInjector;block(int32_t);OMR;IlInjector;0
TR;IlGenerator;currentByteCodeIndex();OMR;IlInjector;0
TR;IlGenerator;genIL();OMR;IlInjector;0
TR;IlGenerator;getCurrentBlock();OMR;IlInjector;0
OMR;IlInjector;initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TestCompiler;IlInjector;0
OMR;IlInjector;injectIL();TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;injectIL();TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;jitPersistentAlloc(size_t);TestCompiler;IlInjector;0
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;jitPersistentFree(void *);TestCompiler;IlInjector;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;BinaryOpIlInjector;0
TR;IlGenerator;methodSymbol();OMR;IlInjector;0
OMR;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete(void *,size_t);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete(void *,TR::Region &);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new(size_t,TR::Region &);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;OpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;BinaryOpIlInjector;0
OMR;IlInjector;~IlInjector();TestCompiler;IlInjector;0
TestCompiler;IlInjector;~IlInjector();TR;IlInjector;0
TestCompiler;OpIlInjector;injectIL();TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;UnaryOpIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;ChildlessUnaryOpIlInjector;0
TestCompiler;OpIlInjector;injectIL();TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;CmpBranchOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;CmpBranchOpIlInjector;0
OMR;IlBuilder;IlBuilder(TR::MethodBuilder *,TR::TypeDictionary *);TestCompiler;IlBuilder;0
OMR;IlBuilder;IlBuilder(TR::IlBuilder *);TestCompiler;IlBuilder;0
TestCompiler;IlBuilder;IlBuilder(TR::IlBuilder *);TR;IlBuilder;0
OMR;IlInjector;asMethodBuilder();OMR;IlBuilder;0
OMR;IlInjector;injectIL();OMR;IlBuilder;0
OMR;IlInjector;isMethodBuilder();OMR;IlBuilder;0
TestCompiler;IlInjector;jitPersistentAlloc(size_t);OMR;IlBuilder;0
OMR;IlBuilder;jitPersistentAlloc(size_t);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;jitPersistentFree(void *);OMR;IlBuilder;0
OMR;IlBuilder;jitPersistentFree(void *);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0
OMR;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete(void *,size_t);OMR;IlBuilder;0
OMR;IlBuilder;operator delete(void *,size_t);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);OMR;IlBuilder;0
OMR;IlBuilder;operator delete(void *,TR::Region &);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0
OMR;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);OMR;IlBuilder;0
OMR;IlBuilder;operator delete[](void *,TR::Region &);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);OMR;IlBuilder;0
OMR;IlBuilder;operator new(size_t,TR::Region &);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0
OMR;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);OMR;IlBuilder;0
OMR;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);OMR;IlBuilder;0
OMR;IlBuilder;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);OMR;IlBuilder;0
OMR;IlBuilder;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;IlBuilder;0
OMR;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);OMR;IlBuilder;0
OMR;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;IlBuilder;0
OMR;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);OMR;IlBuilder;0
OMR;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IlBuilder;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);OMR;IlBuilder;0
OMR;IlBuilder;operator new[](size_t,TR::Region &);TestCompiler;IlBuilder;0
OMR;IlBuilder;~IlBuilder();TestCompiler;IlBuilder;0
TestCompiler;IlBuilder;~IlBuilder();TR;IlBuilder;0
OMR;IlType;IlType(const char *);TR;IlType;0
OMR;IlType;IlType();TR;IlType;0
OMR;IlType;~IlType();TR;IlType;0
OMR;IlValue;IlValue(TR::Node *,TR::TreeTop *,TR::Block *,TR::MethodBuilder *);TR;IlValue;0
OMR;TypeDictionary;TypeDictionary();TR;TypeDictionary;0
OMR;TypeDictionary;~TypeDictionary();TR;TypeDictionary;0
TestCompiler;OpIlInjector;injectIL();TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;StoreOpIlInjector;0
TestCompiler;OpIlInjector;injectIL();TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentAlloc(size_t);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;jitPersistentFree(void *);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,size_t);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete(void *,TR::Region &);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Region &);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;TernaryOpIlInjector;0
TestCompiler;OpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;TernaryOpIlInjector;0
OMR;IlInjector;injectIL();TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;BarIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;BarIlInjector;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;FooBarTest;0
TestCompiler;TestDriver;invokeTests();TestCompiler;FooBarTest;0
testing;Test;TestBody();;JITILBuilderTest_ControlFlowTest_Test;0
testing;Test;TestBody();;JITILBuilderTest_NestedControlFlowLoopTest_Test;0
testing;Test;TestBody();;JITTest_BuilderTest_Test;0
OMR;Environment;~Environment();TR;Environment;0
OMR;IlBuilder;AppendBuilder(TR::IlBuilder *);OMR;MethodBuilder;0
TestCompiler;MethodBuilder;MethodBuilder(TR::TypeDictionary *);TR;MethodBuilder;0
OMR;IlBuilder;asMethodBuilder();OMR;MethodBuilder;0
OMR;IlBuilder;buildIL();TestCompiler;AbsDiffIfThenElseMethod;0
OMR;IlBuilder;connectTrees();OMR;MethodBuilder;0
OMR;IlBuilder;countBlocks();OMR;MethodBuilder;0
OMR;IlBuilder;defineSymbol(const char *,TR::SymbolReference *);OMR;MethodBuilder;0
OMR;IlBuilder;injectIL();OMR;MethodBuilder;0
OMR;IlBuilder;isMethodBuilder();OMR;MethodBuilder;0
TestCompiler;IlBuilder;jitPersistentAlloc(size_t);OMR;MethodBuilder;0
OMR;MethodBuilder;jitPersistentAlloc(size_t);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;jitPersistentFree(void *);OMR;MethodBuilder;0
OMR;MethodBuilder;jitPersistentFree(void *);TestCompiler;MethodBuilder;0
OMR;IlBuilder;lookupSymbol(const char *);OMR;MethodBuilder;0
TestCompiler;IlBuilder;operator delete(void *,TR::Region &);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete(void *,TR::Region &);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete(void *,size_t);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete(void *,size_t);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,TR::Region &);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete[](void *,TR::Region &);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new(size_t,TR_ArenaAllocator *);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new(size_t,TR_ArenaAllocator *);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new(size_t,TR::Region &);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new(size_t,TR::Region &);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_PersistentMemory *);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new(size_t,class TR_PersistentMemory *);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;MethodBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Region &);OMR;MethodBuilder;0
OMR;MethodBuilder;operator new[](size_t,TR::Region &);TestCompiler;MethodBuilder;0
OMR;IlBuilder;setupForBuildIL();OMR;MethodBuilder;0
OMR;IlInjector;typeDictionary();OMR;MethodBuilder;0
OMR;MethodBuilder;~MethodBuilder();TestCompiler;MethodBuilder;0
TestCompiler;MethodBuilder;~MethodBuilder();TR;MethodBuilder;0
OMR;IlBuilder;buildIL();TestCompiler;BasicForLoopDownMethod;0
OMR;IlBuilder;buildIL();TestCompiler;BasicForLoopUpMethod;0
TestCompiler;BinaryOpIlInjector;injectIL();TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;jitPersistentFree(void *);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete(void *,size_t);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;BinaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;IndirectStoreIlInjector;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;BuilderTest;0
TestCompiler;TestDriver;invokeTests();TestCompiler;BuilderTest;0
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;CallIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;CallIlInjector;0
OMR;IlBuilder;buildIL();TestCompiler;DoWhileFibonnaciMethod;0
OMR;IlBuilder;buildIL();TestCompiler;DoWhileIfThenElseMethod;0
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithBreakAndContinueMethod;0
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithBreakMethod;0
OMR;IlBuilder;buildIL();TestCompiler;DoWhileWithContinueMethod;0
OMR;IlBuilder;buildIL();TestCompiler;ForLoopBreakAndContinueMethod;0
OMR;IlBuilder;buildIL();TestCompiler;ForLoopBreakMethod;0
OMR;IlBuilder;buildIL();TestCompiler;ForLoopContinueMethod;0
OMR;IlBuilder;buildIL();TestCompiler;ForLoopUPIfThenElseMethod;0
OMR;IlBuilder;buildIL();TestCompiler;IfThenElseLoopMethod;0
TestCompiler;UnaryOpIlInjector;injectIL();TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;jitPersistentAlloc(size_t);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;jitPersistentFree(void *);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,TR::Region &);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete(void *,size_t);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,TR::Region &);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,TR::Region &);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;IndirectLoadIlInjector;0
TestCompiler;UnaryOpIlInjector;operator new[](size_t,TR::Region &);TestCompiler;IndirectLoadIlInjector;0
OMR;IlBuilder;buildIL();TestCompiler;IterativeFibonnaciMethod;0
OMR;IlBuilder;buildIL();TestCompiler;MaxIfThenMethod;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;OpCodesTest;0
TestCompiler;TestDriver;invokeTests();TestCompiler;OpCodesTest;0
OMR;IlBuilder;buildIL();TestCompiler;RecursiveFibonnaciMethod;0
OMR;IlBuilder;buildIL();TestCompiler;ShootoutNestedLoopMethod;0
OMR;IlBuilder;buildIL();TestCompiler;SubIfFalseThenMethod;0
OMR;IlBuilder;buildIL();TestCompiler;WhileDoFibonnaciMethod;0
OMR;IlBuilder;buildIL();TestCompiler;WhileDoIfThenElseMethod;0
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithBreakAndContinueMethod;0
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithBreakMethod;0
OMR;IlBuilder;buildIL();TestCompiler;WhileDoWithContinueMethod;0
testing;TestEventListener;OnEnvironmentsSetUpEnd(const class testing::UnitTest &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnEnvironmentsSetUpStart(const class testing::UnitTest &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnEnvironmentsTearDownEnd(const class testing::UnitTest &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnEnvironmentsTearDownStart(const class testing::UnitTest &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestCaseEnd(const class testing::TestCase &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestCaseStart(const class testing::TestCase &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestEnd(const class testing::TestInfo &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestIterationEnd(const class testing::UnitTest &,int);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestIterationStart(const class testing::UnitTest &,int);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestPartResult(const class testing::TestPartResult &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestProgramEnd(const class testing::UnitTest &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestProgramStart(const class testing::UnitTest &);testing;EmptyTestEventListener;0
testing;TestEventListener;OnTestStart(const class testing::TestInfo &);testing;EmptyTestEventListener;0
testing::internal;DeathTestFactory;Create(const char *,const class testing::internal::RE *,const char *,int,class testing::internal::DeathTest **);testing::internal;DefaultDeathTestFactory;0
testing;TestPartResultReporterInterface;ReportTestPartResult(const class testing::TestPartResult &);testing::internal;HasNewFatalFailureHelper;0
testing::internal;ParameterizedTestCaseInfoBase;GetTestCaseName();testing::internal;ParameterizedTestCaseInfo;0
testing::internal;ParameterizedTestCaseInfoBase;GetTestCaseTypeId();testing::internal;ParameterizedTestCaseInfo;0
testing::internal;ParameterizedTestCaseInfoBase;RegisterTests();testing::internal;ParameterizedTestCaseInfo;0
testing::internal;TestFactoryBase;CreateTest();testing::internal;ParameterizedTestFactory;0
testing::internal;TestFactoryBase;CreateTest();testing::internal;TestFactoryImpl;0
testing::internal::ThreadLocal;ValueHolderFactory;MakeNewHolder();testing::internal::ThreadLocal;DefaultValueHolderFactory;0
testing::internal::ThreadLocal;ValueHolderFactory;MakeNewHolder();testing::internal::ThreadLocal;InstanceValueHolderFactory;0
testing::internal;ThreadWithParamBase;Run();testing::internal;ThreadWithParam;0
testing;Test;TestBody();;JITTest_FooBarTest_Test;0
OMR;IlInjector;injectIL();TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;FooIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;FooIlInjector;0
testing;Test;TestBody();TestCompiler;LimitFileTest_CheckVLogTest_Test;0
testing;Test;TestBody();TestCompiler;LimitFileTest_CreateVLogTest_Test;0
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileBoundTest_Test;0
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileRangeTest_Test;0
testing;Test;TestBody();TestCompiler;LimitFileTest_UseLimitFileTest_Test;0
testing;Environment;SetUp();TestCompiler;OMRTestEnv;0
testing;Environment;TearDown();TestCompiler;OMRTestEnv;0
testing;Test;TestBody();TestCompiler;LogFileTest_CreateTFLogTest_Test;0
testing;Test;TestBody();TestCompiler;LogFileTest_EmptyTFLogTest_Test;0
testing;Test;TestBody();TestCompiler;LogFileTest_KeywordsLogTest_Test;0
testing;Test;TestBody();TestCompiler;OptionSetTest_UseOptionSets_Test;0
testing;Test;TestBody();TestCompiler;OptionSetTest_WithDefault_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_AddressTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_BitwiseTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_CompareTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_DISABLED_OpCodesTests_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_DISABLED_UnaryTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_IntegerArithmeticTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_MemoryOperationTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_TernaryTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_UnaryTest_Test;0
testing;Test;TestBody();;JITCrossPlatformsOpCodesTest_UnsupportedOpCodesTest_Test;0
TestCompiler;OpCodesTest;UnsupportedOpCodesTests();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;PPCOpCodesTest;0
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;PPCOpCodesTest;0
testing;Test;TestBody();;JITQuxTest_QuxTest2_Test;0
OMR;IlInjector;injectIL();TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;Qux2IlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;Qux2IlInjector;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;Qux2Test;0
TestCompiler;TestDriver;invokeTests();TestCompiler;Qux2Test;0
TestCompiler;TestDriver;compileTestMethods();TestCompiler;OptTestDriver;0
TestCompiler;TestDriver;invokeTests();TestCompiler;SimplifierFoldAndTest;0
testing;Test;TestBody();TestCompiler;SimplifierFoldAndTest_SimplifierFoldAndTest_Test;0
OMR;IlInjector;injectIL();TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;jitPersistentAlloc(size_t);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;jitPersistentFree(void *);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete(void *,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete(void *,size_t);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator delete[](void *,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR::Internal::PersistentNewType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_PersistentMemory *);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new(size_t,TR_ArenaAllocator *);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,class TR_PersistentMemory *);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Internal::PersistentNewType);TestCompiler;SimplifierFoldAndIlInjector;0
TestCompiler;IlInjector;operator new[](size_t,TR::Region &);TestCompiler;SimplifierFoldAndIlInjector;0
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TestCompiler;SimplifierFoldAndIlVerifier;0
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;compileIntegerArithmeticTestMethods();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;invokeIntegerArithmeticTests();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;S390OpCodesTest;0
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;S390OpCodesTest;0
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TR;AllIlVerifier;0
TR;IlVerifier;verify(TR::ResolvedMethodSymbol *);TR;NoCodegenVerifier;0
testing;Test;TestBody();;JITX86OpCodesTest_BitwiseTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_CompareTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_DISABLED_X86ConvertOpCodesTests_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_DISABLED_X86IntegerArithmeticTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_DISABLED_X86MemoryOpCodesTests_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_DISABLED_X86UnaryTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_DirectCallTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_FloatArithmeticTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_IntegerArithmeticTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_MemoryOperationTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_TernaryTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_UnaryTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_UnsupportedOpCodesTest_Test;0
testing;Test;TestBody();;JITX86OpCodesTest_X86AddressTest_Test;0
TestCompiler;OpCodesTest;UnsupportedOpCodesTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;compileAddressTestMethods();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;compileCompareTestMethods();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;compileIntegerArithmeticTestMethods();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;compileMemoryOperationTestMethods();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;compileTernaryTestMethods();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;compileUnaryTestMethods();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeAddressTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeBitwiseTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeCompareTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeIntegerArithmeticTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeMemoryOperationTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeNoHelperUnaryTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeTernaryTests();TestCompiler;X86OpCodesTest;0
TestCompiler;OpCodesTest;invokeUnaryTests();TestCompiler;X86OpCodesTest;0
TR;CompilationStrategy;enableSwitchToProfiling();TR;DefaultCompilationStrategy;0
TR;CompilationStrategy;processEvent(class TR_MethodEvent *,_Bool *);TR;DefaultCompilationStrategy;0
TR;CompilationStrategy;shutdown();TR;DefaultCompilationStrategy;0
TR;SegmentAllocator;allocationLimit();TR;DebugSegmentProvider;0
TR;SegmentProvider;bytesAllocated();TR;DebugSegmentProvider;0
TR;SegmentAllocator;regionBytesAllocated();TR;DebugSegmentProvider;0
TR;SegmentProvider;release(TR::MemorySegment &);TR;DebugSegmentProvider;0
TR;SegmentProvider;request(size_t);TR;DebugSegmentProvider;0
TR;SegmentAllocator;setAllocationLimit(size_t);TR;DebugSegmentProvider;0
TR;SegmentAllocator;systemBytesAllocated();TR;DebugSegmentProvider;0
OMR;BytecodeBuilder;BytecodeBuilder(TR::MethodBuilder *,int32_t,char *);TR;BytecodeBuilder;0
OMR;IlBuilder;appendBlock(TR::Block *,_Bool);OMR;BytecodeBuilder;0
OMR;IlBuilder;connectTrees();OMR;BytecodeBuilder;0
OMR;IlBuilder;countBlocks();OMR;BytecodeBuilder;0
OMR;IlInjector;currentByteCodeIndex();OMR;BytecodeBuilder;0
TestCompiler;IlInjector;initialize(TR::IlGeneratorMethodDetails *,TR::ResolvedMethodSymbol *,TR::FrontEnd *,TR::SymbolReferenceTable *);TR;BytecodeBuilder;0
OMR;IlBuilder;isBytecodeBuilder();OMR;BytecodeBuilder;0
OMR;IlBuilder;setHandlerInfo(uint32_t);OMR;BytecodeBuilder;0
OMR;BytecodeBuilder;~BytecodeBuilder();TR;BytecodeBuilder;1
TestCompiler;IlBuilder;jitPersistentAlloc(size_t);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;jitPersistentFree(void *);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete(void *,TR::Region &);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete(void *,size_t);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator delete[](void *,TR::Region &);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new(size_t,TR::Region &);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new(size_t,TR::Internal::PersistentNewType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_PersistentMemory *);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new(size_t,TR_ArenaAllocator *);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,class TR_PersistentMemory *);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Internal::PersistentNewType);OMR;BytecodeBuilder;0
TestCompiler;IlBuilder;operator new[](size_t,TR::Region &);OMR;BytecodeBuilder;0
OMR;IlType;baseType();OMR;PointerType;0
OMR;IlType;getName();OMR;PointerType;0
OMR;IlType;getPrimitiveType();OMR;PointerType;0
OMR;IlType;getSize();OMR;PointerType;0
OMR;IlType;isPointer();OMR;PointerType;0
OMR;IlType;jitPersistentAlloc(size_t);OMR;PointerType;0
OMR;IlType;jitPersistentFree(void *);OMR;PointerType;0
OMR;IlType;operator delete(void *,size_t);OMR;PointerType;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;PointerType;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;PointerType;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;PointerType;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;PointerType;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;PointerType;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;PointerType;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;PointerType;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;PointerType;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;PointerType;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PointerType;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PointerType;0
OMR;IlType;getPrimitiveType();OMR;PrimitiveType;0
OMR;IlType;getSignatureName();OMR;PrimitiveType;0
OMR;IlType;getSize();OMR;PrimitiveType;0
OMR;IlType;jitPersistentAlloc(size_t);OMR;PrimitiveType;0
OMR;IlType;jitPersistentFree(void *);OMR;PrimitiveType;0
OMR;IlType;operator delete(void *,size_t);OMR;PrimitiveType;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;PrimitiveType;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;PrimitiveType;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;PrimitiveType;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;PrimitiveType;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;PrimitiveType;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;PrimitiveType;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;PrimitiveType;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;PrimitiveType;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;PrimitiveType;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;PrimitiveType;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;PrimitiveType;0
OMR;IlType;getPrimitiveType();OMR;StructType;0
OMR;IlType;getSize();OMR;StructType;0
OMR;IlType;isStruct();OMR;StructType;0
OMR;IlType;jitPersistentAlloc(size_t);OMR;StructType;0
OMR;IlType;jitPersistentFree(void *);OMR;StructType;0
OMR;IlType;operator delete(void *,size_t);OMR;StructType;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;StructType;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;StructType;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;StructType;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;StructType;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;StructType;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;StructType;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;StructType;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;StructType;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;StructType;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;StructType;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;StructType;0
OMR;IlType;getPrimitiveType();OMR;UnionType;0
OMR;IlType;getSize();OMR;UnionType;0
OMR;IlType;isUnion();OMR;UnionType;0
OMR;IlType;jitPersistentAlloc(size_t);OMR;UnionType;0
OMR;IlType;jitPersistentFree(void *);OMR;UnionType;0
OMR;IlType;operator delete(void *,size_t);OMR;UnionType;0
OMR;IlType;operator delete(void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator delete(void *,TR::Region &);OMR;UnionType;0
OMR;IlType;operator delete(void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator delete(void *,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0
OMR;IlType;operator delete[](void *,TR::Region &);OMR;UnionType;0
OMR;IlType;operator delete[](void *,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator delete[](void *,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0
OMR;IlType;operator delete[](void *,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator new(size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator new(size_t,TR_ArenaAllocator *);OMR;UnionType;0
OMR;IlType;operator new(size_t,TR::Region &);OMR;UnionType;0
OMR;IlType;operator new(size_t,class TR_PersistentMemory *);OMR;UnionType;0
OMR;IlType;operator new(size_t,TR::Internal::PersistentNewType);OMR;UnionType;0
OMR;IlType;operator new(size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator new(size_t,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0
OMR;IlType;operator new[](size_t,TR::Internal::PersistentNewType);OMR;UnionType;0
OMR;IlType;operator new[](size_t,class TR_PersistentMemory *);OMR;UnionType;0
OMR;IlType;operator new[](size_t,TR::Region &);OMR;UnionType;0
OMR;IlType;operator new[](size_t,class TR_HeapMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator new[](size_t,class TR_StackMemory,class TR_MemoryBase::ObjectType);OMR;UnionType;0
OMR;IlType;operator new[](size_t,class TR_Memory *,enum TR_AllocationKind);OMR;UnionType;0
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment();TR;CodeCacheMemorySegment;0
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,uint8_t *);TR;CodeCacheMemorySegment;0
OMR;CodeCacheMemorySegment;CodeCacheMemorySegment(uint8_t *,size_t);TR;CodeCacheMemorySegment;0
